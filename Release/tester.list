
tester.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c8c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08004e14  08004e14  00014e14  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e50  08004e50  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004e50  08004e50  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e50  08004e50  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e50  08004e50  00014e50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e54  08004e54  00014e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004e58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000480  2000000c  08004e64  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000048c  08004e64  0002048c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ad09  00000000  00000000  00020036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004caa  00000000  00000000  0004ad3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000140a1  00000000  00000000  0004f9e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001180  00000000  00000000  00063a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000016d0  00000000  00000000  00064c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004bd0  00000000  00000000  000662e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023783  00000000  00000000  0006aeb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b08aa  00000000  00000000  0008e633  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013eedd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000038ec  00000000  00000000  0013ef30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004dfc 	.word	0x08004dfc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004dfc 	.word	0x08004dfc

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2f>:
 8000794:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000798:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800079c:	bf24      	itt	cs
 800079e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007a2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007a6:	d90d      	bls.n	80007c4 <__aeabi_d2f+0x30>
 80007a8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007ac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007b0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007b4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007b8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007bc:	bf08      	it	eq
 80007be:	f020 0001 	biceq.w	r0, r0, #1
 80007c2:	4770      	bx	lr
 80007c4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007c8:	d121      	bne.n	800080e <__aeabi_d2f+0x7a>
 80007ca:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007ce:	bfbc      	itt	lt
 80007d0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007d4:	4770      	bxlt	lr
 80007d6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007da:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007de:	f1c2 0218 	rsb	r2, r2, #24
 80007e2:	f1c2 0c20 	rsb	ip, r2, #32
 80007e6:	fa10 f30c 	lsls.w	r3, r0, ip
 80007ea:	fa20 f002 	lsr.w	r0, r0, r2
 80007ee:	bf18      	it	ne
 80007f0:	f040 0001 	orrne.w	r0, r0, #1
 80007f4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007f8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007fc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000800:	ea40 000c 	orr.w	r0, r0, ip
 8000804:	fa23 f302 	lsr.w	r3, r3, r2
 8000808:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800080c:	e7cc      	b.n	80007a8 <__aeabi_d2f+0x14>
 800080e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000812:	d107      	bne.n	8000824 <__aeabi_d2f+0x90>
 8000814:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000818:	bf1e      	ittt	ne
 800081a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800081e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000822:	4770      	bxne	lr
 8000824:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000828:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800082c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop

08000834 <__aeabi_frsub>:
 8000834:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000838:	e002      	b.n	8000840 <__addsf3>
 800083a:	bf00      	nop

0800083c <__aeabi_fsub>:
 800083c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000840 <__addsf3>:
 8000840:	0042      	lsls	r2, r0, #1
 8000842:	bf1f      	itttt	ne
 8000844:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000848:	ea92 0f03 	teqne	r2, r3
 800084c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000850:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000854:	d06a      	beq.n	800092c <__addsf3+0xec>
 8000856:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800085a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800085e:	bfc1      	itttt	gt
 8000860:	18d2      	addgt	r2, r2, r3
 8000862:	4041      	eorgt	r1, r0
 8000864:	4048      	eorgt	r0, r1
 8000866:	4041      	eorgt	r1, r0
 8000868:	bfb8      	it	lt
 800086a:	425b      	neglt	r3, r3
 800086c:	2b19      	cmp	r3, #25
 800086e:	bf88      	it	hi
 8000870:	4770      	bxhi	lr
 8000872:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000876:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800087a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800087e:	bf18      	it	ne
 8000880:	4240      	negne	r0, r0
 8000882:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000886:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800088a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800088e:	bf18      	it	ne
 8000890:	4249      	negne	r1, r1
 8000892:	ea92 0f03 	teq	r2, r3
 8000896:	d03f      	beq.n	8000918 <__addsf3+0xd8>
 8000898:	f1a2 0201 	sub.w	r2, r2, #1
 800089c:	fa41 fc03 	asr.w	ip, r1, r3
 80008a0:	eb10 000c 	adds.w	r0, r0, ip
 80008a4:	f1c3 0320 	rsb	r3, r3, #32
 80008a8:	fa01 f103 	lsl.w	r1, r1, r3
 80008ac:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80008b0:	d502      	bpl.n	80008b8 <__addsf3+0x78>
 80008b2:	4249      	negs	r1, r1
 80008b4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80008b8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80008bc:	d313      	bcc.n	80008e6 <__addsf3+0xa6>
 80008be:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80008c2:	d306      	bcc.n	80008d2 <__addsf3+0x92>
 80008c4:	0840      	lsrs	r0, r0, #1
 80008c6:	ea4f 0131 	mov.w	r1, r1, rrx
 80008ca:	f102 0201 	add.w	r2, r2, #1
 80008ce:	2afe      	cmp	r2, #254	; 0xfe
 80008d0:	d251      	bcs.n	8000976 <__addsf3+0x136>
 80008d2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80008d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008da:	bf08      	it	eq
 80008dc:	f020 0001 	biceq.w	r0, r0, #1
 80008e0:	ea40 0003 	orr.w	r0, r0, r3
 80008e4:	4770      	bx	lr
 80008e6:	0049      	lsls	r1, r1, #1
 80008e8:	eb40 0000 	adc.w	r0, r0, r0
 80008ec:	3a01      	subs	r2, #1
 80008ee:	bf28      	it	cs
 80008f0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80008f4:	d2ed      	bcs.n	80008d2 <__addsf3+0x92>
 80008f6:	fab0 fc80 	clz	ip, r0
 80008fa:	f1ac 0c08 	sub.w	ip, ip, #8
 80008fe:	ebb2 020c 	subs.w	r2, r2, ip
 8000902:	fa00 f00c 	lsl.w	r0, r0, ip
 8000906:	bfaa      	itet	ge
 8000908:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800090c:	4252      	neglt	r2, r2
 800090e:	4318      	orrge	r0, r3
 8000910:	bfbc      	itt	lt
 8000912:	40d0      	lsrlt	r0, r2
 8000914:	4318      	orrlt	r0, r3
 8000916:	4770      	bx	lr
 8000918:	f092 0f00 	teq	r2, #0
 800091c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000920:	bf06      	itte	eq
 8000922:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000926:	3201      	addeq	r2, #1
 8000928:	3b01      	subne	r3, #1
 800092a:	e7b5      	b.n	8000898 <__addsf3+0x58>
 800092c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000930:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000934:	bf18      	it	ne
 8000936:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800093a:	d021      	beq.n	8000980 <__addsf3+0x140>
 800093c:	ea92 0f03 	teq	r2, r3
 8000940:	d004      	beq.n	800094c <__addsf3+0x10c>
 8000942:	f092 0f00 	teq	r2, #0
 8000946:	bf08      	it	eq
 8000948:	4608      	moveq	r0, r1
 800094a:	4770      	bx	lr
 800094c:	ea90 0f01 	teq	r0, r1
 8000950:	bf1c      	itt	ne
 8000952:	2000      	movne	r0, #0
 8000954:	4770      	bxne	lr
 8000956:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800095a:	d104      	bne.n	8000966 <__addsf3+0x126>
 800095c:	0040      	lsls	r0, r0, #1
 800095e:	bf28      	it	cs
 8000960:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000964:	4770      	bx	lr
 8000966:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800096a:	bf3c      	itt	cc
 800096c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000970:	4770      	bxcc	lr
 8000972:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000976:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800097a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800097e:	4770      	bx	lr
 8000980:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000984:	bf16      	itet	ne
 8000986:	4608      	movne	r0, r1
 8000988:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800098c:	4601      	movne	r1, r0
 800098e:	0242      	lsls	r2, r0, #9
 8000990:	bf06      	itte	eq
 8000992:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000996:	ea90 0f01 	teqeq	r0, r1
 800099a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800099e:	4770      	bx	lr

080009a0 <__aeabi_ui2f>:
 80009a0:	f04f 0300 	mov.w	r3, #0
 80009a4:	e004      	b.n	80009b0 <__aeabi_i2f+0x8>
 80009a6:	bf00      	nop

080009a8 <__aeabi_i2f>:
 80009a8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80009ac:	bf48      	it	mi
 80009ae:	4240      	negmi	r0, r0
 80009b0:	ea5f 0c00 	movs.w	ip, r0
 80009b4:	bf08      	it	eq
 80009b6:	4770      	bxeq	lr
 80009b8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80009bc:	4601      	mov	r1, r0
 80009be:	f04f 0000 	mov.w	r0, #0
 80009c2:	e01c      	b.n	80009fe <__aeabi_l2f+0x2a>

080009c4 <__aeabi_ul2f>:
 80009c4:	ea50 0201 	orrs.w	r2, r0, r1
 80009c8:	bf08      	it	eq
 80009ca:	4770      	bxeq	lr
 80009cc:	f04f 0300 	mov.w	r3, #0
 80009d0:	e00a      	b.n	80009e8 <__aeabi_l2f+0x14>
 80009d2:	bf00      	nop

080009d4 <__aeabi_l2f>:
 80009d4:	ea50 0201 	orrs.w	r2, r0, r1
 80009d8:	bf08      	it	eq
 80009da:	4770      	bxeq	lr
 80009dc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80009e0:	d502      	bpl.n	80009e8 <__aeabi_l2f+0x14>
 80009e2:	4240      	negs	r0, r0
 80009e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80009e8:	ea5f 0c01 	movs.w	ip, r1
 80009ec:	bf02      	ittt	eq
 80009ee:	4684      	moveq	ip, r0
 80009f0:	4601      	moveq	r1, r0
 80009f2:	2000      	moveq	r0, #0
 80009f4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80009f8:	bf08      	it	eq
 80009fa:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80009fe:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000a02:	fabc f28c 	clz	r2, ip
 8000a06:	3a08      	subs	r2, #8
 8000a08:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000a0c:	db10      	blt.n	8000a30 <__aeabi_l2f+0x5c>
 8000a0e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000a12:	4463      	add	r3, ip
 8000a14:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a18:	f1c2 0220 	rsb	r2, r2, #32
 8000a1c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000a20:	fa20 f202 	lsr.w	r2, r0, r2
 8000a24:	eb43 0002 	adc.w	r0, r3, r2
 8000a28:	bf08      	it	eq
 8000a2a:	f020 0001 	biceq.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	f102 0220 	add.w	r2, r2, #32
 8000a34:	fa01 fc02 	lsl.w	ip, r1, r2
 8000a38:	f1c2 0220 	rsb	r2, r2, #32
 8000a3c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000a40:	fa21 f202 	lsr.w	r2, r1, r2
 8000a44:	eb43 0002 	adc.w	r0, r3, r2
 8000a48:	bf08      	it	eq
 8000a4a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a4e:	4770      	bx	lr

08000a50 <__aeabi_fmul>:
 8000a50:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000a54:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000a58:	bf1e      	ittt	ne
 8000a5a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000a5e:	ea92 0f0c 	teqne	r2, ip
 8000a62:	ea93 0f0c 	teqne	r3, ip
 8000a66:	d06f      	beq.n	8000b48 <__aeabi_fmul+0xf8>
 8000a68:	441a      	add	r2, r3
 8000a6a:	ea80 0c01 	eor.w	ip, r0, r1
 8000a6e:	0240      	lsls	r0, r0, #9
 8000a70:	bf18      	it	ne
 8000a72:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000a76:	d01e      	beq.n	8000ab6 <__aeabi_fmul+0x66>
 8000a78:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000a7c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000a80:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000a84:	fba0 3101 	umull	r3, r1, r0, r1
 8000a88:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a8c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000a90:	bf3e      	ittt	cc
 8000a92:	0049      	lslcc	r1, r1, #1
 8000a94:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000a98:	005b      	lslcc	r3, r3, #1
 8000a9a:	ea40 0001 	orr.w	r0, r0, r1
 8000a9e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000aa2:	2afd      	cmp	r2, #253	; 0xfd
 8000aa4:	d81d      	bhi.n	8000ae2 <__aeabi_fmul+0x92>
 8000aa6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000aaa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000aae:	bf08      	it	eq
 8000ab0:	f020 0001 	biceq.w	r0, r0, #1
 8000ab4:	4770      	bx	lr
 8000ab6:	f090 0f00 	teq	r0, #0
 8000aba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000abe:	bf08      	it	eq
 8000ac0:	0249      	lsleq	r1, r1, #9
 8000ac2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ac6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000aca:	3a7f      	subs	r2, #127	; 0x7f
 8000acc:	bfc2      	ittt	gt
 8000ace:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ad2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ad6:	4770      	bxgt	lr
 8000ad8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000adc:	f04f 0300 	mov.w	r3, #0
 8000ae0:	3a01      	subs	r2, #1
 8000ae2:	dc5d      	bgt.n	8000ba0 <__aeabi_fmul+0x150>
 8000ae4:	f112 0f19 	cmn.w	r2, #25
 8000ae8:	bfdc      	itt	le
 8000aea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000aee:	4770      	bxle	lr
 8000af0:	f1c2 0200 	rsb	r2, r2, #0
 8000af4:	0041      	lsls	r1, r0, #1
 8000af6:	fa21 f102 	lsr.w	r1, r1, r2
 8000afa:	f1c2 0220 	rsb	r2, r2, #32
 8000afe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b02:	ea5f 0031 	movs.w	r0, r1, rrx
 8000b06:	f140 0000 	adc.w	r0, r0, #0
 8000b0a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000b0e:	bf08      	it	eq
 8000b10:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b14:	4770      	bx	lr
 8000b16:	f092 0f00 	teq	r2, #0
 8000b1a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000b1e:	bf02      	ittt	eq
 8000b20:	0040      	lsleq	r0, r0, #1
 8000b22:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000b26:	3a01      	subeq	r2, #1
 8000b28:	d0f9      	beq.n	8000b1e <__aeabi_fmul+0xce>
 8000b2a:	ea40 000c 	orr.w	r0, r0, ip
 8000b2e:	f093 0f00 	teq	r3, #0
 8000b32:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b36:	bf02      	ittt	eq
 8000b38:	0049      	lsleq	r1, r1, #1
 8000b3a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000b3e:	3b01      	subeq	r3, #1
 8000b40:	d0f9      	beq.n	8000b36 <__aeabi_fmul+0xe6>
 8000b42:	ea41 010c 	orr.w	r1, r1, ip
 8000b46:	e78f      	b.n	8000a68 <__aeabi_fmul+0x18>
 8000b48:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000b4c:	ea92 0f0c 	teq	r2, ip
 8000b50:	bf18      	it	ne
 8000b52:	ea93 0f0c 	teqne	r3, ip
 8000b56:	d00a      	beq.n	8000b6e <__aeabi_fmul+0x11e>
 8000b58:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000b5c:	bf18      	it	ne
 8000b5e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000b62:	d1d8      	bne.n	8000b16 <__aeabi_fmul+0xc6>
 8000b64:	ea80 0001 	eor.w	r0, r0, r1
 8000b68:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	4770      	bx	lr
 8000b6e:	f090 0f00 	teq	r0, #0
 8000b72:	bf17      	itett	ne
 8000b74:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000b78:	4608      	moveq	r0, r1
 8000b7a:	f091 0f00 	teqne	r1, #0
 8000b7e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000b82:	d014      	beq.n	8000bae <__aeabi_fmul+0x15e>
 8000b84:	ea92 0f0c 	teq	r2, ip
 8000b88:	d101      	bne.n	8000b8e <__aeabi_fmul+0x13e>
 8000b8a:	0242      	lsls	r2, r0, #9
 8000b8c:	d10f      	bne.n	8000bae <__aeabi_fmul+0x15e>
 8000b8e:	ea93 0f0c 	teq	r3, ip
 8000b92:	d103      	bne.n	8000b9c <__aeabi_fmul+0x14c>
 8000b94:	024b      	lsls	r3, r1, #9
 8000b96:	bf18      	it	ne
 8000b98:	4608      	movne	r0, r1
 8000b9a:	d108      	bne.n	8000bae <__aeabi_fmul+0x15e>
 8000b9c:	ea80 0001 	eor.w	r0, r0, r1
 8000ba0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ba4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ba8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bac:	4770      	bx	lr
 8000bae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bb2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_fdiv>:
 8000bb8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bc0:	bf1e      	ittt	ne
 8000bc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bc6:	ea92 0f0c 	teqne	r2, ip
 8000bca:	ea93 0f0c 	teqne	r3, ip
 8000bce:	d069      	beq.n	8000ca4 <__aeabi_fdiv+0xec>
 8000bd0:	eba2 0203 	sub.w	r2, r2, r3
 8000bd4:	ea80 0c01 	eor.w	ip, r0, r1
 8000bd8:	0249      	lsls	r1, r1, #9
 8000bda:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000bde:	d037      	beq.n	8000c50 <__aeabi_fdiv+0x98>
 8000be0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000be4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000be8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000bec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000bf0:	428b      	cmp	r3, r1
 8000bf2:	bf38      	it	cc
 8000bf4:	005b      	lslcc	r3, r3, #1
 8000bf6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000bfa:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000bfe:	428b      	cmp	r3, r1
 8000c00:	bf24      	itt	cs
 8000c02:	1a5b      	subcs	r3, r3, r1
 8000c04:	ea40 000c 	orrcs.w	r0, r0, ip
 8000c08:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000c0c:	bf24      	itt	cs
 8000c0e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000c12:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000c16:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000c1a:	bf24      	itt	cs
 8000c1c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000c20:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000c24:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000c28:	bf24      	itt	cs
 8000c2a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000c2e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000c32:	011b      	lsls	r3, r3, #4
 8000c34:	bf18      	it	ne
 8000c36:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000c3a:	d1e0      	bne.n	8000bfe <__aeabi_fdiv+0x46>
 8000c3c:	2afd      	cmp	r2, #253	; 0xfd
 8000c3e:	f63f af50 	bhi.w	8000ae2 <__aeabi_fmul+0x92>
 8000c42:	428b      	cmp	r3, r1
 8000c44:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c48:	bf08      	it	eq
 8000c4a:	f020 0001 	biceq.w	r0, r0, #1
 8000c4e:	4770      	bx	lr
 8000c50:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c54:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c58:	327f      	adds	r2, #127	; 0x7f
 8000c5a:	bfc2      	ittt	gt
 8000c5c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c60:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c64:	4770      	bxgt	lr
 8000c66:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c6a:	f04f 0300 	mov.w	r3, #0
 8000c6e:	3a01      	subs	r2, #1
 8000c70:	e737      	b.n	8000ae2 <__aeabi_fmul+0x92>
 8000c72:	f092 0f00 	teq	r2, #0
 8000c76:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c7a:	bf02      	ittt	eq
 8000c7c:	0040      	lsleq	r0, r0, #1
 8000c7e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c82:	3a01      	subeq	r2, #1
 8000c84:	d0f9      	beq.n	8000c7a <__aeabi_fdiv+0xc2>
 8000c86:	ea40 000c 	orr.w	r0, r0, ip
 8000c8a:	f093 0f00 	teq	r3, #0
 8000c8e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c92:	bf02      	ittt	eq
 8000c94:	0049      	lsleq	r1, r1, #1
 8000c96:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c9a:	3b01      	subeq	r3, #1
 8000c9c:	d0f9      	beq.n	8000c92 <__aeabi_fdiv+0xda>
 8000c9e:	ea41 010c 	orr.w	r1, r1, ip
 8000ca2:	e795      	b.n	8000bd0 <__aeabi_fdiv+0x18>
 8000ca4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca8:	ea92 0f0c 	teq	r2, ip
 8000cac:	d108      	bne.n	8000cc0 <__aeabi_fdiv+0x108>
 8000cae:	0242      	lsls	r2, r0, #9
 8000cb0:	f47f af7d 	bne.w	8000bae <__aeabi_fmul+0x15e>
 8000cb4:	ea93 0f0c 	teq	r3, ip
 8000cb8:	f47f af70 	bne.w	8000b9c <__aeabi_fmul+0x14c>
 8000cbc:	4608      	mov	r0, r1
 8000cbe:	e776      	b.n	8000bae <__aeabi_fmul+0x15e>
 8000cc0:	ea93 0f0c 	teq	r3, ip
 8000cc4:	d104      	bne.n	8000cd0 <__aeabi_fdiv+0x118>
 8000cc6:	024b      	lsls	r3, r1, #9
 8000cc8:	f43f af4c 	beq.w	8000b64 <__aeabi_fmul+0x114>
 8000ccc:	4608      	mov	r0, r1
 8000cce:	e76e      	b.n	8000bae <__aeabi_fmul+0x15e>
 8000cd0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cd4:	bf18      	it	ne
 8000cd6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cda:	d1ca      	bne.n	8000c72 <__aeabi_fdiv+0xba>
 8000cdc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ce0:	f47f af5c 	bne.w	8000b9c <__aeabi_fmul+0x14c>
 8000ce4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000ce8:	f47f af3c 	bne.w	8000b64 <__aeabi_fmul+0x114>
 8000cec:	e75f      	b.n	8000bae <__aeabi_fmul+0x15e>
 8000cee:	bf00      	nop

08000cf0 <__gesf2>:
 8000cf0:	f04f 3cff 	mov.w	ip, #4294967295
 8000cf4:	e006      	b.n	8000d04 <__cmpsf2+0x4>
 8000cf6:	bf00      	nop

08000cf8 <__lesf2>:
 8000cf8:	f04f 0c01 	mov.w	ip, #1
 8000cfc:	e002      	b.n	8000d04 <__cmpsf2+0x4>
 8000cfe:	bf00      	nop

08000d00 <__cmpsf2>:
 8000d00:	f04f 0c01 	mov.w	ip, #1
 8000d04:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000d08:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d0c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d10:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d14:	bf18      	it	ne
 8000d16:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d1a:	d011      	beq.n	8000d40 <__cmpsf2+0x40>
 8000d1c:	b001      	add	sp, #4
 8000d1e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000d22:	bf18      	it	ne
 8000d24:	ea90 0f01 	teqne	r0, r1
 8000d28:	bf58      	it	pl
 8000d2a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000d2e:	bf88      	it	hi
 8000d30:	17c8      	asrhi	r0, r1, #31
 8000d32:	bf38      	it	cc
 8000d34:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000d38:	bf18      	it	ne
 8000d3a:	f040 0001 	orrne.w	r0, r0, #1
 8000d3e:	4770      	bx	lr
 8000d40:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d44:	d102      	bne.n	8000d4c <__cmpsf2+0x4c>
 8000d46:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000d4a:	d105      	bne.n	8000d58 <__cmpsf2+0x58>
 8000d4c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000d50:	d1e4      	bne.n	8000d1c <__cmpsf2+0x1c>
 8000d52:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000d56:	d0e1      	beq.n	8000d1c <__cmpsf2+0x1c>
 8000d58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop

08000d60 <__aeabi_cfrcmple>:
 8000d60:	4684      	mov	ip, r0
 8000d62:	4608      	mov	r0, r1
 8000d64:	4661      	mov	r1, ip
 8000d66:	e7ff      	b.n	8000d68 <__aeabi_cfcmpeq>

08000d68 <__aeabi_cfcmpeq>:
 8000d68:	b50f      	push	{r0, r1, r2, r3, lr}
 8000d6a:	f7ff ffc9 	bl	8000d00 <__cmpsf2>
 8000d6e:	2800      	cmp	r0, #0
 8000d70:	bf48      	it	mi
 8000d72:	f110 0f00 	cmnmi.w	r0, #0
 8000d76:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000d78 <__aeabi_fcmpeq>:
 8000d78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d7c:	f7ff fff4 	bl	8000d68 <__aeabi_cfcmpeq>
 8000d80:	bf0c      	ite	eq
 8000d82:	2001      	moveq	r0, #1
 8000d84:	2000      	movne	r0, #0
 8000d86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d8a:	bf00      	nop

08000d8c <__aeabi_fcmplt>:
 8000d8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d90:	f7ff ffea 	bl	8000d68 <__aeabi_cfcmpeq>
 8000d94:	bf34      	ite	cc
 8000d96:	2001      	movcc	r0, #1
 8000d98:	2000      	movcs	r0, #0
 8000d9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d9e:	bf00      	nop

08000da0 <__aeabi_fcmple>:
 8000da0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000da4:	f7ff ffe0 	bl	8000d68 <__aeabi_cfcmpeq>
 8000da8:	bf94      	ite	ls
 8000daa:	2001      	movls	r0, #1
 8000dac:	2000      	movhi	r0, #0
 8000dae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000db2:	bf00      	nop

08000db4 <__aeabi_fcmpge>:
 8000db4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000db8:	f7ff ffd2 	bl	8000d60 <__aeabi_cfrcmple>
 8000dbc:	bf94      	ite	ls
 8000dbe:	2001      	movls	r0, #1
 8000dc0:	2000      	movhi	r0, #0
 8000dc2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_fcmpgt>:
 8000dc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dcc:	f7ff ffc8 	bl	8000d60 <__aeabi_cfrcmple>
 8000dd0:	bf34      	ite	cc
 8000dd2:	2001      	movcc	r0, #1
 8000dd4:	2000      	movcs	r0, #0
 8000dd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dda:	bf00      	nop

08000ddc <__aeabi_f2uiz>:
 8000ddc:	0042      	lsls	r2, r0, #1
 8000dde:	d20e      	bcs.n	8000dfe <__aeabi_f2uiz+0x22>
 8000de0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000de4:	d30b      	bcc.n	8000dfe <__aeabi_f2uiz+0x22>
 8000de6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000dea:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000dee:	d409      	bmi.n	8000e04 <__aeabi_f2uiz+0x28>
 8000df0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000df4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000df8:	fa23 f002 	lsr.w	r0, r3, r2
 8000dfc:	4770      	bx	lr
 8000dfe:	f04f 0000 	mov.w	r0, #0
 8000e02:	4770      	bx	lr
 8000e04:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e08:	d101      	bne.n	8000e0e <__aeabi_f2uiz+0x32>
 8000e0a:	0242      	lsls	r2, r0, #9
 8000e0c:	d102      	bne.n	8000e14 <__aeabi_f2uiz+0x38>
 8000e0e:	f04f 30ff 	mov.w	r0, #4294967295
 8000e12:	4770      	bx	lr
 8000e14:	f04f 0000 	mov.w	r0, #0
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop

08000e1c <Pid_Create>:
#include "PID_lib.h"

PID_handler* Pid_Create(PID_handler* hPID){
 8000e1c:	b510      	push	{r4, lr}
	hPID->I_max=(float)0xffff;
	hPID->I_mini=(float)-0xffff;
	hPID->Kd=0;
 8000e1e:	2200      	movs	r2, #0
 8000e20:	6142      	str	r2, [r0, #20]
	hPID->Ki=0;
 8000e22:	6102      	str	r2, [r0, #16]
	hPID->Kp=0;
 8000e24:	60c2      	str	r2, [r0, #12]
	hPID->omax=(float)0xffff;
	hPID->omin=(float)-0xffff;
	hPID->status=PID_NotInit;
	hPID->input=0;
 8000e26:	2200      	movs	r2, #0
	hPID->I_max=(float)0xffff;
 8000e28:	4c05      	ldr	r4, [pc, #20]	; (8000e40 <Pid_Create+0x24>)
	hPID->I_mini=(float)-0xffff;
 8000e2a:	4906      	ldr	r1, [pc, #24]	; (8000e44 <Pid_Create+0x28>)
	hPID->I_max=(float)0xffff;
 8000e2c:	6284      	str	r4, [r0, #40]	; 0x28
	hPID->output=0;
 8000e2e:	e9c0 2200 	strd	r2, r2, [r0]
	hPID->status=PID_NotInit;
 8000e32:	f240 1203 	movw	r2, #259	; 0x103
	hPID->I_mini=(float)-0xffff;
 8000e36:	62c1      	str	r1, [r0, #44]	; 0x2c
	hPID->omax=(float)0xffff;
 8000e38:	61c4      	str	r4, [r0, #28]
	hPID->omin=(float)-0xffff;
 8000e3a:	6181      	str	r1, [r0, #24]
	hPID->status=PID_NotInit;
 8000e3c:	8702      	strh	r2, [r0, #56]	; 0x38
	hPID->mode=PID_synchronous;
	return hPID;
}
 8000e3e:	bd10      	pop	{r4, pc}
 8000e40:	477fff00 	.word	0x477fff00
 8000e44:	c77fff00 	.word	0xc77fff00

08000e48 <pid_compute>:
{
	return hPID->status;
}

void pid_compute(PID_handler* hPID)
{
 8000e48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (hPID->status==PID_Disable||hPID->status==PID_NotInit) return;
 8000e4c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000e50:	3b02      	subs	r3, #2
 8000e52:	2b01      	cmp	r3, #1
{
 8000e54:	4604      	mov	r4, r0
	if (hPID->status==PID_Disable||hPID->status==PID_NotInit) return;
 8000e56:	d951      	bls.n	8000efc <pid_compute+0xb4>
	if (hPID->mode==PID_synchronous){
 8000e58:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d14d      	bne.n	8000efc <pid_compute+0xb4>

		float pid_error = (*(hPID->setpoint))-(*(hPID->input));
 8000e60:	6883      	ldr	r3, [r0, #8]
 8000e62:	f8d0 8000 	ldr.w	r8, [r0]
 8000e66:	6818      	ldr	r0, [r3, #0]
 8000e68:	f8d8 1000 	ldr.w	r1, [r8]
 8000e6c:	f7ff fce6 	bl	800083c <__aeabi_fsub>
		float prop= pid_error*hPID->Kp;
 8000e70:	f8d4 900c 	ldr.w	r9, [r4, #12]
		float pid_error = (*(hPID->setpoint))-(*(hPID->input));
 8000e74:	4605      	mov	r5, r0
		float prop= pid_error*hPID->Kp;
 8000e76:	4601      	mov	r1, r0
 8000e78:	4648      	mov	r0, r9
 8000e7a:	f7ff fde9 	bl	8000a50 <__aeabi_fmul>

		hPID->I_accum=hPID->I_accum+(pid_error)*hPID->sampletime;
 8000e7e:	6b61      	ldr	r1, [r4, #52]	; 0x34
		float prop= pid_error*hPID->Kp;
 8000e80:	4606      	mov	r6, r0
		hPID->I_accum=hPID->I_accum+(pid_error)*hPID->sampletime;
 8000e82:	4628      	mov	r0, r5
 8000e84:	f7ff fde4 	bl	8000a50 <__aeabi_fmul>
 8000e88:	6a21      	ldr	r1, [r4, #32]
 8000e8a:	f7ff fcd9 	bl	8000840 <__addsf3>
		if (hPID->I_accum>hPID->I_max) hPID->I_accum=hPID->I_max;
 8000e8e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
		hPID->I_accum=hPID->I_accum+(pid_error)*hPID->sampletime;
 8000e90:	6220      	str	r0, [r4, #32]
		if (hPID->I_accum>hPID->I_max) hPID->I_accum=hPID->I_max;
 8000e92:	4629      	mov	r1, r5
 8000e94:	f7ff ff98 	bl	8000dc8 <__aeabi_fcmpgt>
 8000e98:	b100      	cbz	r0, 8000e9c <pid_compute+0x54>
 8000e9a:	6225      	str	r5, [r4, #32]
		if (hPID->I_accum<hPID->I_mini) hPID->I_accum=hPID->I_mini;
 8000e9c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8000e9e:	6a20      	ldr	r0, [r4, #32]
 8000ea0:	4629      	mov	r1, r5
 8000ea2:	f7ff ff73 	bl	8000d8c <__aeabi_fcmplt>
 8000ea6:	b100      	cbz	r0, 8000eaa <pid_compute+0x62>
 8000ea8:	6225      	str	r5, [r4, #32]
		float integr = hPID->I_accum*hPID->Ki;
 8000eaa:	6921      	ldr	r1, [r4, #16]
 8000eac:	6a20      	ldr	r0, [r4, #32]
 8000eae:	f7ff fdcf 	bl	8000a50 <__aeabi_fmul>

		float deriv=(*(hPID->input)-hPID->D_last)*hPID->Kp;
 8000eb2:	f8d8 8000 	ldr.w	r8, [r8]
 8000eb6:	6a61      	ldr	r1, [r4, #36]	; 0x24
		float integr = hPID->I_accum*hPID->Ki;
 8000eb8:	4607      	mov	r7, r0
		float deriv=(*(hPID->input)-hPID->D_last)*hPID->Kp;
 8000eba:	4640      	mov	r0, r8
 8000ebc:	f7ff fcbe 	bl	800083c <__aeabi_fsub>
 8000ec0:	4649      	mov	r1, r9
 8000ec2:	f7ff fdc5 	bl	8000a50 <__aeabi_fmul>
		hPID->D_last=*hPID->input;

		float out= prop+integr-deriv;
 8000ec6:	4639      	mov	r1, r7
		float deriv=(*(hPID->input)-hPID->D_last)*hPID->Kp;
 8000ec8:	4605      	mov	r5, r0
		hPID->D_last=*hPID->input;
 8000eca:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
		float out= prop+integr-deriv;
 8000ece:	4630      	mov	r0, r6
 8000ed0:	f7ff fcb6 	bl	8000840 <__addsf3>
 8000ed4:	4629      	mov	r1, r5
 8000ed6:	f7ff fcb1 	bl	800083c <__aeabi_fsub>
		if (out>hPID->omax) out=hPID->omax;
 8000eda:	69e6      	ldr	r6, [r4, #28]
		float out= prop+integr-deriv;
 8000edc:	4605      	mov	r5, r0
		if (out>hPID->omax) out=hPID->omax;
 8000ede:	4601      	mov	r1, r0
 8000ee0:	4630      	mov	r0, r6
 8000ee2:	f7ff ff53 	bl	8000d8c <__aeabi_fcmplt>
 8000ee6:	b100      	cbz	r0, 8000eea <pid_compute+0xa2>
 8000ee8:	4635      	mov	r5, r6
		if (out<hPID->omin){
 8000eea:	69a6      	ldr	r6, [r4, #24]
 8000eec:	4629      	mov	r1, r5
 8000eee:	4630      	mov	r0, r6
 8000ef0:	f7ff ff6a 	bl	8000dc8 <__aeabi_fcmpgt>
 8000ef4:	b100      	cbz	r0, 8000ef8 <pid_compute+0xb0>
			out=hPID->omin;
 8000ef6:	4635      	mov	r5, r6
		}



		*hPID->output=out;
 8000ef8:	6863      	ldr	r3, [r4, #4]
 8000efa:	601d      	str	r5, [r3, #0]



	

}
 8000efc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08000f00 <pid_Enable>:
		else if (pid->I_accum < pid->I_mini)
			pid->I_accum = pid->I_mini;
}

void pid_Enable(PID_handler* h ){
	h->status=PID_PreCompute;
 8000f00:	2301      	movs	r3, #1
 8000f02:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
}
 8000f06:	4770      	bx	lr

08000f08 <Motors_Init>:

VNH_HANDLE hVNH1;
VNH_HANDLE hVNH2;
uint32_t adc_dma_buffer[2];

void Motors_Init(void){
 8000f08:	b538      	push	{r3, r4, r5, lr}
	// IO Pins set
	PRIM_IOPIN IOpin;
	//M1
	IOpin.gpiopin=M1_ENA_Pin;
	IOpin.gpioport=M1_ENA_GPIO_Port;
	hVNH1.ENA_sig=IOpin;
 8000f0a:	481b      	ldr	r0, [pc, #108]	; (8000f78 <Motors_Init+0x70>)

	hVNH1.CS_dis_sig=IOpin;
	//M2
	IOpin.gpiopin=M2_ENA_Pin;
	IOpin.gpioport=M2_ENA_GPIO_Port;
	hVNH2.ENA_sig=IOpin;
 8000f0c:	4c1b      	ldr	r4, [pc, #108]	; (8000f7c <Motors_Init+0x74>)
 8000f0e:	491c      	ldr	r1, [pc, #112]	; (8000f80 <Motors_Init+0x78>)
 8000f10:	61a1      	str	r1, [r4, #24]
	hVNH1.ENA_sig=IOpin;
 8000f12:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f16:	6183      	str	r3, [r0, #24]
	hVNH1.MA_sig=IOpin;
 8000f18:	6083      	str	r3, [r0, #8]
	hVNH1.MB_sig=IOpin;
 8000f1a:	6103      	str	r3, [r0, #16]
	hVNH1.CS_dis_sig=IOpin;
 8000f1c:	6203      	str	r3, [r0, #32]
	IOpin.gpioport=M2_INA_GPIO_Port;
	hVNH2.MA_sig=IOpin;

	IOpin.gpiopin=M2_INB_Pin;
	IOpin.gpioport=M2_INB_GPIO_Port;
	hVNH2.MB_sig=IOpin;
 8000f1e:	6123      	str	r3, [r4, #16]

	IOpin.gpiopin=CMES_ENA_Pin;
	IOpin.gpioport=CMES_ENA_GPIO_Port;

	hVNH2.CS_dis_sig=IOpin;
 8000f20:	6223      	str	r3, [r4, #32]
	//M1
	PRIM_PWM PWMpin;

	PWMpin.Chanel=TIM_CHANNEL_1;
	PWMpin.timh=&htim17;
	hVNH1.PWM_sig=PWMpin;
 8000f22:	4b18      	ldr	r3, [pc, #96]	; (8000f84 <Motors_Init+0x7c>)
 8000f24:	6003      	str	r3, [r0, #0]
 8000f26:	2300      	movs	r3, #0
 8000f28:	6043      	str	r3, [r0, #4]
	hVNH1.ENA_sig=IOpin;
 8000f2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
	//M2
	PWMpin.Chanel=TIM_CHANNEL_4;
	PWMpin.timh=&htim2;
	hVNH2.PWM_sig=PWMpin;
 8000f2e:	4b16      	ldr	r3, [pc, #88]	; (8000f88 <Motors_Init+0x80>)
	hVNH1.ENA_sig=IOpin;
 8000f30:	8382      	strh	r2, [r0, #28]
	hVNH2.PWM_sig=PWMpin;
 8000f32:	6023      	str	r3, [r4, #0]
	hVNH1.MA_sig=IOpin;
 8000f34:	f44f 7200 	mov.w	r2, #512	; 0x200
	hVNH2.PWM_sig=PWMpin;
 8000f38:	230c      	movs	r3, #12
	hVNH1.MA_sig=IOpin;
 8000f3a:	8182      	strh	r2, [r0, #12]
	hVNH2.PWM_sig=PWMpin;
 8000f3c:	6063      	str	r3, [r4, #4]
	hVNH1.MB_sig=IOpin;
 8000f3e:	f44f 7280 	mov.w	r2, #256	; 0x100


	//HAL_ADC_Start_DMA(&hadc1,adc_dma_buffer,2);


	hVNH1.CS_sig=&adc_dma_buffer[0];
 8000f42:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <Motors_Init+0x84>)
	hVNH1.MB_sig=IOpin;
 8000f44:	8282      	strh	r2, [r0, #20]
	hVNH1.CS_dis_sig=IOpin;
 8000f46:	2204      	movs	r2, #4
	hVNH2.MA_sig=IOpin;
 8000f48:	60a1      	str	r1, [r4, #8]
	hVNH1.CS_sig=&adc_dma_buffer[0];
 8000f4a:	6283      	str	r3, [r0, #40]	; 0x28
	hVNH2.MA_sig=IOpin;
 8000f4c:	2102      	movs	r1, #2
	hVNH2.CS_sig=&adc_dma_buffer[1];
 8000f4e:	4413      	add	r3, r2
	hVNH2.MA_sig=IOpin;
 8000f50:	81a1      	strh	r1, [r4, #12]
	hVNH2.CS_sig=&adc_dma_buffer[1];
 8000f52:	62a3      	str	r3, [r4, #40]	; 0x28
	hVNH1.CS_dis_sig=IOpin;
 8000f54:	8482      	strh	r2, [r0, #36]	; 0x24

	hVNH1.CS_Rez_Val=3900;
 8000f56:	f640 733c 	movw	r3, #3900	; 0xf3c
	hVNH2.ENA_sig=IOpin;
 8000f5a:	2501      	movs	r5, #1
	hVNH2.MB_sig=IOpin;
 8000f5c:	2110      	movs	r1, #16
	hVNH1.CS_Rez_Val=3900;
 8000f5e:	8583      	strh	r3, [r0, #44]	; 0x2c
	hVNH2.ENA_sig=IOpin;
 8000f60:	83a5      	strh	r5, [r4, #28]
	hVNH2.MB_sig=IOpin;
 8000f62:	82a1      	strh	r1, [r4, #20]
	hVNH2.CS_dis_sig=IOpin;
 8000f64:	84a2      	strh	r2, [r4, #36]	; 0x24
	hVNH2.CS_Rez_Val=3900;
 8000f66:	85a3      	strh	r3, [r4, #44]	; 0x2c

	VNH_Init(&hVNH1);
 8000f68:	f000 f939 	bl	80011de <VNH_Init>
	VNH_Init(&hVNH2);
 8000f6c:	4620      	mov	r0, r4


}
 8000f6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	VNH_Init(&hVNH2);
 8000f72:	f000 b934 	b.w	80011de <VNH_Init>
 8000f76:	bf00      	nop
 8000f78:	20000064 	.word	0x20000064
 8000f7c:	20000028 	.word	0x20000028
 8000f80:	48000400 	.word	0x48000400
 8000f84:	20000290 	.word	0x20000290
 8000f88:	20000374 	.word	0x20000374
 8000f8c:	200000a0 	.word	0x200000a0

08000f90 <VNH_SetIOHL>:
	HAL_GPIO_WritePin(hVNH->ENA_sig.gpioport, hVNH->ENA_sig.gpiopin, GPIO_PIN_SET);
	VNH_SetDir(hVNH,hVNH->dir);
}


void VNH_SetIOHL(VNH_HANDLE*  hVNH){
 8000f90:	b510      	push	{r4, lr}
 8000f92:	4604      	mov	r4, r0

	HAL_GPIO_WritePin(hVNH->MA_sig.gpioport, hVNH->MA_sig.gpiopin, GPIO_PIN_RESET);
 8000f94:	8981      	ldrh	r1, [r0, #12]
 8000f96:	6880      	ldr	r0, [r0, #8]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f001 fffd 	bl	8002f98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(hVNH->MB_sig.gpioport, hVNH->MB_sig.gpiopin, GPIO_PIN_SET);
 8000f9e:	8aa1      	ldrh	r1, [r4, #20]
 8000fa0:	6920      	ldr	r0, [r4, #16]
 8000fa2:	2201      	movs	r2, #1
	//hVNH->dir=dir_HL;

}
 8000fa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(hVNH->MB_sig.gpioport, hVNH->MB_sig.gpiopin, GPIO_PIN_SET);
 8000fa8:	f001 bff6 	b.w	8002f98 <HAL_GPIO_WritePin>

08000fac <VNH_SetIOLH>:

void VNH_SetIOLH(VNH_HANDLE*  hVNH){
 8000fac:	b510      	push	{r4, lr}
 8000fae:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(hVNH->MA_sig.gpioport, hVNH->MA_sig.gpiopin, GPIO_PIN_SET);
 8000fb0:	8981      	ldrh	r1, [r0, #12]
 8000fb2:	6880      	ldr	r0, [r0, #8]
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	f001 ffef 	bl	8002f98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(hVNH->MB_sig.gpioport, hVNH->MB_sig.gpiopin, GPIO_PIN_RESET);
 8000fba:	8aa1      	ldrh	r1, [r4, #20]
 8000fbc:	6920      	ldr	r0, [r4, #16]
 8000fbe:	2200      	movs	r2, #0
	//hVNH->dir=dir_LH;
}
 8000fc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(hVNH->MB_sig.gpioport, hVNH->MB_sig.gpiopin, GPIO_PIN_RESET);
 8000fc4:	f001 bfe8 	b.w	8002f98 <HAL_GPIO_WritePin>

08000fc8 <VNH_SetIOHH>:

void VNH_SetIOHH(VNH_HANDLE*  hVNH){
 8000fc8:	b510      	push	{r4, lr}
 8000fca:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(hVNH->MA_sig.gpioport, hVNH->MA_sig.gpiopin, GPIO_PIN_SET);
 8000fcc:	8981      	ldrh	r1, [r0, #12]
 8000fce:	6880      	ldr	r0, [r0, #8]
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	f001 ffe1 	bl	8002f98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(hVNH->MB_sig.gpioport, hVNH->MB_sig.gpiopin, GPIO_PIN_SET);
 8000fd6:	8aa1      	ldrh	r1, [r4, #20]
 8000fd8:	6920      	ldr	r0, [r4, #16]
 8000fda:	2201      	movs	r2, #1
	//hVNH->dir=dir_HH;
}
 8000fdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(hVNH->MB_sig.gpioport, hVNH->MB_sig.gpiopin, GPIO_PIN_SET);
 8000fe0:	f001 bfda 	b.w	8002f98 <HAL_GPIO_WritePin>

08000fe4 <VNH_SetIOLL>:

void VNH_SetIOLL(VNH_HANDLE*  hVNH){
 8000fe4:	b510      	push	{r4, lr}
 8000fe6:	4604      	mov	r4, r0

	HAL_GPIO_WritePin(hVNH->MA_sig.gpioport, hVNH->MA_sig.gpiopin, GPIO_PIN_RESET);
 8000fe8:	8981      	ldrh	r1, [r0, #12]
 8000fea:	6880      	ldr	r0, [r0, #8]
 8000fec:	2200      	movs	r2, #0
 8000fee:	f001 ffd3 	bl	8002f98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(hVNH->MB_sig.gpioport, hVNH->MB_sig.gpiopin, GPIO_PIN_RESET);
 8000ff2:	8aa1      	ldrh	r1, [r4, #20]
 8000ff4:	6920      	ldr	r0, [r4, #16]
 8000ff6:	2200      	movs	r2, #0
	//hVNH->dir=dir_LL;
}
 8000ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(hVNH->MB_sig.gpioport, hVNH->MB_sig.gpiopin, GPIO_PIN_RESET);
 8000ffc:	f001 bfcc 	b.w	8002f98 <HAL_GPIO_WritePin>

08001000 <VNH_Disable>:
void VNH_Disable(VNH_HANDLE* hVNH){
 8001000:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(hVNH->ENA_sig.gpioport, hVNH->ENA_sig.gpiopin, GPIO_PIN_RESET);
 8001002:	8b81      	ldrh	r1, [r0, #28]
void VNH_Disable(VNH_HANDLE* hVNH){
 8001004:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(hVNH->ENA_sig.gpioport, hVNH->ENA_sig.gpiopin, GPIO_PIN_RESET);
 8001006:	2200      	movs	r2, #0
 8001008:	6980      	ldr	r0, [r0, #24]
 800100a:	f001 ffc5 	bl	8002f98 <HAL_GPIO_WritePin>
	VNH_SetIOLL(hVNH);
 800100e:	4620      	mov	r0, r4
}
 8001010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	VNH_SetIOLL(hVNH);
 8001014:	f7ff bfe6 	b.w	8000fe4 <VNH_SetIOLL>

08001018 <VNH_SetDir.part.0>:
	}
}

void VNH_SetDir(VNH_HANDLE* hVNH ,VNH_dir dir){
	if (!hVNH->pol_reverse){
		switch(dir){
 8001018:	2901      	cmp	r1, #1
void VNH_SetDir(VNH_HANDLE* hVNH ,VNH_dir dir){
 800101a:	b538      	push	{r3, r4, r5, lr}
 800101c:	4605      	mov	r5, r0
 800101e:	460c      	mov	r4, r1
		switch(dir){
 8001020:	d005      	beq.n	800102e <VNH_SetDir.part.0+0x16>
 8001022:	2902      	cmp	r1, #2
 8001024:	d008      	beq.n	8001038 <VNH_SetDir.part.0+0x20>
 8001026:	b951      	cbnz	r1, 800103e <VNH_SetDir.part.0+0x26>
		case dir_LH:
			VNH_SetIOLH(hVNH);
			hVNH->dir=dir_LH;
			break;
		case dir_HH:
			VNH_SetIOHH(hVNH);
 8001028:	f7ff ffce 	bl	8000fc8 <VNH_SetIOHH>
 800102c:	e001      	b.n	8001032 <VNH_SetDir.part.0+0x1a>
			VNH_SetIOHL(hVNH);
 800102e:	f7ff ffaf 	bl	8000f90 <VNH_SetIOHL>
			hVNH->dir=dir_HH;
 8001032:	f885 402e 	strb.w	r4, [r5, #46]	; 0x2e
			hVNH->dir=dir_LL;
			break;
		}
	}

}
 8001036:	bd38      	pop	{r3, r4, r5, pc}
			VNH_SetIOLH(hVNH);
 8001038:	f7ff ffb8 	bl	8000fac <VNH_SetIOLH>
			hVNH->dir=dir_LH;
 800103c:	e7f9      	b.n	8001032 <VNH_SetDir.part.0+0x1a>
			VNH_SetIOLL(hVNH);
 800103e:	f7ff ffd1 	bl	8000fe4 <VNH_SetIOLL>
			hVNH->dir=dir_LL;
 8001042:	2303      	movs	r3, #3
 8001044:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
}
 8001048:	e7f5      	b.n	8001036 <VNH_SetDir.part.0+0x1e>

0800104a <VNH_SetDir>:
void VNH_SetDir(VNH_HANDLE* hVNH ,VNH_dir dir){
 800104a:	b538      	push	{r3, r4, r5, lr}
	if (!hVNH->pol_reverse){
 800104c:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
void VNH_SetDir(VNH_HANDLE* hVNH ,VNH_dir dir){
 8001050:	4605      	mov	r5, r0
 8001052:	460c      	mov	r4, r1
	if (!hVNH->pol_reverse){
 8001054:	b91b      	cbnz	r3, 800105e <VNH_SetDir+0x14>
}
 8001056:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800105a:	f7ff bfdd 	b.w	8001018 <VNH_SetDir.part.0>
		switch(dir){
 800105e:	2901      	cmp	r1, #1
 8001060:	d00a      	beq.n	8001078 <VNH_SetDir+0x2e>
 8001062:	2902      	cmp	r1, #2
 8001064:	d003      	beq.n	800106e <VNH_SetDir+0x24>
 8001066:	b951      	cbnz	r1, 800107e <VNH_SetDir+0x34>
			VNH_SetIOHH(hVNH);
 8001068:	f7ff ffae 	bl	8000fc8 <VNH_SetIOHH>
 800106c:	e001      	b.n	8001072 <VNH_SetDir+0x28>
			VNH_SetIOHL(hVNH);
 800106e:	f7ff ff8f 	bl	8000f90 <VNH_SetIOHL>
			hVNH->dir=dir_HH;
 8001072:	f885 402e 	strb.w	r4, [r5, #46]	; 0x2e
}
 8001076:	bd38      	pop	{r3, r4, r5, pc}
			VNH_SetIOLH(hVNH);
 8001078:	f7ff ff98 	bl	8000fac <VNH_SetIOLH>
			hVNH->dir=dir_HL;
 800107c:	e7f9      	b.n	8001072 <VNH_SetDir+0x28>
			VNH_SetIOLL(hVNH);
 800107e:	f7ff ffb1 	bl	8000fe4 <VNH_SetIOLL>
			hVNH->dir=dir_LL;
 8001082:	2303      	movs	r3, #3
 8001084:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
}
 8001088:	e7f5      	b.n	8001076 <VNH_SetDir+0x2c>

0800108a <VNH_Enable>:
void VNH_Enable(VNH_HANDLE* hVNH){
 800108a:	b510      	push	{r4, lr}
 800108c:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(hVNH->ENA_sig.gpioport, hVNH->ENA_sig.gpiopin, GPIO_PIN_SET);
 800108e:	8b81      	ldrh	r1, [r0, #28]
 8001090:	6980      	ldr	r0, [r0, #24]
 8001092:	2201      	movs	r2, #1
 8001094:	f001 ff80 	bl	8002f98 <HAL_GPIO_WritePin>
	VNH_SetDir(hVNH,hVNH->dir);
 8001098:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
 800109c:	4620      	mov	r0, r4
}
 800109e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	VNH_SetDir(hVNH,hVNH->dir);
 80010a2:	f7ff bfd2 	b.w	800104a <VNH_SetDir>

080010a6 <VNH_TogleDir>:
	switch(hVNH->dir){
 80010a6:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
 80010aa:	2b02      	cmp	r3, #2
 80010ac:	d006      	beq.n	80010bc <VNH_TogleDir+0x16>
 80010ae:	2b03      	cmp	r3, #3
 80010b0:	d006      	beq.n	80010c0 <VNH_TogleDir+0x1a>
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d106      	bne.n	80010c4 <VNH_TogleDir+0x1e>
		VNH_SetDir(hVNH,dir_LH);
 80010b6:	2102      	movs	r1, #2
		VNH_SetDir(hVNH,dir_LL);
 80010b8:	f7ff bfc7 	b.w	800104a <VNH_SetDir>
		VNH_SetDir(hVNH,dir_HL);
 80010bc:	2101      	movs	r1, #1
 80010be:	e7fb      	b.n	80010b8 <VNH_TogleDir+0x12>
		VNH_SetDir(hVNH,dir_HH);
 80010c0:	2100      	movs	r1, #0
 80010c2:	e7f9      	b.n	80010b8 <VNH_TogleDir+0x12>
		VNH_SetDir(hVNH,dir_LL);
 80010c4:	2103      	movs	r1, #3
 80010c6:	e7f7      	b.n	80010b8 <VNH_TogleDir+0x12>

080010c8 <VNH_SetPWM>:
		VNH_SetDir(hVNH,hVNH->dir);
	}
}

void VNH_SetPWM(VNH_HANDLE* hVNH, uint8_t duty){
	if (duty>100) duty=100;
 80010c8:	e9d0 3200 	ldrd	r3, r2, [r0]
 80010cc:	2964      	cmp	r1, #100	; 0x64
 80010ce:	bf28      	it	cs
 80010d0:	2164      	movcs	r1, #100	; 0x64
 	hVNH->PWM_dutycicle=duty;
 80010d2:	f880 102f 	strb.w	r1, [r0, #47]	; 0x2f

	 //__HAL_TIM_SET_COMPARE(hVNH->PWM_sig.timh,hVNH->PWM_sig.Chanel,(uint8_t)__HAL_TIM_GET_AUTORELOAD(hVNH->PWM_sig.timh)*duty/100);
 	__HAL_TIM_SET_COMPARE(hVNH->PWM_sig.timh,hVNH->PWM_sig.Chanel,(uint8_t)__HAL_TIM_GET_AUTORELOAD(hVNH->PWM_sig.timh)*duty/100);
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	b93a      	cbnz	r2, 80010ea <VNH_SetPWM+0x22>
 80010da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010dc:	b2d2      	uxtb	r2, r2
 80010de:	4351      	muls	r1, r2
 80010e0:	2264      	movs	r2, #100	; 0x64
 80010e2:	fbb1 f1f2 	udiv	r1, r1, r2
 80010e6:	6359      	str	r1, [r3, #52]	; 0x34
 80010e8:	4770      	bx	lr
 80010ea:	2a04      	cmp	r2, #4
 80010ec:	d107      	bne.n	80010fe <VNH_SetPWM+0x36>
 80010ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010f0:	b2d2      	uxtb	r2, r2
 80010f2:	4351      	muls	r1, r2
 80010f4:	2264      	movs	r2, #100	; 0x64
 80010f6:	fbb1 f1f2 	udiv	r1, r1, r2
 80010fa:	6399      	str	r1, [r3, #56]	; 0x38
 80010fc:	4770      	bx	lr
 80010fe:	2a08      	cmp	r2, #8
 8001100:	d107      	bne.n	8001112 <VNH_SetPWM+0x4a>
 8001102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001104:	b2d2      	uxtb	r2, r2
 8001106:	4351      	muls	r1, r2
 8001108:	2264      	movs	r2, #100	; 0x64
 800110a:	fbb1 f1f2 	udiv	r1, r1, r2
 800110e:	63d9      	str	r1, [r3, #60]	; 0x3c
 8001110:	4770      	bx	lr
 8001112:	2a0c      	cmp	r2, #12
 8001114:	d107      	bne.n	8001126 <VNH_SetPWM+0x5e>
 8001116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001118:	b2d2      	uxtb	r2, r2
 800111a:	4351      	muls	r1, r2
 800111c:	2264      	movs	r2, #100	; 0x64
 800111e:	fbb1 f1f2 	udiv	r1, r1, r2
 8001122:	6419      	str	r1, [r3, #64]	; 0x40
 8001124:	4770      	bx	lr
 8001126:	2a10      	cmp	r2, #16
 8001128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800112a:	b2d2      	uxtb	r2, r2
 800112c:	f04f 0064 	mov.w	r0, #100	; 0x64
 8001130:	fb01 f102 	mul.w	r1, r1, r2
 8001134:	fbb1 f1f0 	udiv	r1, r1, r0
 8001138:	bf0c      	ite	eq
 800113a:	6599      	streq	r1, [r3, #88]	; 0x58
 800113c:	65d9      	strne	r1, [r3, #92]	; 0x5c
}
 800113e:	4770      	bx	lr

08001140 <VNH_DisableCurSens>:

void VNH_DisableCurSens(VNH_HANDLE* hVNH){

	HAL_GPIO_WritePin(hVNH->CS_dis_sig.gpioport,hVNH->CS_dis_sig.gpiopin,GPIO_PIN_SET);
 8001140:	8c81      	ldrh	r1, [r0, #36]	; 0x24
 8001142:	6a00      	ldr	r0, [r0, #32]
 8001144:	2201      	movs	r2, #1
 8001146:	f001 bf27 	b.w	8002f98 <HAL_GPIO_WritePin>

0800114a <VNH_EnableCurSens>:
}

void VNH_EnableCurSens(VNH_HANDLE* hVNH){

	HAL_GPIO_WritePin(hVNH->CS_dis_sig.gpioport,hVNH->CS_dis_sig.gpiopin,GPIO_PIN_RESET);
 800114a:	8c81      	ldrh	r1, [r0, #36]	; 0x24
 800114c:	6a00      	ldr	r0, [r0, #32]
 800114e:	2200      	movs	r2, #0
 8001150:	f001 bf22 	b.w	8002f98 <HAL_GPIO_WritePin>

08001154 <VNH_ZeroPointCorrection>:
}
void VNH_ZeroPointCorrection(VNH_HANDLE* hVNH){
 8001154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001156:	4604      	mov	r4, r0

	VNH_Disable(hVNH);
 8001158:	f7ff ff52 	bl	8001000 <VNH_Disable>
	VNH_EnableCurSens(hVNH);
 800115c:	4620      	mov	r0, r4
 800115e:	f7ff fff4 	bl	800114a <VNH_EnableCurSens>

	VNH_SetDir(hVNH, dir_HL);
 8001162:	2101      	movs	r1, #1
 8001164:	4620      	mov	r0, r4
 8001166:	f7ff ff70 	bl	800104a <VNH_SetDir>
	HAL_Delay(2000);
 800116a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800116e:	f000 fefb 	bl	8001f68 <HAL_Delay>
	VNH_SetDir(hVNH, dir_LH);
 8001172:	2102      	movs	r1, #2
 8001174:	4620      	mov	r0, r4
 8001176:	f7ff ff68 	bl	800104a <VNH_SetDir>
	HAL_Delay(2000);
 800117a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800117e:	f000 fef3 	bl	8001f68 <HAL_Delay>
	VNH_SetDir(hVNH, dir_HL);
 8001182:	2101      	movs	r1, #1
 8001184:	4620      	mov	r0, r4
 8001186:	f7ff ff60 	bl	800104a <VNH_SetDir>

	uint32_t a=0;
	HAL_Delay(80);
 800118a:	2050      	movs	r0, #80	; 0x50
 800118c:	f000 feec 	bl	8001f68 <HAL_Delay>
 8001190:	250a      	movs	r5, #10
	uint32_t a=0;
 8001192:	2700      	movs	r7, #0
	for(int i=0;i<10;i++){
		a+=(*hVNH->CS_sig);
 8001194:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001196:	681b      	ldr	r3, [r3, #0]
		HAL_Delay(80);
 8001198:	2050      	movs	r0, #80	; 0x50
		a+=(*hVNH->CS_sig);
 800119a:	441f      	add	r7, r3
		HAL_Delay(80);
 800119c:	f000 fee4 	bl	8001f68 <HAL_Delay>
	for(int i=0;i<10;i++){
 80011a0:	3d01      	subs	r5, #1
 80011a2:	d1f7      	bne.n	8001194 <VNH_ZeroPointCorrection+0x40>
	}
	hVNH->HL_ZeroCorection=(uint32_t)(a/10);
	a=0;
	VNH_SetDir(hVNH, dir_LH);
 80011a4:	4620      	mov	r0, r4
	hVNH->HL_ZeroCorection=(uint32_t)(a/10);
 80011a6:	260a      	movs	r6, #10
	VNH_SetDir(hVNH, dir_LH);
 80011a8:	2102      	movs	r1, #2
	hVNH->HL_ZeroCorection=(uint32_t)(a/10);
 80011aa:	fbb7 f7f6 	udiv	r7, r7, r6
 80011ae:	63a7      	str	r7, [r4, #56]	; 0x38
	VNH_SetDir(hVNH, dir_LH);
 80011b0:	f7ff ff4b 	bl	800104a <VNH_SetDir>
	HAL_Delay(100);
 80011b4:	2064      	movs	r0, #100	; 0x64
 80011b6:	f000 fed7 	bl	8001f68 <HAL_Delay>
	for(int i=0;i<10;i++){
		a+=(*hVNH->CS_sig);
 80011ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80011bc:	681b      	ldr	r3, [r3, #0]
		HAL_Delay(80);
 80011be:	2050      	movs	r0, #80	; 0x50
		a+=(*hVNH->CS_sig);
 80011c0:	441d      	add	r5, r3
		HAL_Delay(80);
 80011c2:	f000 fed1 	bl	8001f68 <HAL_Delay>
	for(int i=0;i<10;i++){
 80011c6:	3e01      	subs	r6, #1
 80011c8:	d1f7      	bne.n	80011ba <VNH_ZeroPointCorrection+0x66>
	}
	hVNH->LH_ZeroCorection=(uint32_t)(a/10);
 80011ca:	230a      	movs	r3, #10

	VNH_SetDir(hVNH, dir_LL);
 80011cc:	4620      	mov	r0, r4
	hVNH->LH_ZeroCorection=(uint32_t)(a/10);
 80011ce:	fbb5 f5f3 	udiv	r5, r5, r3
	VNH_SetDir(hVNH, dir_LL);
 80011d2:	2103      	movs	r1, #3
	hVNH->LH_ZeroCorection=(uint32_t)(a/10);
 80011d4:	6365      	str	r5, [r4, #52]	; 0x34

}
 80011d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	VNH_SetDir(hVNH, dir_LL);
 80011da:	f7ff bf36 	b.w	800104a <VNH_SetDir>

080011de <VNH_Init>:
void VNH_Init(VNH_HANDLE* hVNH){
 80011de:	b538      	push	{r3, r4, r5, lr}
	if(hVNH==NULL){
 80011e0:	4604      	mov	r4, r0
 80011e2:	b1c0      	cbz	r0, 8001216 <VNH_Init+0x38>
	hVNH->pol_reverse=0;
 80011e4:	2500      	movs	r5, #0
 80011e6:	f880 5030 	strb.w	r5, [r0, #48]	; 0x30
	VNH_DisableCurSens(hVNH);
 80011ea:	f7ff ffa9 	bl	8001140 <VNH_DisableCurSens>
	VNH_Disable(hVNH);
 80011ee:	4620      	mov	r0, r4
 80011f0:	f7ff ff06 	bl	8001000 <VNH_Disable>
	HAL_TIM_PWM_Start(hVNH->PWM_sig.timh,hVNH->PWM_sig.Chanel);
 80011f4:	e9d4 0100 	ldrd	r0, r1, [r4]
 80011f8:	f003 fbae 	bl	8004958 <HAL_TIM_PWM_Start>
	VNH_SetPWM(hVNH,0);
 80011fc:	4629      	mov	r1, r5
 80011fe:	4620      	mov	r0, r4
 8001200:	f7ff ff62 	bl	80010c8 <VNH_SetPWM>
	VNH_ZeroPointCorrection(hVNH);
 8001204:	4620      	mov	r0, r4
 8001206:	f7ff ffa5 	bl	8001154 <VNH_ZeroPointCorrection>
	VNH_SetDir(hVNH,dir_LL);
 800120a:	4620      	mov	r0, r4
 800120c:	2103      	movs	r1, #3
}
 800120e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	VNH_SetDir(hVNH,dir_LL);
 8001212:	f7ff bf1a 	b.w	800104a <VNH_SetDir>
}
 8001216:	bd38      	pop	{r3, r4, r5, pc}

08001218 <VNH_GetCurValue>:



float VNH_GetCurValue(VNH_HANDLE* hVNH){
 8001218:	b538      	push	{r3, r4, r5, lr}

	float current=0;


	int32_t a;
	if(hVNH->dir==dir_HL){
 800121a:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
 800121e:	2b01      	cmp	r3, #1
float VNH_GetCurValue(VNH_HANDLE* hVNH){
 8001220:	4604      	mov	r4, r0
	if(hVNH->dir==dir_HL){
 8001222:	d11d      	bne.n	8001260 <VNH_GetCurValue+0x48>
		a=(*hVNH->CS_sig)-hVNH->HL_ZeroCorection;
 8001224:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001226:	6818      	ldr	r0, [r3, #0]
 8001228:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		if(a<0) a=0;
	current = ((float)(3.3*(float)a)/4096)/((float)hVNH->CS_Rez_Val);
	}

	if(hVNH->dir==dir_LH){
		a=(*hVNH->CS_sig)-hVNH->LH_ZeroCorection;
 800122a:	1ac0      	subs	r0, r0, r3
		if(a<0) a=0;
		current = ((float)(3.3*(float)a)/4096)/((float)hVNH->CS_Rez_Val);
 800122c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8001230:	f7ff fbba 	bl	80009a8 <__aeabi_i2f>
 8001234:	f7ff fa56 	bl	80006e4 <__aeabi_f2d>
 8001238:	a30d      	add	r3, pc, #52	; (adr r3, 8001270 <VNH_GetCurValue+0x58>)
 800123a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123e:	f7fe ffc3 	bl	80001c8 <__aeabi_dmul>
 8001242:	f7ff faa7 	bl	8000794 <__aeabi_d2f>
 8001246:	f04f 5166 	mov.w	r1, #964689920	; 0x39800000
 800124a:	f7ff fc01 	bl	8000a50 <__aeabi_fmul>
 800124e:	4605      	mov	r5, r0
 8001250:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 8001252:	f7ff fba5 	bl	80009a0 <__aeabi_ui2f>
 8001256:	4601      	mov	r1, r0
 8001258:	4628      	mov	r0, r5
 800125a:	f7ff fcad 	bl	8000bb8 <__aeabi_fdiv>
	}



	return current;
}
 800125e:	bd38      	pop	{r3, r4, r5, pc}
	if(hVNH->dir==dir_LH){
 8001260:	2b02      	cmp	r3, #2
 8001262:	d103      	bne.n	800126c <VNH_GetCurValue+0x54>
		a=(*hVNH->CS_sig)-hVNH->LH_ZeroCorection;
 8001264:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001266:	6818      	ldr	r0, [r3, #0]
 8001268:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800126a:	e7de      	b.n	800122a <VNH_GetCurValue+0x12>
	float current=0;
 800126c:	2000      	movs	r0, #0
	return current;
 800126e:	e7f6      	b.n	800125e <VNH_GetCurValue+0x46>
 8001270:	66666666 	.word	0x66666666
 8001274:	400a6666 	.word	0x400a6666

08001278 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001278:	b510      	push	{r4, lr}

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800127a:	2400      	movs	r4, #0
{
 800127c:	b08a      	sub	sp, #40	; 0x28
  ADC_ChannelConfTypeDef sConfig = {0};
 800127e:	2218      	movs	r2, #24
 8001280:	4621      	mov	r1, r4
 8001282:	a804      	add	r0, sp, #16
  ADC_MultiModeTypeDef multimode = {0};
 8001284:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8001288:	9403      	str	r4, [sp, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 800128a:	f003 fdaf 	bl	8004dec <memset>
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800128e:	481f      	ldr	r0, [pc, #124]	; (800130c <MX_ADC1_Init+0x94>)
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001290:	2301      	movs	r3, #1
 8001292:	6283      	str	r3, [r0, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 2;
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001294:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001298:	6103      	str	r3, [r0, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800129a:	2308      	movs	r3, #8
  hadc1.Init.NbrOfConversion = 2;
 800129c:	2202      	movs	r2, #2
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800129e:	6143      	str	r3, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012a0:	f44f 7380 	mov.w	r3, #256	; 0x100
  hadc1.Init.NbrOfConversion = 2;
 80012a4:	61c2      	str	r2, [r0, #28]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012a6:	8303      	strh	r3, [r0, #24]
  hadc1.Instance = ADC1;
 80012a8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80012ac:	e9c0 2400 	strd	r2, r4, [r0]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012b0:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012b4:	f880 4020 	strb.w	r4, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012b8:	62c4      	str	r4, [r0, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80012ba:	6344      	str	r4, [r0, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012bc:	f000 ff0c 	bl	80020d8 <HAL_ADC_Init>
 80012c0:	b108      	cbz	r0, 80012c6 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80012c2:	f000 faf7 	bl	80018b4 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80012c6:	4811      	ldr	r0, [pc, #68]	; (800130c <MX_ADC1_Init+0x94>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80012c8:	9401      	str	r4, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80012ca:	a901      	add	r1, sp, #4
 80012cc:	f001 fb80 	bl	80029d0 <HAL_ADCEx_MultiModeConfigChannel>
 80012d0:	b108      	cbz	r0, 80012d6 <MX_ADC1_Init+0x5e>
  {
    Error_Handler();
 80012d2:	f000 faef 	bl	80018b4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80012d6:	2301      	movs	r3, #1
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012d8:	e9cd 3304 	strd	r3, r3, [sp, #16]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012dc:	480b      	ldr	r0, [pc, #44]	; (800130c <MX_ADC1_Init+0x94>)
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012de:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012e0:	a904      	add	r1, sp, #16
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80012e2:	e9cd 3306 	strd	r3, r3, [sp, #24]
  sConfig.Offset = 0;
 80012e6:	e9cd 3308 	strd	r3, r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012ea:	f001 f9fb 	bl	80026e4 <HAL_ADC_ConfigChannel>
 80012ee:	b108      	cbz	r0, 80012f4 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 80012f0:	f000 fae0 	bl	80018b4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80012f4:	2302      	movs	r3, #2
  sConfig.Rank = ADC_REGULAR_RANK_2;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012f6:	4805      	ldr	r0, [pc, #20]	; (800130c <MX_ADC1_Init+0x94>)
 80012f8:	a904      	add	r1, sp, #16
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80012fa:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012fe:	f001 f9f1 	bl	80026e4 <HAL_ADC_ConfigChannel>
 8001302:	b108      	cbz	r0, 8001308 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001304:	f000 fad6 	bl	80018b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001308:	b00a      	add	sp, #40	; 0x28
 800130a:	bd10      	pop	{r4, pc}
 800130c:	200000a8 	.word	0x200000a8

08001310 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001310:	b570      	push	{r4, r5, r6, lr}
 8001312:	4605      	mov	r5, r0
 8001314:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001316:	2214      	movs	r2, #20
 8001318:	2100      	movs	r1, #0
 800131a:	a803      	add	r0, sp, #12
 800131c:	f003 fd66 	bl	8004dec <memset>
  if(adcHandle->Instance==ADC1)
 8001320:	682b      	ldr	r3, [r5, #0]
 8001322:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001326:	d13f      	bne.n	80013a8 <HAL_ADC_MspInit+0x98>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001328:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 800132c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2600      	movs	r6, #0
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001332:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001334:	4c1d      	ldr	r4, [pc, #116]	; (80013ac <HAL_ADC_MspInit+0x9c>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001336:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800133a:	615a      	str	r2, [r3, #20]
 800133c:	695a      	ldr	r2, [r3, #20]
 800133e:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001342:	9201      	str	r2, [sp, #4]
 8001344:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001346:	695a      	ldr	r2, [r3, #20]
 8001348:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800134c:	615a      	str	r2, [r3, #20]
 800134e:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	9605      	str	r6, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001356:	9302      	str	r3, [sp, #8]
 8001358:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800135c:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001362:	e9cd 3303 	strd	r3, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001366:	f001 fd57 	bl	8002e18 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 800136a:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <HAL_ADC_MspInit+0xa0>)
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800136c:	60a6      	str	r6, [r4, #8]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800136e:	e9c4 3600 	strd	r3, r6, [r4]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001372:	2280      	movs	r2, #128	; 0x80
 8001374:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001378:	e9c4 2303 	strd	r2, r3, [r4, #12]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800137c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001380:	2320      	movs	r3, #32
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001382:	4620      	mov	r0, r4
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001384:	e9c4 1305 	strd	r1, r3, [r4, #20]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001388:	61e6      	str	r6, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800138a:	f001 fc71 	bl	8002c70 <HAL_DMA_Init>
 800138e:	b108      	cbz	r0, 8001394 <HAL_ADC_MspInit+0x84>
    {
      Error_Handler();
 8001390:	f000 fa90 	bl	80018b4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001394:	2200      	movs	r2, #0
 8001396:	2012      	movs	r0, #18
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001398:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800139a:	4611      	mov	r1, r2
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800139c:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800139e:	f001 fc11 	bl	8002bc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80013a2:	2012      	movs	r0, #18
 80013a4:	f001 fc40 	bl	8002c28 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80013a8:	b008      	add	sp, #32
 80013aa:	bd70      	pop	{r4, r5, r6, pc}
 80013ac:	200000f8 	.word	0x200000f8
 80013b0:	40020008 	.word	0x40020008

080013b4 <MX_CAN_Init>:
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80013b4:	480a      	ldr	r0, [pc, #40]	; (80013e0 <MX_CAN_Init+0x2c>)
  hcan.Init.Prescaler = 16;
 80013b6:	4a0b      	ldr	r2, [pc, #44]	; (80013e4 <MX_CAN_Init+0x30>)
{
 80013b8:	b508      	push	{r3, lr}
  hcan.Init.Prescaler = 16;
 80013ba:	2310      	movs	r3, #16
 80013bc:	e9c0 2300 	strd	r2, r3, [r0]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80013c0:	2300      	movs	r3, #0
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
  hcan.Init.TimeTriggeredMode = DISABLE;
 80013c2:	6183      	str	r3, [r0, #24]
  hcan.Init.AutoBusOff = DISABLE;
  hcan.Init.AutoWakeUp = DISABLE;
  hcan.Init.AutoRetransmission = DISABLE;
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80013c4:	8383      	strh	r3, [r0, #28]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80013c6:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80013ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hcan.Init.TransmitFifoPriority = DISABLE;
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80013ce:	f001 fb6b 	bl	8002aa8 <HAL_CAN_Init>
 80013d2:	b118      	cbz	r0, 80013dc <MX_CAN_Init+0x28>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80013d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80013d8:	f000 ba6c 	b.w	80018b4 <Error_Handler>
}
 80013dc:	bd08      	pop	{r3, pc}
 80013de:	bf00      	nop
 80013e0:	2000013c 	.word	0x2000013c
 80013e4:	40006400 	.word	0x40006400

080013e8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80013e8:	b510      	push	{r4, lr}
 80013ea:	4604      	mov	r4, r0
 80013ec:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ee:	2214      	movs	r2, #20
 80013f0:	2100      	movs	r1, #0
 80013f2:	a803      	add	r0, sp, #12
 80013f4:	f003 fcfa 	bl	8004dec <memset>
  if(canHandle->Instance==CAN)
 80013f8:	6822      	ldr	r2, [r4, #0]
 80013fa:	4b14      	ldr	r3, [pc, #80]	; (800144c <HAL_CAN_MspInit+0x64>)
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d123      	bne.n	8001448 <HAL_CAN_MspInit+0x60>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001400:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001404:	2100      	movs	r1, #0
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001406:	69da      	ldr	r2, [r3, #28]
 8001408:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800140c:	61da      	str	r2, [r3, #28]
 800140e:	69da      	ldr	r2, [r3, #28]
 8001410:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8001414:	9201      	str	r2, [sp, #4]
 8001416:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001418:	695a      	ldr	r2, [r3, #20]
 800141a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800141e:	615a      	str	r2, [r3, #20]
 8001420:	695b      	ldr	r3, [r3, #20]
 8001422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001426:	9302      	str	r3, [sp, #8]
 8001428:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142a:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 800142e:	2302      	movs	r3, #2
 8001430:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001434:	2303      	movs	r3, #3
 8001436:	e9cd 1305 	strd	r1, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 800143e:	2309      	movs	r3, #9
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001440:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001442:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001444:	f001 fce8 	bl	8002e18 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 8001448:	b008      	add	sp, #32
 800144a:	bd10      	pop	{r4, pc}
 800144c:	40006400 	.word	0x40006400

08001450 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001450:	4b12      	ldr	r3, [pc, #72]	; (800149c <MX_DMA_Init+0x4c>)
{
 8001452:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001454:	695a      	ldr	r2, [r3, #20]
 8001456:	f042 0201 	orr.w	r2, r2, #1
 800145a:	615a      	str	r2, [r3, #20]
 800145c:	695b      	ldr	r3, [r3, #20]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800145e:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001460:	f003 0301 	and.w	r3, r3, #1
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001464:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001466:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001468:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 800146a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800146c:	f001 fbaa 	bl	8002bc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001470:	200b      	movs	r0, #11
 8001472:	f001 fbd9 	bl	8002c28 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001476:	2200      	movs	r2, #0
 8001478:	4611      	mov	r1, r2
 800147a:	200e      	movs	r0, #14
 800147c:	f001 fba2 	bl	8002bc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001480:	200e      	movs	r0, #14
 8001482:	f001 fbd1 	bl	8002c28 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001486:	2200      	movs	r2, #0
 8001488:	4611      	mov	r1, r2
 800148a:	2011      	movs	r0, #17
 800148c:	f001 fb9a 	bl	8002bc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001490:	2011      	movs	r0, #17

}
 8001492:	b003      	add	sp, #12
 8001494:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001498:	f001 bbc6 	b.w	8002c28 <HAL_NVIC_EnableIRQ>
 800149c:	40021000 	.word	0x40021000

080014a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014a2:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a4:	2214      	movs	r2, #20
 80014a6:	2100      	movs	r1, #0
 80014a8:	a803      	add	r0, sp, #12
 80014aa:	f003 fc9f 	bl	8004dec <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014ae:	4b30      	ldr	r3, [pc, #192]	; (8001570 <MX_GPIO_Init+0xd0>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HX_PD_SCK_GPIO_Port, HX_PD_SCK_Pin, GPIO_PIN_RESET);
 80014b0:	4e30      	ldr	r6, [pc, #192]	; (8001574 <MX_GPIO_Init+0xd4>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014b2:	695a      	ldr	r2, [r3, #20]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CMES_ENA_Pin|M2_INB_Pin|M1_INB_Pin|M1_INA_Pin
                          |M1_ENA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M2_ENA_Pin|M2_INA_Pin, GPIO_PIN_RESET);
 80014b4:	4f30      	ldr	r7, [pc, #192]	; (8001578 <MX_GPIO_Init+0xd8>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014b6:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80014ba:	615a      	str	r2, [r3, #20]
 80014bc:	695a      	ldr	r2, [r3, #20]
 80014be:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80014c2:	9200      	str	r2, [sp, #0]
 80014c4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c6:	695a      	ldr	r2, [r3, #20]
 80014c8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80014cc:	615a      	str	r2, [r3, #20]
 80014ce:	695a      	ldr	r2, [r3, #20]
 80014d0:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80014d4:	9201      	str	r2, [sp, #4]
 80014d6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d8:	695a      	ldr	r2, [r3, #20]
 80014da:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80014de:	615a      	str	r2, [r3, #20]
 80014e0:	695b      	ldr	r3, [r3, #20]
 80014e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014e6:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(HX_PD_SCK_GPIO_Port, HX_PD_SCK_Pin, GPIO_PIN_RESET);
 80014e8:	4630      	mov	r0, r6
 80014ea:	2200      	movs	r2, #0
 80014ec:	2101      	movs	r1, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ee:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(HX_PD_SCK_GPIO_Port, HX_PD_SCK_Pin, GPIO_PIN_RESET);
 80014f0:	f001 fd52 	bl	8002f98 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, CMES_ENA_Pin|M2_INB_Pin|M1_INB_Pin|M1_INA_Pin
 80014f4:	2200      	movs	r2, #0
 80014f6:	f240 7114 	movw	r1, #1812	; 0x714
 80014fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014fe:	f001 fd4b 	bl	8002f98 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, M2_ENA_Pin|M2_INA_Pin, GPIO_PIN_RESET);
 8001502:	2200      	movs	r2, #0
 8001504:	4638      	mov	r0, r7
 8001506:	2103      	movs	r1, #3
 8001508:	f001 fd46 	bl	8002f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HX_PD_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = HX_PD_SCK_Pin;
 800150e:	2501      	movs	r5, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(HX_PD_SCK_GPIO_Port, &GPIO_InitStruct);
 8001510:	a903      	add	r1, sp, #12
 8001512:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001514:	e9cd 5503 	strd	r5, r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001518:	e9cd 4405 	strd	r4, r4, [sp, #20]
  HAL_GPIO_Init(HX_PD_SCK_GPIO_Port, &GPIO_InitStruct);
 800151c:	f001 fc7c 	bl	8002e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HX_DOUT_Pin;
 8001520:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(HX_DOUT_GPIO_Port, &GPIO_InitStruct);
 8001522:	a903      	add	r1, sp, #12
 8001524:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001526:	e9cd 3403 	strd	r3, r4, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(HX_DOUT_GPIO_Port, &GPIO_InitStruct);
 800152c:	f001 fc74 	bl	8002e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = CMES_ENA_Pin|M2_INB_Pin|M1_INB_Pin|M1_INA_Pin
 8001530:	f240 7314 	movw	r3, #1812	; 0x714
                          |M1_ENA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001534:	a903      	add	r1, sp, #12
 8001536:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800153a:	e9cd 3503 	strd	r3, r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153e:	e9cd 4405 	strd	r4, r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001542:	f001 fc69 	bl	8002e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_SW_Pin;
 8001546:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(ENC_SW_GPIO_Port, &GPIO_InitStruct);
 8001548:	a903      	add	r1, sp, #12
 800154a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800154e:	e9cd 3403 	strd	r3, r4, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001552:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(ENC_SW_GPIO_Port, &GPIO_InitStruct);
 8001554:	f001 fc60 	bl	8002e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = M2_ENA_Pin|M2_INA_Pin;
 8001558:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800155a:	a903      	add	r1, sp, #12
 800155c:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155e:	e9cd 3503 	strd	r3, r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001562:	e9cd 4405 	strd	r4, r4, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001566:	f001 fc57 	bl	8002e18 <HAL_GPIO_Init>

}
 800156a:	b009      	add	sp, #36	; 0x24
 800156c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800156e:	bf00      	nop
 8001570:	40021000 	.word	0x40021000
 8001574:	48001400 	.word	0x48001400
 8001578:	48000400 	.word	0x48000400

0800157c <MX_I2C1_Init>:
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800157c:	4812      	ldr	r0, [pc, #72]	; (80015c8 <MX_I2C1_Init+0x4c>)
  hi2c1.Init.Timing = 0x0000020B;
 800157e:	4a13      	ldr	r2, [pc, #76]	; (80015cc <MX_I2C1_Init+0x50>)
{
 8001580:	b508      	push	{r3, lr}
  hi2c1.Init.Timing = 0x0000020B;
 8001582:	f240 230b 	movw	r3, #523	; 0x20b
 8001586:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800158a:	2300      	movs	r3, #0
 800158c:	2201      	movs	r2, #1
 800158e:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
 8001592:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001596:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800159a:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800159c:	f001 fd30 	bl	8003000 <HAL_I2C_Init>
 80015a0:	b108      	cbz	r0, 80015a6 <MX_I2C1_Init+0x2a>
  {
    Error_Handler();
 80015a2:	f000 f987 	bl	80018b4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015a6:	4808      	ldr	r0, [pc, #32]	; (80015c8 <MX_I2C1_Init+0x4c>)
 80015a8:	2100      	movs	r1, #0
 80015aa:	f002 f811 	bl	80035d0 <HAL_I2CEx_ConfigAnalogFilter>
 80015ae:	b108      	cbz	r0, 80015b4 <MX_I2C1_Init+0x38>
  {
    Error_Handler();
 80015b0:	f000 f980 	bl	80018b4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80015b4:	4804      	ldr	r0, [pc, #16]	; (80015c8 <MX_I2C1_Init+0x4c>)
 80015b6:	2100      	movs	r1, #0
 80015b8:	f002 f830 	bl	800361c <HAL_I2CEx_ConfigDigitalFilter>
 80015bc:	b118      	cbz	r0, 80015c6 <MX_I2C1_Init+0x4a>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80015c2:	f000 b977 	b.w	80018b4 <Error_Handler>
}
 80015c6:	bd08      	pop	{r3, pc}
 80015c8:	200001a8 	.word	0x200001a8
 80015cc:	40005400 	.word	0x40005400

080015d0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80015d0:	b530      	push	{r4, r5, lr}
 80015d2:	4605      	mov	r5, r0
 80015d4:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d6:	2214      	movs	r2, #20
 80015d8:	2100      	movs	r1, #0
 80015da:	a803      	add	r0, sp, #12
 80015dc:	f003 fc06 	bl	8004dec <memset>
  if(i2cHandle->Instance==I2C1)
 80015e0:	682a      	ldr	r2, [r5, #0]
 80015e2:	4b29      	ldr	r3, [pc, #164]	; (8001688 <HAL_I2C_MspInit+0xb8>)
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d14c      	bne.n	8001682 <HAL_I2C_MspInit+0xb2>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e8:	4c28      	ldr	r4, [pc, #160]	; (800168c <HAL_I2C_MspInit+0xbc>)
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ea:	4829      	ldr	r0, [pc, #164]	; (8001690 <HAL_I2C_MspInit+0xc0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ec:	6963      	ldr	r3, [r4, #20]
 80015ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015f2:	6163      	str	r3, [r4, #20]
 80015f4:	6963      	ldr	r3, [r4, #20]
 80015f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015fa:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015fc:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fe:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001600:	2312      	movs	r3, #18
 8001602:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001606:	2101      	movs	r1, #1
 8001608:	2303      	movs	r3, #3
 800160a:	e9cd 1305 	strd	r1, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800160e:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001610:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001612:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001614:	f001 fc00 	bl	8002e18 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001618:	69e3      	ldr	r3, [r4, #28]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel4;
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800161a:	481e      	ldr	r0, [pc, #120]	; (8001694 <HAL_I2C_MspInit+0xc4>)
    __HAL_RCC_I2C1_CLK_ENABLE();
 800161c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001620:	61e3      	str	r3, [r4, #28]
 8001622:	69e3      	ldr	r3, [r4, #28]
    hdma_i2c1_tx.Instance = DMA1_Channel4;
 8001624:	4c1c      	ldr	r4, [pc, #112]	; (8001698 <HAL_I2C_MspInit+0xc8>)
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001626:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800162a:	9302      	str	r3, [sp, #8]
 800162c:	9b02      	ldr	r3, [sp, #8]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800162e:	2310      	movs	r3, #16
 8001630:	e9c4 0300 	strd	r0, r3, [r4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001634:	2280      	movs	r2, #128	; 0x80
 8001636:	2300      	movs	r3, #0
 8001638:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800163c:	e9c4 3304 	strd	r3, r3, [r4, #16]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001640:	61a3      	str	r3, [r4, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001642:	4620      	mov	r0, r4
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001644:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001648:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800164a:	f001 fb11 	bl	8002c70 <HAL_DMA_Init>
 800164e:	b108      	cbz	r0, 8001654 <HAL_I2C_MspInit+0x84>
    {
      Error_Handler();
 8001650:	f000 f930 	bl	80018b4 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_I2C1_TX_DMA1_CH4);
 8001654:	4a11      	ldr	r2, [pc, #68]	; (800169c <HAL_I2C_MspInit+0xcc>)
 8001656:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001658:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800165c:	6513      	str	r3, [r2, #80]	; 0x50

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800165e:	2200      	movs	r2, #0
 8001660:	4611      	mov	r1, r2
 8001662:	201f      	movs	r0, #31
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8001664:	63ac      	str	r4, [r5, #56]	; 0x38
 8001666:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001668:	f001 faac 	bl	8002bc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800166c:	201f      	movs	r0, #31
 800166e:	f001 fadb 	bl	8002c28 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001672:	2200      	movs	r2, #0
 8001674:	2020      	movs	r0, #32
 8001676:	4611      	mov	r1, r2
 8001678:	f001 faa4 	bl	8002bc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800167c:	2020      	movs	r0, #32
 800167e:	f001 fad3 	bl	8002c28 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001682:	b009      	add	sp, #36	; 0x24
 8001684:	bd30      	pop	{r4, r5, pc}
 8001686:	bf00      	nop
 8001688:	40005400 	.word	0x40005400
 800168c:	40021000 	.word	0x40021000
 8001690:	48000400 	.word	0x48000400
 8001694:	40020044 	.word	0x40020044
 8001698:	20000164 	.word	0x20000164
 800169c:	40010000 	.word	0x40010000

080016a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016a0:	b500      	push	{lr}
 80016a2:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016a4:	2218      	movs	r2, #24
 80016a6:	2100      	movs	r1, #0
 80016a8:	a80d      	add	r0, sp, #52	; 0x34
 80016aa:	f003 fb9f 	bl	8004dec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016ae:	2214      	movs	r2, #20
 80016b0:	2100      	movs	r1, #0
 80016b2:	a801      	add	r0, sp, #4
 80016b4:	f003 fb9a 	bl	8004dec <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016b8:	2218      	movs	r2, #24
 80016ba:	2100      	movs	r1, #0
 80016bc:	eb0d 0002 	add.w	r0, sp, r2
 80016c0:	f003 fb94 	bl	8004dec <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016c4:	2302      	movs	r3, #2
 80016c6:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016c8:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80016ca:	2000      	movs	r0, #0
 80016cc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016d0:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80016d2:	e9cd 0314 	strd	r0, r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016d6:	2210      	movs	r2, #16
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016d8:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016da:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016de:	f001 ffc3 	bl	8003668 <HAL_RCC_OscConfig>
 80016e2:	4601      	mov	r1, r0
 80016e4:	b108      	cbz	r0, 80016ea <SystemClock_Config+0x4a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016e6:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016e8:	e7fe      	b.n	80016e8 <SystemClock_Config+0x48>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016ea:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80016ec:	e9cd 3001 	strd	r3, r0, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016f0:	e9cd 0003 	strd	r0, r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016f4:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80016f6:	a801      	add	r0, sp, #4
 80016f8:	f002 fa6c 	bl	8003bd4 <HAL_RCC_ClockConfig>
 80016fc:	b108      	cbz	r0, 8001702 <SystemClock_Config+0x62>
 80016fe:	b672      	cpsid	i
  while (1)
 8001700:	e7fe      	b.n	8001700 <SystemClock_Config+0x60>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC12;
 8001702:	23a0      	movs	r3, #160	; 0xa0
 8001704:	9306      	str	r3, [sp, #24]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV32;
 8001706:	f44f 73c0 	mov.w	r3, #384	; 0x180
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800170a:	e9cd 0309 	strd	r0, r3, [sp, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800170e:	a806      	add	r0, sp, #24
 8001710:	f002 fb3c 	bl	8003d8c <HAL_RCCEx_PeriphCLKConfig>
 8001714:	b108      	cbz	r0, 800171a <SystemClock_Config+0x7a>
 8001716:	b672      	cpsid	i
  while (1)
 8001718:	e7fe      	b.n	8001718 <SystemClock_Config+0x78>
}
 800171a:	b017      	add	sp, #92	; 0x5c
 800171c:	f85d fb04 	ldr.w	pc, [sp], #4

08001720 <main>:
{
 8001720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_Init();
 8001724:	f000 fbfc 	bl	8001f20 <HAL_Init>
  SystemClock_Config();
 8001728:	f7ff ffba 	bl	80016a0 <SystemClock_Config>
  HAL_Delay(500);
 800172c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001730:	f000 fc1a 	bl	8001f68 <HAL_Delay>
  MX_GPIO_Init();
 8001734:	f7ff feb4 	bl	80014a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001738:	f7ff fe8a 	bl	8001450 <MX_DMA_Init>
  MX_I2C1_Init();
 800173c:	f7ff ff1e 	bl	800157c <MX_I2C1_Init>
  MX_TIM3_Init();
 8001740:	f000 f974 	bl	8001a2c <MX_TIM3_Init>
  MX_ADC1_Init();
 8001744:	f7ff fd98 	bl	8001278 <MX_ADC1_Init>
  MX_CAN_Init();
 8001748:	f7ff fe34 	bl	80013b4 <MX_CAN_Init>
  MX_USART2_UART_Init();
 800174c:	f000 fb48 	bl	8001de0 <MX_USART2_UART_Init>
  MX_TIM17_Init();
 8001750:	f000 faf4 	bl	8001d3c <MX_TIM17_Init>
  MX_TIM2_Init();
 8001754:	f000 faa0 	bl	8001c98 <MX_TIM2_Init>
  MX_TIM6_Init();
 8001758:	f000 f99e 	bl	8001a98 <MX_TIM6_Init>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800175c:	213c      	movs	r1, #60	; 0x3c
 800175e:	482c      	ldr	r0, [pc, #176]	; (8001810 <main+0xf0>)
 8001760:	f002 fd01 	bl	8004166 <HAL_TIM_Encoder_Start>
  HAL_ADCEx_Calibration_Start(&hadc1,ADC_SINGLE_ENDED);
 8001764:	482b      	ldr	r0, [pc, #172]	; (8001814 <main+0xf4>)
 8001766:	2100      	movs	r1, #0
 8001768:	f000 fe34 	bl	80023d4 <HAL_ADCEx_Calibration_Start>
	while (HAL_IS_BIT_SET(HAL_ADC_GetState(&hadc1), HAL_ADC_STATE_BUSY_INTERNAL)){
 800176c:	4829      	ldr	r0, [pc, #164]	; (8001814 <main+0xf4>)
 800176e:	f000 fc13 	bl	8001f98 <HAL_ADC_GetState>
 8001772:	0783      	lsls	r3, r0, #30
 8001774:	d448      	bmi.n	8001808 <main+0xe8>
	HAL_ADC_Start_DMA(&hadc1,adc_dma_buffer,2);
 8001776:	2202      	movs	r2, #2
 8001778:	4927      	ldr	r1, [pc, #156]	; (8001818 <main+0xf8>)
 800177a:	4826      	ldr	r0, [pc, #152]	; (8001814 <main+0xf4>)
	  cur=VNH_GetCurValue(&hVNH2);
 800177c:	4e27      	ldr	r6, [pc, #156]	; (800181c <main+0xfc>)
 800177e:	4f28      	ldr	r7, [pc, #160]	; (8001820 <main+0x100>)
	  pid1_setpoint= htim3.Instance->CNT;
 8001780:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8001810 <main+0xf0>
	HAL_ADC_Start_DMA(&hadc1,adc_dma_buffer,2);
 8001784:	f000 fd9e 	bl	80022c4 <HAL_ADC_Start_DMA>
	Motors_Init();
 8001788:	f7ff fbbe 	bl	8000f08 <Motors_Init>
	def_pid_1();
 800178c:	f000 f894 	bl	80018b8 <def_pid_1>
	def_pid_2();
 8001790:	f000 f8c8 	bl	8001924 <def_pid_2>
	pid_Enable(&PIDh1);
 8001794:	4823      	ldr	r0, [pc, #140]	; (8001824 <main+0x104>)
 8001796:	f7ff fbb3 	bl	8000f00 <pid_Enable>
	pid_Enable(&PIDh2);
 800179a:	4823      	ldr	r0, [pc, #140]	; (8001828 <main+0x108>)
 800179c:	f7ff fbb0 	bl	8000f00 <pid_Enable>
	HAL_TIM_Base_Start_IT(&htim6);
 80017a0:	4822      	ldr	r0, [pc, #136]	; (800182c <main+0x10c>)
 80017a2:	f002 fcb1 	bl	8004108 <HAL_TIM_Base_Start_IT>
	VNH_SetDir(&hVNH1,dir_HL);
 80017a6:	2101      	movs	r1, #1
 80017a8:	4821      	ldr	r0, [pc, #132]	; (8001830 <main+0x110>)
 80017aa:	f7ff fc4e 	bl	800104a <VNH_SetDir>
	VNH_Enable(&hVNH1);
 80017ae:	4820      	ldr	r0, [pc, #128]	; (8001830 <main+0x110>)
 80017b0:	f7ff fc6b 	bl	800108a <VNH_Enable>
	VNH_EnableCurSens(&hVNH1);
 80017b4:	481e      	ldr	r0, [pc, #120]	; (8001830 <main+0x110>)
 80017b6:	f7ff fcc8 	bl	800114a <VNH_EnableCurSens>
	VNH_SetDir(&hVNH2,dir_HL);
 80017ba:	2101      	movs	r1, #1
 80017bc:	4817      	ldr	r0, [pc, #92]	; (800181c <main+0xfc>)
 80017be:	f7ff fc44 	bl	800104a <VNH_SetDir>
	VNH_Enable(&hVNH2);
 80017c2:	4816      	ldr	r0, [pc, #88]	; (800181c <main+0xfc>)
 80017c4:	f7ff fc61 	bl	800108a <VNH_Enable>
	VNH_EnableCurSens(&hVNH2);
 80017c8:	4814      	ldr	r0, [pc, #80]	; (800181c <main+0xfc>)
 80017ca:	f7ff fcbe 	bl	800114a <VNH_EnableCurSens>
{
 80017ce:	2465      	movs	r4, #101	; 0x65
	  cur=VNH_GetCurValue(&hVNH2);
 80017d0:	4812      	ldr	r0, [pc, #72]	; (800181c <main+0xfc>)
 80017d2:	f7ff fd21 	bl	8001218 <VNH_GetCurValue>
	  pid1_setpoint= htim3.Instance->CNT;
 80017d6:	f8d8 5000 	ldr.w	r5, [r8]
	  cur=VNH_GetCurValue(&hVNH2);
 80017da:	6038      	str	r0, [r7, #0]
	  pid1_setpoint= htim3.Instance->CNT;
 80017dc:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80017de:	f7ff f8df 	bl	80009a0 <__aeabi_ui2f>
 80017e2:	4b14      	ldr	r3, [pc, #80]	; (8001834 <main+0x114>)
 80017e4:	6018      	str	r0, [r3, #0]
	  pid2_setpoint= htim3.Instance->CNT;
 80017e6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80017e8:	f7ff f8da 	bl	80009a0 <__aeabi_ui2f>
 80017ec:	4b12      	ldr	r3, [pc, #72]	; (8001838 <main+0x118>)
 80017ee:	6018      	str	r0, [r3, #0]
	  HAL_Delay(100);
 80017f0:	2064      	movs	r0, #100	; 0x64
 80017f2:	f000 fbb9 	bl	8001f68 <HAL_Delay>
	  if (a>100){
 80017f6:	3c01      	subs	r4, #1
 80017f8:	d1ea      	bne.n	80017d0 <main+0xb0>
		 VNH_TogleDir(&hVNH1);
 80017fa:	480d      	ldr	r0, [pc, #52]	; (8001830 <main+0x110>)
 80017fc:	f7ff fc53 	bl	80010a6 <VNH_TogleDir>
		 VNH_TogleDir(&hVNH2);
 8001800:	4630      	mov	r0, r6
 8001802:	f7ff fc50 	bl	80010a6 <VNH_TogleDir>
 8001806:	e7e2      	b.n	80017ce <main+0xae>
		HAL_Delay(1);
 8001808:	2001      	movs	r0, #1
 800180a:	f000 fbad 	bl	8001f68 <HAL_Delay>
 800180e:	e7ad      	b.n	800176c <main+0x4c>
 8001810:	200002dc 	.word	0x200002dc
 8001814:	200000a8 	.word	0x200000a8
 8001818:	200000a0 	.word	0x200000a0
 800181c:	20000028 	.word	0x20000028
 8001820:	200001fc 	.word	0x200001fc
 8001824:	2000020c 	.word	0x2000020c
 8001828:	2000024c 	.word	0x2000024c
 800182c:	20000328 	.word	0x20000328
 8001830:	20000064 	.word	0x20000064
 8001834:	20000208 	.word	0x20000208
 8001838:	20000204 	.word	0x20000204

0800183c <HAL_TIM_PeriodElapsedCallback>:
	if (htim==&htim6){
 800183c:	4b18      	ldr	r3, [pc, #96]	; (80018a0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800183e:	4283      	cmp	r3, r0
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (htim==&htim6){
 8001844:	d129      	bne.n	800189a <HAL_TIM_PeriodElapsedCallback+0x5e>
		*PIDh1.input=(float)*hVNH1.CS_sig;
 8001846:	4f17      	ldr	r7, [pc, #92]	; (80018a4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001848:	4d17      	ldr	r5, [pc, #92]	; (80018a8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800184a:	6abb      	ldr	r3, [r7, #40]	; 0x28
		*PIDh2.input=(float)*hVNH2.CS_sig;
 800184c:	4e17      	ldr	r6, [pc, #92]	; (80018ac <HAL_TIM_PeriodElapsedCallback+0x70>)
		*PIDh1.input=(float)*hVNH1.CS_sig;
 800184e:	6818      	ldr	r0, [r3, #0]
 8001850:	682c      	ldr	r4, [r5, #0]
 8001852:	f7ff f8a5 	bl	80009a0 <__aeabi_ui2f>
		*PIDh2.input=(float)*hVNH2.CS_sig;
 8001856:	6ab3      	ldr	r3, [r6, #40]	; 0x28
		*PIDh1.input=(float)*hVNH1.CS_sig;
 8001858:	6020      	str	r0, [r4, #0]
		*PIDh2.input=(float)*hVNH2.CS_sig;
 800185a:	6818      	ldr	r0, [r3, #0]
 800185c:	4c14      	ldr	r4, [pc, #80]	; (80018b0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800185e:	f7ff f89f 	bl	80009a0 <__aeabi_ui2f>
 8001862:	f8d4 8000 	ldr.w	r8, [r4]
 8001866:	f8c8 0000 	str.w	r0, [r8]
		pid_compute(&PIDh1);
 800186a:	4628      	mov	r0, r5
 800186c:	f7ff faec 	bl	8000e48 <pid_compute>
		pid_compute(&PIDh2);
 8001870:	4620      	mov	r0, r4
 8001872:	f7ff fae9 	bl	8000e48 <pid_compute>
		VNH_SetPWM(&hVNH1,(float)*PIDh1.output);
 8001876:	686b      	ldr	r3, [r5, #4]
 8001878:	6818      	ldr	r0, [r3, #0]
 800187a:	f7ff faaf 	bl	8000ddc <__aeabi_f2uiz>
 800187e:	b2c1      	uxtb	r1, r0
 8001880:	4638      	mov	r0, r7
 8001882:	f7ff fc21 	bl	80010c8 <VNH_SetPWM>
		VNH_SetPWM(&hVNH2,(float)*PIDh2.output);
 8001886:	6863      	ldr	r3, [r4, #4]
 8001888:	6818      	ldr	r0, [r3, #0]
 800188a:	f7ff faa7 	bl	8000ddc <__aeabi_f2uiz>
 800188e:	b2c1      	uxtb	r1, r0
 8001890:	4630      	mov	r0, r6
}
 8001892:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		VNH_SetPWM(&hVNH2,(float)*PIDh2.output);
 8001896:	f7ff bc17 	b.w	80010c8 <VNH_SetPWM>
}
 800189a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800189e:	bf00      	nop
 80018a0:	20000328 	.word	0x20000328
 80018a4:	20000064 	.word	0x20000064
 80018a8:	2000020c 	.word	0x2000020c
 80018ac:	20000028 	.word	0x20000028
 80018b0:	2000024c 	.word	0x2000024c

080018b4 <Error_Handler>:
 80018b4:	b672      	cpsid	i
  while (1)
 80018b6:	e7fe      	b.n	80018b6 <Error_Handler+0x2>

080018b8 <def_pid_1>:
	float pid2_input;
	float pid2_output;
	float pid2_setpoint;
	PID_handler PIDh2;

void def_pid_1(){
 80018b8:	b510      	push	{r4, lr}
	Pid_Create(&PIDh1);
 80018ba:	4c0e      	ldr	r4, [pc, #56]	; (80018f4 <def_pid_1+0x3c>)
 80018bc:	4620      	mov	r0, r4
 80018be:	f7ff faad 	bl	8000e1c <Pid_Create>
	PIDh1.Kp=0.05;
 80018c2:	4b0d      	ldr	r3, [pc, #52]	; (80018f8 <def_pid_1+0x40>)
 80018c4:	60e3      	str	r3, [r4, #12]
	PIDh1.Ki=10;
 80018c6:	4b0d      	ldr	r3, [pc, #52]	; (80018fc <def_pid_1+0x44>)
 80018c8:	6123      	str	r3, [r4, #16]
	PIDh1.Kd=0.1;
 80018ca:	4b0d      	ldr	r3, [pc, #52]	; (8001900 <def_pid_1+0x48>)
 80018cc:	6163      	str	r3, [r4, #20]

	pid1_setpoint=800;
 80018ce:	4b0d      	ldr	r3, [pc, #52]	; (8001904 <def_pid_1+0x4c>)
 80018d0:	4a0d      	ldr	r2, [pc, #52]	; (8001908 <def_pid_1+0x50>)
 80018d2:	601a      	str	r2, [r3, #0]
	PIDh1.omin=0;
 80018d4:	2200      	movs	r2, #0
 80018d6:	61a2      	str	r2, [r4, #24]
	PIDh1.omax=100;
 80018d8:	4a0c      	ldr	r2, [pc, #48]	; (800190c <def_pid_1+0x54>)
 80018da:	61e2      	str	r2, [r4, #28]
	PIDh1.I_max=50;
 80018dc:	4a0c      	ldr	r2, [pc, #48]	; (8001910 <def_pid_1+0x58>)
 80018de:	62a2      	str	r2, [r4, #40]	; 0x28
	PIDh1.I_mini=-50;
 80018e0:	4a0c      	ldr	r2, [pc, #48]	; (8001914 <def_pid_1+0x5c>)
 80018e2:	62e2      	str	r2, [r4, #44]	; 0x2c

	PIDh1.sampletime=(float)1/1000;
 80018e4:	4a0c      	ldr	r2, [pc, #48]	; (8001918 <def_pid_1+0x60>)
 80018e6:	6362      	str	r2, [r4, #52]	; 0x34
	PIDh1.input=&pid1_input;
 80018e8:	4a0c      	ldr	r2, [pc, #48]	; (800191c <def_pid_1+0x64>)
 80018ea:	6022      	str	r2, [r4, #0]
	PIDh1.output=&pid1_output;
 80018ec:	4a0c      	ldr	r2, [pc, #48]	; (8001920 <def_pid_1+0x68>)
	PIDh1.setpoint=&pid1_setpoint;
 80018ee:	e9c4 2301 	strd	r2, r3, [r4, #4]

}
 80018f2:	bd10      	pop	{r4, pc}
 80018f4:	2000020c 	.word	0x2000020c
 80018f8:	3d4ccccd 	.word	0x3d4ccccd
 80018fc:	41200000 	.word	0x41200000
 8001900:	3dcccccd 	.word	0x3dcccccd
 8001904:	20000208 	.word	0x20000208
 8001908:	44480000 	.word	0x44480000
 800190c:	42c80000 	.word	0x42c80000
 8001910:	42480000 	.word	0x42480000
 8001914:	c2480000 	.word	0xc2480000
 8001918:	3a83126f 	.word	0x3a83126f
 800191c:	2000028c 	.word	0x2000028c
 8001920:	20000200 	.word	0x20000200

08001924 <def_pid_2>:

void def_pid_2(){
 8001924:	b510      	push	{r4, lr}
	Pid_Create(&PIDh2);
 8001926:	4c0e      	ldr	r4, [pc, #56]	; (8001960 <def_pid_2+0x3c>)
 8001928:	4620      	mov	r0, r4
 800192a:	f7ff fa77 	bl	8000e1c <Pid_Create>
	PIDh2.Kp=0.05;
 800192e:	4b0d      	ldr	r3, [pc, #52]	; (8001964 <def_pid_2+0x40>)
 8001930:	60e3      	str	r3, [r4, #12]
	PIDh2.Ki=10;
 8001932:	4b0d      	ldr	r3, [pc, #52]	; (8001968 <def_pid_2+0x44>)
 8001934:	6123      	str	r3, [r4, #16]
	PIDh2.Kd=0.1;
 8001936:	4b0d      	ldr	r3, [pc, #52]	; (800196c <def_pid_2+0x48>)
 8001938:	6163      	str	r3, [r4, #20]

	pid2_setpoint=800;
 800193a:	4b0d      	ldr	r3, [pc, #52]	; (8001970 <def_pid_2+0x4c>)
 800193c:	4a0d      	ldr	r2, [pc, #52]	; (8001974 <def_pid_2+0x50>)
 800193e:	601a      	str	r2, [r3, #0]
	PIDh2.omin=0;
 8001940:	2200      	movs	r2, #0
 8001942:	61a2      	str	r2, [r4, #24]
	PIDh2.omax=100;
 8001944:	4a0c      	ldr	r2, [pc, #48]	; (8001978 <def_pid_2+0x54>)
 8001946:	61e2      	str	r2, [r4, #28]
	PIDh2.I_max=50;
 8001948:	4a0c      	ldr	r2, [pc, #48]	; (800197c <def_pid_2+0x58>)
 800194a:	62a2      	str	r2, [r4, #40]	; 0x28
	PIDh2.I_mini=-50;
 800194c:	4a0c      	ldr	r2, [pc, #48]	; (8001980 <def_pid_2+0x5c>)
 800194e:	62e2      	str	r2, [r4, #44]	; 0x2c

	PIDh2.sampletime=(float)1/1000;
 8001950:	4a0c      	ldr	r2, [pc, #48]	; (8001984 <def_pid_2+0x60>)
 8001952:	6362      	str	r2, [r4, #52]	; 0x34
	PIDh2.input=&pid2_input;
 8001954:	4a0c      	ldr	r2, [pc, #48]	; (8001988 <def_pid_2+0x64>)
 8001956:	6022      	str	r2, [r4, #0]
	PIDh2.output=&pid2_output;
 8001958:	4a0c      	ldr	r2, [pc, #48]	; (800198c <def_pid_2+0x68>)
	PIDh2.setpoint=&pid2_setpoint;
 800195a:	e9c4 2301 	strd	r2, r3, [r4, #4]

}
 800195e:	bd10      	pop	{r4, pc}
 8001960:	2000024c 	.word	0x2000024c
 8001964:	3d4ccccd 	.word	0x3d4ccccd
 8001968:	41200000 	.word	0x41200000
 800196c:	3dcccccd 	.word	0x3dcccccd
 8001970:	20000204 	.word	0x20000204
 8001974:	44480000 	.word	0x44480000
 8001978:	42c80000 	.word	0x42c80000
 800197c:	42480000 	.word	0x42480000
 8001980:	c2480000 	.word	0xc2480000
 8001984:	3a83126f 	.word	0x3a83126f
 8001988:	20000288 	.word	0x20000288
 800198c:	20000248 	.word	0x20000248

08001990 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001990:	4b0a      	ldr	r3, [pc, #40]	; (80019bc <HAL_MspInit+0x2c>)
 8001992:	699a      	ldr	r2, [r3, #24]
 8001994:	f042 0201 	orr.w	r2, r2, #1
 8001998:	619a      	str	r2, [r3, #24]
 800199a:	699a      	ldr	r2, [r3, #24]
{
 800199c:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800199e:	f002 0201 	and.w	r2, r2, #1
 80019a2:	9200      	str	r2, [sp, #0]
 80019a4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019a6:	69da      	ldr	r2, [r3, #28]
 80019a8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80019ac:	61da      	str	r2, [r3, #28]
 80019ae:	69db      	ldr	r3, [r3, #28]
 80019b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b4:	9301      	str	r3, [sp, #4]
 80019b6:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019b8:	b002      	add	sp, #8
 80019ba:	4770      	bx	lr
 80019bc:	40021000 	.word	0x40021000

080019c0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019c0:	e7fe      	b.n	80019c0 <NMI_Handler>

080019c2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019c2:	e7fe      	b.n	80019c2 <HardFault_Handler>

080019c4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019c4:	e7fe      	b.n	80019c4 <MemManage_Handler>

080019c6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019c6:	e7fe      	b.n	80019c6 <BusFault_Handler>

080019c8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019c8:	e7fe      	b.n	80019c8 <UsageFault_Handler>

080019ca <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019ca:	4770      	bx	lr

080019cc <DebugMon_Handler>:
 80019cc:	4770      	bx	lr

080019ce <PendSV_Handler>:
 80019ce:	4770      	bx	lr

080019d0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019d0:	f000 bab8 	b.w	8001f44 <HAL_IncTick>

080019d4 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80019d4:	4801      	ldr	r0, [pc, #4]	; (80019dc <DMA1_Channel1_IRQHandler+0x8>)
 80019d6:	f001 b9d6 	b.w	8002d86 <HAL_DMA_IRQHandler>
 80019da:	bf00      	nop
 80019dc:	200000f8 	.word	0x200000f8

080019e0 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80019e0:	4801      	ldr	r0, [pc, #4]	; (80019e8 <DMA1_Channel4_IRQHandler+0x8>)
 80019e2:	f001 b9d0 	b.w	8002d86 <HAL_DMA_IRQHandler>
 80019e6:	bf00      	nop
 80019e8:	20000164 	.word	0x20000164

080019ec <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim17_ch1_up);
 80019ec:	4801      	ldr	r0, [pc, #4]	; (80019f4 <DMA1_Channel7_IRQHandler+0x8>)
 80019ee:	f001 b9ca 	b.w	8002d86 <HAL_DMA_IRQHandler>
 80019f2:	bf00      	nop
 80019f4:	200003c0 	.word	0x200003c0

080019f8 <ADC1_2_IRQHandler>:
void ADC1_2_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80019f8:	4801      	ldr	r0, [pc, #4]	; (8001a00 <ADC1_2_IRQHandler+0x8>)
 80019fa:	f000 bd35 	b.w	8002468 <HAL_ADC_IRQHandler>
 80019fe:	bf00      	nop
 8001a00:	200000a8 	.word	0x200000a8

08001a04 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001a04:	4801      	ldr	r0, [pc, #4]	; (8001a0c <I2C1_EV_IRQHandler+0x8>)
 8001a06:	f001 bb4c 	b.w	80030a2 <HAL_I2C_EV_IRQHandler>
 8001a0a:	bf00      	nop
 8001a0c:	200001a8 	.word	0x200001a8

08001a10 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001a10:	4801      	ldr	r0, [pc, #4]	; (8001a18 <I2C1_ER_IRQHandler+0x8>)
 8001a12:	f001 bda4 	b.w	800355e <HAL_I2C_ER_IRQHandler>
 8001a16:	bf00      	nop
 8001a18:	200001a8 	.word	0x200001a8

08001a1c <TIM6_DAC1_IRQHandler>:
void TIM6_DAC1_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a1c:	4801      	ldr	r0, [pc, #4]	; (8001a24 <TIM6_DAC1_IRQHandler+0x8>)
 8001a1e:	f002 bc01 	b.w	8004224 <HAL_TIM_IRQHandler>
 8001a22:	bf00      	nop
 8001a24:	20000328 	.word	0x20000328

08001a28 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a28:	4770      	bx	lr
	...

08001a2c <MX_TIM3_Init>:
  HAL_TIM_MspPostInit(&htim2);

}
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001a2c:	b510      	push	{r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a2e:	4818      	ldr	r0, [pc, #96]	; (8001a90 <MX_TIM3_Init+0x64>)
  htim3.Init.Prescaler = 4;
 8001a30:	4a18      	ldr	r2, [pc, #96]	; (8001a94 <MX_TIM3_Init+0x68>)
 8001a32:	2304      	movs	r3, #4
 8001a34:	e9c0 2300 	strd	r2, r3, [r0]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 65535;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001a38:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001a3c:	f44f 7300 	mov.w	r3, #512	; 0x200
{
 8001a40:	b08c      	sub	sp, #48	; 0x30
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a42:	2400      	movs	r4, #0
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001a44:	e9c0 1303 	strd	r1, r3, [r0, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC1Prescaler = TIM_ICPSC_DIV4;
 8001a48:	2208      	movs	r2, #8
 8001a4a:	2101      	movs	r1, #1
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a4c:	2303      	movs	r3, #3
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a4e:	e9cd 3403 	strd	r3, r4, [sp, #12]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV4;
 8001a52:	e9cd 1205 	strd	r1, r2, [sp, #20]
  sConfig.IC1Filter = 15;
 8001a56:	230f      	movs	r3, #15
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
 8001a58:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
  sConfig.IC2Filter = 15;
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001a5c:	a903      	add	r1, sp, #12
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a5e:	e9cd 4400 	strd	r4, r4, [sp]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a62:	e9cd 3407 	strd	r3, r4, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a66:	9402      	str	r4, [sp, #8]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a68:	6084      	str	r4, [r0, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a6a:	6184      	str	r4, [r0, #24]
  sConfig.IC2Filter = 15;
 8001a6c:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001a6e:	f002 fd33 	bl	80044d8 <HAL_TIM_Encoder_Init>
 8001a72:	b108      	cbz	r0, 8001a78 <MX_TIM3_Init+0x4c>
  {
    Error_Handler();
 8001a74:	f7ff ff1e 	bl	80018b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a78:	4805      	ldr	r0, [pc, #20]	; (8001a90 <MX_TIM3_Init+0x64>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a7a:	9400      	str	r4, [sp, #0]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a7c:	4669      	mov	r1, sp
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a7e:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a80:	f002 ff6c 	bl	800495c <HAL_TIMEx_MasterConfigSynchronization>
 8001a84:	b108      	cbz	r0, 8001a8a <MX_TIM3_Init+0x5e>
  {
    Error_Handler();
 8001a86:	f7ff ff15 	bl	80018b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a8a:	b00c      	add	sp, #48	; 0x30
 8001a8c:	bd10      	pop	{r4, pc}
 8001a8e:	bf00      	nop
 8001a90:	200002dc 	.word	0x200002dc
 8001a94:	40000400 	.word	0x40000400

08001a98 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001a98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001a9a:	480e      	ldr	r0, [pc, #56]	; (8001ad4 <MX_TIM6_Init+0x3c>)
 8001a9c:	4b0e      	ldr	r3, [pc, #56]	; (8001ad8 <MX_TIM6_Init+0x40>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a9e:	2400      	movs	r4, #0
  htim6.Init.Prescaler = 0;
 8001aa0:	e9c0 3400 	strd	r3, r4, [r0]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.Period = 8000;
 8001aa4:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aa8:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8001aac:	9403      	str	r4, [sp, #12]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aae:	6084      	str	r4, [r0, #8]
  htim6.Init.Period = 8000;
 8001ab0:	60c3      	str	r3, [r0, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ab2:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001ab4:	f002 fcb0 	bl	8004418 <HAL_TIM_Base_Init>
 8001ab8:	b108      	cbz	r0, 8001abe <MX_TIM6_Init+0x26>
  {
    Error_Handler();
 8001aba:	f7ff fefb 	bl	80018b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001abe:	4805      	ldr	r0, [pc, #20]	; (8001ad4 <MX_TIM6_Init+0x3c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ac0:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001ac2:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ac4:	9403      	str	r4, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001ac6:	f002 ff49 	bl	800495c <HAL_TIMEx_MasterConfigSynchronization>
 8001aca:	b108      	cbz	r0, 8001ad0 <MX_TIM6_Init+0x38>
  {
    Error_Handler();
 8001acc:	f7ff fef2 	bl	80018b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001ad0:	b004      	add	sp, #16
 8001ad2:	bd10      	pop	{r4, pc}
 8001ad4:	20000328 	.word	0x20000328
 8001ad8:	40001000 	.word	0x40001000

08001adc <HAL_TIM_Base_MspInit>:
  HAL_TIM_MspPostInit(&htim17);

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001adc:	b530      	push	{r4, r5, lr}

  if(tim_baseHandle->Instance==TIM2)
 8001ade:	6803      	ldr	r3, [r0, #0]
 8001ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 8001ae4:	b085      	sub	sp, #20
 8001ae6:	4605      	mov	r5, r0
  if(tim_baseHandle->Instance==TIM2)
 8001ae8:	d10c      	bne.n	8001b04 <HAL_TIM_Base_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001aea:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001aee:	69da      	ldr	r2, [r3, #28]
 8001af0:	f042 0201 	orr.w	r2, r2, #1
 8001af4:	61da      	str	r2, [r3, #28]
 8001af6:	69db      	ldr	r3, [r3, #28]
 8001af8:	f003 0301 	and.w	r3, r3, #1
 8001afc:	9301      	str	r3, [sp, #4]
 8001afe:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8001b00:	b005      	add	sp, #20
 8001b02:	bd30      	pop	{r4, r5, pc}
  else if(tim_baseHandle->Instance==TIM6)
 8001b04:	4a22      	ldr	r2, [pc, #136]	; (8001b90 <HAL_TIM_Base_MspInit+0xb4>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d114      	bne.n	8001b34 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001b0a:	4b22      	ldr	r3, [pc, #136]	; (8001b94 <HAL_TIM_Base_MspInit+0xb8>)
 8001b0c:	69da      	ldr	r2, [r3, #28]
 8001b0e:	f042 0210 	orr.w	r2, r2, #16
 8001b12:	61da      	str	r2, [r3, #28]
 8001b14:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 8001b16:	2200      	movs	r2, #0
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001b18:	f003 0310 	and.w	r3, r3, #16
 8001b1c:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 8001b1e:	4611      	mov	r1, r2
 8001b20:	2036      	movs	r0, #54	; 0x36
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001b22:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 8001b24:	f001 f84e 	bl	8002bc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8001b28:	2036      	movs	r0, #54	; 0x36
}
 8001b2a:	b005      	add	sp, #20
 8001b2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8001b30:	f001 b87a 	b.w	8002c28 <HAL_NVIC_EnableIRQ>
  else if(tim_baseHandle->Instance==TIM17)
 8001b34:	4a18      	ldr	r2, [pc, #96]	; (8001b98 <HAL_TIM_Base_MspInit+0xbc>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d1e2      	bne.n	8001b00 <HAL_TIM_Base_MspInit+0x24>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001b3a:	4b16      	ldr	r3, [pc, #88]	; (8001b94 <HAL_TIM_Base_MspInit+0xb8>)
    hdma_tim17_ch1_up.Instance = DMA1_Channel7;
 8001b3c:	4c17      	ldr	r4, [pc, #92]	; (8001b9c <HAL_TIM_Base_MspInit+0xc0>)
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001b3e:	699a      	ldr	r2, [r3, #24]
 8001b40:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001b44:	619a      	str	r2, [r3, #24]
 8001b46:	699b      	ldr	r3, [r3, #24]
    hdma_tim17_ch1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b48:	4a15      	ldr	r2, [pc, #84]	; (8001ba0 <HAL_TIM_Base_MspInit+0xc4>)
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001b4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b4e:	9303      	str	r3, [sp, #12]
 8001b50:	9b03      	ldr	r3, [sp, #12]
    hdma_tim17_ch1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b52:	2310      	movs	r3, #16
 8001b54:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_tim17_ch1_up.Init.MemInc = DMA_MINC_ENABLE;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	2280      	movs	r2, #128	; 0x80
 8001b5c:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hdma_tim17_ch1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b64:	f44f 6280 	mov.w	r2, #1024	; 0x400
    if (HAL_DMA_Init(&hdma_tim17_ch1_up) != HAL_OK)
 8001b68:	4620      	mov	r0, r4
    hdma_tim17_ch1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b6a:	e9c4 1204 	strd	r1, r2, [r4, #16]
    hdma_tim17_ch1_up.Init.Priority = DMA_PRIORITY_LOW;
 8001b6e:	e9c4 3306 	strd	r3, r3, [r4, #24]
    if (HAL_DMA_Init(&hdma_tim17_ch1_up) != HAL_OK)
 8001b72:	f001 f87d 	bl	8002c70 <HAL_DMA_Init>
 8001b76:	b108      	cbz	r0, 8001b7c <HAL_TIM_Base_MspInit+0xa0>
      Error_Handler();
 8001b78:	f7ff fe9c 	bl	80018b4 <Error_Handler>
    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM17_DMA1_CH7);
 8001b7c:	4a09      	ldr	r2, [pc, #36]	; (8001ba4 <HAL_TIM_Base_MspInit+0xc8>)
 8001b7e:	6813      	ldr	r3, [r2, #0]
 8001b80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b84:	6013      	str	r3, [r2, #0]
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim17_ch1_up);
 8001b86:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8001b8a:	6265      	str	r5, [r4, #36]	; 0x24
}
 8001b8c:	e7b8      	b.n	8001b00 <HAL_TIM_Base_MspInit+0x24>
 8001b8e:	bf00      	nop
 8001b90:	40001000 	.word	0x40001000
 8001b94:	40021000 	.word	0x40021000
 8001b98:	40014800 	.word	0x40014800
 8001b9c:	200003c0 	.word	0x200003c0
 8001ba0:	40020080 	.word	0x40020080
 8001ba4:	40010000 	.word	0x40010000

08001ba8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001ba8:	b510      	push	{r4, lr}
 8001baa:	4604      	mov	r4, r0
 8001bac:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bae:	2214      	movs	r2, #20
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	a803      	add	r0, sp, #12
 8001bb4:	f003 f91a 	bl	8004dec <memset>
  if(tim_encoderHandle->Instance==TIM3)
 8001bb8:	6822      	ldr	r2, [r4, #0]
 8001bba:	4b13      	ldr	r3, [pc, #76]	; (8001c08 <HAL_TIM_Encoder_MspInit+0x60>)
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d120      	bne.n	8001c02 <HAL_TIM_Encoder_MspInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bc0:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
    GPIO_InitStruct.Pin = ENC_B_Pin|ENC_A_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc4:	a903      	add	r1, sp, #12
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bc6:	69da      	ldr	r2, [r3, #28]
 8001bc8:	f042 0202 	orr.w	r2, r2, #2
 8001bcc:	61da      	str	r2, [r3, #28]
 8001bce:	69da      	ldr	r2, [r3, #28]
 8001bd0:	f002 0202 	and.w	r2, r2, #2
 8001bd4:	9201      	str	r2, [sp, #4]
 8001bd6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd8:	695a      	ldr	r2, [r3, #20]
 8001bda:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001bde:	615a      	str	r2, [r3, #20]
 8001be0:	695b      	ldr	r3, [r3, #20]
 8001be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be8:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bea:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bec:	2302      	movs	r3, #2
 8001bee:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf6:	2200      	movs	r2, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf8:	e9cd 2205 	strd	r2, r2, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001bfc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bfe:	f001 f90b 	bl	8002e18 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001c02:	b008      	add	sp, #32
 8001c04:	bd10      	pop	{r4, pc}
 8001c06:	bf00      	nop
 8001c08:	40000400 	.word	0x40000400

08001c0c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001c0c:	b510      	push	{r4, lr}
 8001c0e:	4604      	mov	r4, r0
 8001c10:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c12:	2214      	movs	r2, #20
 8001c14:	2100      	movs	r1, #0
 8001c16:	a803      	add	r0, sp, #12
 8001c18:	f003 f8e8 	bl	8004dec <memset>
  if(timHandle->Instance==TIM2)
 8001c1c:	6823      	ldr	r3, [r4, #0]
 8001c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c22:	d11a      	bne.n	8001c5a <HAL_TIM_MspPostInit+0x4e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c24:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = M2_PWM_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c28:	2108      	movs	r1, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c2a:	695a      	ldr	r2, [r3, #20]
 8001c2c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001c30:	615a      	str	r2, [r3, #20]
 8001c32:	695b      	ldr	r3, [r3, #20]
 8001c34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c38:	9301      	str	r3, [sp, #4]
 8001c3a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	e9cd 1303 	strd	r1, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c42:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c44:	e9cd 3305 	strd	r3, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(M2_PWM_GPIO_Port, &GPIO_InitStruct);
 8001c4c:	a903      	add	r1, sp, #12
 8001c4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_PWM_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
    HAL_GPIO_Init(M1_PWM_GPIO_Port, &GPIO_InitStruct);
 8001c52:	f001 f8e1 	bl	8002e18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8001c56:	b008      	add	sp, #32
 8001c58:	bd10      	pop	{r4, pc}
  else if(timHandle->Instance==TIM17)
 8001c5a:	4a0c      	ldr	r2, [pc, #48]	; (8001c8c <HAL_TIM_MspPostInit+0x80>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d1fa      	bne.n	8001c56 <HAL_TIM_MspPostInit+0x4a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c60:	4b0b      	ldr	r3, [pc, #44]	; (8001c90 <HAL_TIM_MspPostInit+0x84>)
    HAL_GPIO_Init(M1_PWM_GPIO_Port, &GPIO_InitStruct);
 8001c62:	480c      	ldr	r0, [pc, #48]	; (8001c94 <HAL_TIM_MspPostInit+0x88>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c64:	695a      	ldr	r2, [r3, #20]
 8001c66:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001c6a:	615a      	str	r2, [r3, #20]
 8001c6c:	695b      	ldr	r3, [r3, #20]
 8001c6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c72:	9302      	str	r3, [sp, #8]
 8001c74:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c76:	2220      	movs	r2, #32
 8001c78:	2302      	movs	r3, #2
 8001c7a:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7e:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c80:	e9cd 3305 	strd	r3, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 8001c84:	230a      	movs	r3, #10
 8001c86:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(M1_PWM_GPIO_Port, &GPIO_InitStruct);
 8001c88:	a903      	add	r1, sp, #12
 8001c8a:	e7e2      	b.n	8001c52 <HAL_TIM_MspPostInit+0x46>
 8001c8c:	40014800 	.word	0x40014800
 8001c90:	40021000 	.word	0x40021000
 8001c94:	48000400 	.word	0x48000400

08001c98 <MX_TIM2_Init>:
{
 8001c98:	b510      	push	{r4, lr}
 8001c9a:	b08e      	sub	sp, #56	; 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c9c:	2210      	movs	r2, #16
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	a803      	add	r0, sp, #12
 8001ca2:	f003 f8a3 	bl	8004dec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ca6:	2400      	movs	r4, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ca8:	221c      	movs	r2, #28
 8001caa:	4621      	mov	r1, r4
 8001cac:	eb0d 0002 	add.w	r0, sp, r2
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cb0:	e9cd 4400 	strd	r4, r4, [sp]
 8001cb4:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cb6:	f003 f899 	bl	8004dec <memset>
  htim2.Instance = TIM2;
 8001cba:	481f      	ldr	r0, [pc, #124]	; (8001d38 <MX_TIM2_Init+0xa0>)
 8001cbc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  htim2.Init.Prescaler = 0;
 8001cc0:	e9c0 3400 	strd	r3, r4, [r0]
  htim2.Init.Period = 0xff;
 8001cc4:	23ff      	movs	r3, #255	; 0xff
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cc6:	e9c0 3403 	strd	r3, r4, [r0, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cca:	6084      	str	r4, [r0, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ccc:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001cce:	f002 fba3 	bl	8004418 <HAL_TIM_Base_Init>
 8001cd2:	b108      	cbz	r0, 8001cd8 <MX_TIM2_Init+0x40>
    Error_Handler();
 8001cd4:	f7ff fdee 	bl	80018b4 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001cdc:	4816      	ldr	r0, [pc, #88]	; (8001d38 <MX_TIM2_Init+0xa0>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cde:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ce0:	a903      	add	r1, sp, #12
 8001ce2:	f002 fd17 	bl	8004714 <HAL_TIM_ConfigClockSource>
 8001ce6:	b108      	cbz	r0, 8001cec <MX_TIM2_Init+0x54>
    Error_Handler();
 8001ce8:	f7ff fde4 	bl	80018b4 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001cec:	4812      	ldr	r0, [pc, #72]	; (8001d38 <MX_TIM2_Init+0xa0>)
 8001cee:	f002 fbc3 	bl	8004478 <HAL_TIM_PWM_Init>
 8001cf2:	b108      	cbz	r0, 8001cf8 <MX_TIM2_Init+0x60>
    Error_Handler();
 8001cf4:	f7ff fdde 	bl	80018b4 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cf8:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cfa:	480f      	ldr	r0, [pc, #60]	; (8001d38 <MX_TIM2_Init+0xa0>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cfc:	9300      	str	r3, [sp, #0]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cfe:	4669      	mov	r1, sp
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d00:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d02:	f002 fe2b 	bl	800495c <HAL_TIMEx_MasterConfigSynchronization>
 8001d06:	b108      	cbz	r0, 8001d0c <MX_TIM2_Init+0x74>
    Error_Handler();
 8001d08:	f7ff fdd4 	bl	80018b4 <Error_Handler>
  sConfigOC.Pulse = 32767;
 8001d0c:	2260      	movs	r2, #96	; 0x60
 8001d0e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001d12:	e9cd 2307 	strd	r2, r3, [sp, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d16:	4808      	ldr	r0, [pc, #32]	; (8001d38 <MX_TIM2_Init+0xa0>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d18:	2300      	movs	r3, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d1a:	220c      	movs	r2, #12
 8001d1c:	a907      	add	r1, sp, #28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d1e:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d20:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d22:	f002 fc6b 	bl	80045fc <HAL_TIM_PWM_ConfigChannel>
 8001d26:	b108      	cbz	r0, 8001d2c <MX_TIM2_Init+0x94>
    Error_Handler();
 8001d28:	f7ff fdc4 	bl	80018b4 <Error_Handler>
  HAL_TIM_MspPostInit(&htim2);
 8001d2c:	4802      	ldr	r0, [pc, #8]	; (8001d38 <MX_TIM2_Init+0xa0>)
 8001d2e:	f7ff ff6d 	bl	8001c0c <HAL_TIM_MspPostInit>
}
 8001d32:	b00e      	add	sp, #56	; 0x38
 8001d34:	bd10      	pop	{r4, pc}
 8001d36:	bf00      	nop
 8001d38:	20000374 	.word	0x20000374

08001d3c <MX_TIM17_Init>:
{
 8001d3c:	b510      	push	{r4, lr}
 8001d3e:	b092      	sub	sp, #72	; 0x48
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d40:	221c      	movs	r2, #28
 8001d42:	2100      	movs	r1, #0
 8001d44:	4668      	mov	r0, sp
 8001d46:	f003 f851 	bl	8004dec <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d4a:	222c      	movs	r2, #44	; 0x2c
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	a807      	add	r0, sp, #28
 8001d50:	f003 f84c 	bl	8004dec <memset>
  htim17.Instance = TIM17;
 8001d54:	4820      	ldr	r0, [pc, #128]	; (8001dd8 <MX_TIM17_Init+0x9c>)
  htim17.Init.Prescaler = 0;
 8001d56:	4921      	ldr	r1, [pc, #132]	; (8001ddc <MX_TIM17_Init+0xa0>)
 8001d58:	2300      	movs	r3, #0
  htim17.Init.Period = 255;
 8001d5a:	22ff      	movs	r2, #255	; 0xff
  htim17.Init.Prescaler = 0;
 8001d5c:	e9c0 1300 	strd	r1, r3, [r0]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d60:	e9c0 2303 	strd	r2, r3, [r0, #12]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d64:	e9c0 3305 	strd	r3, r3, [r0, #20]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d68:	6083      	str	r3, [r0, #8]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001d6a:	f002 fb55 	bl	8004418 <HAL_TIM_Base_Init>
 8001d6e:	b108      	cbz	r0, 8001d74 <MX_TIM17_Init+0x38>
    Error_Handler();
 8001d70:	f7ff fda0 	bl	80018b4 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8001d74:	4818      	ldr	r0, [pc, #96]	; (8001dd8 <MX_TIM17_Init+0x9c>)
 8001d76:	f002 fb7f 	bl	8004478 <HAL_TIM_PWM_Init>
 8001d7a:	b108      	cbz	r0, 8001d80 <MX_TIM17_Init+0x44>
    Error_Handler();
 8001d7c:	f7ff fd9a 	bl	80018b4 <Error_Handler>
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d80:	2400      	movs	r4, #0
  sConfigOC.Pulse = 32767;
 8001d82:	2260      	movs	r2, #96	; 0x60
 8001d84:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001d88:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d8c:	4812      	ldr	r0, [pc, #72]	; (8001dd8 <MX_TIM17_Init+0x9c>)
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d8e:	9404      	str	r4, [sp, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8001d90:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d94:	4622      	mov	r2, r4
 8001d96:	4669      	mov	r1, sp
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d98:	e9cd 4402 	strd	r4, r4, [sp, #8]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d9c:	e9cd 3405 	strd	r3, r4, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001da0:	f002 fc2c 	bl	80045fc <HAL_TIM_PWM_ConfigChannel>
 8001da4:	b108      	cbz	r0, 8001daa <MX_TIM17_Init+0x6e>
    Error_Handler();
 8001da6:	f7ff fd85 	bl	80018b4 <Error_Handler>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001daa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001dae:	480a      	ldr	r0, [pc, #40]	; (8001dd8 <MX_TIM17_Init+0x9c>)
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001db0:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001db2:	a907      	add	r1, sp, #28
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001db4:	e9cd 4407 	strd	r4, r4, [sp, #28]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001db8:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001dbc:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001dc0:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001dc2:	f002 fe01 	bl	80049c8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001dc6:	b108      	cbz	r0, 8001dcc <MX_TIM17_Init+0x90>
    Error_Handler();
 8001dc8:	f7ff fd74 	bl	80018b4 <Error_Handler>
  HAL_TIM_MspPostInit(&htim17);
 8001dcc:	4802      	ldr	r0, [pc, #8]	; (8001dd8 <MX_TIM17_Init+0x9c>)
 8001dce:	f7ff ff1d 	bl	8001c0c <HAL_TIM_MspPostInit>
}
 8001dd2:	b012      	add	sp, #72	; 0x48
 8001dd4:	bd10      	pop	{r4, pc}
 8001dd6:	bf00      	nop
 8001dd8:	20000290 	.word	0x20000290
 8001ddc:	40014800 	.word	0x40014800

08001de0 <MX_USART2_UART_Init>:
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001de0:	480c      	ldr	r0, [pc, #48]	; (8001e14 <MX_USART2_UART_Init+0x34>)
  huart2.Init.BaudRate = 38400;
 8001de2:	4a0d      	ldr	r2, [pc, #52]	; (8001e18 <MX_USART2_UART_Init+0x38>)
{
 8001de4:	b508      	push	{r3, lr}
  huart2.Init.BaudRate = 38400;
 8001de6:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8001dea:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001dee:	2300      	movs	r3, #0
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001df0:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001df2:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001df6:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dfa:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001dfe:	6103      	str	r3, [r0, #16]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e00:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e02:	f002 ffa1 	bl	8004d48 <HAL_UART_Init>
 8001e06:	b118      	cbz	r0, 8001e10 <MX_USART2_UART_Init+0x30>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e08:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001e0c:	f7ff bd52 	b.w	80018b4 <Error_Handler>
}
 8001e10:	bd08      	pop	{r3, pc}
 8001e12:	bf00      	nop
 8001e14:	20000404 	.word	0x20000404
 8001e18:	40004400 	.word	0x40004400

08001e1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e1c:	b510      	push	{r4, lr}
 8001e1e:	4604      	mov	r4, r0
 8001e20:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e22:	2214      	movs	r2, #20
 8001e24:	2100      	movs	r1, #0
 8001e26:	a803      	add	r0, sp, #12
 8001e28:	f002 ffe0 	bl	8004dec <memset>
  if(uartHandle->Instance==USART2)
 8001e2c:	6822      	ldr	r2, [r4, #0]
 8001e2e:	4b13      	ldr	r3, [pc, #76]	; (8001e7c <HAL_UART_MspInit+0x60>)
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d121      	bne.n	8001e78 <HAL_UART_MspInit+0x5c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e34:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    PB4     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e38:	2100      	movs	r1, #0
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e3a:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e3c:	4810      	ldr	r0, [pc, #64]	; (8001e80 <HAL_UART_MspInit+0x64>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e3e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001e42:	61da      	str	r2, [r3, #28]
 8001e44:	69da      	ldr	r2, [r3, #28]
 8001e46:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001e4a:	9201      	str	r2, [sp, #4]
 8001e4c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e4e:	695a      	ldr	r2, [r3, #20]
 8001e50:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001e54:	615a      	str	r2, [r3, #20]
 8001e56:	695b      	ldr	r3, [r3, #20]
 8001e58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e5c:	9302      	str	r3, [sp, #8]
 8001e5e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e60:	2218      	movs	r2, #24
 8001e62:	2302      	movs	r3, #2
 8001e64:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e9cd 1305 	strd	r1, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e6e:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e70:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e72:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e74:	f000 ffd0 	bl	8002e18 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001e78:	b008      	add	sp, #32
 8001e7a:	bd10      	pop	{r4, pc}
 8001e7c:	40004400 	.word	0x40004400
 8001e80:	48000400 	.word	0x48000400

08001e84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001e84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ebc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e88:	480d      	ldr	r0, [pc, #52]	; (8001ec0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e8a:	490e      	ldr	r1, [pc, #56]	; (8001ec4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e8c:	4a0e      	ldr	r2, [pc, #56]	; (8001ec8 <LoopForever+0xe>)
  movs r3, #0
 8001e8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e90:	e002      	b.n	8001e98 <LoopCopyDataInit>

08001e92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e96:	3304      	adds	r3, #4

08001e98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e9c:	d3f9      	bcc.n	8001e92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e9e:	4a0b      	ldr	r2, [pc, #44]	; (8001ecc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ea0:	4c0b      	ldr	r4, [pc, #44]	; (8001ed0 <LoopForever+0x16>)
  movs r3, #0
 8001ea2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ea4:	e001      	b.n	8001eaa <LoopFillZerobss>

08001ea6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ea6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ea8:	3204      	adds	r2, #4

08001eaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001eac:	d3fb      	bcc.n	8001ea6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001eae:	f7ff fdbb 	bl	8001a28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001eb2:	f002 ff77 	bl	8004da4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001eb6:	f7ff fc33 	bl	8001720 <main>

08001eba <LoopForever>:

LoopForever:
    b LoopForever
 8001eba:	e7fe      	b.n	8001eba <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001ebc:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001ec0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ec4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001ec8:	08004e58 	.word	0x08004e58
  ldr r2, =_sbss
 8001ecc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001ed0:	2000048c 	.word	0x2000048c

08001ed4 <CAN_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ed4:	e7fe      	b.n	8001ed4 <CAN_RX0_IRQHandler>
	...

08001ed8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ed8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001eda:	4a0e      	ldr	r2, [pc, #56]	; (8001f14 <HAL_InitTick+0x3c>)
 8001edc:	4b0e      	ldr	r3, [pc, #56]	; (8001f18 <HAL_InitTick+0x40>)
{
 8001ede:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ee0:	7818      	ldrb	r0, [r3, #0]
 8001ee2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ee6:	fbb3 f3f0 	udiv	r3, r3, r0
 8001eea:	6810      	ldr	r0, [r2, #0]
 8001eec:	fbb0 f0f3 	udiv	r0, r0, r3
 8001ef0:	f000 fea8 	bl	8002c44 <HAL_SYSTICK_Config>
 8001ef4:	4604      	mov	r4, r0
 8001ef6:	b958      	cbnz	r0, 8001f10 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ef8:	2d0f      	cmp	r5, #15
 8001efa:	d809      	bhi.n	8001f10 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001efc:	4602      	mov	r2, r0
 8001efe:	4629      	mov	r1, r5
 8001f00:	f04f 30ff 	mov.w	r0, #4294967295
 8001f04:	f000 fe5e 	bl	8002bc4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f08:	4b04      	ldr	r3, [pc, #16]	; (8001f1c <HAL_InitTick+0x44>)
 8001f0a:	4620      	mov	r0, r4
 8001f0c:	601d      	str	r5, [r3, #0]
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 8001f0e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001f10:	2001      	movs	r0, #1
 8001f12:	e7fc      	b.n	8001f0e <HAL_InitTick+0x36>
 8001f14:	20000000 	.word	0x20000000
 8001f18:	20000004 	.word	0x20000004
 8001f1c:	20000008 	.word	0x20000008

08001f20 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f20:	4a07      	ldr	r2, [pc, #28]	; (8001f40 <HAL_Init+0x20>)
{
 8001f22:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f24:	6813      	ldr	r3, [r2, #0]
 8001f26:	f043 0310 	orr.w	r3, r3, #16
 8001f2a:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f2c:	2003      	movs	r0, #3
 8001f2e:	f000 fe37 	bl	8002ba0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f32:	2000      	movs	r0, #0
 8001f34:	f7ff ffd0 	bl	8001ed8 <HAL_InitTick>
  HAL_MspInit();
 8001f38:	f7ff fd2a 	bl	8001990 <HAL_MspInit>
}
 8001f3c:	2000      	movs	r0, #0
 8001f3e:	bd08      	pop	{r3, pc}
 8001f40:	40022000 	.word	0x40022000

08001f44 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001f44:	4a03      	ldr	r2, [pc, #12]	; (8001f54 <HAL_IncTick+0x10>)
 8001f46:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <HAL_IncTick+0x14>)
 8001f48:	6811      	ldr	r1, [r2, #0]
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	440b      	add	r3, r1
 8001f4e:	6013      	str	r3, [r2, #0]
}
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	20000488 	.word	0x20000488
 8001f58:	20000004 	.word	0x20000004

08001f5c <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8001f5c:	4b01      	ldr	r3, [pc, #4]	; (8001f64 <HAL_GetTick+0x8>)
 8001f5e:	6818      	ldr	r0, [r3, #0]
}
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	20000488 	.word	0x20000488

08001f68 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f68:	b538      	push	{r3, r4, r5, lr}
 8001f6a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001f6c:	f7ff fff6 	bl	8001f5c <HAL_GetTick>
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f70:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001f72:	bf1c      	itt	ne
 8001f74:	4b05      	ldrne	r3, [pc, #20]	; (8001f8c <HAL_Delay+0x24>)
 8001f76:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8001f78:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8001f7a:	bf18      	it	ne
 8001f7c:	18e4      	addne	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001f7e:	f7ff ffed 	bl	8001f5c <HAL_GetTick>
 8001f82:	1b43      	subs	r3, r0, r5
 8001f84:	42a3      	cmp	r3, r4
 8001f86:	d3fa      	bcc.n	8001f7e <HAL_Delay+0x16>
  {
  }
}
 8001f88:	bd38      	pop	{r3, r4, r5, pc}
 8001f8a:	bf00      	nop
 8001f8c:	20000004 	.word	0x20000004

08001f90 <HAL_ADC_ConvCpltCallback>:
 8001f90:	4770      	bx	lr

08001f92 <HAL_ADC_ConvHalfCpltCallback>:
 8001f92:	4770      	bx	lr

08001f94 <HAL_ADC_LevelOutOfWindowCallback>:
 8001f94:	4770      	bx	lr

08001f96 <HAL_ADC_ErrorCallback>:
 8001f96:	4770      	bx	lr

08001f98 <HAL_ADC_GetState>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Return ADC state */
  return hadc->State;
 8001f98:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
 8001f9a:	4770      	bx	lr

08001f9c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001f9c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001f9e:	6803      	ldr	r3, [r0, #0]
{
 8001fa0:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001fa2:	6898      	ldr	r0, [r3, #8]
 8001fa4:	f000 0003 	and.w	r0, r0, #3
 8001fa8:	2801      	cmp	r0, #1
 8001faa:	d001      	beq.n	8001fb0 <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001fac:	2000      	movs	r0, #0
}
 8001fae:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	07d1      	lsls	r1, r2, #31
 8001fb4:	d5fa      	bpl.n	8001fac <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001fb6:	689a      	ldr	r2, [r3, #8]
 8001fb8:	f002 020d 	and.w	r2, r2, #13
 8001fbc:	2a01      	cmp	r2, #1
 8001fbe:	d11f      	bne.n	8002000 <ADC_Disable+0x64>
      __HAL_ADC_DISABLE(hadc);
 8001fc0:	689a      	ldr	r2, [r3, #8]
 8001fc2:	f042 0202 	orr.w	r2, r2, #2
 8001fc6:	609a      	str	r2, [r3, #8]
 8001fc8:	2203      	movs	r2, #3
 8001fca:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8001fcc:	f7ff ffc6 	bl	8001f5c <HAL_GetTick>
 8001fd0:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001fd2:	6823      	ldr	r3, [r4, #0]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	07db      	lsls	r3, r3, #31
 8001fd8:	d5e8      	bpl.n	8001fac <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001fda:	f7ff ffbf 	bl	8001f5c <HAL_GetTick>
 8001fde:	1b40      	subs	r0, r0, r5
 8001fe0:	2802      	cmp	r0, #2
 8001fe2:	d9f6      	bls.n	8001fd2 <ADC_Disable+0x36>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001fe4:	6823      	ldr	r3, [r4, #0]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	07da      	lsls	r2, r3, #31
 8001fea:	d5f2      	bpl.n	8001fd2 <ADC_Disable+0x36>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001fee:	f043 0310 	orr.w	r3, r3, #16
 8001ff2:	6423      	str	r3, [r4, #64]	; 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ff4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001ff6:	f043 0301 	orr.w	r3, r3, #1
 8001ffa:	6463      	str	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 8001ffc:	2001      	movs	r0, #1
 8001ffe:	e7d6      	b.n	8001fae <ADC_Disable+0x12>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002000:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002002:	f043 0310 	orr.w	r3, r3, #16
 8002006:	6423      	str	r3, [r4, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002008:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800200a:	f043 0301 	orr.w	r3, r3, #1
 800200e:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8002010:	e7cd      	b.n	8001fae <ADC_Disable+0x12>
	...

08002014 <ADC_Enable>:
{
 8002014:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002016:	6803      	ldr	r3, [r0, #0]
 8002018:	689a      	ldr	r2, [r3, #8]
 800201a:	f002 0203 	and.w	r2, r2, #3
 800201e:	2a01      	cmp	r2, #1
{
 8002020:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002022:	d104      	bne.n	800202e <ADC_Enable+0x1a>
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	07d1      	lsls	r1, r2, #31
 8002028:	d501      	bpl.n	800202e <ADC_Enable+0x1a>
  return HAL_OK;
 800202a:	2000      	movs	r0, #0
}
 800202c:	bd38      	pop	{r3, r4, r5, pc}
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800202e:	6899      	ldr	r1, [r3, #8]
 8002030:	4a10      	ldr	r2, [pc, #64]	; (8002074 <ADC_Enable+0x60>)
 8002032:	4211      	tst	r1, r2
 8002034:	d009      	beq.n	800204a <ADC_Enable+0x36>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002036:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002038:	f043 0310 	orr.w	r3, r3, #16
 800203c:	6423      	str	r3, [r4, #64]	; 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800203e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002040:	f043 0301 	orr.w	r3, r3, #1
 8002044:	6463      	str	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 8002046:	2001      	movs	r0, #1
 8002048:	e7f0      	b.n	800202c <ADC_Enable+0x18>
    __HAL_ADC_ENABLE(hadc);
 800204a:	689a      	ldr	r2, [r3, #8]
 800204c:	f042 0201 	orr.w	r2, r2, #1
 8002050:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 8002052:	f7ff ff83 	bl	8001f5c <HAL_GetTick>
 8002056:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002058:	6823      	ldr	r3, [r4, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	07db      	lsls	r3, r3, #31
 800205e:	d4e4      	bmi.n	800202a <ADC_Enable+0x16>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002060:	f7ff ff7c 	bl	8001f5c <HAL_GetTick>
 8002064:	1b40      	subs	r0, r0, r5
 8002066:	2802      	cmp	r0, #2
 8002068:	d9f6      	bls.n	8002058 <ADC_Enable+0x44>
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800206a:	6823      	ldr	r3, [r4, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	07da      	lsls	r2, r3, #31
 8002070:	d4f2      	bmi.n	8002058 <ADC_Enable+0x44>
 8002072:	e7e0      	b.n	8002036 <ADC_Enable+0x22>
 8002074:	8000003f 	.word	0x8000003f

08002078 <ADC_DMAError>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002078:	6a40      	ldr	r0, [r0, #36]	; 0x24
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800207a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800207c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002080:	6403      	str	r3, [r0, #64]	; 0x40
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002082:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002084:	f043 0304 	orr.w	r3, r3, #4
 8002088:	6443      	str	r3, [r0, #68]	; 0x44
      HAL_ADC_ErrorCallback(hadc);
 800208a:	f7ff bf84 	b.w	8001f96 <HAL_ADC_ErrorCallback>

0800208e <ADC_DMAHalfConvCplt>:
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800208e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002090:	f7ff bf7f 	b.w	8001f92 <HAL_ADC_ConvHalfCpltCallback>

08002094 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002094:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002096:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002098:	f012 0f50 	tst.w	r2, #80	; 0x50
 800209c:	d118      	bne.n	80020d0 <ADC_DMAConvCplt+0x3c>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800209e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020a4:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	68d2      	ldr	r2, [r2, #12]
 80020aa:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 80020ae:	d10c      	bne.n	80020ca <ADC_DMAConvCplt+0x36>
 80020b0:	7e5a      	ldrb	r2, [r3, #25]
 80020b2:	b952      	cbnz	r2, 80020ca <ADC_DMAConvCplt+0x36>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80020b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020ba:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020be:	04d2      	lsls	r2, r2, #19
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020c0:	bf5e      	ittt	pl
 80020c2:	6c1a      	ldrpl	r2, [r3, #64]	; 0x40
 80020c4:	f042 0201 	orrpl.w	r2, r2, #1
 80020c8:	641a      	strpl	r2, [r3, #64]	; 0x40
      HAL_ADC_ConvCpltCallback(hadc);
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7ff bf60 	b.w	8001f90 <HAL_ADC_ConvCpltCallback>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80020d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d4:	4718      	bx	r3
	...

080020d8 <HAL_ADC_Init>:
{
 80020d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 80020da:	2300      	movs	r3, #0
 80020dc:	9301      	str	r3, [sp, #4]
  if(hadc == NULL)
 80020de:	4604      	mov	r4, r0
 80020e0:	2800      	cmp	r0, #0
 80020e2:	f000 80e2 	beq.w	80022aa <HAL_ADC_Init+0x1d2>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020e6:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80020e8:	06d5      	lsls	r5, r2, #27
 80020ea:	f100 80cb 	bmi.w	8002284 <HAL_ADC_Init+0x1ac>
    if (hadc->State == HAL_ADC_STATE_RESET)
 80020ee:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f000 8091 	beq.w	8002218 <HAL_ADC_Init+0x140>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020f6:	2000      	movs	r0, #0
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80020f8:	6823      	ldr	r3, [r4, #0]
 80020fa:	689a      	ldr	r2, [r3, #8]
 80020fc:	00d2      	lsls	r2, r2, #3
 80020fe:	d502      	bpl.n	8002106 <HAL_ADC_Init+0x2e>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002100:	689b      	ldr	r3, [r3, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	d50a      	bpl.n	800211c <HAL_ADC_Init+0x44>
      ADC_STATE_CLR_SET(hadc->State,
 8002106:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002108:	f023 0312 	bic.w	r3, r3, #18
 800210c:	f043 0310 	orr.w	r3, r3, #16
 8002110:	6423      	str	r3, [r4, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002112:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002114:	f043 0301 	orr.w	r3, r3, #1
 8002118:	6463      	str	r3, [r4, #68]	; 0x44
      tmp_hal_status = HAL_ERROR;
 800211a:	2001      	movs	r0, #1
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800211c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800211e:	06de      	lsls	r6, r3, #27
 8002120:	f100 80bd 	bmi.w	800229e <HAL_ADC_Init+0x1c6>
 8002124:	2800      	cmp	r0, #0
 8002126:	f040 80ba 	bne.w	800229e <HAL_ADC_Init+0x1c6>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800212a:	6823      	ldr	r3, [r4, #0]
 800212c:	6899      	ldr	r1, [r3, #8]
      (tmp_hal_status == HAL_OK)                                &&
 800212e:	f011 0104 	ands.w	r1, r1, #4
 8002132:	f040 80b4 	bne.w	800229e <HAL_ADC_Init+0x1c6>
    ADC_STATE_CLR_SET(hadc->State,
 8002136:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002138:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 800213c:	f042 0202 	orr.w	r2, r2, #2
 8002140:	6422      	str	r2, [r4, #64]	; 0x40
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002142:	689d      	ldr	r5, [r3, #8]
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002144:	4a5a      	ldr	r2, [pc, #360]	; (80022b0 <HAL_ADC_Init+0x1d8>)
 8002146:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800214a:	f005 0503 	and.w	r5, r5, #3
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800214e:	bf18      	it	ne
 8002150:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002154:	2d01      	cmp	r5, #1
 8002156:	d102      	bne.n	800215e <HAL_ADC_Init+0x86>
 8002158:	681d      	ldr	r5, [r3, #0]
 800215a:	07ed      	lsls	r5, r5, #31
 800215c:	d40e      	bmi.n	800217c <HAL_ADC_Init+0xa4>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800215e:	6895      	ldr	r5, [r2, #8]
 8002160:	f005 0503 	and.w	r5, r5, #3
 8002164:	2d01      	cmp	r5, #1
 8002166:	d102      	bne.n	800216e <HAL_ADC_Init+0x96>
 8002168:	6812      	ldr	r2, [r2, #0]
 800216a:	07d2      	lsls	r2, r2, #31
 800216c:	d406      	bmi.n	800217c <HAL_ADC_Init+0xa4>
      MODIFY_REG(tmpADC_Common->CCR       ,
 800216e:	4d51      	ldr	r5, [pc, #324]	; (80022b4 <HAL_ADC_Init+0x1dc>)
 8002170:	6866      	ldr	r6, [r4, #4]
 8002172:	68aa      	ldr	r2, [r5, #8]
 8002174:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002178:	4332      	orrs	r2, r6
 800217a:	60aa      	str	r2, [r5, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800217c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800217e:	7e65      	ldrb	r5, [r4, #25]
 8002180:	2a01      	cmp	r2, #1
 8002182:	e9d4 6202 	ldrd	r6, r2, [r4, #8]
 8002186:	ea42 0206 	orr.w	r2, r2, r6
 800218a:	bf18      	it	ne
 800218c:	f44f 5180 	movne.w	r1, #4096	; 0x1000
 8002190:	ea42 3245 	orr.w	r2, r2, r5, lsl #13
 8002194:	430a      	orrs	r2, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002196:	f894 1020 	ldrb.w	r1, [r4, #32]
 800219a:	2901      	cmp	r1, #1
 800219c:	d107      	bne.n	80021ae <HAL_ADC_Init+0xd6>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800219e:	2d00      	cmp	r5, #0
 80021a0:	d172      	bne.n	8002288 <HAL_ADC_Init+0x1b0>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80021a2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80021a4:	3901      	subs	r1, #1
 80021a6:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 80021aa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021ae:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80021b0:	2901      	cmp	r1, #1
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80021b2:	bf1e      	ittt	ne
 80021b4:	6ae5      	ldrne	r5, [r4, #44]	; 0x2c
 80021b6:	4329      	orrne	r1, r5
 80021b8:	430a      	orrne	r2, r1
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80021ba:	6899      	ldr	r1, [r3, #8]
 80021bc:	f011 0f0c 	tst.w	r1, #12
 80021c0:	d10c      	bne.n	80021dc <HAL_ADC_Init+0x104>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80021c2:	68d9      	ldr	r1, [r3, #12]
 80021c4:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 80021c8:	f021 0102 	bic.w	r1, r1, #2
 80021cc:	60d9      	str	r1, [r3, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80021ce:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 80021d2:	7e25      	ldrb	r5, [r4, #24]
 80021d4:	0049      	lsls	r1, r1, #1
 80021d6:	ea41 3185 	orr.w	r1, r1, r5, lsl #14
 80021da:	430a      	orrs	r2, r1
    MODIFY_REG(hadc->Instance->CFGR,
 80021dc:	68dd      	ldr	r5, [r3, #12]
 80021de:	4936      	ldr	r1, [pc, #216]	; (80022b8 <HAL_ADC_Init+0x1e0>)
 80021e0:	4029      	ands	r1, r5
 80021e2:	430a      	orrs	r2, r1
 80021e4:	60da      	str	r2, [r3, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80021e6:	6922      	ldr	r2, [r4, #16]
 80021e8:	2a01      	cmp	r2, #1
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80021ea:	bf05      	ittet	eq
 80021ec:	6b19      	ldreq	r1, [r3, #48]	; 0x30
 80021ee:	69e2      	ldreq	r2, [r4, #28]
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80021f0:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80021f2:	f102 32ff 	addeq.w	r2, r2, #4294967295
 80021f6:	bf06      	itte	eq
 80021f8:	f021 010f 	biceq.w	r1, r1, #15
 80021fc:	430a      	orreq	r2, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80021fe:	f022 020f 	bicne.w	r2, r2, #15
 8002202:	631a      	str	r2, [r3, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 8002204:	2300      	movs	r3, #0
 8002206:	6463      	str	r3, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8002208:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800220a:	f023 0303 	bic.w	r3, r3, #3
 800220e:	f043 0301 	orr.w	r3, r3, #1
 8002212:	6423      	str	r3, [r4, #64]	; 0x40
}
 8002214:	b002      	add	sp, #8
 8002216:	bd70      	pop	{r4, r5, r6, pc}
      hadc->InjectionConfig.ContextQueue = 0U;
 8002218:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
      ADC_CLEAR_ERRORCODE(hadc);
 800221c:	6443      	str	r3, [r0, #68]	; 0x44
      hadc->Lock = HAL_UNLOCKED;
 800221e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_ADC_MspInit(hadc);
 8002222:	f7ff f875 	bl	8001310 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002226:	6823      	ldr	r3, [r4, #0]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	00d8      	lsls	r0, r3, #3
 800222c:	f53f af63 	bmi.w	80020f6 <HAL_ADC_Init+0x1e>
        tmp_hal_status = ADC_Disable(hadc);
 8002230:	4620      	mov	r0, r4
 8002232:	f7ff feb3 	bl	8001f9c <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002236:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002238:	06d1      	lsls	r1, r2, #27
 800223a:	f53f af5d 	bmi.w	80020f8 <HAL_ADC_Init+0x20>
 800223e:	2800      	cmp	r0, #0
 8002240:	f47f af5a 	bne.w	80020f8 <HAL_ADC_Init+0x20>
          ADC_STATE_CLR_SET(hadc->State,
 8002244:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002246:	6822      	ldr	r2, [r4, #0]
 8002248:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800224c:	f023 0302 	bic.w	r3, r3, #2
 8002250:	f043 0302 	orr.w	r3, r3, #2
 8002254:	6423      	str	r3, [r4, #64]	; 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002256:	6893      	ldr	r3, [r2, #8]
 8002258:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800225c:	6093      	str	r3, [r2, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800225e:	6893      	ldr	r3, [r2, #8]
 8002260:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002264:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002266:	4b15      	ldr	r3, [pc, #84]	; (80022bc <HAL_ADC_Init+0x1e4>)
 8002268:	4a15      	ldr	r2, [pc, #84]	; (80022c0 <HAL_ADC_Init+0x1e8>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	fbb3 f2f2 	udiv	r2, r3, r2
 8002270:	230a      	movs	r3, #10
 8002272:	4353      	muls	r3, r2
            wait_loop_index--;
 8002274:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8002276:	9b01      	ldr	r3, [sp, #4]
 8002278:	2b00      	cmp	r3, #0
 800227a:	f43f af3c 	beq.w	80020f6 <HAL_ADC_Init+0x1e>
            wait_loop_index--;
 800227e:	9b01      	ldr	r3, [sp, #4]
 8002280:	3b01      	subs	r3, #1
 8002282:	e7f7      	b.n	8002274 <HAL_ADC_Init+0x19c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002284:	4618      	mov	r0, r3
 8002286:	e749      	b.n	800211c <HAL_ADC_Init+0x44>
        ADC_STATE_CLR_SET(hadc->State,
 8002288:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800228a:	f021 0122 	bic.w	r1, r1, #34	; 0x22
 800228e:	f041 0120 	orr.w	r1, r1, #32
 8002292:	6421      	str	r1, [r4, #64]	; 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002294:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002296:	f041 0101 	orr.w	r1, r1, #1
 800229a:	6461      	str	r1, [r4, #68]	; 0x44
 800229c:	e787      	b.n	80021ae <HAL_ADC_Init+0xd6>
    ADC_STATE_CLR_SET(hadc->State,
 800229e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80022a0:	f023 0312 	bic.w	r3, r3, #18
 80022a4:	f043 0310 	orr.w	r3, r3, #16
 80022a8:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 80022aa:	2001      	movs	r0, #1
 80022ac:	e7b2      	b.n	8002214 <HAL_ADC_Init+0x13c>
 80022ae:	bf00      	nop
 80022b0:	50000100 	.word	0x50000100
 80022b4:	50000300 	.word	0x50000300
 80022b8:	fff0c007 	.word	0xfff0c007
 80022bc:	20000000 	.word	0x20000000
 80022c0:	000f4240 	.word	0x000f4240

080022c4 <HAL_ADC_Start_DMA>:
{
 80022c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80022c8:	6803      	ldr	r3, [r0, #0]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f013 0304 	ands.w	r3, r3, #4
{
 80022d0:	4604      	mov	r4, r0
 80022d2:	460f      	mov	r7, r1
 80022d4:	4690      	mov	r8, r2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80022d6:	d171      	bne.n	80023bc <HAL_ADC_Start_DMA+0xf8>
    __HAL_LOCK(hadc);
 80022d8:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80022dc:	2a01      	cmp	r2, #1
 80022de:	d06d      	beq.n	80023bc <HAL_ADC_Start_DMA+0xf8>
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 80022e0:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 80023d0 <HAL_ADC_Start_DMA+0x10c>
    __HAL_LOCK(hadc);
 80022e4:	2501      	movs	r5, #1
 80022e6:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 80022ea:	f8d9 6008 	ldr.w	r6, [r9, #8]
 80022ee:	f016 061f 	ands.w	r6, r6, #31
 80022f2:	d160      	bne.n	80023b6 <HAL_ADC_Start_DMA+0xf2>
      tmp_hal_status = ADC_Enable(hadc);
 80022f4:	f7ff fe8e 	bl	8002014 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 80022f8:	4605      	mov	r5, r0
 80022fa:	2800      	cmp	r0, #0
 80022fc:	d158      	bne.n	80023b0 <HAL_ADC_Start_DMA+0xec>
        ADC_STATE_CLR_SET(hadc->State,
 80022fe:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002300:	6821      	ldr	r1, [r4, #0]
 8002302:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
 8002306:	f020 0001 	bic.w	r0, r0, #1
 800230a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 800230e:	6420      	str	r0, [r4, #64]	; 0x40
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002310:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8002314:	f013 0f1f 	tst.w	r3, #31
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002318:	6c23      	ldr	r3, [r4, #64]	; 0x40
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800231a:	d002      	beq.n	8002322 <HAL_ADC_Start_DMA+0x5e>
 800231c:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8002320:	d134      	bne.n	800238c <HAL_ADC_Start_DMA+0xc8>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002322:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002326:	6423      	str	r3, [r4, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002328:	68cb      	ldr	r3, [r1, #12]
 800232a:	019a      	lsls	r2, r3, #6
 800232c:	d505      	bpl.n	800233a <HAL_ADC_Start_DMA+0x76>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800232e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002330:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002334:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002338:	6423      	str	r3, [r4, #64]	; 0x40
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800233a:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800233c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800233e:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002342:	bf1c      	itt	ne
 8002344:	6c63      	ldrne	r3, [r4, #68]	; 0x44
 8002346:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 800234a:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 800234c:	2300      	movs	r3, #0
 800234e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002352:	4b1b      	ldr	r3, [pc, #108]	; (80023c0 <HAL_ADC_Start_DMA+0xfc>)
 8002354:	6283      	str	r3, [r0, #40]	; 0x28
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002356:	4b1b      	ldr	r3, [pc, #108]	; (80023c4 <HAL_ADC_Start_DMA+0x100>)
 8002358:	62c3      	str	r3, [r0, #44]	; 0x2c
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800235a:	4b1b      	ldr	r3, [pc, #108]	; (80023c8 <HAL_ADC_Start_DMA+0x104>)
 800235c:	6303      	str	r3, [r0, #48]	; 0x30
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800235e:	231c      	movs	r3, #28
 8002360:	600b      	str	r3, [r1, #0]
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002362:	684b      	ldr	r3, [r1, #4]
 8002364:	f043 0310 	orr.w	r3, r3, #16
 8002368:	604b      	str	r3, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800236a:	68cb      	ldr	r3, [r1, #12]
 800236c:	f043 0301 	orr.w	r3, r3, #1
 8002370:	60cb      	str	r3, [r1, #12]
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002372:	463a      	mov	r2, r7
 8002374:	4643      	mov	r3, r8
 8002376:	3140      	adds	r1, #64	; 0x40
 8002378:	f000 fca8 	bl	8002ccc <HAL_DMA_Start_IT>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800237c:	6822      	ldr	r2, [r4, #0]
 800237e:	6893      	ldr	r3, [r2, #8]
 8002380:	f043 0304 	orr.w	r3, r3, #4
 8002384:	6093      	str	r3, [r2, #8]
}
 8002386:	4628      	mov	r0, r5
 8002388:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800238c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002390:	6423      	str	r3, [r4, #64]	; 0x40
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002392:	4b0e      	ldr	r3, [pc, #56]	; (80023cc <HAL_ADC_Start_DMA+0x108>)
 8002394:	4299      	cmp	r1, r3
 8002396:	d1d0      	bne.n	800233a <HAL_ADC_Start_DMA+0x76>
 8002398:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	019b      	lsls	r3, r3, #6
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80023a0:	bf41      	itttt	mi
 80023a2:	6c20      	ldrmi	r0, [r4, #64]	; 0x40
 80023a4:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 80023a8:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 80023ac:	6420      	strmi	r0, [r4, #64]	; 0x40
 80023ae:	e7c4      	b.n	800233a <HAL_ADC_Start_DMA+0x76>
        __HAL_UNLOCK(hadc);
 80023b0:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
 80023b4:	e7e7      	b.n	8002386 <HAL_ADC_Start_DMA+0xc2>
      __HAL_UNLOCK(hadc);
 80023b6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 80023ba:	e7e4      	b.n	8002386 <HAL_ADC_Start_DMA+0xc2>
    tmp_hal_status = HAL_BUSY;
 80023bc:	2502      	movs	r5, #2
 80023be:	e7e2      	b.n	8002386 <HAL_ADC_Start_DMA+0xc2>
 80023c0:	08002095 	.word	0x08002095
 80023c4:	0800208f 	.word	0x0800208f
 80023c8:	08002079 	.word	0x08002079
 80023cc:	50000100 	.word	0x50000100
 80023d0:	50000300 	.word	0x50000300

080023d4 <HAL_ADCEx_Calibration_Start>:
{
 80023d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 80023d6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80023da:	2b01      	cmp	r3, #1
{
 80023dc:	4604      	mov	r4, r0
 80023de:	460e      	mov	r6, r1
  __HAL_LOCK(hadc);
 80023e0:	d03c      	beq.n	800245c <HAL_ADCEx_Calibration_Start+0x88>
 80023e2:	2701      	movs	r7, #1
 80023e4:	f880 703c 	strb.w	r7, [r0, #60]	; 0x3c
  tmp_hal_status = ADC_Disable(hadc);
 80023e8:	f7ff fdd8 	bl	8001f9c <ADC_Disable>
  if (tmp_hal_status == HAL_OK)
 80023ec:	4605      	mov	r5, r0
 80023ee:	b9e0      	cbnz	r0, 800242a <HAL_ADCEx_Calibration_Start+0x56>
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 80023f0:	6823      	ldr	r3, [r4, #0]
    hadc->State = HAL_ADC_STATE_READY;
 80023f2:	6427      	str	r7, [r4, #64]	; 0x40
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 80023f4:	689a      	ldr	r2, [r3, #8]
 80023f6:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80023fa:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80023fc:	42be      	cmp	r6, r7
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 80023fe:	bf02      	ittt	eq
 8002400:	689a      	ldreq	r2, [r3, #8]
 8002402:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
 8002406:	609a      	streq	r2, [r3, #8]
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8002408:	689a      	ldr	r2, [r3, #8]
 800240a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800240e:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 8002410:	f7ff fda4 	bl	8001f5c <HAL_GetTick>
 8002414:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002416:	6823      	ldr	r3, [r4, #0]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	2b00      	cmp	r3, #0
 800241c:	db09      	blt.n	8002432 <HAL_ADCEx_Calibration_Start+0x5e>
    ADC_STATE_CLR_SET(hadc->State,
 800241e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002420:	f023 0303 	bic.w	r3, r3, #3
 8002424:	f043 0301 	orr.w	r3, r3, #1
 8002428:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800242a:	2300      	movs	r3, #0
 800242c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 8002430:	e012      	b.n	8002458 <HAL_ADCEx_Calibration_Start+0x84>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002432:	f7ff fd93 	bl	8001f5c <HAL_GetTick>
 8002436:	1b80      	subs	r0, r0, r6
 8002438:	280a      	cmp	r0, #10
 800243a:	d9ec      	bls.n	8002416 <HAL_ADCEx_Calibration_Start+0x42>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800243c:	6823      	ldr	r3, [r4, #0]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	2b00      	cmp	r3, #0
 8002442:	dae8      	bge.n	8002416 <HAL_ADCEx_Calibration_Start+0x42>
          ADC_STATE_CLR_SET(hadc->State,
 8002444:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002446:	f023 0312 	bic.w	r3, r3, #18
 800244a:	f043 0310 	orr.w	r3, r3, #16
 800244e:	6423      	str	r3, [r4, #64]	; 0x40
          __HAL_UNLOCK(hadc);
 8002450:	2300      	movs	r3, #0
 8002452:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8002456:	2501      	movs	r5, #1
}
 8002458:	4628      	mov	r0, r5
 800245a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hadc);
 800245c:	2502      	movs	r5, #2
 800245e:	e7fb      	b.n	8002458 <HAL_ADCEx_Calibration_Start+0x84>

08002460 <HAL_ADCEx_InjectedConvCpltCallback>:
}
 8002460:	4770      	bx	lr

08002462 <HAL_ADCEx_InjectedQueueOverflowCallback>:
 8002462:	4770      	bx	lr

08002464 <HAL_ADCEx_LevelOutOfWindow2Callback>:
 8002464:	4770      	bx	lr

08002466 <HAL_ADCEx_LevelOutOfWindow3Callback>:
 8002466:	4770      	bx	lr

08002468 <HAL_ADC_IRQHandler>:
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8002468:	6803      	ldr	r3, [r0, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	0752      	lsls	r2, r2, #29
{
 800246e:	b510      	push	{r4, lr}
 8002470:	4604      	mov	r4, r0
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8002472:	d502      	bpl.n	800247a <HAL_ADC_IRQHandler+0x12>
 8002474:	685a      	ldr	r2, [r3, #4]
 8002476:	0750      	lsls	r0, r2, #29
 8002478:	d405      	bmi.n	8002486 <HAL_ADC_IRQHandler+0x1e>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800247a:	681a      	ldr	r2, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800247c:	0711      	lsls	r1, r2, #28
 800247e:	d53f      	bpl.n	8002500 <HAL_ADC_IRQHandler+0x98>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8002480:	685a      	ldr	r2, [r3, #4]
 8002482:	0712      	lsls	r2, r2, #28
 8002484:	d53c      	bpl.n	8002500 <HAL_ADC_IRQHandler+0x98>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002486:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002488:	06d0      	lsls	r0, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800248a:	bf5e      	ittt	pl
 800248c:	6c22      	ldrpl	r2, [r4, #64]	; 0x40
 800248e:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 8002492:	6422      	strpl	r2, [r4, #64]	; 0x40
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002494:	4a92      	ldr	r2, [pc, #584]	; (80026e0 <HAL_ADC_IRQHandler+0x278>)
 8002496:	6891      	ldr	r1, [r2, #8]
 8002498:	06c9      	lsls	r1, r1, #27
 800249a:	d00d      	beq.n	80024b8 <HAL_ADC_IRQHandler+0x50>
 800249c:	6891      	ldr	r1, [r2, #8]
 800249e:	f001 011f 	and.w	r1, r1, #31
 80024a2:	2905      	cmp	r1, #5
 80024a4:	d008      	beq.n	80024b8 <HAL_ADC_IRQHandler+0x50>
 80024a6:	6892      	ldr	r2, [r2, #8]
 80024a8:	f002 021f 	and.w	r2, r2, #31
 80024ac:	2a09      	cmp	r2, #9
 80024ae:	d003      	beq.n	80024b8 <HAL_ADC_IRQHandler+0x50>
 80024b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024b4:	f040 80f1 	bne.w	800269a <HAL_ADC_IRQHandler+0x232>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80024b8:	68da      	ldr	r2, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80024ba:	68d9      	ldr	r1, [r3, #12]
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 80024bc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80024c0:	f401 6140 	and.w	r1, r1, #3072	; 0xc00
 80024c4:	430a      	orrs	r2, r1
 80024c6:	d115      	bne.n	80024f4 <HAL_ADC_IRQHandler+0x8c>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	0712      	lsls	r2, r2, #28
 80024cc:	d512      	bpl.n	80024f4 <HAL_ADC_IRQHandler+0x8c>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80024ce:	689a      	ldr	r2, [r3, #8]
 80024d0:	0750      	lsls	r0, r2, #29
 80024d2:	f100 80e6 	bmi.w	80026a2 <HAL_ADC_IRQHandler+0x23a>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80024d6:	685a      	ldr	r2, [r3, #4]
 80024d8:	f022 020c 	bic.w	r2, r2, #12
 80024dc:	605a      	str	r2, [r3, #4]
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80024de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80024e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024e4:	6423      	str	r3, [r4, #64]	; 0x40
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80024e8:	04d9      	lsls	r1, r3, #19
 80024ea:	d403      	bmi.n	80024f4 <HAL_ADC_IRQHandler+0x8c>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80024ee:	f043 0301 	orr.w	r3, r3, #1
 80024f2:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_ConvCpltCallback(hadc);
 80024f4:	4620      	mov	r0, r4
 80024f6:	f7ff fd4b 	bl	8001f90 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 80024fa:	6823      	ldr	r3, [r4, #0]
 80024fc:	220c      	movs	r2, #12
 80024fe:	601a      	str	r2, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8002500:	6823      	ldr	r3, [r4, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	0692      	lsls	r2, r2, #26
 8002506:	d502      	bpl.n	800250e <HAL_ADC_IRQHandler+0xa6>
 8002508:	685a      	ldr	r2, [r3, #4]
 800250a:	0690      	lsls	r0, r2, #26
 800250c:	d405      	bmi.n	800251a <HAL_ADC_IRQHandler+0xb2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 800250e:	681a      	ldr	r2, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8002510:	0651      	lsls	r1, r2, #25
 8002512:	d557      	bpl.n	80025c4 <HAL_ADC_IRQHandler+0x15c>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8002514:	685a      	ldr	r2, [r3, #4]
 8002516:	0652      	lsls	r2, r2, #25
 8002518:	d554      	bpl.n	80025c4 <HAL_ADC_IRQHandler+0x15c>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800251a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800251c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002520:	6422      	str	r2, [r4, #64]	; 0x40
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002522:	4a6f      	ldr	r2, [pc, #444]	; (80026e0 <HAL_ADC_IRQHandler+0x278>)
 8002524:	6891      	ldr	r1, [r2, #8]
 8002526:	06c8      	lsls	r0, r1, #27
 8002528:	d00d      	beq.n	8002546 <HAL_ADC_IRQHandler+0xde>
 800252a:	6891      	ldr	r1, [r2, #8]
 800252c:	f001 011f 	and.w	r1, r1, #31
 8002530:	2905      	cmp	r1, #5
 8002532:	d008      	beq.n	8002546 <HAL_ADC_IRQHandler+0xde>
 8002534:	6892      	ldr	r2, [r2, #8]
 8002536:	f002 021f 	and.w	r2, r2, #31
 800253a:	2a09      	cmp	r2, #9
 800253c:	d003      	beq.n	8002546 <HAL_ADC_IRQHandler+0xde>
 800253e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002542:	f040 80b7 	bne.w	80026b4 <HAL_ADC_IRQHandler+0x24c>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002546:	68da      	ldr	r2, [r3, #12]
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8002548:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800254a:	f011 0fc0 	tst.w	r1, #192	; 0xc0
 800254e:	d133      	bne.n	80025b8 <HAL_ADC_IRQHandler+0x150>
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8002550:	0191      	lsls	r1, r2, #6
 8002552:	d506      	bpl.n	8002562 <HAL_ADC_IRQHandler+0xfa>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8002554:	68d9      	ldr	r1, [r3, #12]
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8002556:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 800255a:	f401 6140 	and.w	r1, r1, #3072	; 0xc00
 800255e:	430a      	orrs	r2, r1
 8002560:	d12a      	bne.n	80025b8 <HAL_ADC_IRQHandler+0x150>
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	0650      	lsls	r0, r2, #25
 8002566:	d527      	bpl.n	80025b8 <HAL_ADC_IRQHandler+0x150>
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8002568:	4a5d      	ldr	r2, [pc, #372]	; (80026e0 <HAL_ADC_IRQHandler+0x278>)
 800256a:	6891      	ldr	r1, [r2, #8]
 800256c:	06c9      	lsls	r1, r1, #27
 800256e:	d00d      	beq.n	800258c <HAL_ADC_IRQHandler+0x124>
 8002570:	6891      	ldr	r1, [r2, #8]
 8002572:	f001 011f 	and.w	r1, r1, #31
 8002576:	2906      	cmp	r1, #6
 8002578:	d008      	beq.n	800258c <HAL_ADC_IRQHandler+0x124>
 800257a:	6892      	ldr	r2, [r2, #8]
 800257c:	f002 021f 	and.w	r2, r2, #31
 8002580:	2a07      	cmp	r2, #7
 8002582:	d003      	beq.n	800258c <HAL_ADC_IRQHandler+0x124>
 8002584:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002588:	f040 8098 	bne.w	80026bc <HAL_ADC_IRQHandler+0x254>
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 800258c:	68da      	ldr	r2, [r3, #12]
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 800258e:	0292      	lsls	r2, r2, #10
 8002590:	d412      	bmi.n	80025b8 <HAL_ADC_IRQHandler+0x150>
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8002592:	689a      	ldr	r2, [r3, #8]
 8002594:	0710      	lsls	r0, r2, #28
 8002596:	f100 8095 	bmi.w	80026c4 <HAL_ADC_IRQHandler+0x25c>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800259a:	685a      	ldr	r2, [r3, #4]
 800259c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80025a0:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80025a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80025a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80025a8:	6423      	str	r3, [r4, #64]	; 0x40
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80025aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80025ac:	05d9      	lsls	r1, r3, #23
 80025ae:	d403      	bmi.n	80025b8 <HAL_ADC_IRQHandler+0x150>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80025b2:	f043 0301 	orr.w	r3, r3, #1
 80025b6:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80025b8:	4620      	mov	r0, r4
 80025ba:	f7ff ff51 	bl	8002460 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80025be:	6823      	ldr	r3, [r4, #0]
 80025c0:	2260      	movs	r2, #96	; 0x60
 80025c2:	601a      	str	r2, [r3, #0]
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 80025c4:	6823      	ldr	r3, [r4, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	0612      	lsls	r2, r2, #24
 80025ca:	d50c      	bpl.n	80025e6 <HAL_ADC_IRQHandler+0x17e>
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	061b      	lsls	r3, r3, #24
 80025d0:	d509      	bpl.n	80025e6 <HAL_ADC_IRQHandler+0x17e>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80025d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80025d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025d8:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80025da:	4620      	mov	r0, r4
 80025dc:	f7ff fcda 	bl	8001f94 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80025e0:	6823      	ldr	r3, [r4, #0]
 80025e2:	2280      	movs	r2, #128	; 0x80
 80025e4:	601a      	str	r2, [r3, #0]
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 80025e6:	6823      	ldr	r3, [r4, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	05d0      	lsls	r0, r2, #23
 80025ec:	d50d      	bpl.n	800260a <HAL_ADC_IRQHandler+0x1a2>
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	05d9      	lsls	r1, r3, #23
 80025f2:	d50a      	bpl.n	800260a <HAL_ADC_IRQHandler+0x1a2>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80025f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80025f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025fa:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80025fc:	4620      	mov	r0, r4
 80025fe:	f7ff ff31 	bl	8002464 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002602:	6823      	ldr	r3, [r4, #0]
 8002604:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002608:	601a      	str	r2, [r3, #0]
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 800260a:	6823      	ldr	r3, [r4, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	0592      	lsls	r2, r2, #22
 8002610:	d50d      	bpl.n	800262e <HAL_ADC_IRQHandler+0x1c6>
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	0598      	lsls	r0, r3, #22
 8002616:	d50a      	bpl.n	800262e <HAL_ADC_IRQHandler+0x1c6>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002618:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800261a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800261e:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002620:	4620      	mov	r0, r4
 8002622:	f7ff ff20 	bl	8002466 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002626:	6823      	ldr	r3, [r4, #0]
 8002628:	f44f 7200 	mov.w	r2, #512	; 0x200
 800262c:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 800262e:	6823      	ldr	r3, [r4, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	06d1      	lsls	r1, r2, #27
 8002634:	d51b      	bpl.n	800266e <HAL_ADC_IRQHandler+0x206>
 8002636:	685a      	ldr	r2, [r3, #4]
 8002638:	06d2      	lsls	r2, r2, #27
 800263a:	d518      	bpl.n	800266e <HAL_ADC_IRQHandler+0x206>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800263c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800263e:	2a01      	cmp	r2, #1
 8002640:	d007      	beq.n	8002652 <HAL_ADC_IRQHandler+0x1ea>
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002642:	4a27      	ldr	r2, [pc, #156]	; (80026e0 <HAL_ADC_IRQHandler+0x278>)
 8002644:	6891      	ldr	r1, [r2, #8]
 8002646:	06c8      	lsls	r0, r1, #27
 8002648:	d145      	bne.n	80026d6 <HAL_ADC_IRQHandler+0x26e>
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	f013 0f01 	tst.w	r3, #1
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002650:	d00a      	beq.n	8002668 <HAL_ADC_IRQHandler+0x200>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002652:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002654:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002658:	6423      	str	r3, [r4, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800265a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800265c:	f043 0302 	orr.w	r3, r3, #2
 8002660:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_ADC_ErrorCallback(hadc);
 8002662:	4620      	mov	r0, r4
 8002664:	f7ff fc97 	bl	8001f96 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002668:	6823      	ldr	r3, [r4, #0]
 800266a:	2210      	movs	r2, #16
 800266c:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 800266e:	6823      	ldr	r3, [r4, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	0551      	lsls	r1, r2, #21
 8002674:	d510      	bpl.n	8002698 <HAL_ADC_IRQHandler+0x230>
 8002676:	685a      	ldr	r2, [r3, #4]
 8002678:	0552      	lsls	r2, r2, #21
 800267a:	d50d      	bpl.n	8002698 <HAL_ADC_IRQHandler+0x230>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800267c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800267e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002682:	6422      	str	r2, [r4, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002684:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002686:	f042 0208 	orr.w	r2, r2, #8
 800268a:	6462      	str	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800268c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002690:	601a      	str	r2, [r3, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002692:	4620      	mov	r0, r4
 8002694:	f7ff fee5 	bl	8002462 <HAL_ADCEx_InjectedQueueOverflowCallback>
}
 8002698:	bd10      	pop	{r4, pc}
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800269a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800269e:	68d2      	ldr	r2, [r2, #12]
 80026a0:	e70b      	b.n	80024ba <HAL_ADC_IRQHandler+0x52>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80026a4:	f043 0310 	orr.w	r3, r3, #16
 80026a8:	6423      	str	r3, [r4, #64]	; 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026aa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80026ac:	f043 0301 	orr.w	r3, r3, #1
 80026b0:	6463      	str	r3, [r4, #68]	; 0x44
 80026b2:	e71f      	b.n	80024f4 <HAL_ADC_IRQHandler+0x8c>
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80026b4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80026b8:	68d2      	ldr	r2, [r2, #12]
 80026ba:	e745      	b.n	8002548 <HAL_ADC_IRQHandler+0xe0>
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80026bc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80026c0:	68d2      	ldr	r2, [r2, #12]
 80026c2:	e764      	b.n	800258e <HAL_ADC_IRQHandler+0x126>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80026c6:	f043 0310 	orr.w	r3, r3, #16
 80026ca:	6423      	str	r3, [r4, #64]	; 0x40
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026cc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80026ce:	f043 0301 	orr.w	r3, r3, #1
 80026d2:	6463      	str	r3, [r4, #68]	; 0x44
 80026d4:	e770      	b.n	80025b8 <HAL_ADC_IRQHandler+0x150>
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80026d6:	6893      	ldr	r3, [r2, #8]
 80026d8:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 80026dc:	e7b8      	b.n	8002650 <HAL_ADC_IRQHandler+0x1e8>
 80026de:	bf00      	nop
 80026e0:	50000300 	.word	0x50000300

080026e4 <HAL_ADC_ConfigChannel>:
{
 80026e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  __IO uint32_t wait_loop_index = 0U;
 80026e8:	2300      	movs	r3, #0
 80026ea:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80026ec:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80026f0:	68ce      	ldr	r6, [r1, #12]
  __HAL_LOCK(hadc);
 80026f2:	2b01      	cmp	r3, #1
{
 80026f4:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 80026f6:	f000 815f 	beq.w	80029b8 <HAL_ADC_ConfigChannel+0x2d4>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80026fa:	682b      	ldr	r3, [r5, #0]
  __HAL_LOCK(hadc);
 80026fc:	2001      	movs	r0, #1
 80026fe:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002702:	689a      	ldr	r2, [r3, #8]
 8002704:	0757      	lsls	r7, r2, #29
 8002706:	f100 8152 	bmi.w	80029ae <HAL_ADC_ConfigChannel+0x2ca>
    if (sConfig->Rank < 5U)
 800270a:	6848      	ldr	r0, [r1, #4]
 800270c:	680a      	ldr	r2, [r1, #0]
 800270e:	2406      	movs	r4, #6
 8002710:	2804      	cmp	r0, #4
 8002712:	fb04 f400 	mul.w	r4, r4, r0
 8002716:	d831      	bhi.n	800277c <HAL_ADC_ConfigChannel+0x98>
      MODIFY_REG(hadc->Instance->SQR1,
 8002718:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800271a:	271f      	movs	r7, #31
 800271c:	40a7      	lsls	r7, r4
 800271e:	ea20 0007 	bic.w	r0, r0, r7
 8002722:	fa02 f404 	lsl.w	r4, r2, r4
 8002726:	4304      	orrs	r4, r0
 8002728:	631c      	str	r4, [r3, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800272a:	6898      	ldr	r0, [r3, #8]
 800272c:	f010 0f0c 	tst.w	r0, #12
 8002730:	d15c      	bne.n	80027ec <HAL_ADC_ConfigChannel+0x108>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002732:	2a09      	cmp	r2, #9
 8002734:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8002738:	eb02 0042 	add.w	r0, r2, r2, lsl #1
 800273c:	f04f 0407 	mov.w	r4, #7
 8002740:	d941      	bls.n	80027c6 <HAL_ADC_ConfigChannel+0xe2>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002742:	699f      	ldr	r7, [r3, #24]
 8002744:	381e      	subs	r0, #30
 8002746:	4084      	lsls	r4, r0
 8002748:	ea27 0404 	bic.w	r4, r7, r4
 800274c:	fa0c f000 	lsl.w	r0, ip, r0
 8002750:	4320      	orrs	r0, r4
 8002752:	6198      	str	r0, [r3, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002754:	68d8      	ldr	r0, [r3, #12]
 8002756:	f3c0 0cc1 	ubfx	ip, r0, #3, #2
 800275a:	6948      	ldr	r0, [r1, #20]
 800275c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8002760:	fa00 fc0c 	lsl.w	ip, r0, ip
    switch (sConfig->OffsetNumber)
 8002764:	6908      	ldr	r0, [r1, #16]
 8002766:	f100 3eff 	add.w	lr, r0, #4294967295
 800276a:	ea4f 6882 	mov.w	r8, r2, lsl #26
 800276e:	f1be 0f03 	cmp.w	lr, #3
 8002772:	d86b      	bhi.n	800284c <HAL_ADC_ConfigChannel+0x168>
 8002774:	e8df f00e 	tbb	[pc, lr]
 8002778:	5f544930 	.word	0x5f544930
    else if (sConfig->Rank < 10U)
 800277c:	2809      	cmp	r0, #9
 800277e:	d80a      	bhi.n	8002796 <HAL_ADC_ConfigChannel+0xb2>
      MODIFY_REG(hadc->Instance->SQR2,
 8002780:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002782:	3c1e      	subs	r4, #30
 8002784:	271f      	movs	r7, #31
 8002786:	40a7      	lsls	r7, r4
 8002788:	ea20 0007 	bic.w	r0, r0, r7
 800278c:	fa02 f404 	lsl.w	r4, r2, r4
 8002790:	4304      	orrs	r4, r0
 8002792:	635c      	str	r4, [r3, #52]	; 0x34
 8002794:	e7c9      	b.n	800272a <HAL_ADC_ConfigChannel+0x46>
    else if (sConfig->Rank < 15U)
 8002796:	280e      	cmp	r0, #14
 8002798:	f04f 001f 	mov.w	r0, #31
 800279c:	d809      	bhi.n	80027b2 <HAL_ADC_ConfigChannel+0xce>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800279e:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 80027a0:	3c3c      	subs	r4, #60	; 0x3c
 80027a2:	40a0      	lsls	r0, r4
 80027a4:	ea27 0000 	bic.w	r0, r7, r0
 80027a8:	fa02 f404 	lsl.w	r4, r2, r4
 80027ac:	4320      	orrs	r0, r4
 80027ae:	6398      	str	r0, [r3, #56]	; 0x38
 80027b0:	e7bb      	b.n	800272a <HAL_ADC_ConfigChannel+0x46>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80027b2:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 80027b4:	3c5a      	subs	r4, #90	; 0x5a
 80027b6:	40a0      	lsls	r0, r4
 80027b8:	ea27 0000 	bic.w	r0, r7, r0
 80027bc:	fa02 f404 	lsl.w	r4, r2, r4
 80027c0:	4304      	orrs	r4, r0
 80027c2:	63dc      	str	r4, [r3, #60]	; 0x3c
 80027c4:	e7b1      	b.n	800272a <HAL_ADC_ConfigChannel+0x46>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80027c6:	695f      	ldr	r7, [r3, #20]
 80027c8:	4084      	lsls	r4, r0
 80027ca:	ea27 0404 	bic.w	r4, r7, r4
 80027ce:	fa0c f000 	lsl.w	r0, ip, r0
 80027d2:	4304      	orrs	r4, r0
 80027d4:	615c      	str	r4, [r3, #20]
 80027d6:	e7bd      	b.n	8002754 <HAL_ADC_ConfigChannel+0x70>
      MODIFY_REG(hadc->Instance->OFR1               ,
 80027d8:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80027da:	4f78      	ldr	r7, [pc, #480]	; (80029bc <HAL_ADC_ConfigChannel+0x2d8>)
 80027dc:	4007      	ands	r7, r0
 80027de:	ea47 0008 	orr.w	r0, r7, r8
 80027e2:	ea40 000c 	orr.w	r0, r0, ip
 80027e6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80027ea:	6618      	str	r0, [r3, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 80027ec:	6898      	ldr	r0, [r3, #8]
 80027ee:	f000 0003 	and.w	r0, r0, #3
 80027f2:	2801      	cmp	r0, #1
 80027f4:	d14e      	bne.n	8002894 <HAL_ADC_ConfigChannel+0x1b0>
 80027f6:	6818      	ldr	r0, [r3, #0]
 80027f8:	07c4      	lsls	r4, r0, #31
 80027fa:	d54b      	bpl.n	8002894 <HAL_ADC_ConfigChannel+0x1b0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027fc:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 80027fe:	2300      	movs	r3, #0
 8002800:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 8002804:	b002      	add	sp, #8
 8002806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      MODIFY_REG(hadc->Instance->OFR2               ,
 800280a:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800280c:	4f6b      	ldr	r7, [pc, #428]	; (80029bc <HAL_ADC_ConfigChannel+0x2d8>)
 800280e:	4007      	ands	r7, r0
 8002810:	ea47 0008 	orr.w	r0, r7, r8
 8002814:	ea40 000c 	orr.w	r0, r0, ip
 8002818:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800281c:	6658      	str	r0, [r3, #100]	; 0x64
      break;
 800281e:	e7e5      	b.n	80027ec <HAL_ADC_ConfigChannel+0x108>
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002820:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8002822:	4c66      	ldr	r4, [pc, #408]	; (80029bc <HAL_ADC_ConfigChannel+0x2d8>)
 8002824:	4004      	ands	r4, r0
 8002826:	ea44 0008 	orr.w	r0, r4, r8
 800282a:	ea40 000c 	orr.w	r0, r0, ip
 800282e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8002832:	6698      	str	r0, [r3, #104]	; 0x68
      break;
 8002834:	e7da      	b.n	80027ec <HAL_ADC_ConfigChannel+0x108>
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002836:	6edc      	ldr	r4, [r3, #108]	; 0x6c
 8002838:	4860      	ldr	r0, [pc, #384]	; (80029bc <HAL_ADC_ConfigChannel+0x2d8>)
 800283a:	4020      	ands	r0, r4
 800283c:	ea40 0008 	orr.w	r0, r0, r8
 8002840:	ea40 000c 	orr.w	r0, r0, ip
 8002844:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002848:	66d8      	str	r0, [r3, #108]	; 0x6c
 800284a:	e7cf      	b.n	80027ec <HAL_ADC_ConfigChannel+0x108>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800284c:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800284e:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8002852:	4540      	cmp	r0, r8
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002854:	bf02      	ittt	eq
 8002856:	6e18      	ldreq	r0, [r3, #96]	; 0x60
 8002858:	f020 4000 	biceq.w	r0, r0, #2147483648	; 0x80000000
 800285c:	6618      	streq	r0, [r3, #96]	; 0x60
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800285e:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8002860:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8002864:	4540      	cmp	r0, r8
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002866:	bf02      	ittt	eq
 8002868:	6e58      	ldreq	r0, [r3, #100]	; 0x64
 800286a:	f020 4000 	biceq.w	r0, r0, #2147483648	; 0x80000000
 800286e:	6658      	streq	r0, [r3, #100]	; 0x64
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002870:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8002872:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8002876:	4540      	cmp	r0, r8
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002878:	bf02      	ittt	eq
 800287a:	6e98      	ldreq	r0, [r3, #104]	; 0x68
 800287c:	f020 4000 	biceq.w	r0, r0, #2147483648	; 0x80000000
 8002880:	6698      	streq	r0, [r3, #104]	; 0x68
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002882:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8002884:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8002888:	4540      	cmp	r0, r8
 800288a:	d1af      	bne.n	80027ec <HAL_ADC_ConfigChannel+0x108>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800288c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800288e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002892:	e7d9      	b.n	8002848 <HAL_ADC_ConfigChannel+0x164>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002894:	2001      	movs	r0, #1
 8002896:	2e01      	cmp	r6, #1
 8002898:	fa00 f002 	lsl.w	r0, r0, r2
 800289c:	d03b      	beq.n	8002916 <HAL_ADC_ConfigChannel+0x232>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800289e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80028a2:	ea21 0000 	bic.w	r0, r1, r0
 80028a6:	f8c3 00b0 	str.w	r0, [r3, #176]	; 0xb0
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80028aa:	2a10      	cmp	r2, #16
 80028ac:	d156      	bne.n	800295c <HAL_ADC_ConfigChannel+0x278>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80028ae:	4944      	ldr	r1, [pc, #272]	; (80029c0 <HAL_ADC_ConfigChannel+0x2dc>)
 80028b0:	6889      	ldr	r1, [r1, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80028b2:	f411 0f00 	tst.w	r1, #8388608	; 0x800000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80028b6:	d1a1      	bne.n	80027fc <HAL_ADC_ConfigChannel+0x118>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80028b8:	6898      	ldr	r0, [r3, #8]
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80028ba:	4942      	ldr	r1, [pc, #264]	; (80029c4 <HAL_ADC_ConfigChannel+0x2e0>)
 80028bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80028c0:	f000 0003 	and.w	r0, r0, #3
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80028c4:	bf18      	it	ne
 80028c6:	f04f 41a0 	movne.w	r1, #1342177280	; 0x50000000
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80028ca:	2801      	cmp	r0, #1
 80028cc:	d102      	bne.n	80028d4 <HAL_ADC_ConfigChannel+0x1f0>
 80028ce:	6818      	ldr	r0, [r3, #0]
 80028d0:	07c0      	lsls	r0, r0, #31
 80028d2:	d466      	bmi.n	80029a2 <HAL_ADC_ConfigChannel+0x2be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80028d4:	6888      	ldr	r0, [r1, #8]
 80028d6:	f000 0003 	and.w	r0, r0, #3
 80028da:	2801      	cmp	r0, #1
 80028dc:	d102      	bne.n	80028e4 <HAL_ADC_ConfigChannel+0x200>
 80028de:	6809      	ldr	r1, [r1, #0]
 80028e0:	07c9      	lsls	r1, r1, #31
 80028e2:	d45e      	bmi.n	80029a2 <HAL_ADC_ConfigChannel+0x2be>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80028e4:	2a10      	cmp	r2, #16
 80028e6:	d148      	bne.n	800297a <HAL_ADC_ConfigChannel+0x296>
 80028e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028ec:	d186      	bne.n	80027fc <HAL_ADC_ConfigChannel+0x118>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80028ee:	4a34      	ldr	r2, [pc, #208]	; (80029c0 <HAL_ADC_ConfigChannel+0x2dc>)
 80028f0:	6893      	ldr	r3, [r2, #8]
 80028f2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80028f6:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80028f8:	4b33      	ldr	r3, [pc, #204]	; (80029c8 <HAL_ADC_ConfigChannel+0x2e4>)
 80028fa:	4a34      	ldr	r2, [pc, #208]	; (80029cc <HAL_ADC_ConfigChannel+0x2e8>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	fbb3 f2f2 	udiv	r2, r3, r2
 8002902:	230a      	movs	r3, #10
 8002904:	4353      	muls	r3, r2
            wait_loop_index--;
 8002906:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8002908:	9b01      	ldr	r3, [sp, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	f43f af76 	beq.w	80027fc <HAL_ADC_ConfigChannel+0x118>
            wait_loop_index--;
 8002910:	9b01      	ldr	r3, [sp, #4]
 8002912:	3b01      	subs	r3, #1
 8002914:	e7f7      	b.n	8002906 <HAL_ADC_ConfigChannel+0x222>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002916:	f8d3 40b0 	ldr.w	r4, [r3, #176]	; 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800291a:	2a09      	cmp	r2, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800291c:	ea40 0004 	orr.w	r0, r0, r4
 8002920:	f8c3 00b0 	str.w	r0, [r3, #176]	; 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002924:	688c      	ldr	r4, [r1, #8]
 8002926:	d90c      	bls.n	8002942 <HAL_ADC_ConfigChannel+0x25e>
        MODIFY_REG(hadc->Instance->SMPR2,
 8002928:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800292c:	6998      	ldr	r0, [r3, #24]
 800292e:	391b      	subs	r1, #27
 8002930:	2607      	movs	r6, #7
 8002932:	408e      	lsls	r6, r1
 8002934:	ea20 0006 	bic.w	r0, r0, r6
 8002938:	fa04 f101 	lsl.w	r1, r4, r1
 800293c:	4301      	orrs	r1, r0
 800293e:	6199      	str	r1, [r3, #24]
 8002940:	e7b3      	b.n	80028aa <HAL_ADC_ConfigChannel+0x1c6>
        MODIFY_REG(hadc->Instance->SMPR1,
 8002942:	3201      	adds	r2, #1
 8002944:	6958      	ldr	r0, [r3, #20]
 8002946:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800294a:	2107      	movs	r1, #7
 800294c:	4091      	lsls	r1, r2
 800294e:	ea20 0001 	bic.w	r0, r0, r1
 8002952:	fa04 f102 	lsl.w	r1, r4, r2
 8002956:	4301      	orrs	r1, r0
 8002958:	6159      	str	r1, [r3, #20]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800295a:	e74f      	b.n	80027fc <HAL_ADC_ConfigChannel+0x118>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800295c:	2a11      	cmp	r2, #17
 800295e:	d104      	bne.n	800296a <HAL_ADC_ConfigChannel+0x286>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002960:	4917      	ldr	r1, [pc, #92]	; (80029c0 <HAL_ADC_ConfigChannel+0x2dc>)
 8002962:	6889      	ldr	r1, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002964:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
 8002968:	e7a5      	b.n	80028b6 <HAL_ADC_ConfigChannel+0x1d2>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800296a:	2a12      	cmp	r2, #18
 800296c:	f47f af46 	bne.w	80027fc <HAL_ADC_ConfigChannel+0x118>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002970:	4913      	ldr	r1, [pc, #76]	; (80029c0 <HAL_ADC_ConfigChannel+0x2dc>)
 8002972:	6889      	ldr	r1, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002974:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
 8002978:	e79d      	b.n	80028b6 <HAL_ADC_ConfigChannel+0x1d2>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800297a:	2a11      	cmp	r2, #17
 800297c:	d109      	bne.n	8002992 <HAL_ADC_ConfigChannel+0x2ae>
 800297e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002982:	f47f af3b 	bne.w	80027fc <HAL_ADC_ConfigChannel+0x118>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002986:	4a0e      	ldr	r2, [pc, #56]	; (80029c0 <HAL_ADC_ConfigChannel+0x2dc>)
 8002988:	6893      	ldr	r3, [r2, #8]
 800298a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800298e:	6093      	str	r3, [r2, #8]
 8002990:	e734      	b.n	80027fc <HAL_ADC_ConfigChannel+0x118>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002992:	2a12      	cmp	r2, #18
 8002994:	f47f af32 	bne.w	80027fc <HAL_ADC_ConfigChannel+0x118>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002998:	4a09      	ldr	r2, [pc, #36]	; (80029c0 <HAL_ADC_ConfigChannel+0x2dc>)
 800299a:	6893      	ldr	r3, [r2, #8]
 800299c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80029a0:	e7f5      	b.n	800298e <HAL_ADC_ConfigChannel+0x2aa>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029a2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80029a4:	f043 0320 	orr.w	r3, r3, #32
 80029a8:	642b      	str	r3, [r5, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 80029aa:	2001      	movs	r0, #1
 80029ac:	e727      	b.n	80027fe <HAL_ADC_ConfigChannel+0x11a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029ae:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80029b0:	f043 0320 	orr.w	r3, r3, #32
 80029b4:	642b      	str	r3, [r5, #64]	; 0x40
    tmp_hal_status = HAL_ERROR;
 80029b6:	e722      	b.n	80027fe <HAL_ADC_ConfigChannel+0x11a>
  __HAL_LOCK(hadc);
 80029b8:	2002      	movs	r0, #2
 80029ba:	e723      	b.n	8002804 <HAL_ADC_ConfigChannel+0x120>
 80029bc:	83fff000 	.word	0x83fff000
 80029c0:	50000300 	.word	0x50000300
 80029c4:	50000100 	.word	0x50000100
 80029c8:	20000000 	.word	0x20000000
 80029cc:	000f4240 	.word	0x000f4240

080029d0 <HAL_ADCEx_MultiModeConfigChannel>:
{
 80029d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80029d2:	6804      	ldr	r4, [r0, #0]
 80029d4:	4a32      	ldr	r2, [pc, #200]	; (8002aa0 <HAL_ADCEx_MultiModeConfigChannel+0xd0>)
{
 80029d6:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 80029d8:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80029dc:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 80029e0:	bf18      	it	ne
 80029e2:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
  __HAL_LOCK(hadc);
 80029e6:	2801      	cmp	r0, #1
 80029e8:	d057      	beq.n	8002a9a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80029ea:	2001      	movs	r0, #1
  if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80029ec:	680d      	ldr	r5, [r1, #0]
  __HAL_LOCK(hadc);
 80029ee:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80029f2:	68a0      	ldr	r0, [r4, #8]
 80029f4:	0747      	lsls	r7, r0, #29
 80029f6:	d44a      	bmi.n	8002a8e <HAL_ADCEx_MultiModeConfigChannel+0xbe>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80029f8:	6890      	ldr	r0, [r2, #8]
 80029fa:	0746      	lsls	r6, r0, #29
 80029fc:	d447      	bmi.n	8002a8e <HAL_ADCEx_MultiModeConfigChannel+0xbe>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80029fe:	4e29      	ldr	r6, [pc, #164]	; (8002aa4 <HAL_ADCEx_MultiModeConfigChannel+0xd4>)
 8002a00:	b34d      	cbz	r5, 8002a56 <HAL_ADCEx_MultiModeConfigChannel+0x86>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002a02:	68b0      	ldr	r0, [r6, #8]
 8002a04:	684f      	ldr	r7, [r1, #4]
 8002a06:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 8002a0a:	4338      	orrs	r0, r7
 8002a0c:	f893 7030 	ldrb.w	r7, [r3, #48]	; 0x30
 8002a10:	ea40 3047 	orr.w	r0, r0, r7, lsl #13
 8002a14:	60b0      	str	r0, [r6, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002a16:	68a0      	ldr	r0, [r4, #8]
 8002a18:	f000 0003 	and.w	r0, r0, #3
 8002a1c:	2801      	cmp	r0, #1
 8002a1e:	d107      	bne.n	8002a30 <HAL_ADCEx_MultiModeConfigChannel+0x60>
 8002a20:	6820      	ldr	r0, [r4, #0]
 8002a22:	07c4      	lsls	r4, r0, #31
 8002a24:	d504      	bpl.n	8002a30 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a26:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
} 
 8002a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002a30:	6890      	ldr	r0, [r2, #8]
 8002a32:	f000 0003 	and.w	r0, r0, #3
 8002a36:	2801      	cmp	r0, #1
 8002a38:	d102      	bne.n	8002a40 <HAL_ADCEx_MultiModeConfigChannel+0x70>
 8002a3a:	6812      	ldr	r2, [r2, #0]
 8002a3c:	07d0      	lsls	r0, r2, #31
 8002a3e:	d4f2      	bmi.n	8002a26 <HAL_ADCEx_MultiModeConfigChannel+0x56>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002a40:	4818      	ldr	r0, [pc, #96]	; (8002aa4 <HAL_ADCEx_MultiModeConfigChannel+0xd4>)
 8002a42:	6889      	ldr	r1, [r1, #8]
 8002a44:	6882      	ldr	r2, [r0, #8]
 8002a46:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8002a4a:	430d      	orrs	r5, r1
 8002a4c:	f022 020f 	bic.w	r2, r2, #15
 8002a50:	4315      	orrs	r5, r2
 8002a52:	6085      	str	r5, [r0, #8]
 8002a54:	e7e7      	b.n	8002a26 <HAL_ADCEx_MultiModeConfigChannel+0x56>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002a56:	68b1      	ldr	r1, [r6, #8]
 8002a58:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 8002a5c:	60b1      	str	r1, [r6, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002a5e:	68a1      	ldr	r1, [r4, #8]
 8002a60:	f001 0103 	and.w	r1, r1, #3
 8002a64:	2901      	cmp	r1, #1
 8002a66:	d102      	bne.n	8002a6e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8002a68:	6821      	ldr	r1, [r4, #0]
 8002a6a:	07c9      	lsls	r1, r1, #31
 8002a6c:	d4db      	bmi.n	8002a26 <HAL_ADCEx_MultiModeConfigChannel+0x56>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002a6e:	6891      	ldr	r1, [r2, #8]
 8002a70:	f001 0103 	and.w	r1, r1, #3
 8002a74:	2901      	cmp	r1, #1
 8002a76:	d102      	bne.n	8002a7e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002a78:	6812      	ldr	r2, [r2, #0]
 8002a7a:	07d2      	lsls	r2, r2, #31
 8002a7c:	d4d3      	bmi.n	8002a26 <HAL_ADCEx_MultiModeConfigChannel+0x56>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002a7e:	4909      	ldr	r1, [pc, #36]	; (8002aa4 <HAL_ADCEx_MultiModeConfigChannel+0xd4>)
 8002a80:	688a      	ldr	r2, [r1, #8]
 8002a82:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8002a86:	f022 020f 	bic.w	r2, r2, #15
 8002a8a:	608a      	str	r2, [r1, #8]
 8002a8c:	e7cb      	b.n	8002a26 <HAL_ADCEx_MultiModeConfigChannel+0x56>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a90:	f042 0220 	orr.w	r2, r2, #32
 8002a94:	641a      	str	r2, [r3, #64]	; 0x40
    tmp_hal_status = HAL_ERROR;
 8002a96:	2001      	movs	r0, #1
 8002a98:	e7c6      	b.n	8002a28 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  __HAL_LOCK(hadc);
 8002a9a:	2002      	movs	r0, #2
 8002a9c:	e7c7      	b.n	8002a2e <HAL_ADCEx_MultiModeConfigChannel+0x5e>
 8002a9e:	bf00      	nop
 8002aa0:	50000100 	.word	0x50000100
 8002aa4:	50000300 	.word	0x50000300

08002aa8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002aa8:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002aaa:	4604      	mov	r4, r0
 8002aac:	2800      	cmp	r0, #0
 8002aae:	d06e      	beq.n	8002b8e <HAL_CAN_Init+0xe6>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002ab0:	f890 3020 	ldrb.w	r3, [r0, #32]
 8002ab4:	b90b      	cbnz	r3, 8002aba <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002ab6:	f7fe fc97 	bl	80013e8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002aba:	6822      	ldr	r2, [r4, #0]
 8002abc:	6813      	ldr	r3, [r2, #0]
 8002abe:	f043 0301 	orr.w	r3, r3, #1
 8002ac2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ac4:	f7ff fa4a 	bl	8001f5c <HAL_GetTick>
 8002ac8:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002aca:	6823      	ldr	r3, [r4, #0]
 8002acc:	685a      	ldr	r2, [r3, #4]
 8002ace:	07d1      	lsls	r1, r2, #31
 8002ad0:	d551      	bpl.n	8002b76 <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	f022 0202 	bic.w	r2, r2, #2
 8002ad8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ada:	f7ff fa3f 	bl	8001f5c <HAL_GetTick>
 8002ade:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002ae0:	6823      	ldr	r3, [r4, #0]
 8002ae2:	685a      	ldr	r2, [r3, #4]
 8002ae4:	0792      	lsls	r2, r2, #30
 8002ae6:	d454      	bmi.n	8002b92 <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002ae8:	7e22      	ldrb	r2, [r4, #24]
 8002aea:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	bf0c      	ite	eq
 8002af0:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002af4:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8002af8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002afa:	7e62      	ldrb	r2, [r4, #25]
 8002afc:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	bf0c      	ite	eq
 8002b02:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002b06:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 8002b0a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002b0c:	7ea2      	ldrb	r2, [r4, #26]
 8002b0e:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	bf0c      	ite	eq
 8002b14:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002b18:	f022 0220 	bicne.w	r2, r2, #32
 8002b1c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002b1e:	7ee2      	ldrb	r2, [r4, #27]
 8002b20:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	bf0c      	ite	eq
 8002b26:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002b2a:	f042 0210 	orrne.w	r2, r2, #16
 8002b2e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002b30:	7f22      	ldrb	r2, [r4, #28]
 8002b32:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	bf0c      	ite	eq
 8002b38:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002b3c:	f022 0208 	bicne.w	r2, r2, #8
 8002b40:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002b42:	7f62      	ldrb	r2, [r4, #29]
 8002b44:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	bf0c      	ite	eq
 8002b4a:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002b4e:	f022 0204 	bicne.w	r2, r2, #4
 8002b52:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002b54:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	6921      	ldr	r1, [r4, #16]
 8002b5c:	430a      	orrs	r2, r1
 8002b5e:	6961      	ldr	r1, [r4, #20]
 8002b60:	430a      	orrs	r2, r1
 8002b62:	6861      	ldr	r1, [r4, #4]
 8002b64:	3901      	subs	r1, #1
 8002b66:	430a      	orrs	r2, r1
 8002b68:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002b6a:	2000      	movs	r0, #0

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002b6c:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002b6e:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8002b70:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
}
 8002b74:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b76:	f7ff f9f1 	bl	8001f5c <HAL_GetTick>
 8002b7a:	1b40      	subs	r0, r0, r5
 8002b7c:	280a      	cmp	r0, #10
 8002b7e:	d9a4      	bls.n	8002aca <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b86:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8002b88:	2305      	movs	r3, #5
 8002b8a:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8002b8e:	2001      	movs	r0, #1
 8002b90:	e7f0      	b.n	8002b74 <HAL_CAN_Init+0xcc>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b92:	f7ff f9e3 	bl	8001f5c <HAL_GetTick>
 8002b96:	1b40      	subs	r0, r0, r5
 8002b98:	280a      	cmp	r0, #10
 8002b9a:	d9a1      	bls.n	8002ae0 <HAL_CAN_Init+0x38>
 8002b9c:	e7f0      	b.n	8002b80 <HAL_CAN_Init+0xd8>
	...

08002ba0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ba0:	4907      	ldr	r1, [pc, #28]	; (8002bc0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002ba2:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ba4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ba8:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002baa:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bb0:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002bbc:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002bbe:	4770      	bx	lr
 8002bc0:	e000ed00 	.word	0xe000ed00

08002bc4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bc4:	4b16      	ldr	r3, [pc, #88]	; (8002c20 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bc6:	b530      	push	{r4, r5, lr}
 8002bc8:	68dc      	ldr	r4, [r3, #12]
 8002bca:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bce:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bd2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bd4:	2b04      	cmp	r3, #4
 8002bd6:	bf28      	it	cs
 8002bd8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bda:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bdc:	f04f 35ff 	mov.w	r5, #4294967295
 8002be0:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002be4:	bf8c      	ite	hi
 8002be6:	3c03      	subhi	r4, #3
 8002be8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bea:	ea21 0303 	bic.w	r3, r1, r3
 8002bee:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bf0:	fa05 f404 	lsl.w	r4, r5, r4
 8002bf4:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8002bf8:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bfa:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bfe:	bfac      	ite	ge
 8002c00:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c04:	4a07      	ldrlt	r2, [pc, #28]	; (8002c24 <HAL_NVIC_SetPriority+0x60>)
 8002c06:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002c0a:	bfb8      	it	lt
 8002c0c:	f000 000f 	andlt.w	r0, r0, #15
 8002c10:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c12:	bfaa      	itet	ge
 8002c14:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c18:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c1a:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002c1e:	bd30      	pop	{r4, r5, pc}
 8002c20:	e000ed00 	.word	0xe000ed00
 8002c24:	e000ed14 	.word	0xe000ed14

08002c28 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002c28:	2800      	cmp	r0, #0
 8002c2a:	db08      	blt.n	8002c3e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c2c:	0942      	lsrs	r2, r0, #5
 8002c2e:	2301      	movs	r3, #1
 8002c30:	f000 001f 	and.w	r0, r0, #31
 8002c34:	fa03 f000 	lsl.w	r0, r3, r0
 8002c38:	4b01      	ldr	r3, [pc, #4]	; (8002c40 <HAL_NVIC_EnableIRQ+0x18>)
 8002c3a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002c3e:	4770      	bx	lr
 8002c40:	e000e100 	.word	0xe000e100

08002c44 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c44:	3801      	subs	r0, #1
 8002c46:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002c4a:	d20a      	bcs.n	8002c62 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c4c:	4b06      	ldr	r3, [pc, #24]	; (8002c68 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c4e:	4a07      	ldr	r2, [pc, #28]	; (8002c6c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c50:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c52:	21f0      	movs	r1, #240	; 0xf0
 8002c54:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c58:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c5a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c5c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c60:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002c62:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	e000e010 	.word	0xe000e010
 8002c6c:	e000ed00 	.word	0xe000ed00

08002c70 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002c70:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002c72:	b320      	cbz	r0, 8002cbe <HAL_DMA_Init+0x4e>
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002c74:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8002c78:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c7a:	68c4      	ldr	r4, [r0, #12]
  tmp = hdma->Instance->CCR;
 8002c7c:	6801      	ldr	r1, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c7e:	4323      	orrs	r3, r4
 8002c80:	6904      	ldr	r4, [r0, #16]
  tmp = hdma->Instance->CCR;
 8002c82:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c84:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c86:	6944      	ldr	r4, [r0, #20]
 8002c88:	4323      	orrs	r3, r4
 8002c8a:	6984      	ldr	r4, [r0, #24]
 8002c8c:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c8e:	69c4      	ldr	r4, [r0, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002c90:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 8002c94:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c98:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8002c9a:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002c9c:	600b      	str	r3, [r1, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002c9e:	4b09      	ldr	r3, [pc, #36]	; (8002cc4 <HAL_DMA_Init+0x54>)
 8002ca0:	2214      	movs	r2, #20
 8002ca2:	440b      	add	r3, r1
 8002ca4:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002cac:	4b06      	ldr	r3, [pc, #24]	; (8002cc8 <HAL_DMA_Init+0x58>)
 8002cae:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 8002cb0:	f44f 7280 	mov.w	r2, #256	; 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	6383      	str	r3, [r0, #56]	; 0x38
  hdma->Lock = HAL_UNLOCKED;
 8002cb8:	8402      	strh	r2, [r0, #32]
  return HAL_OK;
 8002cba:	4618      	mov	r0, r3
}  
 8002cbc:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002cbe:	2001      	movs	r0, #1
 8002cc0:	e7fc      	b.n	8002cbc <HAL_DMA_Init+0x4c>
 8002cc2:	bf00      	nop
 8002cc4:	bffdfff8 	.word	0xbffdfff8
 8002cc8:	40020000 	.word	0x40020000

08002ccc <HAL_DMA_Start_IT>:
{
 8002ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8002cce:	f890 4020 	ldrb.w	r4, [r0, #32]
 8002cd2:	2c01      	cmp	r4, #1
 8002cd4:	d034      	beq.n	8002d40 <HAL_DMA_Start_IT+0x74>
  if(HAL_DMA_STATE_READY == hdma->State)
 8002cd6:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8002cda:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8002cdc:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 8002cde:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ce2:	f04f 0600 	mov.w	r6, #0
 8002ce6:	f04f 0402 	mov.w	r4, #2
 8002cea:	d127      	bne.n	8002d3c <HAL_DMA_Start_IT+0x70>
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002cec:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002cf0:	6804      	ldr	r4, [r0, #0]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cf2:	6386      	str	r6, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002cf4:	6826      	ldr	r6, [r4, #0]
 8002cf6:	f026 0601 	bic.w	r6, r6, #1
 8002cfa:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002cfc:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	; 0x3c
 8002d00:	40bd      	lsls	r5, r7
 8002d02:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 8002d04:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d06:	6843      	ldr	r3, [r0, #4]
 8002d08:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 8002d0a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->Instance->CPAR = DstAddress;
 8002d0c:	bf0b      	itete	eq
 8002d0e:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 8002d10:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002d12:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 8002d14:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8002d16:	b14b      	cbz	r3, 8002d2c <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002d18:	6823      	ldr	r3, [r4, #0]
 8002d1a:	f043 030e 	orr.w	r3, r3, #14
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002d1e:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002d20:	6823      	ldr	r3, [r4, #0]
 8002d22:	f043 0301 	orr.w	r3, r3, #1
 8002d26:	6023      	str	r3, [r4, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002d28:	2000      	movs	r0, #0
} 
 8002d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002d2c:	6823      	ldr	r3, [r4, #0]
 8002d2e:	f043 030a 	orr.w	r3, r3, #10
 8002d32:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002d34:	6823      	ldr	r3, [r4, #0]
 8002d36:	f023 0304 	bic.w	r3, r3, #4
 8002d3a:	e7f0      	b.n	8002d1e <HAL_DMA_Start_IT+0x52>
    __HAL_UNLOCK(hdma); 
 8002d3c:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 8002d40:	2002      	movs	r0, #2
 8002d42:	e7f2      	b.n	8002d2a <HAL_DMA_Start_IT+0x5e>

08002d44 <HAL_DMA_Abort_IT>:
{  
 8002d44:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002d46:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 8002d4a:	2a02      	cmp	r2, #2
 8002d4c:	d003      	beq.n	8002d56 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d4e:	2204      	movs	r2, #4
 8002d50:	6382      	str	r2, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8002d52:	2001      	movs	r0, #1
}
 8002d54:	bd10      	pop	{r4, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002d56:	6802      	ldr	r2, [r0, #0]
    if(hdma->XferAbortCallback != NULL)
 8002d58:	6b43      	ldr	r3, [r0, #52]	; 0x34
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002d5a:	6811      	ldr	r1, [r2, #0]
 8002d5c:	f021 010e 	bic.w	r1, r1, #14
 8002d60:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002d62:	6811      	ldr	r1, [r2, #0]
 8002d64:	f021 0101 	bic.w	r1, r1, #1
 8002d68:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002d6a:	e9d0 140f 	ldrd	r1, r4, [r0, #60]	; 0x3c
 8002d6e:	2201      	movs	r2, #1
 8002d70:	40a2      	lsls	r2, r4
 8002d72:	604a      	str	r2, [r1, #4]
    __HAL_UNLOCK(hdma);
 8002d74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d78:	8402      	strh	r2, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8002d7a:	b113      	cbz	r3, 8002d82 <HAL_DMA_Abort_IT+0x3e>
      hdma->XferAbortCallback(hdma);
 8002d7c:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8002d7e:	2000      	movs	r0, #0
 8002d80:	e7e8      	b.n	8002d54 <HAL_DMA_Abort_IT+0x10>
 8002d82:	4618      	mov	r0, r3
 8002d84:	e7e6      	b.n	8002d54 <HAL_DMA_Abort_IT+0x10>

08002d86 <HAL_DMA_IRQHandler>:
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002d86:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002d88:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;
 8002d8a:	6803      	ldr	r3, [r0, #0]
{
 8002d8c:	b470      	push	{r4, r5, r6}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002d8e:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002d90:	681d      	ldr	r5, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002d92:	2404      	movs	r4, #4
 8002d94:	4094      	lsls	r4, r2
 8002d96:	4234      	tst	r4, r6
 8002d98:	d00e      	beq.n	8002db8 <HAL_DMA_IRQHandler+0x32>
 8002d9a:	f015 0f04 	tst.w	r5, #4
 8002d9e:	d00b      	beq.n	8002db8 <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	0692      	lsls	r2, r2, #26
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002da4:	bf5e      	ittt	pl
 8002da6:	681a      	ldrpl	r2, [r3, #0]
 8002da8:	f022 0204 	bicpl.w	r2, r2, #4
 8002dac:	601a      	strpl	r2, [r3, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 8002dae:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002db0:	604c      	str	r4, [r1, #4]
    if(hdma->XferErrorCallback != NULL)
 8002db2:	b363      	cbz	r3, 8002e0e <HAL_DMA_IRQHandler+0x88>
}  
 8002db4:	bc70      	pop	{r4, r5, r6}
    	hdma->XferErrorCallback(hdma);
 8002db6:	4718      	bx	r3
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002db8:	2402      	movs	r4, #2
 8002dba:	4094      	lsls	r4, r2
 8002dbc:	4234      	tst	r4, r6
 8002dbe:	d012      	beq.n	8002de6 <HAL_DMA_IRQHandler+0x60>
 8002dc0:	f015 0f02 	tst.w	r5, #2
 8002dc4:	d00f      	beq.n	8002de6 <HAL_DMA_IRQHandler+0x60>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	0695      	lsls	r5, r2, #26
 8002dca:	d406      	bmi.n	8002dda <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	f022 020a 	bic.w	r2, r2, #10
 8002dd2:	601a      	str	r2, [r3, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  	__HAL_UNLOCK(hdma);
 8002dda:	2300      	movs	r3, #0
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002ddc:	604c      	str	r4, [r1, #4]
  	__HAL_UNLOCK(hdma);
 8002dde:	f880 3020 	strb.w	r3, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 8002de2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002de4:	e7e5      	b.n	8002db2 <HAL_DMA_IRQHandler+0x2c>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002de6:	2408      	movs	r4, #8
 8002de8:	4094      	lsls	r4, r2
 8002dea:	4234      	tst	r4, r6
 8002dec:	d00f      	beq.n	8002e0e <HAL_DMA_IRQHandler+0x88>
 8002dee:	072c      	lsls	r4, r5, #28
 8002df0:	d50d      	bpl.n	8002e0e <HAL_DMA_IRQHandler+0x88>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002df2:	681c      	ldr	r4, [r3, #0]
 8002df4:	f024 040e 	bic.w	r4, r4, #14
 8002df8:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	fa03 f202 	lsl.w	r2, r3, r2
 8002e00:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e02:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma); 
 8002e04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e08:	8403      	strh	r3, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 8002e0a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002e0c:	e7d1      	b.n	8002db2 <HAL_DMA_IRQHandler+0x2c>
}  
 8002e0e:	bc70      	pop	{r4, r5, r6}
 8002e10:	4770      	bx	lr

08002e12 <HAL_DMA_GetState>:
}
 8002e12:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
 8002e16:	4770      	bx	lr

08002e18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e1c:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8002f94 <HAL_GPIO_Init+0x17c>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e20:	4c5a      	ldr	r4, [pc, #360]	; (8002f8c <HAL_GPIO_Init+0x174>)
  uint32_t position = 0x00u;
 8002e22:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e24:	680a      	ldr	r2, [r1, #0]
 8002e26:	fa32 f503 	lsrs.w	r5, r2, r3
 8002e2a:	d102      	bne.n	8002e32 <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 8002e2c:	b003      	add	sp, #12
 8002e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e32:	2501      	movs	r5, #1
 8002e34:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00u)
 8002e38:	ea18 0202 	ands.w	r2, r8, r2
 8002e3c:	f000 809d 	beq.w	8002f7a <HAL_GPIO_Init+0x162>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e40:	684e      	ldr	r6, [r1, #4]
 8002e42:	2703      	movs	r7, #3
 8002e44:	f006 0503 	and.w	r5, r6, #3
 8002e48:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8002e4c:	fa07 fc0e 	lsl.w	ip, r7, lr
 8002e50:	1e6f      	subs	r7, r5, #1
 8002e52:	2f01      	cmp	r7, #1
 8002e54:	ea6f 0c0c 	mvn.w	ip, ip
 8002e58:	d834      	bhi.n	8002ec4 <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 8002e5a:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002e5c:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e60:	68cf      	ldr	r7, [r1, #12]
 8002e62:	fa07 f70e 	lsl.w	r7, r7, lr
 8002e66:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8002e6a:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002e6c:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e6e:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e72:	f3c6 1700 	ubfx	r7, r6, #4, #1
 8002e76:	409f      	lsls	r7, r3
 8002e78:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8002e7c:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8002e7e:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002e80:	ea07 080c 	and.w	r8, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002e84:	688f      	ldr	r7, [r1, #8]
 8002e86:	fa07 f70e 	lsl.w	r7, r7, lr
 8002e8a:	ea47 0708 	orr.w	r7, r7, r8
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e8e:	2d02      	cmp	r5, #2
        GPIOx->PUPDR = temp;
 8002e90:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e92:	d119      	bne.n	8002ec8 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->AFR[position >> 3u];
 8002e94:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 8002e98:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e9c:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8002ea0:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ea4:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8002ea8:	f04f 0b0f 	mov.w	fp, #15
 8002eac:	fa0b fb0a 	lsl.w	fp, fp, sl
 8002eb0:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002eb4:	690f      	ldr	r7, [r1, #16]
 8002eb6:	fa07 f70a 	lsl.w	r7, r7, sl
 8002eba:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3u] = temp;
 8002ebe:	f8c8 7020 	str.w	r7, [r8, #32]
 8002ec2:	e001      	b.n	8002ec8 <HAL_GPIO_Init+0xb0>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ec4:	2d03      	cmp	r5, #3
 8002ec6:	d1da      	bne.n	8002e7e <HAL_GPIO_Init+0x66>
      temp = GPIOx->MODER;
 8002ec8:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002eca:	fa05 f50e 	lsl.w	r5, r5, lr
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002ece:	ea07 0c0c 	and.w	ip, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002ed2:	ea45 050c 	orr.w	r5, r5, ip
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ed6:	f416 3f40 	tst.w	r6, #196608	; 0x30000
      GPIOx->MODER = temp;
 8002eda:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002edc:	d04d      	beq.n	8002f7a <HAL_GPIO_Init+0x162>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ede:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8002ee2:	f045 0501 	orr.w	r5, r5, #1
 8002ee6:	f8c9 5018 	str.w	r5, [r9, #24]
 8002eea:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8002eee:	f023 0703 	bic.w	r7, r3, #3
 8002ef2:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8002ef6:	f005 0501 	and.w	r5, r5, #1
 8002efa:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8002efe:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f00:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f04:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8002f06:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f08:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8002f0c:	f04f 0e0f 	mov.w	lr, #15
 8002f10:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f14:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f18:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f1c:	d02f      	beq.n	8002f7e <HAL_GPIO_Init+0x166>
 8002f1e:	4d1c      	ldr	r5, [pc, #112]	; (8002f90 <HAL_GPIO_Init+0x178>)
 8002f20:	42a8      	cmp	r0, r5
 8002f22:	d02e      	beq.n	8002f82 <HAL_GPIO_Init+0x16a>
 8002f24:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002f28:	42a8      	cmp	r0, r5
 8002f2a:	d02c      	beq.n	8002f86 <HAL_GPIO_Init+0x16e>
 8002f2c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002f30:	42a8      	cmp	r0, r5
 8002f32:	bf0c      	ite	eq
 8002f34:	2503      	moveq	r5, #3
 8002f36:	2505      	movne	r5, #5
 8002f38:	fa05 f50c 	lsl.w	r5, r5, ip
 8002f3c:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f40:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8002f42:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8002f44:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f46:	f416 3f80 	tst.w	r6, #65536	; 0x10000
        temp &= ~(iocurrent);
 8002f4a:	bf0c      	ite	eq
 8002f4c:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8002f4e:	4315      	orrne	r5, r2
        EXTI->IMR = temp;
 8002f50:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR;
 8002f52:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f54:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        temp &= ~(iocurrent);
 8002f58:	bf0c      	ite	eq
 8002f5a:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8002f5c:	4315      	orrne	r5, r2
        EXTI->EMR = temp;
 8002f5e:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR;
 8002f60:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f62:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8002f66:	bf0c      	ite	eq
 8002f68:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8002f6a:	4315      	orrne	r5, r2
        EXTI->RTSR = temp;
 8002f6c:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR;
 8002f6e:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f70:	02b6      	lsls	r6, r6, #10
        temp &= ~(iocurrent);
 8002f72:	bf54      	ite	pl
 8002f74:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8002f76:	4315      	orrmi	r5, r2
        EXTI->FTSR = temp;
 8002f78:	60e5      	str	r5, [r4, #12]
    position++;
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	e752      	b.n	8002e24 <HAL_GPIO_Init+0xc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f7e:	2500      	movs	r5, #0
 8002f80:	e7da      	b.n	8002f38 <HAL_GPIO_Init+0x120>
 8002f82:	2501      	movs	r5, #1
 8002f84:	e7d8      	b.n	8002f38 <HAL_GPIO_Init+0x120>
 8002f86:	2502      	movs	r5, #2
 8002f88:	e7d6      	b.n	8002f38 <HAL_GPIO_Init+0x120>
 8002f8a:	bf00      	nop
 8002f8c:	40010400 	.word	0x40010400
 8002f90:	48000400 	.word	0x48000400
 8002f94:	40021000 	.word	0x40021000

08002f98 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f98:	b10a      	cbz	r2, 8002f9e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f9a:	6181      	str	r1, [r0, #24]
 8002f9c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f9e:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8002fa0:	4770      	bx	lr

08002fa2 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002fa2:	6803      	ldr	r3, [r0, #0]
 8002fa4:	699a      	ldr	r2, [r3, #24]
 8002fa6:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 8002fa8:	bf44      	itt	mi
 8002faa:	2200      	movmi	r2, #0
 8002fac:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fae:	699a      	ldr	r2, [r3, #24]
 8002fb0:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002fb2:	bf5e      	ittt	pl
 8002fb4:	699a      	ldrpl	r2, [r3, #24]
 8002fb6:	f042 0201 	orrpl.w	r2, r2, #1
 8002fba:	619a      	strpl	r2, [r3, #24]
  }
}
 8002fbc:	4770      	bx	lr

08002fbe <I2C_Disable_IRQ>:
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002fbe:	f011 0301 	ands.w	r3, r1, #1
 8002fc2:	d007      	beq.n	8002fd4 <I2C_Disable_IRQ+0x16>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002fc4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002fc8:	f003 0328 	and.w	r3, r3, #40	; 0x28
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002fcc:	2b28      	cmp	r3, #40	; 0x28
 8002fce:	bf0c      	ite	eq
 8002fd0:	2342      	moveq	r3, #66	; 0x42
 8002fd2:	23f2      	movne	r3, #242	; 0xf2
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002fd4:	078a      	lsls	r2, r1, #30
 8002fd6:	d509      	bpl.n	8002fec <I2C_Disable_IRQ+0x2e>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002fd8:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002fdc:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8002fe0:	2a28      	cmp	r2, #40	; 0x28
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002fe2:	bf0c      	ite	eq
 8002fe4:	f043 0344 	orreq.w	r3, r3, #68	; 0x44
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002fe8:	f043 03f4 	orrne.w	r3, r3, #244	; 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002fec:	040a      	lsls	r2, r1, #16
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002fee:	6801      	ldr	r1, [r0, #0]
 8002ff0:	680a      	ldr	r2, [r1, #0]
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002ff2:	bf48      	it	mi
 8002ff4:	f043 03b8 	orrmi.w	r3, r3, #184	; 0xb8
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002ff8:	ea22 0303 	bic.w	r3, r2, r3
 8002ffc:	600b      	str	r3, [r1, #0]
}
 8002ffe:	4770      	bx	lr

08003000 <HAL_I2C_Init>:
{
 8003000:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8003002:	4604      	mov	r4, r0
 8003004:	2800      	cmp	r0, #0
 8003006:	d04a      	beq.n	800309e <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003008:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800300c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003010:	b91b      	cbnz	r3, 800301a <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8003012:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8003016:	f7fe fadb 	bl	80015d0 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800301a:	2324      	movs	r3, #36	; 0x24
 800301c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8003020:	6823      	ldr	r3, [r4, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	f022 0201 	bic.w	r2, r2, #1
 8003028:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800302a:	6862      	ldr	r2, [r4, #4]
 800302c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003030:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003032:	689a      	ldr	r2, [r3, #8]
 8003034:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003038:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800303a:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800303e:	2901      	cmp	r1, #1
 8003040:	d124      	bne.n	800308c <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003042:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003046:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003048:	685a      	ldr	r2, [r3, #4]
 800304a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800304e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003052:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003054:	68da      	ldr	r2, [r3, #12]
 8003056:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800305a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800305c:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8003060:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003062:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003064:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003068:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800306a:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 800306e:	430a      	orrs	r2, r1
 8003070:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	f042 0201 	orr.w	r2, r2, #1
 8003078:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800307a:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800307c:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800307e:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003080:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003084:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003086:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800308a:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800308c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003090:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003092:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003094:	bf04      	itt	eq
 8003096:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 800309a:	605a      	streq	r2, [r3, #4]
 800309c:	e7d4      	b.n	8003048 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 800309e:	2001      	movs	r0, #1
 80030a0:	e7f3      	b.n	800308a <HAL_I2C_Init+0x8a>

080030a2 <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80030a2:	6802      	ldr	r2, [r0, #0]
  if (hi2c->XferISR != NULL)
 80030a4:	6b43      	ldr	r3, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80030a6:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80030a8:	6812      	ldr	r2, [r2, #0]
  if (hi2c->XferISR != NULL)
 80030aa:	b103      	cbz	r3, 80030ae <HAL_I2C_EV_IRQHandler+0xc>
    hi2c->XferISR(hi2c, itflags, itsources);
 80030ac:	4718      	bx	r3
}
 80030ae:	4770      	bx	lr

080030b0 <HAL_I2C_SlaveTxCpltCallback>:
 80030b0:	4770      	bx	lr

080030b2 <HAL_I2C_SlaveRxCpltCallback>:
 80030b2:	4770      	bx	lr

080030b4 <I2C_ITSlaveSeqCplt>:
{
 80030b4:	b508      	push	{r3, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80030b6:	6803      	ldr	r3, [r0, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030ba:	2100      	movs	r1, #0
 80030bc:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80030c0:	0451      	lsls	r1, r2, #17
 80030c2:	d515      	bpl.n	80030f0 <I2C_ITSlaveSeqCplt+0x3c>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80030ca:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80030cc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80030d0:	2b29      	cmp	r3, #41	; 0x29
 80030d2:	d113      	bne.n	80030fc <I2C_ITSlaveSeqCplt+0x48>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80030d4:	2328      	movs	r3, #40	; 0x28
 80030d6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80030da:	2321      	movs	r3, #33	; 0x21
 80030dc:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80030de:	2101      	movs	r1, #1
 80030e0:	f7ff ff6d 	bl	8002fbe <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80030e4:	2300      	movs	r3, #0
 80030e6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80030ea:	f7ff ffe1 	bl	80030b0 <HAL_I2C_SlaveTxCpltCallback>
}
 80030ee:	bd08      	pop	{r3, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80030f0:	0412      	lsls	r2, r2, #16
 80030f2:	d5eb      	bpl.n	80030cc <I2C_ITSlaveSeqCplt+0x18>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030fa:	e7e6      	b.n	80030ca <I2C_ITSlaveSeqCplt+0x16>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80030fc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003100:	2b2a      	cmp	r3, #42	; 0x2a
 8003102:	d1f4      	bne.n	80030ee <I2C_ITSlaveSeqCplt+0x3a>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003104:	2328      	movs	r3, #40	; 0x28
 8003106:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800310a:	2322      	movs	r3, #34	; 0x22
 800310c:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800310e:	2102      	movs	r1, #2
 8003110:	f7ff ff55 	bl	8002fbe <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003114:	2300      	movs	r3, #0
 8003116:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800311a:	f7ff ffca 	bl	80030b2 <HAL_I2C_SlaveRxCpltCallback>
}
 800311e:	e7e6      	b.n	80030ee <I2C_ITSlaveSeqCplt+0x3a>

08003120 <HAL_I2C_AddrCallback>:
}
 8003120:	4770      	bx	lr

08003122 <I2C_ITAddrCplt.isra.0>:
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8003122:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003124:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8003128:	6803      	ldr	r3, [r0, #0]
 800312a:	f002 0228 	and.w	r2, r2, #40	; 0x28
 800312e:	2a28      	cmp	r2, #40	; 0x28
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8003130:	4604      	mov	r4, r0
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003132:	d136      	bne.n	80031a2 <I2C_ITAddrCplt.isra.0+0x80>
    transferdirection = I2C_GET_DIR(hi2c);
 8003134:	699e      	ldr	r6, [r3, #24]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003136:	68c2      	ldr	r2, [r0, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003138:	699d      	ldr	r5, [r3, #24]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800313a:	6899      	ldr	r1, [r3, #8]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800313c:	68df      	ldr	r7, [r3, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800313e:	0c2d      	lsrs	r5, r5, #16
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003140:	2a02      	cmp	r2, #2
    transferdirection = I2C_GET_DIR(hi2c);
 8003142:	f3c6 4600 	ubfx	r6, r6, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003146:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800314a:	d121      	bne.n	8003190 <I2C_ITAddrCplt.isra.0+0x6e>
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800314c:	ea85 15d1 	eor.w	r5, r5, r1, lsr #7
 8003150:	f015 0506 	ands.w	r5, r5, #6
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003154:	f3c1 0209 	ubfx	r2, r1, #0, #10
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003158:	d10e      	bne.n	8003178 <I2C_ITAddrCplt.isra.0+0x56>
        hi2c->AddrEventCount++;
 800315a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800315c:	3101      	adds	r1, #1
 800315e:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003160:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003162:	2902      	cmp	r1, #2
 8003164:	d107      	bne.n	8003176 <I2C_ITAddrCplt.isra.0+0x54>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003166:	2108      	movs	r1, #8
          hi2c->AddrEventCount = 0U;
 8003168:	6485      	str	r5, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800316a:	61d9      	str	r1, [r3, #28]
          __HAL_UNLOCK(hi2c);
 800316c:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003170:	4631      	mov	r1, r6
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003172:	f7ff ffd5 	bl	8003120 <HAL_I2C_AddrCallback>
}
 8003176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003178:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800317c:	f7ff ff1f 	bl	8002fbe <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003180:	2300      	movs	r3, #0
 8003182:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003186:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800318a:	4631      	mov	r1, r6
 800318c:	4620      	mov	r0, r4
 800318e:	e7f0      	b.n	8003172 <I2C_ITAddrCplt.isra.0+0x50>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003190:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003194:	f7ff ff13 	bl	8002fbe <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003198:	2300      	movs	r3, #0
 800319a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800319e:	462a      	mov	r2, r5
 80031a0:	e7f3      	b.n	800318a <I2C_ITAddrCplt.isra.0+0x68>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80031a2:	2208      	movs	r2, #8
 80031a4:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80031a6:	2300      	movs	r3, #0
 80031a8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
}
 80031ac:	e7e3      	b.n	8003176 <I2C_ITAddrCplt.isra.0+0x54>

080031ae <HAL_I2C_ListenCpltCallback>:
 80031ae:	4770      	bx	lr

080031b0 <I2C_ITListenCplt>:
{
 80031b0:	b508      	push	{r3, lr}
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031b2:	4b16      	ldr	r3, [pc, #88]	; (800320c <I2C_ITListenCplt+0x5c>)
 80031b4:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->State = HAL_I2C_STATE_READY;
 80031b6:	2220      	movs	r2, #32
  hi2c->PreviousState = I2C_STATE_NONE;
 80031b8:	2300      	movs	r3, #0
 80031ba:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->XferISR = NULL;
 80031bc:	6343      	str	r3, [r0, #52]	; 0x34
  hi2c->State = HAL_I2C_STATE_READY;
 80031be:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031c2:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80031c6:	074b      	lsls	r3, r1, #29
 80031c8:	d512      	bpl.n	80031f0 <I2C_ITListenCplt+0x40>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80031ca:	6803      	ldr	r3, [r0, #0]
 80031cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031ce:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80031d0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80031d2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80031d4:	3301      	adds	r3, #1
 80031d6:	6243      	str	r3, [r0, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 80031d8:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 80031da:	b14b      	cbz	r3, 80031f0 <I2C_ITListenCplt+0x40>
      hi2c->XferSize--;
 80031dc:	3b01      	subs	r3, #1
 80031de:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->XferCount--;
 80031e0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80031e2:	3b01      	subs	r3, #1
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80031e8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80031ea:	f043 0304 	orr.w	r3, r3, #4
 80031ee:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80031f0:	f248 0103 	movw	r1, #32771	; 0x8003
 80031f4:	f7ff fee3 	bl	8002fbe <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031f8:	6803      	ldr	r3, [r0, #0]
 80031fa:	2210      	movs	r2, #16
 80031fc:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 80031fe:	2300      	movs	r3, #0
 8003200:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8003204:	f7ff ffd3 	bl	80031ae <HAL_I2C_ListenCpltCallback>
}
 8003208:	bd08      	pop	{r3, pc}
 800320a:	bf00      	nop
 800320c:	ffff0000 	.word	0xffff0000

08003210 <HAL_I2C_ErrorCallback>:
 8003210:	4770      	bx	lr

08003212 <HAL_I2C_AbortCpltCallback>:
 8003212:	4770      	bx	lr

08003214 <I2C_TreatErrorCallback>:
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003214:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8003218:	2a60      	cmp	r2, #96	; 0x60
{
 800321a:	b508      	push	{r3, lr}
 800321c:	f04f 0200 	mov.w	r2, #0
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003220:	d108      	bne.n	8003234 <I2C_TreatErrorCallback+0x20>
    hi2c->State = HAL_I2C_STATE_READY;
 8003222:	2120      	movs	r1, #32
 8003224:	f880 1041 	strb.w	r1, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8003228:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 800322c:	6302      	str	r2, [r0, #48]	; 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
 800322e:	f7ff fff0 	bl	8003212 <HAL_I2C_AbortCpltCallback>
}
 8003232:	bd08      	pop	{r3, pc}
    hi2c->PreviousState = I2C_STATE_NONE;
 8003234:	6302      	str	r2, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003236:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800323a:	f7ff ffe9 	bl	8003210 <HAL_I2C_ErrorCallback>
}
 800323e:	e7f8      	b.n	8003232 <I2C_TreatErrorCallback+0x1e>

08003240 <I2C_ITError>:
{
 8003240:	b570      	push	{r4, r5, r6, lr}
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003242:	4a35      	ldr	r2, [pc, #212]	; (8003318 <I2C_ITError+0xd8>)
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003244:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003248:	2500      	movs	r5, #0
 800324a:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800324e:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003250:	8545      	strh	r5, [r0, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8003252:	6c42      	ldr	r2, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003254:	3b28      	subs	r3, #40	; 0x28
  hi2c->ErrorCode |= ErrorCode;
 8003256:	430a      	orrs	r2, r1
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003258:	2b02      	cmp	r3, #2
{
 800325a:	4604      	mov	r4, r0
  hi2c->ErrorCode |= ErrorCode;
 800325c:	6442      	str	r2, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800325e:	d82a      	bhi.n	80032b6 <I2C_ITError+0x76>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003260:	2103      	movs	r1, #3
 8003262:	f7ff feac 	bl	8002fbe <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003266:	2328      	movs	r3, #40	; 0x28
 8003268:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800326c:	4b2b      	ldr	r3, [pc, #172]	; (800331c <I2C_ITError+0xdc>)
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800326e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    hi2c->XferISR       = NULL;
 8003270:	6363      	str	r3, [r4, #52]	; 0x34
  tmppreviousstate = hi2c->PreviousState;
 8003272:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003274:	2800      	cmp	r0, #0
 8003276:	d030      	beq.n	80032da <I2C_ITError+0x9a>
 8003278:	2b11      	cmp	r3, #17
 800327a:	d001      	beq.n	8003280 <I2C_ITError+0x40>
 800327c:	2b21      	cmp	r3, #33	; 0x21
 800327e:	d12c      	bne.n	80032da <I2C_ITError+0x9a>
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003280:	6823      	ldr	r3, [r4, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	0451      	lsls	r1, r2, #17
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003286:	bf42      	ittt	mi
 8003288:	681a      	ldrmi	r2, [r3, #0]
 800328a:	f422 4280 	bicmi.w	r2, r2, #16384	; 0x4000
 800328e:	601a      	strmi	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003290:	f7ff fdbf 	bl	8002e12 <HAL_DMA_GetState>
 8003294:	2801      	cmp	r0, #1
 8003296:	d01b      	beq.n	80032d0 <I2C_ITError+0x90>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003298:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800329a:	4b21      	ldr	r3, [pc, #132]	; (8003320 <I2C_ITError+0xe0>)
 800329c:	6343      	str	r3, [r0, #52]	; 0x34
      __HAL_UNLOCK(hi2c);
 800329e:	2300      	movs	r3, #0
 80032a0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80032a4:	f7ff fd4e 	bl	8002d44 <HAL_DMA_Abort_IT>
 80032a8:	2800      	cmp	r0, #0
 80032aa:	d034      	beq.n	8003316 <I2C_ITError+0xd6>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80032ac:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80032ae:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 80032b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80032b4:	4718      	bx	r3
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80032b6:	f248 0103 	movw	r1, #32771	; 0x8003
 80032ba:	f7ff fe80 	bl	8002fbe <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80032be:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80032c2:	2b60      	cmp	r3, #96	; 0x60
      hi2c->State         = HAL_I2C_STATE_READY;
 80032c4:	bf1c      	itt	ne
 80032c6:	2320      	movne	r3, #32
 80032c8:	f880 3041 	strbne.w	r3, [r0, #65]	; 0x41
    hi2c->XferISR       = NULL;
 80032cc:	2300      	movs	r3, #0
 80032ce:	e7ce      	b.n	800326e <I2C_ITError+0x2e>
      I2C_TreatErrorCallback(hi2c);
 80032d0:	4620      	mov	r0, r4
}
 80032d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      I2C_TreatErrorCallback(hi2c);
 80032d6:	f7ff bf9d 	b.w	8003214 <I2C_TreatErrorCallback>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80032da:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80032dc:	2800      	cmp	r0, #0
 80032de:	d0f7      	beq.n	80032d0 <I2C_ITError+0x90>
 80032e0:	2b12      	cmp	r3, #18
 80032e2:	d001      	beq.n	80032e8 <I2C_ITError+0xa8>
 80032e4:	2b22      	cmp	r3, #34	; 0x22
 80032e6:	d1f3      	bne.n	80032d0 <I2C_ITError+0x90>
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80032e8:	6823      	ldr	r3, [r4, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	0412      	lsls	r2, r2, #16
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80032ee:	bf42      	ittt	mi
 80032f0:	681a      	ldrmi	r2, [r3, #0]
 80032f2:	f422 4200 	bicmi.w	r2, r2, #32768	; 0x8000
 80032f6:	601a      	strmi	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80032f8:	f7ff fd8b 	bl	8002e12 <HAL_DMA_GetState>
 80032fc:	2801      	cmp	r0, #1
 80032fe:	d0e7      	beq.n	80032d0 <I2C_ITError+0x90>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003300:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003302:	4b07      	ldr	r3, [pc, #28]	; (8003320 <I2C_ITError+0xe0>)
 8003304:	6343      	str	r3, [r0, #52]	; 0x34
      __HAL_UNLOCK(hi2c);
 8003306:	2300      	movs	r3, #0
 8003308:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800330c:	f7ff fd1a 	bl	8002d44 <HAL_DMA_Abort_IT>
 8003310:	b108      	cbz	r0, 8003316 <I2C_ITError+0xd6>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003312:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003314:	e7cb      	b.n	80032ae <I2C_ITError+0x6e>
}
 8003316:	bd70      	pop	{r4, r5, r6, pc}
 8003318:	ffff0000 	.word	0xffff0000
 800331c:	0800344d 	.word	0x0800344d
 8003320:	080035bb 	.word	0x080035bb

08003324 <I2C_ITSlaveCplt>:
{
 8003324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003326:	6803      	ldr	r3, [r0, #0]
 8003328:	681f      	ldr	r7, [r3, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800332a:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800332e:	f005 05f7 	and.w	r5, r5, #247	; 0xf7
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003332:	2220      	movs	r2, #32
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003334:	2d21      	cmp	r5, #33	; 0x21
{
 8003336:	4604      	mov	r4, r0
 8003338:	460e      	mov	r6, r1
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800333a:	61da      	str	r2, [r3, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800333c:	d151      	bne.n	80033e2 <I2C_ITSlaveCplt+0xbe>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800333e:	f248 0101 	movw	r1, #32769	; 0x8001
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003342:	f7ff fe3c 	bl	8002fbe <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003346:	6325      	str	r5, [r4, #48]	; 0x30
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003348:	6823      	ldr	r3, [r4, #0]
 800334a:	685a      	ldr	r2, [r3, #4]
 800334c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003350:	605a      	str	r2, [r3, #4]
  I2C_RESET_CR2(hi2c);
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8003358:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800335c:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8003360:	f022 0201 	bic.w	r2, r2, #1
 8003364:	605a      	str	r2, [r3, #4]
  I2C_Flush_TXDR(hi2c);
 8003366:	4620      	mov	r0, r4
 8003368:	f7ff fe1b 	bl	8002fa2 <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800336c:	0479      	lsls	r1, r7, #17
 800336e:	d53d      	bpl.n	80033ec <I2C_ITSlaveCplt+0xc8>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003370:	6822      	ldr	r2, [r4, #0]
 8003372:	6813      	ldr	r3, [r2, #0]
 8003374:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003378:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmatx != NULL)
 800337a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    if (hi2c->hdmarx != NULL)
 800337c:	b11b      	cbz	r3, 8003386 <I2C_ITSlaveCplt+0x62>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	b29b      	uxth	r3, r3
 8003384:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003386:	0773      	lsls	r3, r6, #29
 8003388:	d510      	bpl.n	80033ac <I2C_ITSlaveCplt+0x88>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800338a:	6823      	ldr	r3, [r4, #0]
 800338c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800338e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003390:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003392:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003394:	3301      	adds	r3, #1
 8003396:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8003398:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800339a:	f026 0604 	bic.w	r6, r6, #4
    if ((hi2c->XferSize > 0U))
 800339e:	b12b      	cbz	r3, 80033ac <I2C_ITSlaveCplt+0x88>
      hi2c->XferSize--;
 80033a0:	3b01      	subs	r3, #1
 80033a2:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80033a4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80033a6:	3b01      	subs	r3, #1
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 80033ac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	b11b      	cbz	r3, 80033ba <I2C_ITSlaveCplt+0x96>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80033b2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80033b4:	f043 0304 	orr.w	r3, r3, #4
 80033b8:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ba:	2300      	movs	r3, #0
 80033bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80033c0:	6c65      	ldr	r5, [r4, #68]	; 0x44
  hi2c->XferISR = NULL;
 80033c2:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80033c4:	b1dd      	cbz	r5, 80033fe <I2C_ITSlaveCplt+0xda>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80033c6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80033c8:	4620      	mov	r0, r4
 80033ca:	f7ff ff39 	bl	8003240 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80033ce:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80033d2:	2b28      	cmp	r3, #40	; 0x28
 80033d4:	d125      	bne.n	8003422 <I2C_ITSlaveCplt+0xfe>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80033d6:	4631      	mov	r1, r6
 80033d8:	4620      	mov	r0, r4
}
 80033da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80033de:	f7ff bee7 	b.w	80031b0 <I2C_ITListenCplt>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80033e2:	2d22      	cmp	r5, #34	; 0x22
 80033e4:	d1b0      	bne.n	8003348 <I2C_ITSlaveCplt+0x24>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80033e6:	f248 0102 	movw	r1, #32770	; 0x8002
 80033ea:	e7aa      	b.n	8003342 <I2C_ITSlaveCplt+0x1e>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80033ec:	043a      	lsls	r2, r7, #16
 80033ee:	d5ca      	bpl.n	8003386 <I2C_ITSlaveCplt+0x62>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80033f0:	6822      	ldr	r2, [r4, #0]
 80033f2:	6813      	ldr	r3, [r2, #0]
 80033f4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80033f8:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmarx != NULL)
 80033fa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80033fc:	e7be      	b.n	800337c <I2C_ITSlaveCplt+0x58>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80033fe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003400:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003404:	d00e      	beq.n	8003424 <I2C_ITSlaveCplt+0x100>
    I2C_ITSlaveSeqCplt(hi2c);
 8003406:	4620      	mov	r0, r4
 8003408:	f7ff fe54 	bl	80030b4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800340c:	4b0e      	ldr	r3, [pc, #56]	; (8003448 <I2C_ITSlaveCplt+0x124>)
 800340e:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003410:	2320      	movs	r3, #32
 8003412:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8003416:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 800341a:	6325      	str	r5, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 800341c:	4620      	mov	r0, r4
 800341e:	f7ff fec6 	bl	80031ae <HAL_I2C_ListenCpltCallback>
}
 8003422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003424:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8003428:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800342c:	2b22      	cmp	r3, #34	; 0x22
 800342e:	f04f 0320 	mov.w	r3, #32
    hi2c->State = HAL_I2C_STATE_READY;
 8003432:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003436:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_NONE;
 8003438:	6325      	str	r5, [r4, #48]	; 0x30
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800343a:	d102      	bne.n	8003442 <I2C_ITSlaveCplt+0x11e>
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800343c:	f7ff fe39 	bl	80030b2 <HAL_I2C_SlaveRxCpltCallback>
 8003440:	e7ef      	b.n	8003422 <I2C_ITSlaveCplt+0xfe>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003442:	f7ff fe35 	bl	80030b0 <HAL_I2C_SlaveTxCpltCallback>
}
 8003446:	e7ec      	b.n	8003422 <I2C_ITSlaveCplt+0xfe>
 8003448:	ffff0000 	.word	0xffff0000

0800344c <I2C_Slave_ISR_IT>:
{
 800344c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 800344e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
  uint32_t tmpoptions = hi2c->XferOptions;
 8003452:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 8003454:	2b01      	cmp	r3, #1
{
 8003456:	4604      	mov	r4, r0
 8003458:	460d      	mov	r5, r1
 800345a:	4616      	mov	r6, r2
  __HAL_LOCK(hi2c);
 800345c:	d07d      	beq.n	800355a <I2C_Slave_ISR_IT+0x10e>
 800345e:	2301      	movs	r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003460:	068a      	lsls	r2, r1, #26
  __HAL_LOCK(hi2c);
 8003462:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003466:	d503      	bpl.n	8003470 <I2C_Slave_ISR_IT+0x24>
 8003468:	06b3      	lsls	r3, r6, #26
 800346a:	d501      	bpl.n	8003470 <I2C_Slave_ISR_IT+0x24>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800346c:	f7ff ff5a 	bl	8003324 <I2C_ITSlaveCplt>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003470:	06e8      	lsls	r0, r5, #27
 8003472:	d534      	bpl.n	80034de <I2C_Slave_ISR_IT+0x92>
 8003474:	06f1      	lsls	r1, r6, #27
 8003476:	d532      	bpl.n	80034de <I2C_Slave_ISR_IT+0x92>
    if (hi2c->XferCount == 0U)
 8003478:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800347a:	b29b      	uxth	r3, r3
 800347c:	bb03      	cbnz	r3, 80034c0 <I2C_Slave_ISR_IT+0x74>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800347e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8003482:	2b28      	cmp	r3, #40	; 0x28
 8003484:	d10a      	bne.n	800349c <I2C_Slave_ISR_IT+0x50>
 8003486:	f1b7 7f00 	cmp.w	r7, #33554432	; 0x2000000
 800348a:	d107      	bne.n	800349c <I2C_Slave_ISR_IT+0x50>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800348c:	4629      	mov	r1, r5
 800348e:	4620      	mov	r0, r4
 8003490:	f7ff fe8e 	bl	80031b0 <I2C_ITListenCplt>
  __HAL_UNLOCK(hi2c);
 8003494:	2000      	movs	r0, #0
 8003496:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 800349a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800349c:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80034a0:	6823      	ldr	r3, [r4, #0]
 80034a2:	2a29      	cmp	r2, #41	; 0x29
 80034a4:	f04f 0210 	mov.w	r2, #16
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034a8:	61da      	str	r2, [r3, #28]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80034aa:	d1f3      	bne.n	8003494 <I2C_Slave_ISR_IT+0x48>
 80034ac:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 80034b0:	d0f0      	beq.n	8003494 <I2C_Slave_ISR_IT+0x48>
        I2C_Flush_TXDR(hi2c);
 80034b2:	4620      	mov	r0, r4
 80034b4:	f7ff fd75 	bl	8002fa2 <I2C_Flush_TXDR>
      I2C_ITSlaveSeqCplt(hi2c);
 80034b8:	4620      	mov	r0, r4
 80034ba:	f7ff fdfb 	bl	80030b4 <I2C_ITSlaveSeqCplt>
 80034be:	e7e9      	b.n	8003494 <I2C_Slave_ISR_IT+0x48>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034c0:	6823      	ldr	r3, [r4, #0]
 80034c2:	2210      	movs	r2, #16
 80034c4:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80034c6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80034c8:	f043 0304 	orr.w	r3, r3, #4
 80034cc:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80034ce:	f037 7380 	bics.w	r3, r7, #16777216	; 0x1000000
 80034d2:	d1df      	bne.n	8003494 <I2C_Slave_ISR_IT+0x48>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80034d4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80034d6:	4620      	mov	r0, r4
 80034d8:	f7ff feb2 	bl	8003240 <I2C_ITError>
 80034dc:	e7da      	b.n	8003494 <I2C_Slave_ISR_IT+0x48>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80034de:	076a      	lsls	r2, r5, #29
 80034e0:	d51a      	bpl.n	8003518 <I2C_Slave_ISR_IT+0xcc>
 80034e2:	0773      	lsls	r3, r6, #29
 80034e4:	d518      	bpl.n	8003518 <I2C_Slave_ISR_IT+0xcc>
    if (hi2c->XferCount > 0U)
 80034e6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	b16b      	cbz	r3, 8003508 <I2C_Slave_ISR_IT+0xbc>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80034ec:	6823      	ldr	r3, [r4, #0]
 80034ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80034f2:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80034f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80034f6:	3301      	adds	r3, #1
 80034f8:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80034fa:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80034fc:	3b01      	subs	r3, #1
 80034fe:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8003500:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003502:	3b01      	subs	r3, #1
 8003504:	b29b      	uxth	r3, r3
 8003506:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 8003508:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800350a:	b29b      	uxth	r3, r3
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1c1      	bne.n	8003494 <I2C_Slave_ISR_IT+0x48>
 8003510:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 8003514:	d0be      	beq.n	8003494 <I2C_Slave_ISR_IT+0x48>
 8003516:	e7cf      	b.n	80034b8 <I2C_Slave_ISR_IT+0x6c>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003518:	0728      	lsls	r0, r5, #28
 800351a:	d505      	bpl.n	8003528 <I2C_Slave_ISR_IT+0xdc>
 800351c:	0731      	lsls	r1, r6, #28
 800351e:	d503      	bpl.n	8003528 <I2C_Slave_ISR_IT+0xdc>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003520:	4620      	mov	r0, r4
 8003522:	f7ff fdfe 	bl	8003122 <I2C_ITAddrCplt.isra.0>
 8003526:	e7b5      	b.n	8003494 <I2C_Slave_ISR_IT+0x48>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003528:	07aa      	lsls	r2, r5, #30
 800352a:	d5b3      	bpl.n	8003494 <I2C_Slave_ISR_IT+0x48>
 800352c:	07b3      	lsls	r3, r6, #30
 800352e:	d5b1      	bpl.n	8003494 <I2C_Slave_ISR_IT+0x48>
    if (hi2c->XferCount > 0U)
 8003530:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003532:	b29b      	uxth	r3, r3
 8003534:	b16b      	cbz	r3, 8003552 <I2C_Slave_ISR_IT+0x106>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003536:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003538:	6822      	ldr	r2, [r4, #0]
 800353a:	f813 1b01 	ldrb.w	r1, [r3], #1
 800353e:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8003540:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003542:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003544:	3b01      	subs	r3, #1
 8003546:	b29b      	uxth	r3, r3
 8003548:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800354a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800354c:	3b01      	subs	r3, #1
 800354e:	8523      	strh	r3, [r4, #40]	; 0x28
 8003550:	e7a0      	b.n	8003494 <I2C_Slave_ISR_IT+0x48>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003552:	f037 7380 	bics.w	r3, r7, #16777216	; 0x1000000
 8003556:	d0af      	beq.n	80034b8 <I2C_Slave_ISR_IT+0x6c>
 8003558:	e79c      	b.n	8003494 <I2C_Slave_ISR_IT+0x48>
  __HAL_LOCK(hi2c);
 800355a:	2002      	movs	r0, #2
 800355c:	e79d      	b.n	800349a <I2C_Slave_ISR_IT+0x4e>

0800355e <HAL_I2C_ER_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800355e:	6803      	ldr	r3, [r0, #0]
 8003560:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003562:	681a      	ldr	r2, [r3, #0]
{
 8003564:	b410      	push	{r4}
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003566:	05cc      	lsls	r4, r1, #23
 8003568:	d508      	bpl.n	800357c <HAL_I2C_ER_IRQHandler+0x1e>
 800356a:	0614      	lsls	r4, r2, #24
 800356c:	d506      	bpl.n	800357c <HAL_I2C_ER_IRQHandler+0x1e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800356e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003570:	f044 0401 	orr.w	r4, r4, #1
 8003574:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003576:	f44f 7480 	mov.w	r4, #256	; 0x100
 800357a:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800357c:	054c      	lsls	r4, r1, #21
 800357e:	d508      	bpl.n	8003592 <HAL_I2C_ER_IRQHandler+0x34>
 8003580:	0614      	lsls	r4, r2, #24
 8003582:	d506      	bpl.n	8003592 <HAL_I2C_ER_IRQHandler+0x34>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003584:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003586:	f044 0408 	orr.w	r4, r4, #8
 800358a:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800358c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8003590:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003592:	0589      	lsls	r1, r1, #22
 8003594:	d508      	bpl.n	80035a8 <HAL_I2C_ER_IRQHandler+0x4a>
 8003596:	0612      	lsls	r2, r2, #24
 8003598:	d506      	bpl.n	80035a8 <HAL_I2C_ER_IRQHandler+0x4a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800359a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800359c:	f042 0202 	orr.w	r2, r2, #2
 80035a0:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80035a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035a6:	61da      	str	r2, [r3, #28]
  tmperror = hi2c->ErrorCode;
 80035a8:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80035aa:	f011 0f0b 	tst.w	r1, #11
 80035ae:	d002      	beq.n	80035b6 <HAL_I2C_ER_IRQHandler+0x58>
}
 80035b0:	bc10      	pop	{r4}
    I2C_ITError(hi2c, tmperror);
 80035b2:	f7ff be45 	b.w	8003240 <I2C_ITError>
}
 80035b6:	bc10      	pop	{r4}
 80035b8:	4770      	bx	lr

080035ba <I2C_DMAAbort>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80035ba:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if (hi2c->hdmatx != NULL)
 80035bc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80035be:	b10b      	cbz	r3, 80035c4 <I2C_DMAAbort+0xa>
    hi2c->hdmatx->XferAbortCallback = NULL;
 80035c0:	2200      	movs	r2, #0
 80035c2:	635a      	str	r2, [r3, #52]	; 0x34
  if (hi2c->hdmarx != NULL)
 80035c4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80035c6:	b10b      	cbz	r3, 80035cc <I2C_DMAAbort+0x12>
    hi2c->hdmarx->XferAbortCallback = NULL;
 80035c8:	2200      	movs	r2, #0
 80035ca:	635a      	str	r2, [r3, #52]	; 0x34
  I2C_TreatErrorCallback(hi2c);
 80035cc:	f7ff be22 	b.w	8003214 <I2C_TreatErrorCallback>

080035d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80035d0:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035d2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80035d6:	2b20      	cmp	r3, #32
 80035d8:	b2dc      	uxtb	r4, r3
 80035da:	d11d      	bne.n	8003618 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035dc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d019      	beq.n	8003618 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035e4:	2324      	movs	r3, #36	; 0x24
 80035e6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035ea:	6803      	ldr	r3, [r0, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	f022 0201 	bic.w	r2, r2, #1
 80035f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80035fa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	4311      	orrs	r1, r2
 8003600:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	f042 0201 	orr.w	r2, r2, #1
 8003608:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800360a:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800360c:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8003610:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8003614:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8003616:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8003618:	2002      	movs	r0, #2
 800361a:	e7fc      	b.n	8003616 <HAL_I2CEx_ConfigAnalogFilter+0x46>

0800361c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800361c:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800361e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003622:	2b20      	cmp	r3, #32
 8003624:	b2dc      	uxtb	r4, r3
 8003626:	d11c      	bne.n	8003662 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003628:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800362c:	2b01      	cmp	r3, #1
 800362e:	d018      	beq.n	8003662 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003630:	2324      	movs	r3, #36	; 0x24
 8003632:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003636:	6803      	ldr	r3, [r0, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	f022 0201 	bic.w	r2, r2, #1
 800363e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003640:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003642:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003646:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800364a:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	f042 0201 	orr.w	r2, r2, #1
 8003652:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003654:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003656:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800365a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800365e:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8003660:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8003662:	2002      	movs	r0, #2
 8003664:	e7fc      	b.n	8003660 <HAL_I2CEx_ConfigDigitalFilter+0x44>
	...

08003668 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003668:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800366c:	4605      	mov	r5, r0
 800366e:	2800      	cmp	r0, #0
 8003670:	d035      	beq.n	80036de <HAL_RCC_OscConfig+0x76>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003672:	6803      	ldr	r3, [r0, #0]
 8003674:	07da      	lsls	r2, r3, #31
 8003676:	d411      	bmi.n	800369c <HAL_RCC_OscConfig+0x34>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003678:	682b      	ldr	r3, [r5, #0]
 800367a:	079b      	lsls	r3, r3, #30
 800367c:	f100 8088 	bmi.w	8003790 <HAL_RCC_OscConfig+0x128>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003680:	682b      	ldr	r3, [r5, #0]
 8003682:	071c      	lsls	r4, r3, #28
 8003684:	f100 80f8 	bmi.w	8003878 <HAL_RCC_OscConfig+0x210>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003688:	682b      	ldr	r3, [r5, #0]
 800368a:	0758      	lsls	r0, r3, #29
 800368c:	f100 8141 	bmi.w	8003912 <HAL_RCC_OscConfig+0x2aa>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003690:	69e8      	ldr	r0, [r5, #28]
 8003692:	2800      	cmp	r0, #0
 8003694:	f040 81d7 	bne.w	8003a46 <HAL_RCC_OscConfig+0x3de>
        }
      }
    }
  }

  return HAL_OK;
 8003698:	2000      	movs	r0, #0
 800369a:	e04b      	b.n	8003734 <HAL_RCC_OscConfig+0xcc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800369c:	4cba      	ldr	r4, [pc, #744]	; (8003988 <HAL_RCC_OscConfig+0x320>)
 800369e:	6863      	ldr	r3, [r4, #4]
 80036a0:	f003 030c 	and.w	r3, r3, #12
 80036a4:	2b04      	cmp	r3, #4
 80036a6:	d007      	beq.n	80036b8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80036a8:	6863      	ldr	r3, [r4, #4]
 80036aa:	f003 030c 	and.w	r3, r3, #12
 80036ae:	2b08      	cmp	r3, #8
 80036b0:	d117      	bne.n	80036e2 <HAL_RCC_OscConfig+0x7a>
 80036b2:	6863      	ldr	r3, [r4, #4]
 80036b4:	03df      	lsls	r7, r3, #15
 80036b6:	d514      	bpl.n	80036e2 <HAL_RCC_OscConfig+0x7a>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036bc:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036c0:	6821      	ldr	r1, [r4, #0]
 80036c2:	fa93 f3a3 	rbit	r3, r3
 80036c6:	fab3 f383 	clz	r3, r3
 80036ca:	f003 031f 	and.w	r3, r3, #31
 80036ce:	2201      	movs	r2, #1
 80036d0:	fa02 f303 	lsl.w	r3, r2, r3
 80036d4:	420b      	tst	r3, r1
 80036d6:	d0cf      	beq.n	8003678 <HAL_RCC_OscConfig+0x10>
 80036d8:	686b      	ldr	r3, [r5, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1cc      	bne.n	8003678 <HAL_RCC_OscConfig+0x10>
          return HAL_ERROR;
 80036de:	2001      	movs	r0, #1
 80036e0:	e028      	b.n	8003734 <HAL_RCC_OscConfig+0xcc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036e2:	686a      	ldr	r2, [r5, #4]
 80036e4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80036e8:	d127      	bne.n	800373a <HAL_RCC_OscConfig+0xd2>
 80036ea:	6823      	ldr	r3, [r4, #0]
 80036ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036f0:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80036f2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80036f4:	68a9      	ldr	r1, [r5, #8]
 80036f6:	f023 030f 	bic.w	r3, r3, #15
 80036fa:	430b      	orrs	r3, r1
 80036fc:	62e3      	str	r3, [r4, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036fe:	b362      	cbz	r2, 800375a <HAL_RCC_OscConfig+0xf2>
        tickstart = HAL_GetTick();
 8003700:	f7fe fc2c 	bl	8001f5c <HAL_GetTick>
 8003704:	f44f 3700 	mov.w	r7, #131072	; 0x20000
 8003708:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800370a:	f04f 0801 	mov.w	r8, #1
 800370e:	fa97 f3a7 	rbit	r3, r7
 8003712:	6822      	ldr	r2, [r4, #0]
 8003714:	fa97 f3a7 	rbit	r3, r7
 8003718:	fab3 f383 	clz	r3, r3
 800371c:	f003 031f 	and.w	r3, r3, #31
 8003720:	fa08 f303 	lsl.w	r3, r8, r3
 8003724:	4213      	tst	r3, r2
 8003726:	d1a7      	bne.n	8003678 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003728:	f7fe fc18 	bl	8001f5c <HAL_GetTick>
 800372c:	1b83      	subs	r3, r0, r6
 800372e:	2b64      	cmp	r3, #100	; 0x64
 8003730:	d9ed      	bls.n	800370e <HAL_RCC_OscConfig+0xa6>
            return HAL_TIMEOUT;
 8003732:	2003      	movs	r0, #3
}
 8003734:	b002      	add	sp, #8
 8003736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800373a:	6823      	ldr	r3, [r4, #0]
 800373c:	b932      	cbnz	r2, 800374c <HAL_RCC_OscConfig+0xe4>
 800373e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003742:	6023      	str	r3, [r4, #0]
 8003744:	6823      	ldr	r3, [r4, #0]
 8003746:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800374a:	e7d1      	b.n	80036f0 <HAL_RCC_OscConfig+0x88>
 800374c:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8003750:	d1f5      	bne.n	800373e <HAL_RCC_OscConfig+0xd6>
 8003752:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003756:	6023      	str	r3, [r4, #0]
 8003758:	e7c7      	b.n	80036ea <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 800375a:	f7fe fbff 	bl	8001f5c <HAL_GetTick>
 800375e:	f44f 3700 	mov.w	r7, #131072	; 0x20000
 8003762:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003764:	f04f 0801 	mov.w	r8, #1
 8003768:	fa97 f3a7 	rbit	r3, r7
 800376c:	6822      	ldr	r2, [r4, #0]
 800376e:	fa97 f3a7 	rbit	r3, r7
 8003772:	fab3 f383 	clz	r3, r3
 8003776:	f003 031f 	and.w	r3, r3, #31
 800377a:	fa08 f303 	lsl.w	r3, r8, r3
 800377e:	4213      	tst	r3, r2
 8003780:	f43f af7a 	beq.w	8003678 <HAL_RCC_OscConfig+0x10>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003784:	f7fe fbea 	bl	8001f5c <HAL_GetTick>
 8003788:	1b83      	subs	r3, r0, r6
 800378a:	2b64      	cmp	r3, #100	; 0x64
 800378c:	d9ec      	bls.n	8003768 <HAL_RCC_OscConfig+0x100>
 800378e:	e7d0      	b.n	8003732 <HAL_RCC_OscConfig+0xca>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003790:	4c7d      	ldr	r4, [pc, #500]	; (8003988 <HAL_RCC_OscConfig+0x320>)
 8003792:	6863      	ldr	r3, [r4, #4]
 8003794:	f013 0f0c 	tst.w	r3, #12
 8003798:	d007      	beq.n	80037aa <HAL_RCC_OscConfig+0x142>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800379a:	6863      	ldr	r3, [r4, #4]
 800379c:	f003 030c 	and.w	r3, r3, #12
 80037a0:	2b08      	cmp	r3, #8
 80037a2:	d121      	bne.n	80037e8 <HAL_RCC_OscConfig+0x180>
 80037a4:	6863      	ldr	r3, [r4, #4]
 80037a6:	03de      	lsls	r6, r3, #15
 80037a8:	d41e      	bmi.n	80037e8 <HAL_RCC_OscConfig+0x180>
 80037aa:	2302      	movs	r3, #2
 80037ac:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037b0:	6821      	ldr	r1, [r4, #0]
 80037b2:	fa93 f3a3 	rbit	r3, r3
 80037b6:	fab3 f383 	clz	r3, r3
 80037ba:	f003 031f 	and.w	r3, r3, #31
 80037be:	2201      	movs	r2, #1
 80037c0:	fa02 f303 	lsl.w	r3, r2, r3
 80037c4:	420b      	tst	r3, r1
 80037c6:	d002      	beq.n	80037ce <HAL_RCC_OscConfig+0x166>
 80037c8:	692b      	ldr	r3, [r5, #16]
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d187      	bne.n	80036de <HAL_RCC_OscConfig+0x76>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037ce:	6821      	ldr	r1, [r4, #0]
 80037d0:	23f8      	movs	r3, #248	; 0xf8
 80037d2:	fa93 f3a3 	rbit	r3, r3
 80037d6:	fab3 f283 	clz	r2, r3
 80037da:	696b      	ldr	r3, [r5, #20]
 80037dc:	4093      	lsls	r3, r2
 80037de:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 80037e2:	4313      	orrs	r3, r2
 80037e4:	6023      	str	r3, [r4, #0]
 80037e6:	e74b      	b.n	8003680 <HAL_RCC_OscConfig+0x18>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037e8:	692a      	ldr	r2, [r5, #16]
 80037ea:	2601      	movs	r6, #1
 80037ec:	b30a      	cbz	r2, 8003832 <HAL_RCC_OscConfig+0x1ca>
 80037ee:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 80037f2:	fab3 f383 	clz	r3, r3
 80037f6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80037fa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	f04f 0802 	mov.w	r8, #2
 8003804:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8003806:	f7fe fba9 	bl	8001f5c <HAL_GetTick>
 800380a:	4607      	mov	r7, r0
 800380c:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003810:	6822      	ldr	r2, [r4, #0]
 8003812:	fa98 f3a8 	rbit	r3, r8
 8003816:	fab3 f383 	clz	r3, r3
 800381a:	f003 031f 	and.w	r3, r3, #31
 800381e:	fa06 f303 	lsl.w	r3, r6, r3
 8003822:	4213      	tst	r3, r2
 8003824:	d1d3      	bne.n	80037ce <HAL_RCC_OscConfig+0x166>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003826:	f7fe fb99 	bl	8001f5c <HAL_GetTick>
 800382a:	1bc3      	subs	r3, r0, r7
 800382c:	2b02      	cmp	r3, #2
 800382e:	d9ed      	bls.n	800380c <HAL_RCC_OscConfig+0x1a4>
 8003830:	e77f      	b.n	8003732 <HAL_RCC_OscConfig+0xca>
 8003832:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8003836:	fab3 f383 	clz	r3, r3
 800383a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800383e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	f04f 0802 	mov.w	r8, #2
 8003848:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800384a:	f7fe fb87 	bl	8001f5c <HAL_GetTick>
 800384e:	4607      	mov	r7, r0
 8003850:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003854:	6822      	ldr	r2, [r4, #0]
 8003856:	fa98 f3a8 	rbit	r3, r8
 800385a:	fab3 f383 	clz	r3, r3
 800385e:	f003 031f 	and.w	r3, r3, #31
 8003862:	fa06 f303 	lsl.w	r3, r6, r3
 8003866:	4213      	tst	r3, r2
 8003868:	f43f af0a 	beq.w	8003680 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800386c:	f7fe fb76 	bl	8001f5c <HAL_GetTick>
 8003870:	1bc3      	subs	r3, r0, r7
 8003872:	2b02      	cmp	r3, #2
 8003874:	d9ec      	bls.n	8003850 <HAL_RCC_OscConfig+0x1e8>
 8003876:	e75c      	b.n	8003732 <HAL_RCC_OscConfig+0xca>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003878:	69aa      	ldr	r2, [r5, #24]
 800387a:	4e43      	ldr	r6, [pc, #268]	; (8003988 <HAL_RCC_OscConfig+0x320>)
 800387c:	4943      	ldr	r1, [pc, #268]	; (800398c <HAL_RCC_OscConfig+0x324>)
 800387e:	2401      	movs	r4, #1
 8003880:	b31a      	cbz	r2, 80038ca <HAL_RCC_OscConfig+0x262>
 8003882:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 8003886:	fab3 f383 	clz	r3, r3
 800388a:	440b      	add	r3, r1
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	2702      	movs	r7, #2
 8003890:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 8003892:	f7fe fb63 	bl	8001f5c <HAL_GetTick>
 8003896:	4680      	mov	r8, r0
 8003898:	fa97 f3a7 	rbit	r3, r7
 800389c:	fa97 f3a7 	rbit	r3, r7
 80038a0:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038a4:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80038a6:	fa97 f3a7 	rbit	r3, r7
 80038aa:	fab3 f383 	clz	r3, r3
 80038ae:	f003 031f 	and.w	r3, r3, #31
 80038b2:	fa04 f303 	lsl.w	r3, r4, r3
 80038b6:	4213      	tst	r3, r2
 80038b8:	f47f aee6 	bne.w	8003688 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038bc:	f7fe fb4e 	bl	8001f5c <HAL_GetTick>
 80038c0:	eba0 0308 	sub.w	r3, r0, r8
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d9e7      	bls.n	8003898 <HAL_RCC_OscConfig+0x230>
 80038c8:	e733      	b.n	8003732 <HAL_RCC_OscConfig+0xca>
 80038ca:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 80038ce:	fab3 f383 	clz	r3, r3
 80038d2:	440b      	add	r3, r1
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	2702      	movs	r7, #2
 80038d8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80038da:	f7fe fb3f 	bl	8001f5c <HAL_GetTick>
 80038de:	4680      	mov	r8, r0
 80038e0:	fa97 f3a7 	rbit	r3, r7
 80038e4:	fa97 f3a7 	rbit	r3, r7
 80038e8:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038ec:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80038ee:	fa97 f3a7 	rbit	r3, r7
 80038f2:	fab3 f383 	clz	r3, r3
 80038f6:	f003 031f 	and.w	r3, r3, #31
 80038fa:	fa04 f303 	lsl.w	r3, r4, r3
 80038fe:	4213      	tst	r3, r2
 8003900:	f43f aec2 	beq.w	8003688 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003904:	f7fe fb2a 	bl	8001f5c <HAL_GetTick>
 8003908:	eba0 0308 	sub.w	r3, r0, r8
 800390c:	2b02      	cmp	r3, #2
 800390e:	d9e7      	bls.n	80038e0 <HAL_RCC_OscConfig+0x278>
 8003910:	e70f      	b.n	8003732 <HAL_RCC_OscConfig+0xca>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003912:	4c1d      	ldr	r4, [pc, #116]	; (8003988 <HAL_RCC_OscConfig+0x320>)
 8003914:	69e3      	ldr	r3, [r4, #28]
 8003916:	00d9      	lsls	r1, r3, #3
 8003918:	d434      	bmi.n	8003984 <HAL_RCC_OscConfig+0x31c>
      __HAL_RCC_PWR_CLK_ENABLE();
 800391a:	69e3      	ldr	r3, [r4, #28]
 800391c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003920:	61e3      	str	r3, [r4, #28]
 8003922:	69e3      	ldr	r3, [r4, #28]
 8003924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003928:	9301      	str	r3, [sp, #4]
 800392a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800392c:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800392e:	4f18      	ldr	r7, [pc, #96]	; (8003990 <HAL_RCC_OscConfig+0x328>)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	05da      	lsls	r2, r3, #23
 8003934:	d52e      	bpl.n	8003994 <HAL_RCC_OscConfig+0x32c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003936:	68eb      	ldr	r3, [r5, #12]
 8003938:	2b01      	cmp	r3, #1
 800393a:	d13c      	bne.n	80039b6 <HAL_RCC_OscConfig+0x34e>
 800393c:	6a23      	ldr	r3, [r4, #32]
 800393e:	f043 0301 	orr.w	r3, r3, #1
 8003942:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8003944:	f7fe fb0a 	bl	8001f5c <HAL_GetTick>
 8003948:	2702      	movs	r7, #2
 800394a:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800394c:	46ba      	mov	sl, r7
 800394e:	f04f 0901 	mov.w	r9, #1
 8003952:	fa97 f3a7 	rbit	r3, r7
 8003956:	fa97 f3a7 	rbit	r3, r7
 800395a:	2b00      	cmp	r3, #0
 800395c:	d06b      	beq.n	8003a36 <HAL_RCC_OscConfig+0x3ce>
 800395e:	6a22      	ldr	r2, [r4, #32]
 8003960:	fa9a f3aa 	rbit	r3, sl
 8003964:	fab3 f383 	clz	r3, r3
 8003968:	f003 031f 	and.w	r3, r3, #31
 800396c:	fa09 f303 	lsl.w	r3, r9, r3
 8003970:	4213      	tst	r3, r2
 8003972:	d057      	beq.n	8003a24 <HAL_RCC_OscConfig+0x3bc>
    if(pwrclkchanged == SET)
 8003974:	2e00      	cmp	r6, #0
 8003976:	f43f ae8b 	beq.w	8003690 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 800397a:	69e3      	ldr	r3, [r4, #28]
 800397c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003980:	61e3      	str	r3, [r4, #28]
 8003982:	e685      	b.n	8003690 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8003984:	2600      	movs	r6, #0
 8003986:	e7d2      	b.n	800392e <HAL_RCC_OscConfig+0x2c6>
 8003988:	40021000 	.word	0x40021000
 800398c:	10908120 	.word	0x10908120
 8003990:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800399a:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800399c:	f7fe fade 	bl	8001f5c <HAL_GetTick>
 80039a0:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	05db      	lsls	r3, r3, #23
 80039a6:	d4c6      	bmi.n	8003936 <HAL_RCC_OscConfig+0x2ce>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039a8:	f7fe fad8 	bl	8001f5c <HAL_GetTick>
 80039ac:	eba0 0008 	sub.w	r0, r0, r8
 80039b0:	2864      	cmp	r0, #100	; 0x64
 80039b2:	d9f6      	bls.n	80039a2 <HAL_RCC_OscConfig+0x33a>
 80039b4:	e6bd      	b.n	8003732 <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039b6:	bb3b      	cbnz	r3, 8003a08 <HAL_RCC_OscConfig+0x3a0>
 80039b8:	6a23      	ldr	r3, [r4, #32]
 80039ba:	f023 0301 	bic.w	r3, r3, #1
 80039be:	6223      	str	r3, [r4, #32]
 80039c0:	6a23      	ldr	r3, [r4, #32]
 80039c2:	f023 0304 	bic.w	r3, r3, #4
 80039c6:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80039c8:	f7fe fac8 	bl	8001f5c <HAL_GetTick>
 80039cc:	2702      	movs	r7, #2
 80039ce:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039d0:	46ba      	mov	sl, r7
 80039d2:	f04f 0901 	mov.w	r9, #1
 80039d6:	fa97 f3a7 	rbit	r3, r7
 80039da:	fa97 f3a7 	rbit	r3, r7
 80039de:	b373      	cbz	r3, 8003a3e <HAL_RCC_OscConfig+0x3d6>
 80039e0:	6a22      	ldr	r2, [r4, #32]
 80039e2:	fa9a f3aa 	rbit	r3, sl
 80039e6:	fab3 f383 	clz	r3, r3
 80039ea:	f003 031f 	and.w	r3, r3, #31
 80039ee:	fa09 f303 	lsl.w	r3, r9, r3
 80039f2:	4213      	tst	r3, r2
 80039f4:	d0be      	beq.n	8003974 <HAL_RCC_OscConfig+0x30c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039f6:	f7fe fab1 	bl	8001f5c <HAL_GetTick>
 80039fa:	f241 3388 	movw	r3, #5000	; 0x1388
 80039fe:	eba0 0008 	sub.w	r0, r0, r8
 8003a02:	4298      	cmp	r0, r3
 8003a04:	d9e7      	bls.n	80039d6 <HAL_RCC_OscConfig+0x36e>
 8003a06:	e694      	b.n	8003732 <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a08:	2b05      	cmp	r3, #5
 8003a0a:	6a23      	ldr	r3, [r4, #32]
 8003a0c:	d103      	bne.n	8003a16 <HAL_RCC_OscConfig+0x3ae>
 8003a0e:	f043 0304 	orr.w	r3, r3, #4
 8003a12:	6223      	str	r3, [r4, #32]
 8003a14:	e792      	b.n	800393c <HAL_RCC_OscConfig+0x2d4>
 8003a16:	f023 0301 	bic.w	r3, r3, #1
 8003a1a:	6223      	str	r3, [r4, #32]
 8003a1c:	6a23      	ldr	r3, [r4, #32]
 8003a1e:	f023 0304 	bic.w	r3, r3, #4
 8003a22:	e78e      	b.n	8003942 <HAL_RCC_OscConfig+0x2da>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a24:	f7fe fa9a 	bl	8001f5c <HAL_GetTick>
 8003a28:	f241 3388 	movw	r3, #5000	; 0x1388
 8003a2c:	eba0 0008 	sub.w	r0, r0, r8
 8003a30:	4298      	cmp	r0, r3
 8003a32:	d98e      	bls.n	8003952 <HAL_RCC_OscConfig+0x2ea>
 8003a34:	e67d      	b.n	8003732 <HAL_RCC_OscConfig+0xca>
 8003a36:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a3a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003a3c:	e790      	b.n	8003960 <HAL_RCC_OscConfig+0x2f8>
 8003a3e:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a42:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003a44:	e7cd      	b.n	80039e2 <HAL_RCC_OscConfig+0x37a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a46:	4b49      	ldr	r3, [pc, #292]	; (8003b6c <HAL_RCC_OscConfig+0x504>)
 8003a48:	685a      	ldr	r2, [r3, #4]
 8003a4a:	f002 020c 	and.w	r2, r2, #12
 8003a4e:	2a08      	cmp	r2, #8
 8003a50:	461c      	mov	r4, r3
 8003a52:	d07a      	beq.n	8003b4a <HAL_RCC_OscConfig+0x4e2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a54:	2802      	cmp	r0, #2
 8003a56:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a5a:	d151      	bne.n	8003b00 <HAL_RCC_OscConfig+0x498>
 8003a5c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8003a60:	fab3 f383 	clz	r3, r3
 8003a64:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003a68:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	2200      	movs	r2, #0
 8003a70:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003a72:	f7fe fa73 	bl	8001f5c <HAL_GetTick>
 8003a76:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 8003a7a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a7c:	2601      	movs	r6, #1
 8003a7e:	fa98 f3a8 	rbit	r3, r8
 8003a82:	6822      	ldr	r2, [r4, #0]
 8003a84:	fa98 f3a8 	rbit	r3, r8
 8003a88:	fab3 f383 	clz	r3, r3
 8003a8c:	f003 031f 	and.w	r3, r3, #31
 8003a90:	fa06 f303 	lsl.w	r3, r6, r3
 8003a94:	4213      	tst	r3, r2
 8003a96:	d12d      	bne.n	8003af4 <HAL_RCC_OscConfig+0x48c>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a98:	e9d5 1308 	ldrd	r1, r3, [r5, #32]
 8003a9c:	6862      	ldr	r2, [r4, #4]
 8003a9e:	430b      	orrs	r3, r1
 8003aa0:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	6063      	str	r3, [r4, #4]
 8003aa8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003aac:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8003ab0:	fab3 f383 	clz	r3, r3
 8003ab4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003ab8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003abc:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003abe:	2701      	movs	r7, #1
        __HAL_RCC_PLL_ENABLE();
 8003ac0:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8003ac2:	f7fe fa4b 	bl	8001f5c <HAL_GetTick>
 8003ac6:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8003aca:	4605      	mov	r5, r0
 8003acc:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ad0:	6822      	ldr	r2, [r4, #0]
 8003ad2:	fa96 f3a6 	rbit	r3, r6
 8003ad6:	fab3 f383 	clz	r3, r3
 8003ada:	f003 031f 	and.w	r3, r3, #31
 8003ade:	fa07 f303 	lsl.w	r3, r7, r3
 8003ae2:	4213      	tst	r3, r2
 8003ae4:	f47f add8 	bne.w	8003698 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ae8:	f7fe fa38 	bl	8001f5c <HAL_GetTick>
 8003aec:	1b40      	subs	r0, r0, r5
 8003aee:	2802      	cmp	r0, #2
 8003af0:	d9ec      	bls.n	8003acc <HAL_RCC_OscConfig+0x464>
 8003af2:	e61e      	b.n	8003732 <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003af4:	f7fe fa32 	bl	8001f5c <HAL_GetTick>
 8003af8:	1bc3      	subs	r3, r0, r7
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d9bf      	bls.n	8003a7e <HAL_RCC_OscConfig+0x416>
 8003afe:	e618      	b.n	8003732 <HAL_RCC_OscConfig+0xca>
 8003b00:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8003b04:	fab3 f383 	clz	r3, r3
 8003b08:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003b0c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	2200      	movs	r2, #0
 8003b14:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003b16:	f7fe fa21 	bl	8001f5c <HAL_GetTick>
 8003b1a:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8003b1e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b20:	2701      	movs	r7, #1
 8003b22:	fa96 f3a6 	rbit	r3, r6
 8003b26:	6822      	ldr	r2, [r4, #0]
 8003b28:	fa96 f3a6 	rbit	r3, r6
 8003b2c:	fab3 f383 	clz	r3, r3
 8003b30:	f003 031f 	and.w	r3, r3, #31
 8003b34:	fa07 f303 	lsl.w	r3, r7, r3
 8003b38:	4213      	tst	r3, r2
 8003b3a:	f43f adad 	beq.w	8003698 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b3e:	f7fe fa0d 	bl	8001f5c <HAL_GetTick>
 8003b42:	1b40      	subs	r0, r0, r5
 8003b44:	2802      	cmp	r0, #2
 8003b46:	d9ec      	bls.n	8003b22 <HAL_RCC_OscConfig+0x4ba>
 8003b48:	e5f3      	b.n	8003732 <HAL_RCC_OscConfig+0xca>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b4a:	2801      	cmp	r0, #1
 8003b4c:	f43f adf2 	beq.w	8003734 <HAL_RCC_OscConfig+0xcc>
        pll_config = RCC->CFGR;
 8003b50:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003b52:	6a2a      	ldr	r2, [r5, #32]
 8003b54:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8003b58:	4291      	cmp	r1, r2
 8003b5a:	f47f adc0 	bne.w	80036de <HAL_RCC_OscConfig+0x76>
 8003b5e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003b60:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003b64:	4293      	cmp	r3, r2
 8003b66:	f43f ad97 	beq.w	8003698 <HAL_RCC_OscConfig+0x30>
 8003b6a:	e5b8      	b.n	80036de <HAL_RCC_OscConfig+0x76>
 8003b6c:	40021000 	.word	0x40021000

08003b70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b70:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8003b72:	4c13      	ldr	r4, [pc, #76]	; (8003bc0 <HAL_RCC_GetSysClockFreq+0x50>)
 8003b74:	6861      	ldr	r1, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b76:	f001 030c 	and.w	r3, r1, #12
 8003b7a:	2b08      	cmp	r3, #8
 8003b7c:	d11e      	bne.n	8003bbc <HAL_RCC_GetSysClockFreq+0x4c>
 8003b7e:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8003b82:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003b86:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 8003b8a:	fab3 f383 	clz	r3, r3
 8003b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b92:	4a0c      	ldr	r2, [pc, #48]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x54>)
 8003b94:	5cd0      	ldrb	r0, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003b96:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003b98:	220f      	movs	r2, #15
 8003b9a:	fa92 f2a2 	rbit	r2, r2
 8003b9e:	fab2 f282 	clz	r2, r2
 8003ba2:	f003 030f 	and.w	r3, r3, #15
 8003ba6:	40d3      	lsrs	r3, r2
 8003ba8:	4a07      	ldr	r2, [pc, #28]	; (8003bc8 <HAL_RCC_GetSysClockFreq+0x58>)
 8003baa:	5cd2      	ldrb	r2, [r2, r3]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003bac:	03cb      	lsls	r3, r1, #15
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003bae:	bf4a      	itet	mi
 8003bb0:	4b06      	ldrmi	r3, [pc, #24]	; (8003bcc <HAL_RCC_GetSysClockFreq+0x5c>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003bb2:	4b07      	ldrpl	r3, [pc, #28]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0x60>)
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003bb4:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003bb8:	4358      	muls	r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003bba:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8003bbc:	4803      	ldr	r0, [pc, #12]	; (8003bcc <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 8003bbe:	e7fc      	b.n	8003bba <HAL_RCC_GetSysClockFreq+0x4a>
 8003bc0:	40021000 	.word	0x40021000
 8003bc4:	08004e2c 	.word	0x08004e2c
 8003bc8:	08004e3c 	.word	0x08004e3c
 8003bcc:	007a1200 	.word	0x007a1200
 8003bd0:	003d0900 	.word	0x003d0900

08003bd4 <HAL_RCC_ClockConfig>:
{
 8003bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bd8:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8003bda:	4604      	mov	r4, r0
 8003bdc:	b910      	cbnz	r0, 8003be4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8003bde:	2001      	movs	r0, #1
}
 8003be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003be4:	4a4c      	ldr	r2, [pc, #304]	; (8003d18 <HAL_RCC_ClockConfig+0x144>)
 8003be6:	6813      	ldr	r3, [r2, #0]
 8003be8:	f003 0307 	and.w	r3, r3, #7
 8003bec:	428b      	cmp	r3, r1
 8003bee:	d32e      	bcc.n	8003c4e <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bf0:	6822      	ldr	r2, [r4, #0]
 8003bf2:	0791      	lsls	r1, r2, #30
 8003bf4:	d436      	bmi.n	8003c64 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bf6:	07d2      	lsls	r2, r2, #31
 8003bf8:	d43c      	bmi.n	8003c74 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bfa:	4a47      	ldr	r2, [pc, #284]	; (8003d18 <HAL_RCC_ClockConfig+0x144>)
 8003bfc:	6813      	ldr	r3, [r2, #0]
 8003bfe:	f003 0307 	and.w	r3, r3, #7
 8003c02:	42ab      	cmp	r3, r5
 8003c04:	d874      	bhi.n	8003cf0 <HAL_RCC_ClockConfig+0x11c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c06:	6822      	ldr	r2, [r4, #0]
 8003c08:	4d44      	ldr	r5, [pc, #272]	; (8003d1c <HAL_RCC_ClockConfig+0x148>)
 8003c0a:	f012 0f04 	tst.w	r2, #4
 8003c0e:	d17b      	bne.n	8003d08 <HAL_RCC_ClockConfig+0x134>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c10:	0713      	lsls	r3, r2, #28
 8003c12:	d506      	bpl.n	8003c22 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c14:	686b      	ldr	r3, [r5, #4]
 8003c16:	6922      	ldr	r2, [r4, #16]
 8003c18:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003c1c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003c20:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003c22:	f7ff ffa5 	bl	8003b70 <HAL_RCC_GetSysClockFreq>
 8003c26:	686b      	ldr	r3, [r5, #4]
 8003c28:	22f0      	movs	r2, #240	; 0xf0
 8003c2a:	fa92 f2a2 	rbit	r2, r2
 8003c2e:	fab2 f282 	clz	r2, r2
 8003c32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c36:	40d3      	lsrs	r3, r2
 8003c38:	4a39      	ldr	r2, [pc, #228]	; (8003d20 <HAL_RCC_ClockConfig+0x14c>)
 8003c3a:	5cd3      	ldrb	r3, [r2, r3]
 8003c3c:	40d8      	lsrs	r0, r3
 8003c3e:	4b39      	ldr	r3, [pc, #228]	; (8003d24 <HAL_RCC_ClockConfig+0x150>)
 8003c40:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8003c42:	4b39      	ldr	r3, [pc, #228]	; (8003d28 <HAL_RCC_ClockConfig+0x154>)
 8003c44:	6818      	ldr	r0, [r3, #0]
 8003c46:	f7fe f947 	bl	8001ed8 <HAL_InitTick>
  return HAL_OK;
 8003c4a:	2000      	movs	r0, #0
 8003c4c:	e7c8      	b.n	8003be0 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c4e:	6813      	ldr	r3, [r2, #0]
 8003c50:	f023 0307 	bic.w	r3, r3, #7
 8003c54:	430b      	orrs	r3, r1
 8003c56:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c58:	6813      	ldr	r3, [r2, #0]
 8003c5a:	f003 0307 	and.w	r3, r3, #7
 8003c5e:	428b      	cmp	r3, r1
 8003c60:	d1bd      	bne.n	8003bde <HAL_RCC_ClockConfig+0xa>
 8003c62:	e7c5      	b.n	8003bf0 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c64:	492d      	ldr	r1, [pc, #180]	; (8003d1c <HAL_RCC_ClockConfig+0x148>)
 8003c66:	68a0      	ldr	r0, [r4, #8]
 8003c68:	684b      	ldr	r3, [r1, #4]
 8003c6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c6e:	4303      	orrs	r3, r0
 8003c70:	604b      	str	r3, [r1, #4]
 8003c72:	e7c0      	b.n	8003bf6 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c74:	6862      	ldr	r2, [r4, #4]
 8003c76:	4e29      	ldr	r6, [pc, #164]	; (8003d1c <HAL_RCC_ClockConfig+0x148>)
 8003c78:	2a01      	cmp	r2, #1
 8003c7a:	d126      	bne.n	8003cca <HAL_RCC_ClockConfig+0xf6>
 8003c7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c80:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c84:	6831      	ldr	r1, [r6, #0]
 8003c86:	fa93 f3a3 	rbit	r3, r3
 8003c8a:	fab3 f383 	clz	r3, r3
 8003c8e:	f003 031f 	and.w	r3, r3, #31
 8003c92:	fa02 f303 	lsl.w	r3, r2, r3
 8003c96:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c98:	d0a1      	beq.n	8003bde <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c9a:	6873      	ldr	r3, [r6, #4]
 8003c9c:	f023 0303 	bic.w	r3, r3, #3
 8003ca0:	431a      	orrs	r2, r3
 8003ca2:	6072      	str	r2, [r6, #4]
    tickstart = HAL_GetTick();
 8003ca4:	f7fe f95a 	bl	8001f5c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ca8:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8003cac:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cae:	6873      	ldr	r3, [r6, #4]
 8003cb0:	6862      	ldr	r2, [r4, #4]
 8003cb2:	f003 030c 	and.w	r3, r3, #12
 8003cb6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003cba:	d09e      	beq.n	8003bfa <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cbc:	f7fe f94e 	bl	8001f5c <HAL_GetTick>
 8003cc0:	1bc0      	subs	r0, r0, r7
 8003cc2:	4540      	cmp	r0, r8
 8003cc4:	d9f3      	bls.n	8003cae <HAL_RCC_ClockConfig+0xda>
        return HAL_TIMEOUT;
 8003cc6:	2003      	movs	r0, #3
 8003cc8:	e78a      	b.n	8003be0 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cca:	2a02      	cmp	r2, #2
 8003ccc:	bf0c      	ite	eq
 8003cce:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8003cd2:	2302      	movne	r3, #2
 8003cd4:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cd8:	6830      	ldr	r0, [r6, #0]
 8003cda:	fa93 f3a3 	rbit	r3, r3
 8003cde:	fab3 f383 	clz	r3, r3
 8003ce2:	f003 031f 	and.w	r3, r3, #31
 8003ce6:	2101      	movs	r1, #1
 8003ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cec:	4203      	tst	r3, r0
 8003cee:	e7d3      	b.n	8003c98 <HAL_RCC_ClockConfig+0xc4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cf0:	6813      	ldr	r3, [r2, #0]
 8003cf2:	f023 0307 	bic.w	r3, r3, #7
 8003cf6:	432b      	orrs	r3, r5
 8003cf8:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cfa:	6813      	ldr	r3, [r2, #0]
 8003cfc:	f003 0307 	and.w	r3, r3, #7
 8003d00:	42ab      	cmp	r3, r5
 8003d02:	f47f af6c 	bne.w	8003bde <HAL_RCC_ClockConfig+0xa>
 8003d06:	e77e      	b.n	8003c06 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d08:	686b      	ldr	r3, [r5, #4]
 8003d0a:	68e1      	ldr	r1, [r4, #12]
 8003d0c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003d10:	430b      	orrs	r3, r1
 8003d12:	606b      	str	r3, [r5, #4]
 8003d14:	e77c      	b.n	8003c10 <HAL_RCC_ClockConfig+0x3c>
 8003d16:	bf00      	nop
 8003d18:	40022000 	.word	0x40022000
 8003d1c:	40021000 	.word	0x40021000
 8003d20:	08004e14 	.word	0x08004e14
 8003d24:	20000000 	.word	0x20000000
 8003d28:	20000008 	.word	0x20000008

08003d2c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003d2c:	4b08      	ldr	r3, [pc, #32]	; (8003d50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d2e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	fa92 f2a2 	rbit	r2, r2
 8003d38:	fab2 f282 	clz	r2, r2
 8003d3c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d40:	40d3      	lsrs	r3, r2
 8003d42:	4a04      	ldr	r2, [pc, #16]	; (8003d54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d44:	5cd3      	ldrb	r3, [r2, r3]
 8003d46:	4a04      	ldr	r2, [pc, #16]	; (8003d58 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8003d48:	6810      	ldr	r0, [r2, #0]
}    
 8003d4a:	40d8      	lsrs	r0, r3
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	40021000 	.word	0x40021000
 8003d54:	08004e24 	.word	0x08004e24
 8003d58:	20000000 	.word	0x20000000

08003d5c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003d5c:	4b08      	ldr	r3, [pc, #32]	; (8003d80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d5e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	fa92 f2a2 	rbit	r2, r2
 8003d68:	fab2 f282 	clz	r2, r2
 8003d6c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003d70:	40d3      	lsrs	r3, r2
 8003d72:	4a04      	ldr	r2, [pc, #16]	; (8003d84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d74:	5cd3      	ldrb	r3, [r2, r3]
 8003d76:	4a04      	ldr	r2, [pc, #16]	; (8003d88 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8003d78:	6810      	ldr	r0, [r2, #0]
} 
 8003d7a:	40d8      	lsrs	r0, r3
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	40021000 	.word	0x40021000
 8003d84:	08004e24 	.word	0x08004e24
 8003d88:	20000000 	.word	0x20000000

08003d8c <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d8c:	6803      	ldr	r3, [r0, #0]
{
 8003d8e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d92:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d94:	03d8      	lsls	r0, r3, #15
 8003d96:	d520      	bpl.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x4e>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d98:	4c50      	ldr	r4, [pc, #320]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003d9a:	69e3      	ldr	r3, [r4, #28]
 8003d9c:	00d9      	lsls	r1, r3, #3
 8003d9e:	d444      	bmi.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003da0:	69e3      	ldr	r3, [r4, #28]
 8003da2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003da6:	61e3      	str	r3, [r4, #28]
 8003da8:	69e3      	ldr	r3, [r4, #28]
 8003daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dae:	9301      	str	r3, [sp, #4]
 8003db0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003db2:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003db4:	4f4a      	ldr	r7, [pc, #296]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	05da      	lsls	r2, r3, #23
 8003dba:	d538      	bpl.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0xa2>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003dbc:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003dbe:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003dc2:	d148      	bne.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xca>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003dc4:	6a23      	ldr	r3, [r4, #32]
 8003dc6:	686a      	ldr	r2, [r5, #4]
 8003dc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003dd0:	b11e      	cbz	r6, 8003dda <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dd2:	69e3      	ldr	r3, [r4, #28]
 8003dd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dd8:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003dda:	6828      	ldr	r0, [r5, #0]
 8003ddc:	07c1      	lsls	r1, r0, #31
 8003dde:	d506      	bpl.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003de0:	493e      	ldr	r1, [pc, #248]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003de2:	68ab      	ldr	r3, [r5, #8]
 8003de4:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8003de6:	f022 0203 	bic.w	r2, r2, #3
 8003dea:	431a      	orrs	r2, r3
 8003dec:	630a      	str	r2, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003dee:	0682      	lsls	r2, r0, #26
 8003df0:	d506      	bpl.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003df2:	493a      	ldr	r1, [pc, #232]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003df4:	68eb      	ldr	r3, [r5, #12]
 8003df6:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8003df8:	f022 0210 	bic.w	r2, r2, #16
 8003dfc:	431a      	orrs	r2, r3
 8003dfe:	630a      	str	r2, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003e00:	0603      	lsls	r3, r0, #24
 8003e02:	d506      	bpl.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003e04:	4935      	ldr	r1, [pc, #212]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003e06:	692b      	ldr	r3, [r5, #16]
 8003e08:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8003e0a:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 8003e0e:	431a      	orrs	r2, r3
 8003e10:	62ca      	str	r2, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003e12:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 8003e16:	d01b      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003e18:	4a30      	ldr	r2, [pc, #192]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003e1a:	6969      	ldr	r1, [r5, #20]
 8003e1c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003e1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e22:	430b      	orrs	r3, r1
 8003e24:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003e26:	2000      	movs	r0, #0
 8003e28:	e012      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  FlagStatus       pwrclkchanged = RESET;
 8003e2a:	2600      	movs	r6, #0
 8003e2c:	e7c2      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e34:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8003e36:	f7fe f891 	bl	8001f5c <HAL_GetTick>
 8003e3a:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	05db      	lsls	r3, r3, #23
 8003e40:	d4bc      	bmi.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x30>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e42:	f7fe f88b 	bl	8001f5c <HAL_GetTick>
 8003e46:	eba0 0008 	sub.w	r0, r0, r8
 8003e4a:	2864      	cmp	r0, #100	; 0x64
 8003e4c:	d9f6      	bls.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0xb0>
          return HAL_TIMEOUT;
 8003e4e:	2003      	movs	r0, #3
}
 8003e50:	b002      	add	sp, #8
 8003e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e56:	686a      	ldr	r2, [r5, #4]
 8003e58:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d0b1      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x38>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e60:	6a21      	ldr	r1, [r4, #32]
 8003e62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e66:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 8003e6a:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e6e:	f8df c074 	ldr.w	ip, [pc, #116]	; 8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8003e72:	fab2 f282 	clz	r2, r2
 8003e76:	4462      	add	r2, ip
 8003e78:	0092      	lsls	r2, r2, #2
 8003e7a:	2701      	movs	r7, #1
 8003e7c:	6017      	str	r7, [r2, #0]
 8003e7e:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e82:	fab3 f383 	clz	r3, r3
 8003e86:	4463      	add	r3, ip
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	601a      	str	r2, [r3, #0]
      RCC->BDCR = temp_reg;
 8003e8e:	6220      	str	r0, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003e90:	07c8      	lsls	r0, r1, #31
 8003e92:	d597      	bpl.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8003e94:	f7fe f862 	bl	8001f5c <HAL_GetTick>
 8003e98:	f04f 0802 	mov.w	r8, #2
 8003e9c:	4681      	mov	r9, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e9e:	46c2      	mov	sl, r8
 8003ea0:	fa98 f3a8 	rbit	r3, r8
 8003ea4:	fa98 f3a8 	rbit	r3, r8
 8003ea8:	b19b      	cbz	r3, 8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x146>
 8003eaa:	6a22      	ldr	r2, [r4, #32]
 8003eac:	fa9a f3aa 	rbit	r3, sl
 8003eb0:	fab3 f383 	clz	r3, r3
 8003eb4:	f003 031f 	and.w	r3, r3, #31
 8003eb8:	fa07 f303 	lsl.w	r3, r7, r3
 8003ebc:	4213      	tst	r3, r2
 8003ebe:	d181      	bne.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x38>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ec0:	f7fe f84c 	bl	8001f5c <HAL_GetTick>
 8003ec4:	f241 3388 	movw	r3, #5000	; 0x1388
 8003ec8:	eba0 0009 	sub.w	r0, r0, r9
 8003ecc:	4298      	cmp	r0, r3
 8003ece:	d9e7      	bls.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8003ed0:	e7bd      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0xc2>
 8003ed2:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ed6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003ed8:	e7e8      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x120>
 8003eda:	bf00      	nop
 8003edc:	40021000 	.word	0x40021000
 8003ee0:	40007000 	.word	0x40007000
 8003ee4:	10908100 	.word	0x10908100

08003ee8 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ee8:	6a03      	ldr	r3, [r0, #32]
 8003eea:	f023 0301 	bic.w	r3, r3, #1
 8003eee:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ef0:	6a03      	ldr	r3, [r0, #32]
{
 8003ef2:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ef4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ef6:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ef8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003efa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003efe:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8003f02:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f04:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8003f06:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8003f0a:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f0c:	4d17      	ldr	r5, [pc, #92]	; (8003f6c <TIM_OC1_SetConfig+0x84>)
 8003f0e:	42a8      	cmp	r0, r5
 8003f10:	d00b      	beq.n	8003f2a <TIM_OC1_SetConfig+0x42>
 8003f12:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8003f16:	42a8      	cmp	r0, r5
 8003f18:	d007      	beq.n	8003f2a <TIM_OC1_SetConfig+0x42>
 8003f1a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003f1e:	42a8      	cmp	r0, r5
 8003f20:	d003      	beq.n	8003f2a <TIM_OC1_SetConfig+0x42>
 8003f22:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003f26:	42a8      	cmp	r0, r5
 8003f28:	d11a      	bne.n	8003f60 <TIM_OC1_SetConfig+0x78>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f2a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f2c:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8003f30:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f32:	4d0e      	ldr	r5, [pc, #56]	; (8003f6c <TIM_OC1_SetConfig+0x84>)
 8003f34:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f36:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f3a:	d00b      	beq.n	8003f54 <TIM_OC1_SetConfig+0x6c>
 8003f3c:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8003f40:	42a8      	cmp	r0, r5
 8003f42:	d007      	beq.n	8003f54 <TIM_OC1_SetConfig+0x6c>
 8003f44:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003f48:	42a8      	cmp	r0, r5
 8003f4a:	d003      	beq.n	8003f54 <TIM_OC1_SetConfig+0x6c>
 8003f4c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003f50:	42a8      	cmp	r0, r5
 8003f52:	d105      	bne.n	8003f60 <TIM_OC1_SetConfig+0x78>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f54:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f58:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 8003f5c:	4334      	orrs	r4, r6
 8003f5e:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f60:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f62:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f64:	684a      	ldr	r2, [r1, #4]
 8003f66:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f68:	6203      	str	r3, [r0, #32]
}
 8003f6a:	bd70      	pop	{r4, r5, r6, pc}
 8003f6c:	40012c00 	.word	0x40012c00

08003f70 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f70:	6a03      	ldr	r3, [r0, #32]
 8003f72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f76:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f78:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f7a:	6842      	ldr	r2, [r0, #4]
{
 8003f7c:	b570      	push	{r4, r5, r6, lr}

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f7e:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f80:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f82:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8003f86:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8003f8a:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f8c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8003f8e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f92:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f96:	4d11      	ldr	r5, [pc, #68]	; (8003fdc <TIM_OC3_SetConfig+0x6c>)
 8003f98:	42a8      	cmp	r0, r5
 8003f9a:	d10e      	bne.n	8003fba <TIM_OC3_SetConfig+0x4a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f9c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003fa2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003fa6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003faa:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003fae:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003fb2:	4335      	orrs	r5, r6
 8003fb4:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8003fb8:	e009      	b.n	8003fce <TIM_OC3_SetConfig+0x5e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fba:	4d09      	ldr	r5, [pc, #36]	; (8003fe0 <TIM_OC3_SetConfig+0x70>)
 8003fbc:	42a8      	cmp	r0, r5
 8003fbe:	d0f4      	beq.n	8003faa <TIM_OC3_SetConfig+0x3a>
 8003fc0:	4d08      	ldr	r5, [pc, #32]	; (8003fe4 <TIM_OC3_SetConfig+0x74>)
 8003fc2:	42a8      	cmp	r0, r5
 8003fc4:	d0f1      	beq.n	8003faa <TIM_OC3_SetConfig+0x3a>
 8003fc6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003fca:	42a8      	cmp	r0, r5
 8003fcc:	d0ed      	beq.n	8003faa <TIM_OC3_SetConfig+0x3a>
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fce:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003fd0:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003fd2:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8003fd4:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fd6:	6203      	str	r3, [r0, #32]
}
 8003fd8:	bd70      	pop	{r4, r5, r6, pc}
 8003fda:	bf00      	nop
 8003fdc:	40012c00 	.word	0x40012c00
 8003fe0:	40014000 	.word	0x40014000
 8003fe4:	40014400 	.word	0x40014400

08003fe8 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003fe8:	6a03      	ldr	r3, [r0, #32]
 8003fea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003fee:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ff0:	6a02      	ldr	r2, [r0, #32]
{
 8003ff2:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ff4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ff6:	69c3      	ldr	r3, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ff8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ffa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ffe:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004002:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004006:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8004008:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800400c:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004010:	4d0c      	ldr	r5, [pc, #48]	; (8004044 <TIM_OC4_SetConfig+0x5c>)
 8004012:	42a8      	cmp	r0, r5
 8004014:	d00b      	beq.n	800402e <TIM_OC4_SetConfig+0x46>
 8004016:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 800401a:	42a8      	cmp	r0, r5
 800401c:	d007      	beq.n	800402e <TIM_OC4_SetConfig+0x46>
 800401e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004022:	42a8      	cmp	r0, r5
 8004024:	d003      	beq.n	800402e <TIM_OC4_SetConfig+0x46>
 8004026:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800402a:	42a8      	cmp	r0, r5
 800402c:	d104      	bne.n	8004038 <TIM_OC4_SetConfig+0x50>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800402e:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004030:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004034:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004038:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800403a:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800403c:	684b      	ldr	r3, [r1, #4]
 800403e:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004040:	6202      	str	r2, [r0, #32]
}
 8004042:	bd30      	pop	{r4, r5, pc}
 8004044:	40012c00 	.word	0x40012c00

08004048 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004048:	6a03      	ldr	r3, [r0, #32]
 800404a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800404e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004050:	6a02      	ldr	r2, [r0, #32]
{
 8004052:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004054:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004056:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004058:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800405a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800405e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8004062:	432b      	orrs	r3, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004064:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8004066:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800406a:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800406e:	4d0d      	ldr	r5, [pc, #52]	; (80040a4 <TIM_OC5_SetConfig+0x5c>)
 8004070:	42a8      	cmp	r0, r5
 8004072:	d00b      	beq.n	800408c <TIM_OC5_SetConfig+0x44>
 8004074:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8004078:	42a8      	cmp	r0, r5
 800407a:	d007      	beq.n	800408c <TIM_OC5_SetConfig+0x44>
 800407c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004080:	42a8      	cmp	r0, r5
 8004082:	d003      	beq.n	800408c <TIM_OC5_SetConfig+0x44>
 8004084:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004088:	42a8      	cmp	r0, r5
 800408a:	d104      	bne.n	8004096 <TIM_OC5_SetConfig+0x4e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800408c:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 800408e:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004092:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004096:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004098:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800409a:	684b      	ldr	r3, [r1, #4]
 800409c:	6583      	str	r3, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800409e:	6202      	str	r2, [r0, #32]
}
 80040a0:	bd30      	pop	{r4, r5, pc}
 80040a2:	bf00      	nop
 80040a4:	40012c00 	.word	0x40012c00

080040a8 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80040a8:	6a03      	ldr	r3, [r0, #32]
 80040aa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80040ae:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040b0:	6a02      	ldr	r2, [r0, #32]
{
 80040b2:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040b4:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80040b6:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040b8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80040ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040c2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80040c6:	688d      	ldr	r5, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80040c8:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80040cc:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040d0:	4d0c      	ldr	r5, [pc, #48]	; (8004104 <TIM_OC6_SetConfig+0x5c>)
 80040d2:	42a8      	cmp	r0, r5
 80040d4:	d00b      	beq.n	80040ee <TIM_OC6_SetConfig+0x46>
 80040d6:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80040da:	42a8      	cmp	r0, r5
 80040dc:	d007      	beq.n	80040ee <TIM_OC6_SetConfig+0x46>
 80040de:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80040e2:	42a8      	cmp	r0, r5
 80040e4:	d003      	beq.n	80040ee <TIM_OC6_SetConfig+0x46>
 80040e6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80040ea:	42a8      	cmp	r0, r5
 80040ec:	d104      	bne.n	80040f8 <TIM_OC6_SetConfig+0x50>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80040ee:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 80040f0:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80040f4:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040f8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80040fa:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80040fc:	684b      	ldr	r3, [r1, #4]
 80040fe:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004100:	6202      	str	r2, [r0, #32]
}
 8004102:	bd30      	pop	{r4, r5, pc}
 8004104:	40012c00 	.word	0x40012c00

08004108 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004108:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800410c:	2b01      	cmp	r3, #1
 800410e:	d123      	bne.n	8004158 <HAL_TIM_Base_Start_IT+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 8004110:	2302      	movs	r3, #2
 8004112:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004116:	6803      	ldr	r3, [r0, #0]
 8004118:	68da      	ldr	r2, [r3, #12]
 800411a:	f042 0201 	orr.w	r2, r2, #1
 800411e:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004120:	4a0e      	ldr	r2, [pc, #56]	; (800415c <HAL_TIM_Base_Start_IT+0x54>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d00a      	beq.n	800413c <HAL_TIM_Base_Start_IT+0x34>
 8004126:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800412a:	d007      	beq.n	800413c <HAL_TIM_Base_Start_IT+0x34>
 800412c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004130:	4293      	cmp	r3, r2
 8004132:	d003      	beq.n	800413c <HAL_TIM_Base_Start_IT+0x34>
 8004134:	f502 329e 	add.w	r2, r2, #80896	; 0x13c00
 8004138:	4293      	cmp	r3, r2
 800413a:	d107      	bne.n	800414c <HAL_TIM_Base_Start_IT+0x44>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800413c:	6899      	ldr	r1, [r3, #8]
 800413e:	4a08      	ldr	r2, [pc, #32]	; (8004160 <HAL_TIM_Base_Start_IT+0x58>)
 8004140:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004142:	2a06      	cmp	r2, #6
 8004144:	d006      	beq.n	8004154 <HAL_TIM_Base_Start_IT+0x4c>
 8004146:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800414a:	d003      	beq.n	8004154 <HAL_TIM_Base_Start_IT+0x4c>
    __HAL_TIM_ENABLE(htim);
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	f042 0201 	orr.w	r2, r2, #1
 8004152:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004154:	2000      	movs	r0, #0
}
 8004156:	4770      	bx	lr
    return HAL_ERROR;
 8004158:	2001      	movs	r0, #1
 800415a:	4770      	bx	lr
 800415c:	40012c00 	.word	0x40012c00
 8004160:	00010007 	.word	0x00010007

08004164 <HAL_TIM_PWM_MspInit>:
 8004164:	4770      	bx	lr

08004166 <HAL_TIM_Encoder_Start>:
{
 8004166:	b530      	push	{r4, r5, lr}
 8004168:	4603      	mov	r3, r0
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800416a:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800416e:	f890 003f 	ldrb.w	r0, [r0, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004172:	f893 5044 	ldrb.w	r5, [r3, #68]	; 0x44
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004176:	f893 4045 	ldrb.w	r4, [r3, #69]	; 0x45
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800417a:	b2d2      	uxtb	r2, r2
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800417c:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800417e:	b2ed      	uxtb	r5, r5
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004180:	b2e4      	uxtb	r4, r4
  if (Channel == TIM_CHANNEL_1)
 8004182:	b9c1      	cbnz	r1, 80041b6 <HAL_TIM_Encoder_Start+0x50>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004184:	2a01      	cmp	r2, #1
 8004186:	d145      	bne.n	8004214 <HAL_TIM_Encoder_Start+0xae>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004188:	2d01      	cmp	r5, #1
 800418a:	d145      	bne.n	8004218 <HAL_TIM_Encoder_Start+0xb2>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800418c:	2202      	movs	r2, #2
 800418e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004192:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004196:	681a      	ldr	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004198:	6a11      	ldr	r1, [r2, #32]
 800419a:	f021 0101 	bic.w	r1, r1, #1
 800419e:	6211      	str	r1, [r2, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80041a0:	6a11      	ldr	r1, [r2, #32]
 80041a2:	f041 0101 	orr.w	r1, r1, #1
 80041a6:	6211      	str	r1, [r2, #32]
  __HAL_TIM_ENABLE(htim);
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	6813      	ldr	r3, [r2, #0]
 80041ac:	f043 0301 	orr.w	r3, r3, #1
 80041b0:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80041b2:	2000      	movs	r0, #0
}
 80041b4:	bd30      	pop	{r4, r5, pc}
  else if (Channel == TIM_CHANNEL_2)
 80041b6:	2904      	cmp	r1, #4
 80041b8:	d111      	bne.n	80041de <HAL_TIM_Encoder_Start+0x78>
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80041ba:	2801      	cmp	r0, #1
 80041bc:	d12a      	bne.n	8004214 <HAL_TIM_Encoder_Start+0xae>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80041be:	2c01      	cmp	r4, #1
 80041c0:	d1f8      	bne.n	80041b4 <HAL_TIM_Encoder_Start+0x4e>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80041c2:	2202      	movs	r2, #2
 80041c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80041c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80041cc:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~tmp;
 80041ce:	6a11      	ldr	r1, [r2, #32]
 80041d0:	f021 0110 	bic.w	r1, r1, #16
 80041d4:	6211      	str	r1, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80041d6:	6a11      	ldr	r1, [r2, #32]
 80041d8:	f041 0110 	orr.w	r1, r1, #16
 80041dc:	e7e3      	b.n	80041a6 <HAL_TIM_Encoder_Start+0x40>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80041de:	2a01      	cmp	r2, #1
 80041e0:	d118      	bne.n	8004214 <HAL_TIM_Encoder_Start+0xae>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80041e2:	2801      	cmp	r0, #1
 80041e4:	d118      	bne.n	8004218 <HAL_TIM_Encoder_Start+0xb2>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80041e6:	2d01      	cmp	r5, #1
 80041e8:	d1e4      	bne.n	80041b4 <HAL_TIM_Encoder_Start+0x4e>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80041ea:	2c01      	cmp	r4, #1
 80041ec:	d1e2      	bne.n	80041b4 <HAL_TIM_Encoder_Start+0x4e>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80041ee:	2202      	movs	r2, #2
 80041f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80041f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80041f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80041fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  switch (Channel)
 8004200:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~tmp;
 8004202:	6a11      	ldr	r1, [r2, #32]
 8004204:	f021 0101 	bic.w	r1, r1, #1
 8004208:	6211      	str	r1, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800420a:	6a11      	ldr	r1, [r2, #32]
 800420c:	f041 0101 	orr.w	r1, r1, #1
 8004210:	6211      	str	r1, [r2, #32]
 8004212:	e7dc      	b.n	80041ce <HAL_TIM_Encoder_Start+0x68>
      return HAL_ERROR;
 8004214:	2001      	movs	r0, #1
 8004216:	e7cd      	b.n	80041b4 <HAL_TIM_Encoder_Start+0x4e>
 8004218:	4610      	mov	r0, r2
 800421a:	e7cb      	b.n	80041b4 <HAL_TIM_Encoder_Start+0x4e>

0800421c <HAL_TIM_OC_DelayElapsedCallback>:
 800421c:	4770      	bx	lr

0800421e <HAL_TIM_IC_CaptureCallback>:
 800421e:	4770      	bx	lr

08004220 <HAL_TIM_PWM_PulseFinishedCallback>:
 8004220:	4770      	bx	lr

08004222 <HAL_TIM_TriggerCallback>:
 8004222:	4770      	bx	lr

08004224 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004224:	6803      	ldr	r3, [r0, #0]
 8004226:	691a      	ldr	r2, [r3, #16]
 8004228:	0791      	lsls	r1, r2, #30
{
 800422a:	b510      	push	{r4, lr}
 800422c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800422e:	d50f      	bpl.n	8004250 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004230:	68da      	ldr	r2, [r3, #12]
 8004232:	0792      	lsls	r2, r2, #30
 8004234:	d50c      	bpl.n	8004250 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004236:	f06f 0202 	mvn.w	r2, #2
 800423a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800423c:	2201      	movs	r2, #1
 800423e:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004240:	699b      	ldr	r3, [r3, #24]
 8004242:	0799      	lsls	r1, r3, #30
 8004244:	f000 8085 	beq.w	8004352 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8004248:	f7ff ffe9 	bl	800421e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800424c:	2300      	movs	r3, #0
 800424e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004250:	6823      	ldr	r3, [r4, #0]
 8004252:	691a      	ldr	r2, [r3, #16]
 8004254:	0752      	lsls	r2, r2, #29
 8004256:	d510      	bpl.n	800427a <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004258:	68da      	ldr	r2, [r3, #12]
 800425a:	0750      	lsls	r0, r2, #29
 800425c:	d50d      	bpl.n	800427a <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800425e:	f06f 0204 	mvn.w	r2, #4
 8004262:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004264:	2202      	movs	r2, #2
 8004266:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800426e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004270:	d075      	beq.n	800435e <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8004272:	f7ff ffd4 	bl	800421e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004276:	2300      	movs	r3, #0
 8004278:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800427a:	6823      	ldr	r3, [r4, #0]
 800427c:	691a      	ldr	r2, [r3, #16]
 800427e:	0711      	lsls	r1, r2, #28
 8004280:	d50f      	bpl.n	80042a2 <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004282:	68da      	ldr	r2, [r3, #12]
 8004284:	0712      	lsls	r2, r2, #28
 8004286:	d50c      	bpl.n	80042a2 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004288:	f06f 0208 	mvn.w	r2, #8
 800428c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800428e:	2204      	movs	r2, #4
 8004290:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004292:	69db      	ldr	r3, [r3, #28]
 8004294:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8004296:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004298:	d067      	beq.n	800436a <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800429a:	f7ff ffc0 	bl	800421e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800429e:	2300      	movs	r3, #0
 80042a0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042a2:	6823      	ldr	r3, [r4, #0]
 80042a4:	691a      	ldr	r2, [r3, #16]
 80042a6:	06d0      	lsls	r0, r2, #27
 80042a8:	d510      	bpl.n	80042cc <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80042aa:	68da      	ldr	r2, [r3, #12]
 80042ac:	06d1      	lsls	r1, r2, #27
 80042ae:	d50d      	bpl.n	80042cc <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042b0:	f06f 0210 	mvn.w	r2, #16
 80042b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042b6:	2208      	movs	r2, #8
 80042b8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042ba:	69db      	ldr	r3, [r3, #28]
 80042bc:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80042c0:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042c2:	d058      	beq.n	8004376 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 80042c4:	f7ff ffab 	bl	800421e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042c8:	2300      	movs	r3, #0
 80042ca:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80042cc:	6823      	ldr	r3, [r4, #0]
 80042ce:	691a      	ldr	r2, [r3, #16]
 80042d0:	07d2      	lsls	r2, r2, #31
 80042d2:	d508      	bpl.n	80042e6 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80042d4:	68da      	ldr	r2, [r3, #12]
 80042d6:	07d0      	lsls	r0, r2, #31
 80042d8:	d505      	bpl.n	80042e6 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80042da:	f06f 0201 	mvn.w	r2, #1
 80042de:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80042e0:	4620      	mov	r0, r4
 80042e2:	f7fd faab 	bl	800183c <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80042e6:	6823      	ldr	r3, [r4, #0]
 80042e8:	691a      	ldr	r2, [r3, #16]
 80042ea:	0611      	lsls	r1, r2, #24
 80042ec:	d508      	bpl.n	8004300 <HAL_TIM_IRQHandler+0xdc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042ee:	68da      	ldr	r2, [r3, #12]
 80042f0:	0612      	lsls	r2, r2, #24
 80042f2:	d505      	bpl.n	8004300 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80042f8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80042fa:	4620      	mov	r0, r4
 80042fc:	f000 fba3 	bl	8004a46 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004300:	6823      	ldr	r3, [r4, #0]
 8004302:	691a      	ldr	r2, [r3, #16]
 8004304:	05d0      	lsls	r0, r2, #23
 8004306:	d508      	bpl.n	800431a <HAL_TIM_IRQHandler+0xf6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004308:	68da      	ldr	r2, [r3, #12]
 800430a:	0611      	lsls	r1, r2, #24
 800430c:	d505      	bpl.n	800431a <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800430e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004312:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8004314:	4620      	mov	r0, r4
 8004316:	f000 fb97 	bl	8004a48 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800431a:	6823      	ldr	r3, [r4, #0]
 800431c:	691a      	ldr	r2, [r3, #16]
 800431e:	0652      	lsls	r2, r2, #25
 8004320:	d508      	bpl.n	8004334 <HAL_TIM_IRQHandler+0x110>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004322:	68da      	ldr	r2, [r3, #12]
 8004324:	0650      	lsls	r0, r2, #25
 8004326:	d505      	bpl.n	8004334 <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004328:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800432c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800432e:	4620      	mov	r0, r4
 8004330:	f7ff ff77 	bl	8004222 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004334:	6823      	ldr	r3, [r4, #0]
 8004336:	691a      	ldr	r2, [r3, #16]
 8004338:	0691      	lsls	r1, r2, #26
 800433a:	d522      	bpl.n	8004382 <HAL_TIM_IRQHandler+0x15e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800433c:	68da      	ldr	r2, [r3, #12]
 800433e:	0692      	lsls	r2, r2, #26
 8004340:	d51f      	bpl.n	8004382 <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004342:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8004346:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004348:	611a      	str	r2, [r3, #16]
}
 800434a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800434e:	f000 bb79 	b.w	8004a44 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004352:	f7ff ff63 	bl	800421c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004356:	4620      	mov	r0, r4
 8004358:	f7ff ff62 	bl	8004220 <HAL_TIM_PWM_PulseFinishedCallback>
 800435c:	e776      	b.n	800424c <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800435e:	f7ff ff5d 	bl	800421c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004362:	4620      	mov	r0, r4
 8004364:	f7ff ff5c 	bl	8004220 <HAL_TIM_PWM_PulseFinishedCallback>
 8004368:	e785      	b.n	8004276 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800436a:	f7ff ff57 	bl	800421c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800436e:	4620      	mov	r0, r4
 8004370:	f7ff ff56 	bl	8004220 <HAL_TIM_PWM_PulseFinishedCallback>
 8004374:	e793      	b.n	800429e <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004376:	f7ff ff51 	bl	800421c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800437a:	4620      	mov	r0, r4
 800437c:	f7ff ff50 	bl	8004220 <HAL_TIM_PWM_PulseFinishedCallback>
 8004380:	e7a2      	b.n	80042c8 <HAL_TIM_IRQHandler+0xa4>
}
 8004382:	bd10      	pop	{r4, pc}

08004384 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004384:	4a21      	ldr	r2, [pc, #132]	; (800440c <TIM_Base_SetConfig+0x88>)
  tmpcr1 = TIMx->CR1;
 8004386:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004388:	4290      	cmp	r0, r2
{
 800438a:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800438c:	d005      	beq.n	800439a <TIM_Base_SetConfig+0x16>
 800438e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004392:	d002      	beq.n	800439a <TIM_Base_SetConfig+0x16>
 8004394:	4c1e      	ldr	r4, [pc, #120]	; (8004410 <TIM_Base_SetConfig+0x8c>)
 8004396:	42a0      	cmp	r0, r4
 8004398:	d10c      	bne.n	80043b4 <TIM_Base_SetConfig+0x30>
    tmpcr1 |= Structure->CounterMode;
 800439a:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800439c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043a0:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 80043a2:	ea43 0304 	orr.w	r3, r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043a6:	d010      	beq.n	80043ca <TIM_Base_SetConfig+0x46>
 80043a8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80043ac:	d00d      	beq.n	80043ca <TIM_Base_SetConfig+0x46>
 80043ae:	4a18      	ldr	r2, [pc, #96]	; (8004410 <TIM_Base_SetConfig+0x8c>)
 80043b0:	4290      	cmp	r0, r2
 80043b2:	d00a      	beq.n	80043ca <TIM_Base_SetConfig+0x46>
 80043b4:	4a17      	ldr	r2, [pc, #92]	; (8004414 <TIM_Base_SetConfig+0x90>)
 80043b6:	4290      	cmp	r0, r2
 80043b8:	d007      	beq.n	80043ca <TIM_Base_SetConfig+0x46>
 80043ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80043be:	4290      	cmp	r0, r2
 80043c0:	d003      	beq.n	80043ca <TIM_Base_SetConfig+0x46>
 80043c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80043c6:	4290      	cmp	r0, r2
 80043c8:	d103      	bne.n	80043d2 <TIM_Base_SetConfig+0x4e>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043ca:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80043cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043d0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043d2:	694a      	ldr	r2, [r1, #20]
 80043d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043d8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80043da:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043dc:	688b      	ldr	r3, [r1, #8]
 80043de:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80043e0:	680b      	ldr	r3, [r1, #0]
 80043e2:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043e4:	4b09      	ldr	r3, [pc, #36]	; (800440c <TIM_Base_SetConfig+0x88>)
 80043e6:	4298      	cmp	r0, r3
 80043e8:	d00b      	beq.n	8004402 <TIM_Base_SetConfig+0x7e>
 80043ea:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 80043ee:	4298      	cmp	r0, r3
 80043f0:	d007      	beq.n	8004402 <TIM_Base_SetConfig+0x7e>
 80043f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043f6:	4298      	cmp	r0, r3
 80043f8:	d003      	beq.n	8004402 <TIM_Base_SetConfig+0x7e>
 80043fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043fe:	4298      	cmp	r0, r3
 8004400:	d101      	bne.n	8004406 <TIM_Base_SetConfig+0x82>
    TIMx->RCR = Structure->RepetitionCounter;
 8004402:	690b      	ldr	r3, [r1, #16]
 8004404:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8004406:	2301      	movs	r3, #1
 8004408:	6143      	str	r3, [r0, #20]
}
 800440a:	bd10      	pop	{r4, pc}
 800440c:	40012c00 	.word	0x40012c00
 8004410:	40000400 	.word	0x40000400
 8004414:	40014000 	.word	0x40014000

08004418 <HAL_TIM_Base_Init>:
{
 8004418:	b510      	push	{r4, lr}
  if (htim == NULL)
 800441a:	4604      	mov	r4, r0
 800441c:	b350      	cbz	r0, 8004474 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800441e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004422:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004426:	b91b      	cbnz	r3, 8004430 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8004428:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800442c:	f7fd fb56 	bl	8001adc <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8004430:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004432:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004434:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004438:	1d21      	adds	r1, r4, #4
 800443a:	f7ff ffa3 	bl	8004384 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800443e:	2301      	movs	r3, #1
 8004440:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return HAL_OK;
 8004444:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004446:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800444a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800444e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004452:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8004456:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800445a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800445e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004462:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004466:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800446a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800446e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8004472:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004474:	2001      	movs	r0, #1
 8004476:	e7fc      	b.n	8004472 <HAL_TIM_Base_Init+0x5a>

08004478 <HAL_TIM_PWM_Init>:
{
 8004478:	b510      	push	{r4, lr}
  if (htim == NULL)
 800447a:	4604      	mov	r4, r0
 800447c:	b350      	cbz	r0, 80044d4 <HAL_TIM_PWM_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800447e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004482:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004486:	b91b      	cbnz	r3, 8004490 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8004488:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800448c:	f7ff fe6a 	bl	8004164 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8004490:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004492:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004494:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004498:	1d21      	adds	r1, r4, #4
 800449a:	f7ff ff73 	bl	8004384 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800449e:	2301      	movs	r3, #1
 80044a0:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return HAL_OK;
 80044a4:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044a6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80044aa:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80044ae:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80044b2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80044b6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80044ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044be:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80044c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80044c6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80044ca:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80044ce:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80044d2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80044d4:	2001      	movs	r0, #1
 80044d6:	e7fc      	b.n	80044d2 <HAL_TIM_PWM_Init+0x5a>

080044d8 <HAL_TIM_Encoder_Init>:
{
 80044d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044da:	460d      	mov	r5, r1
  if (htim == NULL)
 80044dc:	4604      	mov	r4, r0
 80044de:	2800      	cmp	r0, #0
 80044e0:	d04d      	beq.n	800457e <HAL_TIM_Encoder_Init+0xa6>
  if (htim->State == HAL_TIM_STATE_RESET)
 80044e2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80044e6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80044ea:	b91b      	cbnz	r3, 80044f4 <HAL_TIM_Encoder_Init+0x1c>
    htim->Lock = HAL_UNLOCKED;
 80044ec:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 80044f0:	f7fd fb5a 	bl	8001ba8 <HAL_TIM_Encoder_MspInit>
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80044f4:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 80044f6:	2302      	movs	r3, #2
 80044f8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80044fc:	f851 0b04 	ldr.w	r0, [r1], #4
 8004500:	6883      	ldr	r3, [r0, #8]
 8004502:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8004506:	f023 0307 	bic.w	r3, r3, #7
 800450a:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800450c:	f7ff ff3a 	bl	8004384 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8004510:	6820      	ldr	r0, [r4, #0]
  tmpsmcr |= sConfig->EncoderMode;
 8004512:	682b      	ldr	r3, [r5, #0]
  tmpsmcr = htim->Instance->SMCR;
 8004514:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8004516:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004518:	68a9      	ldr	r1, [r5, #8]
  tmpccer = htim->Instance->CCER;
 800451a:	6a07      	ldr	r7, [r0, #32]
  tmpsmcr |= sConfig->EncoderMode;
 800451c:	431e      	orrs	r6, r3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800451e:	69ab      	ldr	r3, [r5, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004520:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004524:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004528:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 800452c:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800452e:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004532:	692b      	ldr	r3, [r5, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004534:	69e9      	ldr	r1, [r5, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004536:	011b      	lsls	r3, r3, #4
 8004538:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800453c:	68e9      	ldr	r1, [r5, #12]
 800453e:	430b      	orrs	r3, r1
 8004540:	6a29      	ldr	r1, [r5, #32]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004542:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004546:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 800454a:	4313      	orrs	r3, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800454c:	6969      	ldr	r1, [r5, #20]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800454e:	f027 02aa 	bic.w	r2, r7, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004552:	686f      	ldr	r7, [r5, #4]
  htim->Instance->SMCR = tmpsmcr;
 8004554:	6086      	str	r6, [r0, #8]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004556:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
  htim->Instance->CCMR1 = tmpccmr1;
 800455a:	6183      	str	r3, [r0, #24]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800455c:	4317      	orrs	r7, r2
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800455e:	2301      	movs	r3, #1
  htim->Instance->CCER = tmpccer;
 8004560:	6207      	str	r7, [r0, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004562:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return HAL_OK;
 8004566:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004568:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800456c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004570:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004574:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8004578:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800457c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800457e:	2001      	movs	r0, #1
 8004580:	e7fc      	b.n	800457c <HAL_TIM_Encoder_Init+0xa4>
	...

08004584 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004584:	6a03      	ldr	r3, [r0, #32]
 8004586:	f023 0310 	bic.w	r3, r3, #16
 800458a:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800458c:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800458e:	6842      	ldr	r2, [r0, #4]
{
 8004590:	b570      	push	{r4, r5, r6, lr}
  tmpccmrx = TIMx->CCMR1;
 8004592:	6984      	ldr	r4, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004594:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004596:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 800459a:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800459e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80045a2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80045a4:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80045a8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045ac:	4d10      	ldr	r5, [pc, #64]	; (80045f0 <TIM_OC2_SetConfig+0x6c>)
 80045ae:	42a8      	cmp	r0, r5
 80045b0:	d10e      	bne.n	80045d0 <TIM_OC2_SetConfig+0x4c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045b2:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80045b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045b8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80045bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045c0:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80045c4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045c8:	4335      	orrs	r5, r6
 80045ca:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 80045ce:	e009      	b.n	80045e4 <TIM_OC2_SetConfig+0x60>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045d0:	4d08      	ldr	r5, [pc, #32]	; (80045f4 <TIM_OC2_SetConfig+0x70>)
 80045d2:	42a8      	cmp	r0, r5
 80045d4:	d0f4      	beq.n	80045c0 <TIM_OC2_SetConfig+0x3c>
 80045d6:	4d08      	ldr	r5, [pc, #32]	; (80045f8 <TIM_OC2_SetConfig+0x74>)
 80045d8:	42a8      	cmp	r0, r5
 80045da:	d0f1      	beq.n	80045c0 <TIM_OC2_SetConfig+0x3c>
 80045dc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80045e0:	42a8      	cmp	r0, r5
 80045e2:	d0ed      	beq.n	80045c0 <TIM_OC2_SetConfig+0x3c>
  TIMx->CR2 = tmpcr2;
 80045e4:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 80045e6:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 80045e8:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80045ea:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80045ec:	6203      	str	r3, [r0, #32]
}
 80045ee:	bd70      	pop	{r4, r5, r6, pc}
 80045f0:	40012c00 	.word	0x40012c00
 80045f4:	40014000 	.word	0x40014000
 80045f8:	40014400 	.word	0x40014400

080045fc <HAL_TIM_PWM_ConfigChannel>:
{
 80045fc:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80045fe:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004602:	2b01      	cmp	r3, #1
{
 8004604:	4605      	mov	r5, r0
  __HAL_LOCK(htim);
 8004606:	d079      	beq.n	80046fc <HAL_TIM_PWM_ConfigChannel+0x100>
 8004608:	2001      	movs	r0, #1
  switch (Channel)
 800460a:	2a0c      	cmp	r2, #12
  __HAL_LOCK(htim);
 800460c:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
  switch (Channel)
 8004610:	d052      	beq.n	80046b8 <HAL_TIM_PWM_ConfigChannel+0xbc>
 8004612:	d808      	bhi.n	8004626 <HAL_TIM_PWM_ConfigChannel+0x2a>
 8004614:	2a04      	cmp	r2, #4
 8004616:	d02d      	beq.n	8004674 <HAL_TIM_PWM_ConfigChannel+0x78>
 8004618:	2a08      	cmp	r2, #8
 800461a:	d03c      	beq.n	8004696 <HAL_TIM_PWM_ConfigChannel+0x9a>
 800461c:	b1c2      	cbz	r2, 8004650 <HAL_TIM_PWM_ConfigChannel+0x54>
  __HAL_UNLOCK(htim);
 800461e:	2300      	movs	r3, #0
 8004620:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 8004624:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 8004626:	2a10      	cmp	r2, #16
 8004628:	d057      	beq.n	80046da <HAL_TIM_PWM_ConfigChannel+0xde>
 800462a:	2a14      	cmp	r2, #20
 800462c:	d1f7      	bne.n	800461e <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800462e:	6828      	ldr	r0, [r5, #0]
 8004630:	f7ff fd3a 	bl	80040a8 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004634:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004636:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004638:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800463a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800463e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004640:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004642:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004646:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004648:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800464a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800464e:	e053      	b.n	80046f8 <HAL_TIM_PWM_ConfigChannel+0xfc>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004650:	6828      	ldr	r0, [r5, #0]
 8004652:	f7ff fc49 	bl	8003ee8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004656:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004658:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800465a:	699a      	ldr	r2, [r3, #24]
 800465c:	f042 0208 	orr.w	r2, r2, #8
 8004660:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004662:	699a      	ldr	r2, [r3, #24]
 8004664:	f022 0204 	bic.w	r2, r2, #4
 8004668:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800466a:	699a      	ldr	r2, [r3, #24]
 800466c:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800466e:	619a      	str	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8004670:	2000      	movs	r0, #0
      break;
 8004672:	e7d4      	b.n	800461e <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004674:	6828      	ldr	r0, [r5, #0]
 8004676:	f7ff ff85 	bl	8004584 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800467a:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800467c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800467e:	699a      	ldr	r2, [r3, #24]
 8004680:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004684:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004686:	699a      	ldr	r2, [r3, #24]
 8004688:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800468c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800468e:	699a      	ldr	r2, [r3, #24]
 8004690:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004694:	e7eb      	b.n	800466e <HAL_TIM_PWM_ConfigChannel+0x72>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004696:	6828      	ldr	r0, [r5, #0]
 8004698:	f7ff fc6a 	bl	8003f70 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800469c:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800469e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80046a0:	69da      	ldr	r2, [r3, #28]
 80046a2:	f042 0208 	orr.w	r2, r2, #8
 80046a6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80046a8:	69da      	ldr	r2, [r3, #28]
 80046aa:	f022 0204 	bic.w	r2, r2, #4
 80046ae:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80046b0:	69da      	ldr	r2, [r3, #28]
 80046b2:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80046b4:	61da      	str	r2, [r3, #28]
      break;
 80046b6:	e7db      	b.n	8004670 <HAL_TIM_PWM_ConfigChannel+0x74>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80046b8:	6828      	ldr	r0, [r5, #0]
 80046ba:	f7ff fc95 	bl	8003fe8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80046be:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80046c0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80046c2:	69da      	ldr	r2, [r3, #28]
 80046c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80046ca:	69da      	ldr	r2, [r3, #28]
 80046cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80046d2:	69da      	ldr	r2, [r3, #28]
 80046d4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80046d8:	e7ec      	b.n	80046b4 <HAL_TIM_PWM_ConfigChannel+0xb8>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80046da:	6828      	ldr	r0, [r5, #0]
 80046dc:	f7ff fcb4 	bl	8004048 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80046e0:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80046e2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80046e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046e6:	f042 0208 	orr.w	r2, r2, #8
 80046ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80046ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046ee:	f022 0204 	bic.w	r2, r2, #4
 80046f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80046f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046f6:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80046f8:	655a      	str	r2, [r3, #84]	; 0x54
 80046fa:	e7b9      	b.n	8004670 <HAL_TIM_PWM_ConfigChannel+0x74>
  __HAL_LOCK(htim);
 80046fc:	2002      	movs	r0, #2
 80046fe:	e791      	b.n	8004624 <HAL_TIM_PWM_ConfigChannel+0x28>

08004700 <TIM_ETR_SetConfig>:
{
 8004700:	b510      	push	{r4, lr}
  tmpsmcr = TIMx->SMCR;
 8004702:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004704:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004706:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800470a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800470e:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8004710:	6082      	str	r2, [r0, #8]
}
 8004712:	bd10      	pop	{r4, pc}

08004714 <HAL_TIM_ConfigClockSource>:
{
 8004714:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8004716:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800471a:	2b01      	cmp	r3, #1
{
 800471c:	4604      	mov	r4, r0
 800471e:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8004722:	f000 808f 	beq.w	8004844 <HAL_TIM_ConfigClockSource+0x130>
 8004726:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8004728:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 800472c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8004730:	6800      	ldr	r0, [r0, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004732:	4b45      	ldr	r3, [pc, #276]	; (8004848 <HAL_TIM_ConfigClockSource+0x134>)
  tmpsmcr = htim->Instance->SMCR;
 8004734:	6885      	ldr	r5, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004736:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8004738:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800473a:	680b      	ldr	r3, [r1, #0]
 800473c:	2b60      	cmp	r3, #96	; 0x60
 800473e:	d052      	beq.n	80047e6 <HAL_TIM_ConfigClockSource+0xd2>
 8004740:	d833      	bhi.n	80047aa <HAL_TIM_ConfigClockSource+0x96>
 8004742:	2b40      	cmp	r3, #64	; 0x40
 8004744:	d067      	beq.n	8004816 <HAL_TIM_ConfigClockSource+0x102>
 8004746:	d816      	bhi.n	8004776 <HAL_TIM_ConfigClockSource+0x62>
 8004748:	2b20      	cmp	r3, #32
 800474a:	d00d      	beq.n	8004768 <HAL_TIM_ConfigClockSource+0x54>
 800474c:	d80a      	bhi.n	8004764 <HAL_TIM_ConfigClockSource+0x50>
 800474e:	f033 0110 	bics.w	r1, r3, #16
 8004752:	d009      	beq.n	8004768 <HAL_TIM_ConfigClockSource+0x54>
  htim->State = HAL_TIM_STATE_READY;
 8004754:	2301      	movs	r3, #1
 8004756:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800475a:	2300      	movs	r3, #0
 800475c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8004760:	4610      	mov	r0, r2
 8004762:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8004764:	2b30      	cmp	r3, #48	; 0x30
 8004766:	d1f5      	bne.n	8004754 <HAL_TIM_ConfigClockSource+0x40>
  tmpsmcr = TIMx->SMCR;
 8004768:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800476a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800476e:	4313      	orrs	r3, r2
 8004770:	f043 0307 	orr.w	r3, r3, #7
 8004774:	e017      	b.n	80047a6 <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8004776:	2b50      	cmp	r3, #80	; 0x50
 8004778:	d1ec      	bne.n	8004754 <HAL_TIM_ConfigClockSource+0x40>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800477a:	684a      	ldr	r2, [r1, #4]
 800477c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800477e:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004780:	6a05      	ldr	r5, [r0, #32]
 8004782:	f025 0501 	bic.w	r5, r5, #1
 8004786:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004788:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800478a:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800478e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004792:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8004796:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8004798:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800479a:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800479c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800479e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047a2:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80047a6:	6083      	str	r3, [r0, #8]
 80047a8:	e011      	b.n	80047ce <HAL_TIM_ConfigClockSource+0xba>
  switch (sClockSourceConfig->ClockSource)
 80047aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047ae:	d00e      	beq.n	80047ce <HAL_TIM_ConfigClockSource+0xba>
 80047b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047b4:	d00d      	beq.n	80047d2 <HAL_TIM_ConfigClockSource+0xbe>
 80047b6:	2b70      	cmp	r3, #112	; 0x70
 80047b8:	d1cc      	bne.n	8004754 <HAL_TIM_ConfigClockSource+0x40>
      TIM_ETR_SetConfig(htim->Instance,
 80047ba:	68cb      	ldr	r3, [r1, #12]
 80047bc:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80047c0:	f7ff ff9e 	bl	8004700 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80047c4:	6822      	ldr	r2, [r4, #0]
 80047c6:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047cc:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80047ce:	2200      	movs	r2, #0
 80047d0:	e7c0      	b.n	8004754 <HAL_TIM_ConfigClockSource+0x40>
      TIM_ETR_SetConfig(htim->Instance,
 80047d2:	68cb      	ldr	r3, [r1, #12]
 80047d4:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80047d8:	f7ff ff92 	bl	8004700 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047dc:	6822      	ldr	r2, [r4, #0]
 80047de:	6893      	ldr	r3, [r2, #8]
 80047e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047e4:	e7f2      	b.n	80047cc <HAL_TIM_ConfigClockSource+0xb8>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80047e6:	684d      	ldr	r5, [r1, #4]
 80047e8:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047ea:	6a01      	ldr	r1, [r0, #32]
 80047ec:	f021 0110 	bic.w	r1, r1, #16
 80047f0:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047f2:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80047f4:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047f6:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80047fe:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004802:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8004806:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8004808:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800480a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800480c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004810:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8004814:	e7c7      	b.n	80047a6 <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004816:	684a      	ldr	r2, [r1, #4]
 8004818:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800481a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800481c:	6a05      	ldr	r5, [r0, #32]
 800481e:	f025 0501 	bic.w	r5, r5, #1
 8004822:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004824:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004826:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800482a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800482e:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8004832:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8004834:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8004836:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8004838:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800483a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800483e:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8004842:	e7b0      	b.n	80047a6 <HAL_TIM_ConfigClockSource+0x92>
  __HAL_LOCK(htim);
 8004844:	461a      	mov	r2, r3
 8004846:	e78b      	b.n	8004760 <HAL_TIM_ConfigClockSource+0x4c>
 8004848:	fffe0088 	.word	0xfffe0088

0800484c <TIM_CCxChannelCmd>:
  TIMx->CCER &= ~tmp;
 800484c:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800484e:	f001 011f 	and.w	r1, r1, #31
{
 8004852:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004854:	2401      	movs	r4, #1
 8004856:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8004858:	ea23 0304 	bic.w	r3, r3, r4
 800485c:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800485e:	6a03      	ldr	r3, [r0, #32]
 8004860:	408a      	lsls	r2, r1
 8004862:	431a      	orrs	r2, r3
 8004864:	6202      	str	r2, [r0, #32]
}
 8004866:	bd10      	pop	{r4, pc}

08004868 <HAL_TIM_OC_Start>:
{
 8004868:	b510      	push	{r4, lr}
 800486a:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800486c:	b929      	cbnz	r1, 800487a <HAL_TIM_OC_Start+0x12>
 800486e:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8004872:	2b01      	cmp	r3, #1
 8004874:	d031      	beq.n	80048da <HAL_TIM_OC_Start+0x72>
    return HAL_ERROR;
 8004876:	2001      	movs	r0, #1
}
 8004878:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800487a:	2904      	cmp	r1, #4
 800487c:	d107      	bne.n	800488e <HAL_TIM_OC_Start+0x26>
 800487e:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8004882:	2b01      	cmp	r3, #1
 8004884:	d1f7      	bne.n	8004876 <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004886:	2302      	movs	r3, #2
 8004888:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 800488c:	e028      	b.n	80048e0 <HAL_TIM_OC_Start+0x78>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800488e:	2908      	cmp	r1, #8
 8004890:	d107      	bne.n	80048a2 <HAL_TIM_OC_Start+0x3a>
 8004892:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004896:	2b01      	cmp	r3, #1
 8004898:	d1ed      	bne.n	8004876 <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800489a:	2302      	movs	r3, #2
 800489c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 80048a0:	e01e      	b.n	80048e0 <HAL_TIM_OC_Start+0x78>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80048a2:	290c      	cmp	r1, #12
 80048a4:	d107      	bne.n	80048b6 <HAL_TIM_OC_Start+0x4e>
 80048a6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d1e3      	bne.n	8004876 <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048ae:	2302      	movs	r3, #2
 80048b0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 80048b4:	e014      	b.n	80048e0 <HAL_TIM_OC_Start+0x78>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80048b6:	2910      	cmp	r1, #16
 80048b8:	d107      	bne.n	80048ca <HAL_TIM_OC_Start+0x62>
 80048ba:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d1d9      	bne.n	8004876 <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048c2:	2302      	movs	r3, #2
 80048c4:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 80048c8:	e00a      	b.n	80048e0 <HAL_TIM_OC_Start+0x78>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80048ca:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d1d1      	bne.n	8004876 <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048d2:	2302      	movs	r3, #2
 80048d4:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 80048d8:	e002      	b.n	80048e0 <HAL_TIM_OC_Start+0x78>
 80048da:	2302      	movs	r3, #2
 80048dc:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80048e0:	2201      	movs	r2, #1
 80048e2:	6820      	ldr	r0, [r4, #0]
 80048e4:	f7ff ffb2 	bl	800484c <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048e8:	6823      	ldr	r3, [r4, #0]
 80048ea:	4a18      	ldr	r2, [pc, #96]	; (800494c <HAL_TIM_OC_Start+0xe4>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d015      	beq.n	800491c <HAL_TIM_OC_Start+0xb4>
 80048f0:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d011      	beq.n	800491c <HAL_TIM_OC_Start+0xb4>
 80048f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d00d      	beq.n	800491c <HAL_TIM_OC_Start+0xb4>
 8004900:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004904:	4293      	cmp	r3, r2
 8004906:	d009      	beq.n	800491c <HAL_TIM_OC_Start+0xb4>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004908:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800490c:	d10e      	bne.n	800492c <HAL_TIM_OC_Start+0xc4>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800490e:	6899      	ldr	r1, [r3, #8]
 8004910:	4a0f      	ldr	r2, [pc, #60]	; (8004950 <HAL_TIM_OC_Start+0xe8>)
 8004912:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004914:	2a06      	cmp	r2, #6
 8004916:	d115      	bne.n	8004944 <HAL_TIM_OC_Start+0xdc>
  return HAL_OK;
 8004918:	2000      	movs	r0, #0
 800491a:	e7ad      	b.n	8004878 <HAL_TIM_OC_Start+0x10>
    __HAL_TIM_MOE_ENABLE(htim);
 800491c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800491e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004922:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004924:	4a09      	ldr	r2, [pc, #36]	; (800494c <HAL_TIM_OC_Start+0xe4>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d1ee      	bne.n	8004908 <HAL_TIM_OC_Start+0xa0>
 800492a:	e7f0      	b.n	800490e <HAL_TIM_OC_Start+0xa6>
 800492c:	4a09      	ldr	r2, [pc, #36]	; (8004954 <HAL_TIM_OC_Start+0xec>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d0ed      	beq.n	800490e <HAL_TIM_OC_Start+0xa6>
 8004932:	f502 329e 	add.w	r2, r2, #80896	; 0x13c00
 8004936:	4293      	cmp	r3, r2
 8004938:	d0e9      	beq.n	800490e <HAL_TIM_OC_Start+0xa6>
    __HAL_TIM_ENABLE(htim);
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	f042 0201 	orr.w	r2, r2, #1
 8004940:	601a      	str	r2, [r3, #0]
 8004942:	e7e9      	b.n	8004918 <HAL_TIM_OC_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004944:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8004948:	d1f7      	bne.n	800493a <HAL_TIM_OC_Start+0xd2>
 800494a:	e7e5      	b.n	8004918 <HAL_TIM_OC_Start+0xb0>
 800494c:	40012c00 	.word	0x40012c00
 8004950:	00010007 	.word	0x00010007
 8004954:	40000400 	.word	0x40000400

08004958 <HAL_TIM_PWM_Start>:
 8004958:	f7ff bf86 	b.w	8004868 <HAL_TIM_OC_Start>

0800495c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800495c:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800495e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004962:	2b01      	cmp	r3, #1
{
 8004964:	4604      	mov	r4, r0
 8004966:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800496a:	d027      	beq.n	80049bc <HAL_TIMEx_MasterConfigSynchronization+0x60>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800496c:	6823      	ldr	r3, [r4, #0]
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800496e:	4d14      	ldr	r5, [pc, #80]	; (80049c0 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004970:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8004974:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8004976:	6898      	ldr	r0, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004978:	42ab      	cmp	r3, r5
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800497a:	bf02      	ittt	eq
 800497c:	684e      	ldreq	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800497e:	f422 0270 	biceq.w	r2, r2, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004982:	4332      	orreq	r2, r6
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004984:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8004986:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800498a:	4332      	orrs	r2, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800498c:	42ab      	cmp	r3, r5
  htim->Instance->CR2 = tmpcr2;
 800498e:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004990:	d009      	beq.n	80049a6 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 8004992:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004996:	d006      	beq.n	80049a6 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 8004998:	4a0a      	ldr	r2, [pc, #40]	; (80049c4 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d003      	beq.n	80049a6 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 800499e:	f502 329e 	add.w	r2, r2, #80896	; 0x13c00
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d104      	bne.n	80049b0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049a6:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049a8:	f020 0280 	bic.w	r2, r0, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049ac:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049b0:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 80049b2:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80049b4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80049b8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c

  return HAL_OK;
}
 80049bc:	bd70      	pop	{r4, r5, r6, pc}
 80049be:	bf00      	nop
 80049c0:	40012c00 	.word	0x40012c00
 80049c4:	40000400 	.word	0x40000400

080049c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80049c8:	b510      	push	{r4, lr}
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80049ca:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d034      	beq.n	8004a3c <HAL_TIMEx_ConfigBreakDeadTime+0x74>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80049d2:	68cb      	ldr	r3, [r1, #12]
 80049d4:	688a      	ldr	r2, [r1, #8]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80049d6:	4c1a      	ldr	r4, [pc, #104]	; (8004a40 <HAL_TIMEx_ConfigBreakDeadTime+0x78>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80049d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049dc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80049de:	684a      	ldr	r2, [r1, #4]
 80049e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80049e4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80049e6:	680a      	ldr	r2, [r1, #0]
 80049e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049ec:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80049ee:	690a      	ldr	r2, [r1, #16]
 80049f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049f4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80049f6:	694a      	ldr	r2, [r1, #20]
 80049f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049fc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80049fe:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8004a00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a04:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004a06:	698a      	ldr	r2, [r1, #24]
 8004a08:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8004a0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004a10:	6802      	ldr	r2, [r0, #0]
 8004a12:	42a2      	cmp	r2, r4
 8004a14:	d10c      	bne.n	8004a30 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004a16:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8004a18:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004a1c:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004a20:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004a22:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004a24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a28:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004a2a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004a2e:	430b      	orrs	r3, r1
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004a30:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004a32:	2300      	movs	r3, #0
 8004a34:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8004a38:	4618      	mov	r0, r3
}
 8004a3a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 8004a3c:	2002      	movs	r0, #2
 8004a3e:	e7fc      	b.n	8004a3a <HAL_TIMEx_ConfigBreakDeadTime+0x72>
 8004a40:	40012c00 	.word	0x40012c00

08004a44 <HAL_TIMEx_CommutCallback>:
 8004a44:	4770      	bx	lr

08004a46 <HAL_TIMEx_BreakCallback>:
 8004a46:	4770      	bx	lr

08004a48 <HAL_TIMEx_Break2Callback>:
 8004a48:	4770      	bx	lr
	...

08004a4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a4c:	b538      	push	{r3, r4, r5, lr}
 8004a4e:	4604      	mov	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a50:	69c0      	ldr	r0, [r0, #28]
 8004a52:	6921      	ldr	r1, [r4, #16]
 8004a54:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a56:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a58:	430a      	orrs	r2, r1
 8004a5a:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a5c:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a5e:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a60:	4941      	ldr	r1, [pc, #260]	; (8004b68 <UART_SetConfig+0x11c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a62:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a64:	4029      	ands	r1, r5
 8004a66:	430a      	orrs	r2, r1
 8004a68:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a6a:	685a      	ldr	r2, [r3, #4]
 8004a6c:	68e1      	ldr	r1, [r4, #12]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  tmpreg |= huart->Init.OneBitSampling;
 8004a6e:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a70:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004a74:	430a      	orrs	r2, r1
 8004a76:	605a      	str	r2, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a78:	6899      	ldr	r1, [r3, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a7a:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a7c:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg |= huart->Init.OneBitSampling;
 8004a80:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a82:	430a      	orrs	r2, r1
 8004a84:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a86:	4a39      	ldr	r2, [pc, #228]	; (8004b6c <UART_SetConfig+0x120>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d114      	bne.n	8004ab6 <UART_SetConfig+0x6a>
 8004a8c:	4b38      	ldr	r3, [pc, #224]	; (8004b70 <UART_SetConfig+0x124>)
 8004a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a90:	f003 0303 	and.w	r3, r3, #3
 8004a94:	3b01      	subs	r3, #1
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d814      	bhi.n	8004ac4 <UART_SetConfig+0x78>
 8004a9a:	4a36      	ldr	r2, [pc, #216]	; (8004b74 <UART_SetConfig+0x128>)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a9c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004aa0:	5cd3      	ldrb	r3, [r2, r3]
 8004aa2:	d137      	bne.n	8004b14 <UART_SetConfig+0xc8>
  {
    switch (clocksource)
 8004aa4:	2b08      	cmp	r3, #8
 8004aa6:	d85c      	bhi.n	8004b62 <UART_SetConfig+0x116>
 8004aa8:	e8df f003 	tbb	[pc, r3]
 8004aac:	5b1d170f 	.word	0x5b1d170f
 8004ab0:	5b5b5b1a 	.word	0x5b5b5b1a
 8004ab4:	1e          	.byte	0x1e
 8004ab5:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ab6:	4a30      	ldr	r2, [pc, #192]	; (8004b78 <UART_SetConfig+0x12c>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d003      	beq.n	8004ac4 <UART_SetConfig+0x78>
 8004abc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d14e      	bne.n	8004b62 <UART_SetConfig+0x116>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ac4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004ac8:	d13e      	bne.n	8004b48 <UART_SetConfig+0xfc>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004aca:	f7ff f92f 	bl	8003d2c <HAL_RCC_GetPCLK1Freq>
        ret = HAL_ERROR;
        break;
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ace:	b958      	cbnz	r0, 8004ae8 <UART_SetConfig+0x9c>
 8004ad0:	2000      	movs	r0, #0
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ad2:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8004ad4:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64

  return ret;
}
 8004ad8:	bd38      	pop	{r3, r4, r5, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ada:	f7ff f93f 	bl	8003d5c <HAL_RCC_GetPCLK2Freq>
        break;
 8004ade:	e7f6      	b.n	8004ace <UART_SetConfig+0x82>
        pclk = HAL_RCC_GetSysClockFreq();
 8004ae0:	f7ff f846 	bl	8003b70 <HAL_RCC_GetSysClockFreq>
        break;
 8004ae4:	e7f3      	b.n	8004ace <UART_SetConfig+0x82>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ae6:	4825      	ldr	r0, [pc, #148]	; (8004b7c <UART_SetConfig+0x130>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ae8:	6862      	ldr	r2, [r4, #4]
 8004aea:	0853      	lsrs	r3, r2, #1
 8004aec:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8004af0:	fbb0 f0f2 	udiv	r0, r0, r2
 8004af4:	b283      	uxth	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004af6:	f1a3 0110 	sub.w	r1, r3, #16
 8004afa:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8004afe:	4291      	cmp	r1, r2
 8004b00:	d82f      	bhi.n	8004b62 <UART_SetConfig+0x116>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b02:	f020 000f 	bic.w	r0, r0, #15
        huart->Instance->BRR = brrtemp;
 8004b06:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b08:	b280      	uxth	r0, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b0a:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8004b0e:	4318      	orrs	r0, r3
 8004b10:	60d0      	str	r0, [r2, #12]
 8004b12:	e7dd      	b.n	8004ad0 <UART_SetConfig+0x84>
    switch (clocksource)
 8004b14:	2b08      	cmp	r3, #8
 8004b16:	d824      	bhi.n	8004b62 <UART_SetConfig+0x116>
 8004b18:	e8df f003 	tbb	[pc, r3]
 8004b1c:	23211b16 	.word	0x23211b16
 8004b20:	2323231e 	.word	0x2323231e
 8004b24:	05          	.byte	0x05
 8004b25:	00          	.byte	0x00
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b26:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b2a:	6862      	ldr	r2, [r4, #4]
 8004b2c:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8004b30:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b34:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b36:	f1a3 0110 	sub.w	r1, r3, #16
 8004b3a:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8004b3e:	4291      	cmp	r1, r2
 8004b40:	d80f      	bhi.n	8004b62 <UART_SetConfig+0x116>
        huart->Instance->BRR = usartdiv;
 8004b42:	6822      	ldr	r2, [r4, #0]
 8004b44:	60d3      	str	r3, [r2, #12]
 8004b46:	e7c3      	b.n	8004ad0 <UART_SetConfig+0x84>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b48:	f7ff f8f0 	bl	8003d2c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004b4c:	2800      	cmp	r0, #0
 8004b4e:	d0bf      	beq.n	8004ad0 <UART_SetConfig+0x84>
 8004b50:	e7eb      	b.n	8004b2a <UART_SetConfig+0xde>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b52:	f7ff f903 	bl	8003d5c <HAL_RCC_GetPCLK2Freq>
        break;
 8004b56:	e7f9      	b.n	8004b4c <UART_SetConfig+0x100>
        pclk = HAL_RCC_GetSysClockFreq();
 8004b58:	f7ff f80a 	bl	8003b70 <HAL_RCC_GetSysClockFreq>
        break;
 8004b5c:	e7f6      	b.n	8004b4c <UART_SetConfig+0x100>
        pclk = (uint32_t) HSI_VALUE;
 8004b5e:	4807      	ldr	r0, [pc, #28]	; (8004b7c <UART_SetConfig+0x130>)
 8004b60:	e7e3      	b.n	8004b2a <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b62:	2001      	movs	r0, #1
 8004b64:	e7b5      	b.n	8004ad2 <UART_SetConfig+0x86>
 8004b66:	bf00      	nop
 8004b68:	efff69f3 	.word	0xefff69f3
 8004b6c:	40013800 	.word	0x40013800
 8004b70:	40021000 	.word	0x40021000
 8004b74:	08004e4c 	.word	0x08004e4c
 8004b78:	40004400 	.word	0x40004400
 8004b7c:	007a1200 	.word	0x007a1200

08004b80 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b80:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004b82:	07da      	lsls	r2, r3, #31
{
 8004b84:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b86:	d506      	bpl.n	8004b96 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b88:	6801      	ldr	r1, [r0, #0]
 8004b8a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8004b8c:	684a      	ldr	r2, [r1, #4]
 8004b8e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8004b92:	4322      	orrs	r2, r4
 8004b94:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b96:	079c      	lsls	r4, r3, #30
 8004b98:	d506      	bpl.n	8004ba8 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b9a:	6801      	ldr	r1, [r0, #0]
 8004b9c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8004b9e:	684a      	ldr	r2, [r1, #4]
 8004ba0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004ba4:	4322      	orrs	r2, r4
 8004ba6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ba8:	0759      	lsls	r1, r3, #29
 8004baa:	d506      	bpl.n	8004bba <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004bac:	6801      	ldr	r1, [r0, #0]
 8004bae:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8004bb0:	684a      	ldr	r2, [r1, #4]
 8004bb2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004bb6:	4322      	orrs	r2, r4
 8004bb8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004bba:	071a      	lsls	r2, r3, #28
 8004bbc:	d506      	bpl.n	8004bcc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004bbe:	6801      	ldr	r1, [r0, #0]
 8004bc0:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8004bc2:	684a      	ldr	r2, [r1, #4]
 8004bc4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004bc8:	4322      	orrs	r2, r4
 8004bca:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004bcc:	06dc      	lsls	r4, r3, #27
 8004bce:	d506      	bpl.n	8004bde <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004bd0:	6801      	ldr	r1, [r0, #0]
 8004bd2:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8004bd4:	688a      	ldr	r2, [r1, #8]
 8004bd6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004bda:	4322      	orrs	r2, r4
 8004bdc:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004bde:	0699      	lsls	r1, r3, #26
 8004be0:	d506      	bpl.n	8004bf0 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004be2:	6801      	ldr	r1, [r0, #0]
 8004be4:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8004be6:	688a      	ldr	r2, [r1, #8]
 8004be8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004bec:	4322      	orrs	r2, r4
 8004bee:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004bf0:	065a      	lsls	r2, r3, #25
 8004bf2:	d50f      	bpl.n	8004c14 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004bf4:	6801      	ldr	r1, [r0, #0]
 8004bf6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8004bf8:	684a      	ldr	r2, [r1, #4]
 8004bfa:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8004bfe:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c00:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c04:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c06:	d105      	bne.n	8004c14 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c08:	684a      	ldr	r2, [r1, #4]
 8004c0a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8004c0c:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8004c10:	4322      	orrs	r2, r4
 8004c12:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c14:	061b      	lsls	r3, r3, #24
 8004c16:	d506      	bpl.n	8004c26 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c18:	6802      	ldr	r2, [r0, #0]
 8004c1a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004c1c:	6853      	ldr	r3, [r2, #4]
 8004c1e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8004c22:	430b      	orrs	r3, r1
 8004c24:	6053      	str	r3, [r2, #4]
  }
}
 8004c26:	bd10      	pop	{r4, pc}

08004c28 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c2c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8004c30:	4604      	mov	r4, r0
 8004c32:	460e      	mov	r6, r1
 8004c34:	4615      	mov	r5, r2
 8004c36:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c38:	6822      	ldr	r2, [r4, #0]
 8004c3a:	69d3      	ldr	r3, [r2, #28]
 8004c3c:	ea36 0303 	bics.w	r3, r6, r3
 8004c40:	bf0c      	ite	eq
 8004c42:	2301      	moveq	r3, #1
 8004c44:	2300      	movne	r3, #0
 8004c46:	42ab      	cmp	r3, r5
 8004c48:	d001      	beq.n	8004c4e <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8004c4a:	2000      	movs	r0, #0
 8004c4c:	e025      	b.n	8004c9a <UART_WaitOnFlagUntilTimeout+0x72>
    if (Timeout != HAL_MAX_DELAY)
 8004c4e:	f1b8 3fff 	cmp.w	r8, #4294967295
 8004c52:	d0f2      	beq.n	8004c3a <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c54:	f7fd f982 	bl	8001f5c <HAL_GetTick>
 8004c58:	1bc0      	subs	r0, r0, r7
 8004c5a:	4540      	cmp	r0, r8
 8004c5c:	6820      	ldr	r0, [r4, #0]
 8004c5e:	d802      	bhi.n	8004c66 <UART_WaitOnFlagUntilTimeout+0x3e>
 8004c60:	f1b8 0f00 	cmp.w	r8, #0
 8004c64:	d11b      	bne.n	8004c9e <UART_WaitOnFlagUntilTimeout+0x76>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c66:	e850 3f00 	ldrex	r3, [r0]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c6a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c6e:	e840 3200 	strex	r2, r3, [r0]
 8004c72:	2a00      	cmp	r2, #0
 8004c74:	d1f7      	bne.n	8004c66 <UART_WaitOnFlagUntilTimeout+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c76:	f100 0308 	add.w	r3, r0, #8
 8004c7a:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c7e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c82:	f100 0108 	add.w	r1, r0, #8
 8004c86:	e841 3200 	strex	r2, r3, [r1]
 8004c8a:	2a00      	cmp	r2, #0
 8004c8c:	d1f3      	bne.n	8004c76 <UART_WaitOnFlagUntilTimeout+0x4e>
        huart->gState = HAL_UART_STATE_READY;
 8004c8e:	2320      	movs	r3, #32
 8004c90:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004c92:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8004c94:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
          return HAL_TIMEOUT;
 8004c98:	2003      	movs	r0, #3
}
 8004c9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c9e:	6803      	ldr	r3, [r0, #0]
 8004ca0:	075a      	lsls	r2, r3, #29
 8004ca2:	d5c9      	bpl.n	8004c38 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ca4:	69c3      	ldr	r3, [r0, #28]
 8004ca6:	051b      	lsls	r3, r3, #20
 8004ca8:	d5c6      	bpl.n	8004c38 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004caa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004cae:	6203      	str	r3, [r0, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb0:	e850 3f00 	ldrex	r3, [r0]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004cb4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb8:	e840 3200 	strex	r2, r3, [r0]
 8004cbc:	2a00      	cmp	r2, #0
 8004cbe:	d1f7      	bne.n	8004cb0 <UART_WaitOnFlagUntilTimeout+0x88>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc0:	f100 0308 	add.w	r3, r0, #8
 8004cc4:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cc8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ccc:	f100 0108 	add.w	r1, r0, #8
 8004cd0:	e841 3200 	strex	r2, r3, [r1]
 8004cd4:	2a00      	cmp	r2, #0
 8004cd6:	d1f3      	bne.n	8004cc0 <UART_WaitOnFlagUntilTimeout+0x98>
          huart->gState = HAL_UART_STATE_READY;
 8004cd8:	2320      	movs	r3, #32
 8004cda:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004cdc:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004cde:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 8004ce2:	e7d7      	b.n	8004c94 <UART_WaitOnFlagUntilTimeout+0x6c>

08004ce4 <UART_CheckIdleState>:
{
 8004ce4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004ce6:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ce8:	2600      	movs	r6, #0
 8004cea:	f8c0 6080 	str.w	r6, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 8004cee:	f7fd f935 	bl	8001f5c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004cf2:	6823      	ldr	r3, [r4, #0]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8004cf8:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004cfa:	d416      	bmi.n	8004d2a <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004cfc:	6823      	ldr	r3, [r4, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	075b      	lsls	r3, r3, #29
 8004d02:	d50a      	bpl.n	8004d1a <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d08:	9300      	str	r3, [sp, #0]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	462b      	mov	r3, r5
 8004d0e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004d12:	4620      	mov	r0, r4
 8004d14:	f7ff ff88 	bl	8004c28 <UART_WaitOnFlagUntilTimeout>
 8004d18:	b998      	cbnz	r0, 8004d42 <UART_CheckIdleState+0x5e>
  huart->gState = HAL_UART_STATE_READY;
 8004d1a:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d1c:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8004d1e:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8004d20:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004d24:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d26:	6620      	str	r0, [r4, #96]	; 0x60
  return HAL_OK;
 8004d28:	e00c      	b.n	8004d44 <UART_CheckIdleState+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d2a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d2e:	9300      	str	r3, [sp, #0]
 8004d30:	4632      	mov	r2, r6
 8004d32:	4603      	mov	r3, r0
 8004d34:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004d38:	4620      	mov	r0, r4
 8004d3a:	f7ff ff75 	bl	8004c28 <UART_WaitOnFlagUntilTimeout>
 8004d3e:	2800      	cmp	r0, #0
 8004d40:	d0dc      	beq.n	8004cfc <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8004d42:	2003      	movs	r0, #3
}
 8004d44:	b002      	add	sp, #8
 8004d46:	bd70      	pop	{r4, r5, r6, pc}

08004d48 <HAL_UART_Init>:
{
 8004d48:	b510      	push	{r4, lr}
  if (huart == NULL)
 8004d4a:	4604      	mov	r4, r0
 8004d4c:	b340      	cbz	r0, 8004da0 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8004d4e:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8004d50:	b91b      	cbnz	r3, 8004d5a <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8004d52:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 8004d56:	f7fd f861 	bl	8001e1c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8004d5a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004d5c:	2324      	movs	r3, #36	; 0x24
 8004d5e:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8004d60:	6813      	ldr	r3, [r2, #0]
 8004d62:	f023 0301 	bic.w	r3, r3, #1
 8004d66:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d68:	4620      	mov	r0, r4
 8004d6a:	f7ff fe6f 	bl	8004a4c <UART_SetConfig>
 8004d6e:	2801      	cmp	r0, #1
 8004d70:	d016      	beq.n	8004da0 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d74:	b113      	cbz	r3, 8004d7c <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8004d76:	4620      	mov	r0, r4
 8004d78:	f7ff ff02 	bl	8004b80 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d7c:	6823      	ldr	r3, [r4, #0]
 8004d7e:	685a      	ldr	r2, [r3, #4]
 8004d80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d84:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d86:	689a      	ldr	r2, [r3, #8]
 8004d88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d8c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8004d94:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8004d96:	601a      	str	r2, [r3, #0]
}
 8004d98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8004d9c:	f7ff bfa2 	b.w	8004ce4 <UART_CheckIdleState>
}
 8004da0:	2001      	movs	r0, #1
 8004da2:	bd10      	pop	{r4, pc}

08004da4 <__libc_init_array>:
 8004da4:	b570      	push	{r4, r5, r6, lr}
 8004da6:	4d0d      	ldr	r5, [pc, #52]	; (8004ddc <__libc_init_array+0x38>)
 8004da8:	4c0d      	ldr	r4, [pc, #52]	; (8004de0 <__libc_init_array+0x3c>)
 8004daa:	1b64      	subs	r4, r4, r5
 8004dac:	10a4      	asrs	r4, r4, #2
 8004dae:	2600      	movs	r6, #0
 8004db0:	42a6      	cmp	r6, r4
 8004db2:	d109      	bne.n	8004dc8 <__libc_init_array+0x24>
 8004db4:	4d0b      	ldr	r5, [pc, #44]	; (8004de4 <__libc_init_array+0x40>)
 8004db6:	4c0c      	ldr	r4, [pc, #48]	; (8004de8 <__libc_init_array+0x44>)
 8004db8:	f000 f820 	bl	8004dfc <_init>
 8004dbc:	1b64      	subs	r4, r4, r5
 8004dbe:	10a4      	asrs	r4, r4, #2
 8004dc0:	2600      	movs	r6, #0
 8004dc2:	42a6      	cmp	r6, r4
 8004dc4:	d105      	bne.n	8004dd2 <__libc_init_array+0x2e>
 8004dc6:	bd70      	pop	{r4, r5, r6, pc}
 8004dc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dcc:	4798      	blx	r3
 8004dce:	3601      	adds	r6, #1
 8004dd0:	e7ee      	b.n	8004db0 <__libc_init_array+0xc>
 8004dd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dd6:	4798      	blx	r3
 8004dd8:	3601      	adds	r6, #1
 8004dda:	e7f2      	b.n	8004dc2 <__libc_init_array+0x1e>
 8004ddc:	08004e50 	.word	0x08004e50
 8004de0:	08004e50 	.word	0x08004e50
 8004de4:	08004e50 	.word	0x08004e50
 8004de8:	08004e54 	.word	0x08004e54

08004dec <memset>:
 8004dec:	4402      	add	r2, r0
 8004dee:	4603      	mov	r3, r0
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d100      	bne.n	8004df6 <memset+0xa>
 8004df4:	4770      	bx	lr
 8004df6:	f803 1b01 	strb.w	r1, [r3], #1
 8004dfa:	e7f9      	b.n	8004df0 <memset+0x4>

08004dfc <_init>:
 8004dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dfe:	bf00      	nop
 8004e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e02:	bc08      	pop	{r3}
 8004e04:	469e      	mov	lr, r3
 8004e06:	4770      	bx	lr

08004e08 <_fini>:
 8004e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e0a:	bf00      	nop
 8004e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e0e:	bc08      	pop	{r3}
 8004e10:	469e      	mov	lr, r3
 8004e12:	4770      	bx	lr
