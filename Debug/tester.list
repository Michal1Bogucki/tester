
tester.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076fc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08007884  08007884  00017884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078bc  080078bc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080078bc  080078bc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080078bc  080078bc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078bc  080078bc  000178bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078c0  080078c0  000178c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080078c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000041c  2000000c  080078d0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000428  080078d0  00020428  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023384  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d80  00000000  00000000  000433c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001518  00000000  00000000  00047140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001370  00000000  00000000  00048658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004bd0  00000000  00000000  000499c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d203  00000000  00000000  0004e598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b0836  00000000  00000000  0006b79b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011bfd1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005748  00000000  00000000  0011c024  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800786c 	.word	0x0800786c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800786c 	.word	0x0800786c

080001c8 <Pid_Create>:
#include "PID_lib.h"

PID_handler* Pid_Create(PID_handler* hPID){
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	hPID->I_max=(float)0xffff;
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	4a16      	ldr	r2, [pc, #88]	; (800022c <Pid_Create+0x64>)
 80001d4:	629a      	str	r2, [r3, #40]	; 0x28
	hPID->I_mini=(float)-0xffff;
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	4a15      	ldr	r2, [pc, #84]	; (8000230 <Pid_Create+0x68>)
 80001da:	62da      	str	r2, [r3, #44]	; 0x2c
	hPID->Kd=0;
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	f04f 0200 	mov.w	r2, #0
 80001e2:	615a      	str	r2, [r3, #20]
	hPID->Ki=0;
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	f04f 0200 	mov.w	r2, #0
 80001ea:	611a      	str	r2, [r3, #16]
	hPID->Kp=0;
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	f04f 0200 	mov.w	r2, #0
 80001f2:	60da      	str	r2, [r3, #12]
	hPID->omax=(float)0xffff;
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	4a0d      	ldr	r2, [pc, #52]	; (800022c <Pid_Create+0x64>)
 80001f8:	61da      	str	r2, [r3, #28]
	hPID->omin=(float)-0xffff;
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4a0c      	ldr	r2, [pc, #48]	; (8000230 <Pid_Create+0x68>)
 80001fe:	619a      	str	r2, [r3, #24]
	hPID->status=PID_NotInit;
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	2203      	movs	r2, #3
 8000204:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	hPID->input=0;
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	2200      	movs	r2, #0
 800020c:	601a      	str	r2, [r3, #0]
	hPID->output=0;
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	2200      	movs	r2, #0
 8000212:	605a      	str	r2, [r3, #4]
	hPID->mode=PID_synchronous;
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	2201      	movs	r2, #1
 8000218:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	return hPID;
 800021c:	687b      	ldr	r3, [r7, #4]
}
 800021e:	4618      	mov	r0, r3
 8000220:	370c      	adds	r7, #12
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	477fff00 	.word	0x477fff00
 8000230:	c77fff00 	.word	0xc77fff00

08000234 <pid_compute>:
{
	return hPID->status;
}

void pid_compute(PID_handler* hPID)
{
 8000234:	b480      	push	{r7}
 8000236:	b089      	sub	sp, #36	; 0x24
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
	if (hPID->status==PID_Disable||hPID->status==PID_NotInit) return;
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000242:	2b02      	cmp	r3, #2
 8000244:	f000 8098 	beq.w	8000378 <pid_compute+0x144>
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800024e:	2b03      	cmp	r3, #3
 8000250:	f000 8092 	beq.w	8000378 <pid_compute+0x144>
	if (hPID->mode==PID_synchronous){
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800025a:	2b01      	cmp	r3, #1
 800025c:	f040 808d 	bne.w	800037a <pid_compute+0x146>

		float pid_error = (*(hPID->setpoint))-(*(hPID->input));
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	689b      	ldr	r3, [r3, #8]
 8000264:	ed93 7a00 	vldr	s14, [r3]
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	edd3 7a00 	vldr	s15, [r3]
 8000270:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000274:	edc7 7a06 	vstr	s15, [r7, #24]
		float prop= pid_error*hPID->Kp;
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	edd3 7a03 	vldr	s15, [r3, #12]
 800027e:	ed97 7a06 	vldr	s14, [r7, #24]
 8000282:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000286:	edc7 7a05 	vstr	s15, [r7, #20]

		hPID->I_accum=hPID->I_accum+(pid_error)*hPID->sampletime;
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	ed93 7a08 	vldr	s14, [r3, #32]
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8000296:	edd7 7a06 	vldr	s15, [r7, #24]
 800029a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800029e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	edc3 7a08 	vstr	s15, [r3, #32]
		if (hPID->I_accum>hPID->I_max) hPID->I_accum=hPID->I_max;
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	ed93 7a08 	vldr	s14, [r3, #32]
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80002b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80002b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80002bc:	dd03      	ble.n	80002c6 <pid_compute+0x92>
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	621a      	str	r2, [r3, #32]
		if (hPID->I_accum<hPID->I_mini) hPID->I_accum=hPID->I_mini;
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	ed93 7a08 	vldr	s14, [r3, #32]
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80002d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80002d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80002da:	d503      	bpl.n	80002e4 <pid_compute+0xb0>
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	621a      	str	r2, [r3, #32]
		float integr = hPID->I_accum*hPID->Ki;
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	ed93 7a08 	vldr	s14, [r3, #32]
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	edd3 7a04 	vldr	s15, [r3, #16]
 80002f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80002f4:	edc7 7a04 	vstr	s15, [r7, #16]

		float deriv=(*(hPID->input)-hPID->D_last)*hPID->Kp;
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	ed93 7a00 	vldr	s14, [r3]
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000306:	ee37 7a67 	vsub.f32	s14, s14, s15
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	edd3 7a03 	vldr	s15, [r3, #12]
 8000310:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000314:	edc7 7a03 	vstr	s15, [r7, #12]
		hPID->D_last=*hPID->input;
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	681a      	ldr	r2, [r3, #0]
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	625a      	str	r2, [r3, #36]	; 0x24

		float out= prop+integr-deriv;
 8000322:	ed97 7a05 	vldr	s14, [r7, #20]
 8000326:	edd7 7a04 	vldr	s15, [r7, #16]
 800032a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800032e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000332:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000336:	edc7 7a07 	vstr	s15, [r7, #28]
		if (out>hPID->omax) out=hPID->omax;
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	edd3 7a07 	vldr	s15, [r3, #28]
 8000340:	ed97 7a07 	vldr	s14, [r7, #28]
 8000344:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800034c:	dd02      	ble.n	8000354 <pid_compute+0x120>
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	69db      	ldr	r3, [r3, #28]
 8000352:	61fb      	str	r3, [r7, #28]
		if (out<hPID->omin){
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	edd3 7a06 	vldr	s15, [r3, #24]
 800035a:	ed97 7a07 	vldr	s14, [r7, #28]
 800035e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000366:	d502      	bpl.n	800036e <pid_compute+0x13a>
			out=hPID->omin;
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	699b      	ldr	r3, [r3, #24]
 800036c:	61fb      	str	r3, [r7, #28]
		}



		*hPID->output=out;
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	685b      	ldr	r3, [r3, #4]
 8000372:	69fa      	ldr	r2, [r7, #28]
 8000374:	601a      	str	r2, [r3, #0]
 8000376:	e000      	b.n	800037a <pid_compute+0x146>
	if (hPID->status==PID_Disable||hPID->status==PID_NotInit) return;
 8000378:	bf00      	nop



	

}
 800037a:	3724      	adds	r7, #36	; 0x24
 800037c:	46bd      	mov	sp, r7
 800037e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000382:	4770      	bx	lr

08000384 <pid_Enable>:
			pid->I_accum = pid->I_max;
		else if (pid->I_accum < pid->I_mini)
			pid->I_accum = pid->I_mini;
}

void pid_Enable(PID_handler* h ){
 8000384:	b480      	push	{r7}
 8000386:	b083      	sub	sp, #12
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
	h->status=PID_PreCompute;
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	2201      	movs	r2, #1
 8000390:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 8000394:	bf00      	nop
 8000396:	370c      	adds	r7, #12
 8000398:	46bd      	mov	sp, r7
 800039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039e:	4770      	bx	lr

080003a0 <Motors_Init>:

VNH_HANDLE hVNH1;
VNH_HANDLE hVNH2;
uint32_t adc_dma_buffer[2];

void Motors_Init(void){
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b084      	sub	sp, #16
 80003a4:	af00      	add	r7, sp, #0
	// IO Pins set
	PRIM_IOPIN IOpin;
	//M1
	IOpin.gpiopin=M1_ENA_Pin;
 80003a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003aa:	81bb      	strh	r3, [r7, #12]
	IOpin.gpioport=M1_ENA_GPIO_Port;
 80003ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003b0:	60bb      	str	r3, [r7, #8]
	hVNH1.ENA_sig=IOpin;
 80003b2:	4b48      	ldr	r3, [pc, #288]	; (80004d4 <Motors_Init+0x134>)
 80003b4:	3318      	adds	r3, #24
 80003b6:	f107 0208 	add.w	r2, r7, #8
 80003ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80003be:	e883 0003 	stmia.w	r3, {r0, r1}

	IOpin.gpiopin=M1_INA_Pin;
 80003c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80003c6:	81bb      	strh	r3, [r7, #12]
	IOpin.gpioport=M1_INA_GPIO_Port;
 80003c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003cc:	60bb      	str	r3, [r7, #8]
	hVNH1.MA_sig=IOpin;
 80003ce:	4b41      	ldr	r3, [pc, #260]	; (80004d4 <Motors_Init+0x134>)
 80003d0:	3308      	adds	r3, #8
 80003d2:	f107 0208 	add.w	r2, r7, #8
 80003d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80003da:	e883 0003 	stmia.w	r3, {r0, r1}

	IOpin.gpiopin=M1_INB_Pin;
 80003de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003e2:	81bb      	strh	r3, [r7, #12]
	IOpin.gpioport=M1_INB_GPIO_Port;
 80003e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003e8:	60bb      	str	r3, [r7, #8]
	hVNH1.MB_sig=IOpin;
 80003ea:	4b3a      	ldr	r3, [pc, #232]	; (80004d4 <Motors_Init+0x134>)
 80003ec:	3310      	adds	r3, #16
 80003ee:	f107 0208 	add.w	r2, r7, #8
 80003f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80003f6:	e883 0003 	stmia.w	r3, {r0, r1}

	IOpin.gpiopin=CMES_ENA_Pin;
 80003fa:	2304      	movs	r3, #4
 80003fc:	81bb      	strh	r3, [r7, #12]
	IOpin.gpioport=CMES_ENA_GPIO_Port;
 80003fe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000402:	60bb      	str	r3, [r7, #8]

	hVNH1.CS_dis_sig=IOpin;
 8000404:	4b33      	ldr	r3, [pc, #204]	; (80004d4 <Motors_Init+0x134>)
 8000406:	3320      	adds	r3, #32
 8000408:	f107 0208 	add.w	r2, r7, #8
 800040c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000410:	e883 0003 	stmia.w	r3, {r0, r1}
	//M2
	IOpin.gpiopin=M2_ENA_Pin;
 8000414:	2301      	movs	r3, #1
 8000416:	81bb      	strh	r3, [r7, #12]
	IOpin.gpioport=M2_ENA_GPIO_Port;
 8000418:	4b2f      	ldr	r3, [pc, #188]	; (80004d8 <Motors_Init+0x138>)
 800041a:	60bb      	str	r3, [r7, #8]
	hVNH2.ENA_sig=IOpin;
 800041c:	4b2f      	ldr	r3, [pc, #188]	; (80004dc <Motors_Init+0x13c>)
 800041e:	3318      	adds	r3, #24
 8000420:	f107 0208 	add.w	r2, r7, #8
 8000424:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000428:	e883 0003 	stmia.w	r3, {r0, r1}

	IOpin.gpiopin=M2_INA_Pin;
 800042c:	2302      	movs	r3, #2
 800042e:	81bb      	strh	r3, [r7, #12]
	IOpin.gpioport=M2_INA_GPIO_Port;
 8000430:	4b29      	ldr	r3, [pc, #164]	; (80004d8 <Motors_Init+0x138>)
 8000432:	60bb      	str	r3, [r7, #8]
	hVNH2.MA_sig=IOpin;
 8000434:	4b29      	ldr	r3, [pc, #164]	; (80004dc <Motors_Init+0x13c>)
 8000436:	3308      	adds	r3, #8
 8000438:	f107 0208 	add.w	r2, r7, #8
 800043c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000440:	e883 0003 	stmia.w	r3, {r0, r1}

	IOpin.gpiopin=M2_INB_Pin;
 8000444:	2310      	movs	r3, #16
 8000446:	81bb      	strh	r3, [r7, #12]
	IOpin.gpioport=M2_INB_GPIO_Port;
 8000448:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800044c:	60bb      	str	r3, [r7, #8]
	hVNH2.MB_sig=IOpin;
 800044e:	4b23      	ldr	r3, [pc, #140]	; (80004dc <Motors_Init+0x13c>)
 8000450:	3310      	adds	r3, #16
 8000452:	f107 0208 	add.w	r2, r7, #8
 8000456:	e892 0003 	ldmia.w	r2, {r0, r1}
 800045a:	e883 0003 	stmia.w	r3, {r0, r1}

	IOpin.gpiopin=CMES_ENA_Pin;
 800045e:	2304      	movs	r3, #4
 8000460:	81bb      	strh	r3, [r7, #12]
	IOpin.gpioport=CMES_ENA_GPIO_Port;
 8000462:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000466:	60bb      	str	r3, [r7, #8]

	hVNH2.CS_dis_sig=IOpin;
 8000468:	4b1c      	ldr	r3, [pc, #112]	; (80004dc <Motors_Init+0x13c>)
 800046a:	3320      	adds	r3, #32
 800046c:	f107 0208 	add.w	r2, r7, #8
 8000470:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000474:	e883 0003 	stmia.w	r3, {r0, r1}

	//PWM SET
	//M1
	PRIM_PWM PWMpin;

	PWMpin.Chanel=TIM_CHANNEL_1;
 8000478:	2300      	movs	r3, #0
 800047a:	607b      	str	r3, [r7, #4]
	PWMpin.timh=&htim17;
 800047c:	4b18      	ldr	r3, [pc, #96]	; (80004e0 <Motors_Init+0x140>)
 800047e:	603b      	str	r3, [r7, #0]
	hVNH1.PWM_sig=PWMpin;
 8000480:	4b14      	ldr	r3, [pc, #80]	; (80004d4 <Motors_Init+0x134>)
 8000482:	461a      	mov	r2, r3
 8000484:	463b      	mov	r3, r7
 8000486:	e893 0003 	ldmia.w	r3, {r0, r1}
 800048a:	e882 0003 	stmia.w	r2, {r0, r1}
	//M2
	PWMpin.Chanel=TIM_CHANNEL_4;
 800048e:	230c      	movs	r3, #12
 8000490:	607b      	str	r3, [r7, #4]
	PWMpin.timh=&htim2;
 8000492:	4b14      	ldr	r3, [pc, #80]	; (80004e4 <Motors_Init+0x144>)
 8000494:	603b      	str	r3, [r7, #0]
	hVNH2.PWM_sig=PWMpin;
 8000496:	4b11      	ldr	r3, [pc, #68]	; (80004dc <Motors_Init+0x13c>)
 8000498:	461a      	mov	r2, r3
 800049a:	463b      	mov	r3, r7
 800049c:	e893 0003 	ldmia.w	r3, {r0, r1}
 80004a0:	e882 0003 	stmia.w	r2, {r0, r1}


	//HAL_ADC_Start_DMA(&hadc1,adc_dma_buffer,2);


	hVNH1.CS_sig=&adc_dma_buffer[0];
 80004a4:	4b0b      	ldr	r3, [pc, #44]	; (80004d4 <Motors_Init+0x134>)
 80004a6:	4a10      	ldr	r2, [pc, #64]	; (80004e8 <Motors_Init+0x148>)
 80004a8:	629a      	str	r2, [r3, #40]	; 0x28
	hVNH2.CS_sig=&adc_dma_buffer[1];
 80004aa:	4b0c      	ldr	r3, [pc, #48]	; (80004dc <Motors_Init+0x13c>)
 80004ac:	4a0f      	ldr	r2, [pc, #60]	; (80004ec <Motors_Init+0x14c>)
 80004ae:	629a      	str	r2, [r3, #40]	; 0x28

	hVNH1.CS_Rez_Val=12000;
 80004b0:	4b08      	ldr	r3, [pc, #32]	; (80004d4 <Motors_Init+0x134>)
 80004b2:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 80004b6:	859a      	strh	r2, [r3, #44]	; 0x2c
	hVNH2.CS_Rez_Val=12000;
 80004b8:	4b08      	ldr	r3, [pc, #32]	; (80004dc <Motors_Init+0x13c>)
 80004ba:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 80004be:	859a      	strh	r2, [r3, #44]	; 0x2c

	VNH_Init(&hVNH1);
 80004c0:	4804      	ldr	r0, [pc, #16]	; (80004d4 <Motors_Init+0x134>)
 80004c2:	f000 f815 	bl	80004f0 <VNH_Init>
	VNH_Init(&hVNH2);
 80004c6:	4805      	ldr	r0, [pc, #20]	; (80004dc <Motors_Init+0x13c>)
 80004c8:	f000 f812 	bl	80004f0 <VNH_Init>


}
 80004cc:	bf00      	nop
 80004ce:	3710      	adds	r7, #16
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	2000005c 	.word	0x2000005c
 80004d8:	48000400 	.word	0x48000400
 80004dc:	20000028 	.word	0x20000028
 80004e0:	2000022c 	.word	0x2000022c
 80004e4:	20000310 	.word	0x20000310
 80004e8:	20000090 	.word	0x20000090
 80004ec:	20000094 	.word	0x20000094

080004f0 <VNH_Init>:
 *
 *
 *
 */

void VNH_Init(VNH_HANDLE* hVNH){
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]

	if(hVNH==NULL){
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d01a      	beq.n	8000534 <VNH_Init+0x44>
		return;
	}
	hVNH->pol_reverse=0;
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	2200      	movs	r2, #0
 8000502:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	// Start PWM
	VNH_DisableCurSens(hVNH);
 8000506:	6878      	ldr	r0, [r7, #4]
 8000508:	f000 f9c6 	bl	8000898 <VNH_DisableCurSens>
	VNH_Disable(hVNH);
 800050c:	6878      	ldr	r0, [r7, #4]
 800050e:	f000 f815 	bl	800053c <VNH_Disable>
	HAL_TIM_PWM_Start(hVNH->PWM_sig.timh,hVNH->PWM_sig.Chanel);
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	681a      	ldr	r2, [r3, #0]
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	685b      	ldr	r3, [r3, #4]
 800051a:	4619      	mov	r1, r3
 800051c:	4610      	mov	r0, r2
 800051e:	f005 fc1d 	bl	8005d5c <HAL_TIM_PWM_Start>
	VNH_SetPWM(hVNH,0);
 8000522:	2100      	movs	r1, #0
 8000524:	6878      	ldr	r0, [r7, #4]
 8000526:	f000 f90f 	bl	8000748 <VNH_SetPWM>

	VNH_SetDir(hVNH,dir_LL);
 800052a:	2103      	movs	r1, #3
 800052c:	6878      	ldr	r0, [r7, #4]
 800052e:	f000 f88f 	bl	8000650 <VNH_SetDir>
 8000532:	e000      	b.n	8000536 <VNH_Init+0x46>
		return;
 8000534:	bf00      	nop



}
 8000536:	3708      	adds	r7, #8
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}

0800053c <VNH_Disable>:

void VNH_Disable(VNH_HANDLE* hVNH){
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(hVNH->ENA_sig.gpioport, hVNH->ENA_sig.gpiopin, GPIO_PIN_RESET);
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	6998      	ldr	r0, [r3, #24]
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	8b9b      	ldrh	r3, [r3, #28]
 800054c:	2200      	movs	r2, #0
 800054e:	4619      	mov	r1, r3
 8000550:	f003 f9b4 	bl	80038bc <HAL_GPIO_WritePin>
	VNH_SetIOLL(hVNH);
 8000554:	6878      	ldr	r0, [r7, #4]
 8000556:	f000 f863 	bl	8000620 <VNH_SetIOLL>


}
 800055a:	bf00      	nop
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}

08000562 <VNH_Enable>:

void VNH_Enable(VNH_HANDLE* hVNH){
 8000562:	b580      	push	{r7, lr}
 8000564:	b082      	sub	sp, #8
 8000566:	af00      	add	r7, sp, #0
 8000568:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(hVNH->ENA_sig.gpioport, hVNH->ENA_sig.gpiopin, GPIO_PIN_SET);
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	6998      	ldr	r0, [r3, #24]
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	8b9b      	ldrh	r3, [r3, #28]
 8000572:	2201      	movs	r2, #1
 8000574:	4619      	mov	r1, r3
 8000576:	f003 f9a1 	bl	80038bc <HAL_GPIO_WritePin>
	VNH_SetDir(hVNH,hVNH->dir);
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8000580:	4619      	mov	r1, r3
 8000582:	6878      	ldr	r0, [r7, #4]
 8000584:	f000 f864 	bl	8000650 <VNH_SetDir>
}
 8000588:	bf00      	nop
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}

08000590 <VNH_SetIOHL>:


void VNH_SetIOHL(VNH_HANDLE*  hVNH){
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(hVNH->MA_sig.gpioport, hVNH->MA_sig.gpiopin, GPIO_PIN_RESET);
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	6898      	ldr	r0, [r3, #8]
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	899b      	ldrh	r3, [r3, #12]
 80005a0:	2200      	movs	r2, #0
 80005a2:	4619      	mov	r1, r3
 80005a4:	f003 f98a 	bl	80038bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(hVNH->MB_sig.gpioport, hVNH->MB_sig.gpiopin, GPIO_PIN_SET);
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	6918      	ldr	r0, [r3, #16]
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	8a9b      	ldrh	r3, [r3, #20]
 80005b0:	2201      	movs	r2, #1
 80005b2:	4619      	mov	r1, r3
 80005b4:	f003 f982 	bl	80038bc <HAL_GPIO_WritePin>
	//hVNH->dir=dir_HL;

}
 80005b8:	bf00      	nop
 80005ba:	3708      	adds	r7, #8
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}

080005c0 <VNH_SetIOLH>:

void VNH_SetIOLH(VNH_HANDLE*  hVNH){
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(hVNH->MA_sig.gpioport, hVNH->MA_sig.gpiopin, GPIO_PIN_SET);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	6898      	ldr	r0, [r3, #8]
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	899b      	ldrh	r3, [r3, #12]
 80005d0:	2201      	movs	r2, #1
 80005d2:	4619      	mov	r1, r3
 80005d4:	f003 f972 	bl	80038bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(hVNH->MB_sig.gpioport, hVNH->MB_sig.gpiopin, GPIO_PIN_RESET);
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	6918      	ldr	r0, [r3, #16]
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	8a9b      	ldrh	r3, [r3, #20]
 80005e0:	2200      	movs	r2, #0
 80005e2:	4619      	mov	r1, r3
 80005e4:	f003 f96a 	bl	80038bc <HAL_GPIO_WritePin>
	//hVNH->dir=dir_LH;
}
 80005e8:	bf00      	nop
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <VNH_SetIOHH>:

void VNH_SetIOHH(VNH_HANDLE*  hVNH){
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(hVNH->MA_sig.gpioport, hVNH->MA_sig.gpiopin, GPIO_PIN_SET);
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	6898      	ldr	r0, [r3, #8]
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	899b      	ldrh	r3, [r3, #12]
 8000600:	2201      	movs	r2, #1
 8000602:	4619      	mov	r1, r3
 8000604:	f003 f95a 	bl	80038bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(hVNH->MB_sig.gpioport, hVNH->MB_sig.gpiopin, GPIO_PIN_SET);
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	6918      	ldr	r0, [r3, #16]
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	8a9b      	ldrh	r3, [r3, #20]
 8000610:	2201      	movs	r2, #1
 8000612:	4619      	mov	r1, r3
 8000614:	f003 f952 	bl	80038bc <HAL_GPIO_WritePin>
	//hVNH->dir=dir_HH;
}
 8000618:	bf00      	nop
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <VNH_SetIOLL>:

void VNH_SetIOLL(VNH_HANDLE*  hVNH){
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(hVNH->MA_sig.gpioport, hVNH->MA_sig.gpiopin, GPIO_PIN_RESET);
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	6898      	ldr	r0, [r3, #8]
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	899b      	ldrh	r3, [r3, #12]
 8000630:	2200      	movs	r2, #0
 8000632:	4619      	mov	r1, r3
 8000634:	f003 f942 	bl	80038bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(hVNH->MB_sig.gpioport, hVNH->MB_sig.gpiopin, GPIO_PIN_RESET);
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	6918      	ldr	r0, [r3, #16]
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	8a9b      	ldrh	r3, [r3, #20]
 8000640:	2200      	movs	r2, #0
 8000642:	4619      	mov	r1, r3
 8000644:	f003 f93a 	bl	80038bc <HAL_GPIO_WritePin>
	//hVNH->dir=dir_LL;
}
 8000648:	bf00      	nop
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}

08000650 <VNH_SetDir>:
		VNH_SetDir(hVNH,dir_LL);
		break;
	}
}

void VNH_SetDir(VNH_HANDLE* hVNH ,VNH_dir dir){
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
 8000658:	460b      	mov	r3, r1
 800065a:	70fb      	strb	r3, [r7, #3]
	if (!hVNH->pol_reverse){
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000662:	2b00      	cmp	r3, #0
 8000664:	d136      	bne.n	80006d4 <VNH_SetDir+0x84>
		switch(dir){
 8000666:	78fb      	ldrb	r3, [r7, #3]
 8000668:	2b03      	cmp	r3, #3
 800066a:	d82b      	bhi.n	80006c4 <VNH_SetDir+0x74>
 800066c:	a201      	add	r2, pc, #4	; (adr r2, 8000674 <VNH_SetDir+0x24>)
 800066e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000672:	bf00      	nop
 8000674:	080006a5 	.word	0x080006a5
 8000678:	08000685 	.word	0x08000685
 800067c:	08000695 	.word	0x08000695
 8000680:	080006b5 	.word	0x080006b5
		case dir_HL:
			VNH_SetIOHL(hVNH);
 8000684:	6878      	ldr	r0, [r7, #4]
 8000686:	f7ff ff83 	bl	8000590 <VNH_SetIOHL>
			hVNH->dir=dir_HL;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	2201      	movs	r2, #1
 800068e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			break;
 8000692:	e055      	b.n	8000740 <VNH_SetDir+0xf0>

		case dir_LH:
			VNH_SetIOLH(hVNH);
 8000694:	6878      	ldr	r0, [r7, #4]
 8000696:	f7ff ff93 	bl	80005c0 <VNH_SetIOLH>
			hVNH->dir=dir_LH;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	2202      	movs	r2, #2
 800069e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			break;
 80006a2:	e04d      	b.n	8000740 <VNH_SetDir+0xf0>
		case dir_HH:
			VNH_SetIOHH(hVNH);
 80006a4:	6878      	ldr	r0, [r7, #4]
 80006a6:	f7ff ffa3 	bl	80005f0 <VNH_SetIOHH>
			hVNH->dir=dir_HH;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	2200      	movs	r2, #0
 80006ae:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			break;
 80006b2:	e045      	b.n	8000740 <VNH_SetDir+0xf0>
		case dir_LL:
			VNH_SetIOLL(hVNH);
 80006b4:	6878      	ldr	r0, [r7, #4]
 80006b6:	f7ff ffb3 	bl	8000620 <VNH_SetIOLL>
			hVNH->dir=dir_LL;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	2203      	movs	r2, #3
 80006be:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			break;
 80006c2:	e03d      	b.n	8000740 <VNH_SetDir+0xf0>
		default:
			VNH_SetIOLL(hVNH);
 80006c4:	6878      	ldr	r0, [r7, #4]
 80006c6:	f7ff ffab 	bl	8000620 <VNH_SetIOLL>
			hVNH->dir=dir_LL;
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	2203      	movs	r2, #3
 80006ce:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			break;
 80006d2:	e035      	b.n	8000740 <VNH_SetDir+0xf0>
		}
	}else{
		switch(dir){
 80006d4:	78fb      	ldrb	r3, [r7, #3]
 80006d6:	2b03      	cmp	r3, #3
 80006d8:	d82a      	bhi.n	8000730 <VNH_SetDir+0xe0>
 80006da:	a201      	add	r2, pc, #4	; (adr r2, 80006e0 <VNH_SetDir+0x90>)
 80006dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006e0:	08000711 	.word	0x08000711
 80006e4:	08000701 	.word	0x08000701
 80006e8:	080006f1 	.word	0x080006f1
 80006ec:	08000721 	.word	0x08000721
		case dir_LH:
			VNH_SetIOHL(hVNH);
 80006f0:	6878      	ldr	r0, [r7, #4]
 80006f2:	f7ff ff4d 	bl	8000590 <VNH_SetIOHL>
			hVNH->dir=dir_LH;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	2202      	movs	r2, #2
 80006fa:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			break;
 80006fe:	e01f      	b.n	8000740 <VNH_SetDir+0xf0>

		case dir_HL:
			VNH_SetIOLH(hVNH);
 8000700:	6878      	ldr	r0, [r7, #4]
 8000702:	f7ff ff5d 	bl	80005c0 <VNH_SetIOLH>
			hVNH->dir=dir_HL;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	2201      	movs	r2, #1
 800070a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			break;
 800070e:	e017      	b.n	8000740 <VNH_SetDir+0xf0>
		case dir_HH:
			VNH_SetIOHH(hVNH);
 8000710:	6878      	ldr	r0, [r7, #4]
 8000712:	f7ff ff6d 	bl	80005f0 <VNH_SetIOHH>
			hVNH->dir=dir_HH;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	2200      	movs	r2, #0
 800071a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			break;
 800071e:	e00f      	b.n	8000740 <VNH_SetDir+0xf0>
		case dir_LL:
			VNH_SetIOLL(hVNH);
 8000720:	6878      	ldr	r0, [r7, #4]
 8000722:	f7ff ff7d 	bl	8000620 <VNH_SetIOLL>
			hVNH->dir=dir_LL;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	2203      	movs	r2, #3
 800072a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			break;
 800072e:	e007      	b.n	8000740 <VNH_SetDir+0xf0>
		default:
			VNH_SetIOLL(hVNH);
 8000730:	6878      	ldr	r0, [r7, #4]
 8000732:	f7ff ff75 	bl	8000620 <VNH_SetIOLL>
			hVNH->dir=dir_LL;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	2203      	movs	r2, #3
 800073a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			break;
 800073e:	bf00      	nop
		}
	}

}
 8000740:	bf00      	nop
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <VNH_SetPWM>:
		hVNH->pol_reverse=0;
		VNH_SetDir(hVNH,hVNH->dir);
	}
}

void VNH_SetPWM(VNH_HANDLE* hVNH, uint8_t duty){
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
 8000750:	460b      	mov	r3, r1
 8000752:	70fb      	strb	r3, [r7, #3]
	if (duty>100) duty=100;
 8000754:	78fb      	ldrb	r3, [r7, #3]
 8000756:	2b64      	cmp	r3, #100	; 0x64
 8000758:	d901      	bls.n	800075e <VNH_SetPWM+0x16>
 800075a:	2364      	movs	r3, #100	; 0x64
 800075c:	70fb      	strb	r3, [r7, #3]
 	hVNH->PWM_dutycicle=duty;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	78fa      	ldrb	r2, [r7, #3]
 8000762:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	 //__HAL_TIM_SET_COMPARE(hVNH->PWM_sig.timh,hVNH->PWM_sig.Chanel,(uint8_t)__HAL_TIM_GET_AUTORELOAD(hVNH->PWM_sig.timh)*duty/100);
 	__HAL_TIM_SET_COMPARE(hVNH->PWM_sig.timh,hVNH->PWM_sig.Chanel,(uint8_t)__HAL_TIM_GET_AUTORELOAD(hVNH->PWM_sig.timh)*duty/100);
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	685b      	ldr	r3, [r3, #4]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d113      	bne.n	8000796 <VNH_SetPWM+0x4e>
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000776:	b2db      	uxtb	r3, r3
 8000778:	461a      	mov	r2, r3
 800077a:	78fb      	ldrb	r3, [r7, #3]
 800077c:	fb03 f302 	mul.w	r3, r3, r2
 8000780:	4a44      	ldr	r2, [pc, #272]	; (8000894 <VNH_SetPWM+0x14c>)
 8000782:	fb82 1203 	smull	r1, r2, r2, r3
 8000786:	1152      	asrs	r2, r2, #5
 8000788:	17db      	asrs	r3, r3, #31
 800078a:	1ad2      	subs	r2, r2, r3
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000794:	e077      	b.n	8000886 <VNH_SetPWM+0x13e>
 	__HAL_TIM_SET_COMPARE(hVNH->PWM_sig.timh,hVNH->PWM_sig.Chanel,(uint8_t)__HAL_TIM_GET_AUTORELOAD(hVNH->PWM_sig.timh)*duty/100);
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	685b      	ldr	r3, [r3, #4]
 800079a:	2b04      	cmp	r3, #4
 800079c:	d114      	bne.n	80007c8 <VNH_SetPWM+0x80>
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	461a      	mov	r2, r3
 80007aa:	78fb      	ldrb	r3, [r7, #3]
 80007ac:	fb03 f302 	mul.w	r3, r3, r2
 80007b0:	4a38      	ldr	r2, [pc, #224]	; (8000894 <VNH_SetPWM+0x14c>)
 80007b2:	fb82 1203 	smull	r1, r2, r2, r3
 80007b6:	1152      	asrs	r2, r2, #5
 80007b8:	17db      	asrs	r3, r3, #31
 80007ba:	1ad1      	subs	r1, r2, r3
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	681a      	ldr	r2, [r3, #0]
 80007c2:	460b      	mov	r3, r1
 80007c4:	6393      	str	r3, [r2, #56]	; 0x38
}
 80007c6:	e05e      	b.n	8000886 <VNH_SetPWM+0x13e>
 	__HAL_TIM_SET_COMPARE(hVNH->PWM_sig.timh,hVNH->PWM_sig.Chanel,(uint8_t)__HAL_TIM_GET_AUTORELOAD(hVNH->PWM_sig.timh)*duty/100);
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	685b      	ldr	r3, [r3, #4]
 80007cc:	2b08      	cmp	r3, #8
 80007ce:	d114      	bne.n	80007fa <VNH_SetPWM+0xb2>
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	461a      	mov	r2, r3
 80007dc:	78fb      	ldrb	r3, [r7, #3]
 80007de:	fb03 f302 	mul.w	r3, r3, r2
 80007e2:	4a2c      	ldr	r2, [pc, #176]	; (8000894 <VNH_SetPWM+0x14c>)
 80007e4:	fb82 1203 	smull	r1, r2, r2, r3
 80007e8:	1152      	asrs	r2, r2, #5
 80007ea:	17db      	asrs	r3, r3, #31
 80007ec:	1ad1      	subs	r1, r2, r3
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	681a      	ldr	r2, [r3, #0]
 80007f4:	460b      	mov	r3, r1
 80007f6:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80007f8:	e045      	b.n	8000886 <VNH_SetPWM+0x13e>
 	__HAL_TIM_SET_COMPARE(hVNH->PWM_sig.timh,hVNH->PWM_sig.Chanel,(uint8_t)__HAL_TIM_GET_AUTORELOAD(hVNH->PWM_sig.timh)*duty/100);
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	685b      	ldr	r3, [r3, #4]
 80007fe:	2b0c      	cmp	r3, #12
 8000800:	d114      	bne.n	800082c <VNH_SetPWM+0xe4>
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800080a:	b2db      	uxtb	r3, r3
 800080c:	461a      	mov	r2, r3
 800080e:	78fb      	ldrb	r3, [r7, #3]
 8000810:	fb03 f302 	mul.w	r3, r3, r2
 8000814:	4a1f      	ldr	r2, [pc, #124]	; (8000894 <VNH_SetPWM+0x14c>)
 8000816:	fb82 1203 	smull	r1, r2, r2, r3
 800081a:	1152      	asrs	r2, r2, #5
 800081c:	17db      	asrs	r3, r3, #31
 800081e:	1ad1      	subs	r1, r2, r3
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	681a      	ldr	r2, [r3, #0]
 8000826:	460b      	mov	r3, r1
 8000828:	6413      	str	r3, [r2, #64]	; 0x40
}
 800082a:	e02c      	b.n	8000886 <VNH_SetPWM+0x13e>
 	__HAL_TIM_SET_COMPARE(hVNH->PWM_sig.timh,hVNH->PWM_sig.Chanel,(uint8_t)__HAL_TIM_GET_AUTORELOAD(hVNH->PWM_sig.timh)*duty/100);
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	685b      	ldr	r3, [r3, #4]
 8000830:	2b10      	cmp	r3, #16
 8000832:	d114      	bne.n	800085e <VNH_SetPWM+0x116>
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800083c:	b2db      	uxtb	r3, r3
 800083e:	461a      	mov	r2, r3
 8000840:	78fb      	ldrb	r3, [r7, #3]
 8000842:	fb03 f302 	mul.w	r3, r3, r2
 8000846:	4a13      	ldr	r2, [pc, #76]	; (8000894 <VNH_SetPWM+0x14c>)
 8000848:	fb82 1203 	smull	r1, r2, r2, r3
 800084c:	1152      	asrs	r2, r2, #5
 800084e:	17db      	asrs	r3, r3, #31
 8000850:	1ad1      	subs	r1, r2, r3
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	460b      	mov	r3, r1
 800085a:	6593      	str	r3, [r2, #88]	; 0x58
}
 800085c:	e013      	b.n	8000886 <VNH_SetPWM+0x13e>
 	__HAL_TIM_SET_COMPARE(hVNH->PWM_sig.timh,hVNH->PWM_sig.Chanel,(uint8_t)__HAL_TIM_GET_AUTORELOAD(hVNH->PWM_sig.timh)*duty/100);
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000866:	b2db      	uxtb	r3, r3
 8000868:	461a      	mov	r2, r3
 800086a:	78fb      	ldrb	r3, [r7, #3]
 800086c:	fb03 f302 	mul.w	r3, r3, r2
 8000870:	4a08      	ldr	r2, [pc, #32]	; (8000894 <VNH_SetPWM+0x14c>)
 8000872:	fb82 1203 	smull	r1, r2, r2, r3
 8000876:	1152      	asrs	r2, r2, #5
 8000878:	17db      	asrs	r3, r3, #31
 800087a:	1ad1      	subs	r1, r2, r3
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	681a      	ldr	r2, [r3, #0]
 8000882:	460b      	mov	r3, r1
 8000884:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8000886:	bf00      	nop
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	51eb851f 	.word	0x51eb851f

08000898 <VNH_DisableCurSens>:

void VNH_DisableCurSens(VNH_HANDLE* hVNH){
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(hVNH->CS_dis_sig.gpioport,hVNH->CS_dis_sig.gpiopin,GPIO_PIN_SET);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	6a18      	ldr	r0, [r3, #32]
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80008a8:	2201      	movs	r2, #1
 80008aa:	4619      	mov	r1, r3
 80008ac:	f003 f806 	bl	80038bc <HAL_GPIO_WritePin>
}
 80008b0:	bf00      	nop
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <VNH_EnableCurSens>:

void VNH_EnableCurSens(VNH_HANDLE* hVNH){
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(hVNH->CS_dis_sig.gpioport,hVNH->CS_dis_sig.gpiopin,GPIO_PIN_RESET);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	6a18      	ldr	r0, [r3, #32]
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80008c8:	2200      	movs	r2, #0
 80008ca:	4619      	mov	r1, r3
 80008cc:	f002 fff6 	bl	80038bc <HAL_GPIO_WritePin>
}
 80008d0:	bf00      	nop
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08a      	sub	sp, #40	; 0x28
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80008de:	f107 031c 	add.w	r3, r7, #28
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80008ea:	1d3b      	adds	r3, r7, #4
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]
 80008f8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80008fa:	4b35      	ldr	r3, [pc, #212]	; (80009d0 <MX_ADC1_Init+0xf8>)
 80008fc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000900:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000902:	4b33      	ldr	r3, [pc, #204]	; (80009d0 <MX_ADC1_Init+0xf8>)
 8000904:	2200      	movs	r2, #0
 8000906:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000908:	4b31      	ldr	r3, [pc, #196]	; (80009d0 <MX_ADC1_Init+0xf8>)
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800090e:	4b30      	ldr	r3, [pc, #192]	; (80009d0 <MX_ADC1_Init+0xf8>)
 8000910:	2201      	movs	r2, #1
 8000912:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000914:	4b2e      	ldr	r3, [pc, #184]	; (80009d0 <MX_ADC1_Init+0xf8>)
 8000916:	2201      	movs	r2, #1
 8000918:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800091a:	4b2d      	ldr	r3, [pc, #180]	; (80009d0 <MX_ADC1_Init+0xf8>)
 800091c:	2200      	movs	r2, #0
 800091e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000922:	4b2b      	ldr	r3, [pc, #172]	; (80009d0 <MX_ADC1_Init+0xf8>)
 8000924:	2200      	movs	r2, #0
 8000926:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000928:	4b29      	ldr	r3, [pc, #164]	; (80009d0 <MX_ADC1_Init+0xf8>)
 800092a:	2201      	movs	r2, #1
 800092c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800092e:	4b28      	ldr	r3, [pc, #160]	; (80009d0 <MX_ADC1_Init+0xf8>)
 8000930:	2200      	movs	r2, #0
 8000932:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000934:	4b26      	ldr	r3, [pc, #152]	; (80009d0 <MX_ADC1_Init+0xf8>)
 8000936:	2202      	movs	r2, #2
 8000938:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800093a:	4b25      	ldr	r3, [pc, #148]	; (80009d0 <MX_ADC1_Init+0xf8>)
 800093c:	2201      	movs	r2, #1
 800093e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000942:	4b23      	ldr	r3, [pc, #140]	; (80009d0 <MX_ADC1_Init+0xf8>)
 8000944:	2208      	movs	r2, #8
 8000946:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000948:	4b21      	ldr	r3, [pc, #132]	; (80009d0 <MX_ADC1_Init+0xf8>)
 800094a:	2200      	movs	r2, #0
 800094c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800094e:	4b20      	ldr	r3, [pc, #128]	; (80009d0 <MX_ADC1_Init+0xf8>)
 8000950:	2200      	movs	r2, #0
 8000952:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000954:	481e      	ldr	r0, [pc, #120]	; (80009d0 <MX_ADC1_Init+0xf8>)
 8000956:	f001 f871 	bl	8001a3c <HAL_ADC_Init>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000960:	f000 fb82 	bl	8001068 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000964:	2300      	movs	r3, #0
 8000966:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000968:	f107 031c 	add.w	r3, r7, #28
 800096c:	4619      	mov	r1, r3
 800096e:	4818      	ldr	r0, [pc, #96]	; (80009d0 <MX_ADC1_Init+0xf8>)
 8000970:	f002 f84c 	bl	8002a0c <HAL_ADCEx_MultiModeConfigChannel>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800097a:	f000 fb75 	bl	8001068 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800097e:	2301      	movs	r3, #1
 8000980:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000982:	2301      	movs	r3, #1
 8000984:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000986:	2300      	movs	r3, #0
 8000988:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800098a:	2300      	movs	r3, #0
 800098c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800098e:	2300      	movs	r3, #0
 8000990:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000992:	2300      	movs	r3, #0
 8000994:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	4619      	mov	r1, r3
 800099a:	480d      	ldr	r0, [pc, #52]	; (80009d0 <MX_ADC1_Init+0xf8>)
 800099c:	f001 fd74 	bl	8002488 <HAL_ADC_ConfigChannel>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80009a6:	f000 fb5f 	bl	8001068 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80009aa:	2302      	movs	r3, #2
 80009ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80009ae:	2302      	movs	r3, #2
 80009b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009b2:	1d3b      	adds	r3, r7, #4
 80009b4:	4619      	mov	r1, r3
 80009b6:	4806      	ldr	r0, [pc, #24]	; (80009d0 <MX_ADC1_Init+0xf8>)
 80009b8:	f001 fd66 	bl	8002488 <HAL_ADC_ConfigChannel>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 80009c2:	f000 fb51 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009c6:	bf00      	nop
 80009c8:	3728      	adds	r7, #40	; 0x28
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000098 	.word	0x20000098

080009d4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08a      	sub	sp, #40	; 0x28
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
 80009ea:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80009f4:	d154      	bne.n	8000aa0 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80009f6:	4b2c      	ldr	r3, [pc, #176]	; (8000aa8 <HAL_ADC_MspInit+0xd4>)
 80009f8:	695b      	ldr	r3, [r3, #20]
 80009fa:	4a2b      	ldr	r2, [pc, #172]	; (8000aa8 <HAL_ADC_MspInit+0xd4>)
 80009fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a00:	6153      	str	r3, [r2, #20]
 8000a02:	4b29      	ldr	r3, [pc, #164]	; (8000aa8 <HAL_ADC_MspInit+0xd4>)
 8000a04:	695b      	ldr	r3, [r3, #20]
 8000a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0a:	613b      	str	r3, [r7, #16]
 8000a0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0e:	4b26      	ldr	r3, [pc, #152]	; (8000aa8 <HAL_ADC_MspInit+0xd4>)
 8000a10:	695b      	ldr	r3, [r3, #20]
 8000a12:	4a25      	ldr	r2, [pc, #148]	; (8000aa8 <HAL_ADC_MspInit+0xd4>)
 8000a14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a18:	6153      	str	r3, [r2, #20]
 8000a1a:	4b23      	ldr	r3, [pc, #140]	; (8000aa8 <HAL_ADC_MspInit+0xd4>)
 8000a1c:	695b      	ldr	r3, [r3, #20]
 8000a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a26:	2303      	movs	r3, #3
 8000a28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a2a:	2303      	movs	r3, #3
 8000a2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a32:	f107 0314 	add.w	r3, r7, #20
 8000a36:	4619      	mov	r1, r3
 8000a38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a3c:	f002 fdcc 	bl	80035d8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000a40:	4b1a      	ldr	r3, [pc, #104]	; (8000aac <HAL_ADC_MspInit+0xd8>)
 8000a42:	4a1b      	ldr	r2, [pc, #108]	; (8000ab0 <HAL_ADC_MspInit+0xdc>)
 8000a44:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a46:	4b19      	ldr	r3, [pc, #100]	; (8000aac <HAL_ADC_MspInit+0xd8>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a4c:	4b17      	ldr	r3, [pc, #92]	; (8000aac <HAL_ADC_MspInit+0xd8>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a52:	4b16      	ldr	r3, [pc, #88]	; (8000aac <HAL_ADC_MspInit+0xd8>)
 8000a54:	2280      	movs	r2, #128	; 0x80
 8000a56:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a58:	4b14      	ldr	r3, [pc, #80]	; (8000aac <HAL_ADC_MspInit+0xd8>)
 8000a5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a5e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a60:	4b12      	ldr	r3, [pc, #72]	; (8000aac <HAL_ADC_MspInit+0xd8>)
 8000a62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a66:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a68:	4b10      	ldr	r3, [pc, #64]	; (8000aac <HAL_ADC_MspInit+0xd8>)
 8000a6a:	2220      	movs	r2, #32
 8000a6c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a6e:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <HAL_ADC_MspInit+0xd8>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a74:	480d      	ldr	r0, [pc, #52]	; (8000aac <HAL_ADC_MspInit+0xd8>)
 8000a76:	f002 fbcc 	bl	8003212 <HAL_DMA_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8000a80:	f000 faf2 	bl	8001068 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a09      	ldr	r2, [pc, #36]	; (8000aac <HAL_ADC_MspInit+0xd8>)
 8000a88:	639a      	str	r2, [r3, #56]	; 0x38
 8000a8a:	4a08      	ldr	r2, [pc, #32]	; (8000aac <HAL_ADC_MspInit+0xd8>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000a90:	2200      	movs	r2, #0
 8000a92:	2100      	movs	r1, #0
 8000a94:	2012      	movs	r0, #18
 8000a96:	f002 fb86 	bl	80031a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000a9a:	2012      	movs	r0, #18
 8000a9c:	f002 fb9f 	bl	80031de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000aa0:	bf00      	nop
 8000aa2:	3728      	adds	r7, #40	; 0x28
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40021000 	.word	0x40021000
 8000aac:	200000e8 	.word	0x200000e8
 8000ab0:	40020008 	.word	0x40020008

08000ab4 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000ab8:	4b16      	ldr	r3, [pc, #88]	; (8000b14 <MX_CAN_Init+0x60>)
 8000aba:	4a17      	ldr	r2, [pc, #92]	; (8000b18 <MX_CAN_Init+0x64>)
 8000abc:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8000abe:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <MX_CAN_Init+0x60>)
 8000ac0:	2210      	movs	r2, #16
 8000ac2:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000ac4:	4b13      	ldr	r3, [pc, #76]	; (8000b14 <MX_CAN_Init+0x60>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000aca:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <MX_CAN_Init+0x60>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000ad0:	4b10      	ldr	r3, [pc, #64]	; (8000b14 <MX_CAN_Init+0x60>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000ad6:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <MX_CAN_Init+0x60>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000adc:	4b0d      	ldr	r3, [pc, #52]	; (8000b14 <MX_CAN_Init+0x60>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000ae2:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <MX_CAN_Init+0x60>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000ae8:	4b0a      	ldr	r3, [pc, #40]	; (8000b14 <MX_CAN_Init+0x60>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000aee:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <MX_CAN_Init+0x60>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000af4:	4b07      	ldr	r3, [pc, #28]	; (8000b14 <MX_CAN_Init+0x60>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000afa:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <MX_CAN_Init+0x60>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000b00:	4804      	ldr	r0, [pc, #16]	; (8000b14 <MX_CAN_Init+0x60>)
 8000b02:	f002 f979 	bl	8002df8 <HAL_CAN_Init>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8000b0c:	f000 faac 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000b10:	bf00      	nop
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	2000012c 	.word	0x2000012c
 8000b18:	40006400 	.word	0x40006400

08000b1c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b08a      	sub	sp, #40	; 0x28
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b24:	f107 0314 	add.w	r3, r7, #20
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a18      	ldr	r2, [pc, #96]	; (8000b9c <HAL_CAN_MspInit+0x80>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d129      	bne.n	8000b92 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000b3e:	4b18      	ldr	r3, [pc, #96]	; (8000ba0 <HAL_CAN_MspInit+0x84>)
 8000b40:	69db      	ldr	r3, [r3, #28]
 8000b42:	4a17      	ldr	r2, [pc, #92]	; (8000ba0 <HAL_CAN_MspInit+0x84>)
 8000b44:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b48:	61d3      	str	r3, [r2, #28]
 8000b4a:	4b15      	ldr	r3, [pc, #84]	; (8000ba0 <HAL_CAN_MspInit+0x84>)
 8000b4c:	69db      	ldr	r3, [r3, #28]
 8000b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b52:	613b      	str	r3, [r7, #16]
 8000b54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b56:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <HAL_CAN_MspInit+0x84>)
 8000b58:	695b      	ldr	r3, [r3, #20]
 8000b5a:	4a11      	ldr	r2, [pc, #68]	; (8000ba0 <HAL_CAN_MspInit+0x84>)
 8000b5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b60:	6153      	str	r3, [r2, #20]
 8000b62:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <HAL_CAN_MspInit+0x84>)
 8000b64:	695b      	ldr	r3, [r3, #20]
 8000b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000b6e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000b72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b74:	2302      	movs	r3, #2
 8000b76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b7c:	2303      	movs	r3, #3
 8000b7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000b80:	2309      	movs	r3, #9
 8000b82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	4619      	mov	r1, r3
 8000b8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b8e:	f002 fd23 	bl	80035d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 8000b92:	bf00      	nop
 8000b94:	3728      	adds	r7, #40	; 0x28
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40006400 	.word	0x40006400
 8000ba0:	40021000 	.word	0x40021000

08000ba4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000baa:	4b14      	ldr	r3, [pc, #80]	; (8000bfc <MX_DMA_Init+0x58>)
 8000bac:	695b      	ldr	r3, [r3, #20]
 8000bae:	4a13      	ldr	r2, [pc, #76]	; (8000bfc <MX_DMA_Init+0x58>)
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	6153      	str	r3, [r2, #20]
 8000bb6:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <MX_DMA_Init+0x58>)
 8000bb8:	695b      	ldr	r3, [r3, #20]
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	607b      	str	r3, [r7, #4]
 8000bc0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	200b      	movs	r0, #11
 8000bc8:	f002 faed 	bl	80031a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000bcc:	200b      	movs	r0, #11
 8000bce:	f002 fb06 	bl	80031de <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	200e      	movs	r0, #14
 8000bd8:	f002 fae5 	bl	80031a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000bdc:	200e      	movs	r0, #14
 8000bde:	f002 fafe 	bl	80031de <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000be2:	2200      	movs	r2, #0
 8000be4:	2100      	movs	r1, #0
 8000be6:	2011      	movs	r0, #17
 8000be8:	f002 fadd 	bl	80031a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000bec:	2011      	movs	r0, #17
 8000bee:	f002 faf6 	bl	80031de <HAL_NVIC_EnableIRQ>

}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40021000 	.word	0x40021000

08000c00 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b088      	sub	sp, #32
 8000c04:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c06:	f107 030c 	add.w	r3, r7, #12
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]
 8000c12:	60da      	str	r2, [r3, #12]
 8000c14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c16:	4b3f      	ldr	r3, [pc, #252]	; (8000d14 <MX_GPIO_Init+0x114>)
 8000c18:	695b      	ldr	r3, [r3, #20]
 8000c1a:	4a3e      	ldr	r2, [pc, #248]	; (8000d14 <MX_GPIO_Init+0x114>)
 8000c1c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c20:	6153      	str	r3, [r2, #20]
 8000c22:	4b3c      	ldr	r3, [pc, #240]	; (8000d14 <MX_GPIO_Init+0x114>)
 8000c24:	695b      	ldr	r3, [r3, #20]
 8000c26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c2a:	60bb      	str	r3, [r7, #8]
 8000c2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2e:	4b39      	ldr	r3, [pc, #228]	; (8000d14 <MX_GPIO_Init+0x114>)
 8000c30:	695b      	ldr	r3, [r3, #20]
 8000c32:	4a38      	ldr	r2, [pc, #224]	; (8000d14 <MX_GPIO_Init+0x114>)
 8000c34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c38:	6153      	str	r3, [r2, #20]
 8000c3a:	4b36      	ldr	r3, [pc, #216]	; (8000d14 <MX_GPIO_Init+0x114>)
 8000c3c:	695b      	ldr	r3, [r3, #20]
 8000c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c46:	4b33      	ldr	r3, [pc, #204]	; (8000d14 <MX_GPIO_Init+0x114>)
 8000c48:	695b      	ldr	r3, [r3, #20]
 8000c4a:	4a32      	ldr	r2, [pc, #200]	; (8000d14 <MX_GPIO_Init+0x114>)
 8000c4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c50:	6153      	str	r3, [r2, #20]
 8000c52:	4b30      	ldr	r3, [pc, #192]	; (8000d14 <MX_GPIO_Init+0x114>)
 8000c54:	695b      	ldr	r3, [r3, #20]
 8000c56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c5a:	603b      	str	r3, [r7, #0]
 8000c5c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HX_PD_SCK_GPIO_Port, HX_PD_SCK_Pin, GPIO_PIN_RESET);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2101      	movs	r1, #1
 8000c62:	482d      	ldr	r0, [pc, #180]	; (8000d18 <MX_GPIO_Init+0x118>)
 8000c64:	f002 fe2a 	bl	80038bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CMES_ENA_Pin|M2_INB_Pin|M1_INB_Pin|M1_INA_Pin
 8000c68:	2200      	movs	r2, #0
 8000c6a:	f240 7114 	movw	r1, #1812	; 0x714
 8000c6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c72:	f002 fe23 	bl	80038bc <HAL_GPIO_WritePin>
                          |M1_ENA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M2_ENA_Pin|M2_INA_Pin, GPIO_PIN_RESET);
 8000c76:	2200      	movs	r2, #0
 8000c78:	2103      	movs	r1, #3
 8000c7a:	4828      	ldr	r0, [pc, #160]	; (8000d1c <MX_GPIO_Init+0x11c>)
 8000c7c:	f002 fe1e 	bl	80038bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HX_PD_SCK_Pin;
 8000c80:	2301      	movs	r3, #1
 8000c82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c84:	2301      	movs	r3, #1
 8000c86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HX_PD_SCK_GPIO_Port, &GPIO_InitStruct);
 8000c90:	f107 030c 	add.w	r3, r7, #12
 8000c94:	4619      	mov	r1, r3
 8000c96:	4820      	ldr	r0, [pc, #128]	; (8000d18 <MX_GPIO_Init+0x118>)
 8000c98:	f002 fc9e 	bl	80035d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HX_DOUT_Pin;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HX_DOUT_GPIO_Port, &GPIO_InitStruct);
 8000ca8:	f107 030c 	add.w	r3, r7, #12
 8000cac:	4619      	mov	r1, r3
 8000cae:	481a      	ldr	r0, [pc, #104]	; (8000d18 <MX_GPIO_Init+0x118>)
 8000cb0:	f002 fc92 	bl	80035d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = CMES_ENA_Pin|M2_INB_Pin|M1_INB_Pin|M1_INA_Pin
 8000cb4:	f240 7314 	movw	r3, #1812	; 0x714
 8000cb8:	60fb      	str	r3, [r7, #12]
                          |M1_ENA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc6:	f107 030c 	add.w	r3, r7, #12
 8000cca:	4619      	mov	r1, r3
 8000ccc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cd0:	f002 fc82 	bl	80035d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_SW_Pin;
 8000cd4:	2320      	movs	r3, #32
 8000cd6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ENC_SW_GPIO_Port, &GPIO_InitStruct);
 8000ce0:	f107 030c 	add.w	r3, r7, #12
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cea:	f002 fc75 	bl	80035d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = M2_ENA_Pin|M2_INA_Pin;
 8000cee:	2303      	movs	r3, #3
 8000cf0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cfe:	f107 030c 	add.w	r3, r7, #12
 8000d02:	4619      	mov	r1, r3
 8000d04:	4805      	ldr	r0, [pc, #20]	; (8000d1c <MX_GPIO_Init+0x11c>)
 8000d06:	f002 fc67 	bl	80035d8 <HAL_GPIO_Init>

}
 8000d0a:	bf00      	nop
 8000d0c:	3720      	adds	r7, #32
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40021000 	.word	0x40021000
 8000d18:	48001400 	.word	0x48001400
 8000d1c:	48000400 	.word	0x48000400

08000d20 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d24:	4b1b      	ldr	r3, [pc, #108]	; (8000d94 <MX_I2C1_Init+0x74>)
 8000d26:	4a1c      	ldr	r2, [pc, #112]	; (8000d98 <MX_I2C1_Init+0x78>)
 8000d28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8000d2a:	4b1a      	ldr	r3, [pc, #104]	; (8000d94 <MX_I2C1_Init+0x74>)
 8000d2c:	f240 220b 	movw	r2, #523	; 0x20b
 8000d30:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d32:	4b18      	ldr	r3, [pc, #96]	; (8000d94 <MX_I2C1_Init+0x74>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d38:	4b16      	ldr	r3, [pc, #88]	; (8000d94 <MX_I2C1_Init+0x74>)
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d3e:	4b15      	ldr	r3, [pc, #84]	; (8000d94 <MX_I2C1_Init+0x74>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d44:	4b13      	ldr	r3, [pc, #76]	; (8000d94 <MX_I2C1_Init+0x74>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d4a:	4b12      	ldr	r3, [pc, #72]	; (8000d94 <MX_I2C1_Init+0x74>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d50:	4b10      	ldr	r3, [pc, #64]	; (8000d94 <MX_I2C1_Init+0x74>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d56:	4b0f      	ldr	r3, [pc, #60]	; (8000d94 <MX_I2C1_Init+0x74>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d5c:	480d      	ldr	r0, [pc, #52]	; (8000d94 <MX_I2C1_Init+0x74>)
 8000d5e:	f002 fdc5 	bl	80038ec <HAL_I2C_Init>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d68:	f000 f97e 	bl	8001068 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4809      	ldr	r0, [pc, #36]	; (8000d94 <MX_I2C1_Init+0x74>)
 8000d70:	f003 fbe3 	bl	800453a <HAL_I2CEx_ConfigAnalogFilter>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000d7a:	f000 f975 	bl	8001068 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d7e:	2100      	movs	r1, #0
 8000d80:	4804      	ldr	r0, [pc, #16]	; (8000d94 <MX_I2C1_Init+0x74>)
 8000d82:	f003 fc25 	bl	80045d0 <HAL_I2CEx_ConfigDigitalFilter>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000d8c:	f000 f96c 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d90:	bf00      	nop
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20000198 	.word	0x20000198
 8000d98:	40005400 	.word	0x40005400

08000d9c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08a      	sub	sp, #40	; 0x28
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da4:	f107 0314 	add.w	r3, r7, #20
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
 8000db2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a35      	ldr	r2, [pc, #212]	; (8000e90 <HAL_I2C_MspInit+0xf4>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d164      	bne.n	8000e88 <HAL_I2C_MspInit+0xec>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dbe:	4b35      	ldr	r3, [pc, #212]	; (8000e94 <HAL_I2C_MspInit+0xf8>)
 8000dc0:	695b      	ldr	r3, [r3, #20]
 8000dc2:	4a34      	ldr	r2, [pc, #208]	; (8000e94 <HAL_I2C_MspInit+0xf8>)
 8000dc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dc8:	6153      	str	r3, [r2, #20]
 8000dca:	4b32      	ldr	r3, [pc, #200]	; (8000e94 <HAL_I2C_MspInit+0xf8>)
 8000dcc:	695b      	ldr	r3, [r3, #20]
 8000dce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dd2:	613b      	str	r3, [r7, #16]
 8000dd4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 8000dd6:	23c0      	movs	r3, #192	; 0xc0
 8000dd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dda:	2312      	movs	r3, #18
 8000ddc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dde:	2301      	movs	r3, #1
 8000de0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000de2:	2303      	movs	r3, #3
 8000de4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000de6:	2304      	movs	r3, #4
 8000de8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dea:	f107 0314 	add.w	r3, r7, #20
 8000dee:	4619      	mov	r1, r3
 8000df0:	4829      	ldr	r0, [pc, #164]	; (8000e98 <HAL_I2C_MspInit+0xfc>)
 8000df2:	f002 fbf1 	bl	80035d8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000df6:	4b27      	ldr	r3, [pc, #156]	; (8000e94 <HAL_I2C_MspInit+0xf8>)
 8000df8:	69db      	ldr	r3, [r3, #28]
 8000dfa:	4a26      	ldr	r2, [pc, #152]	; (8000e94 <HAL_I2C_MspInit+0xf8>)
 8000dfc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e00:	61d3      	str	r3, [r2, #28]
 8000e02:	4b24      	ldr	r3, [pc, #144]	; (8000e94 <HAL_I2C_MspInit+0xf8>)
 8000e04:	69db      	ldr	r3, [r3, #28]
 8000e06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel4;
 8000e0e:	4b23      	ldr	r3, [pc, #140]	; (8000e9c <HAL_I2C_MspInit+0x100>)
 8000e10:	4a23      	ldr	r2, [pc, #140]	; (8000ea0 <HAL_I2C_MspInit+0x104>)
 8000e12:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e14:	4b21      	ldr	r3, [pc, #132]	; (8000e9c <HAL_I2C_MspInit+0x100>)
 8000e16:	2210      	movs	r2, #16
 8000e18:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e1a:	4b20      	ldr	r3, [pc, #128]	; (8000e9c <HAL_I2C_MspInit+0x100>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e20:	4b1e      	ldr	r3, [pc, #120]	; (8000e9c <HAL_I2C_MspInit+0x100>)
 8000e22:	2280      	movs	r2, #128	; 0x80
 8000e24:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e26:	4b1d      	ldr	r3, [pc, #116]	; (8000e9c <HAL_I2C_MspInit+0x100>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e2c:	4b1b      	ldr	r3, [pc, #108]	; (8000e9c <HAL_I2C_MspInit+0x100>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000e32:	4b1a      	ldr	r3, [pc, #104]	; (8000e9c <HAL_I2C_MspInit+0x100>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000e38:	4b18      	ldr	r3, [pc, #96]	; (8000e9c <HAL_I2C_MspInit+0x100>)
 8000e3a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e3e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000e40:	4816      	ldr	r0, [pc, #88]	; (8000e9c <HAL_I2C_MspInit+0x100>)
 8000e42:	f002 f9e6 	bl	8003212 <HAL_DMA_Init>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <HAL_I2C_MspInit+0xb4>
    {
      Error_Handler();
 8000e4c:	f000 f90c 	bl	8001068 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_I2C1_TX_DMA1_CH4);
 8000e50:	4b14      	ldr	r3, [pc, #80]	; (8000ea4 <HAL_I2C_MspInit+0x108>)
 8000e52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e54:	4a13      	ldr	r2, [pc, #76]	; (8000ea4 <HAL_I2C_MspInit+0x108>)
 8000e56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e5a:	6513      	str	r3, [r2, #80]	; 0x50

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4a0f      	ldr	r2, [pc, #60]	; (8000e9c <HAL_I2C_MspInit+0x100>)
 8000e60:	639a      	str	r2, [r3, #56]	; 0x38
 8000e62:	4a0e      	ldr	r2, [pc, #56]	; (8000e9c <HAL_I2C_MspInit+0x100>)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	201f      	movs	r0, #31
 8000e6e:	f002 f99a 	bl	80031a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000e72:	201f      	movs	r0, #31
 8000e74:	f002 f9b3 	bl	80031de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	2020      	movs	r0, #32
 8000e7e:	f002 f992 	bl	80031a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000e82:	2020      	movs	r0, #32
 8000e84:	f002 f9ab 	bl	80031de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000e88:	bf00      	nop
 8000e8a:	3728      	adds	r7, #40	; 0x28
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40005400 	.word	0x40005400
 8000e94:	40021000 	.word	0x40021000
 8000e98:	48000400 	.word	0x48000400
 8000e9c:	20000154 	.word	0x20000154
 8000ea0:	40020044 	.word	0x40020044
 8000ea4:	40010000 	.word	0x40010000

08000ea8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eac:	f000 fd08 	bl	80018c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb0:	f000 f852 	bl	8000f58 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_Delay(500);
 8000eb4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000eb8:	f000 fd68 	bl	800198c <HAL_Delay>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ebc:	f7ff fea0 	bl	8000c00 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ec0:	f7ff fe70 	bl	8000ba4 <MX_DMA_Init>
  MX_I2C1_Init();
 8000ec4:	f7ff ff2c 	bl	8000d20 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000ec8:	f000 fa34 	bl	8001334 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000ecc:	f7ff fd04 	bl	80008d8 <MX_ADC1_Init>
  MX_CAN_Init();
 8000ed0:	f7ff fdf0 	bl	8000ab4 <MX_CAN_Init>
  MX_USART2_UART_Init();
 8000ed4:	f000 fc56 	bl	8001784 <MX_USART2_UART_Init>
  MX_TIM17_Init();
 8000ed8:	f000 fab8 	bl	800144c <MX_TIM17_Init>
  MX_TIM2_Init();
 8000edc:	f000 f9b4 	bl	8001248 <MX_TIM2_Init>
  MX_TIM6_Init();
 8000ee0:	f000 fa7e 	bl	80013e0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  Motors_Init();
 8000ee4:	f7ff fa5c 	bl	80003a0 <Motors_Init>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000ee8:	213c      	movs	r1, #60	; 0x3c
 8000eea:	4815      	ldr	r0, [pc, #84]	; (8000f40 <main+0x98>)
 8000eec:	f005 f8c8 	bl	8006080 <HAL_TIM_Encoder_Start>


  //Motor_test(&hVNH1);
  HAL_ADCEx_Calibration_Start(&hadc1,ADC_SINGLE_ENDED);
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	4814      	ldr	r0, [pc, #80]	; (8000f44 <main+0x9c>)
 8000ef4:	f001 fa2e 	bl	8002354 <HAL_ADCEx_Calibration_Start>
	while (HAL_IS_BIT_SET(HAL_ADC_GetState(&hadc1), HAL_ADC_STATE_BUSY_INTERNAL)){
 8000ef8:	e002      	b.n	8000f00 <main+0x58>
		HAL_Delay(1);
 8000efa:	2001      	movs	r0, #1
 8000efc:	f000 fd46 	bl	800198c <HAL_Delay>
	while (HAL_IS_BIT_SET(HAL_ADC_GetState(&hadc1), HAL_ADC_STATE_BUSY_INTERNAL)){
 8000f00:	4810      	ldr	r0, [pc, #64]	; (8000f44 <main+0x9c>)
 8000f02:	f000 fd8f 	bl	8001a24 <HAL_ADC_GetState>
 8000f06:	4603      	mov	r3, r0
 8000f08:	f003 0302 	and.w	r3, r3, #2
 8000f0c:	2b02      	cmp	r3, #2
 8000f0e:	d0f4      	beq.n	8000efa <main+0x52>
	}
	HAL_ADC_Start_DMA(&hadc1,adc_dma_buffer,2);
 8000f10:	2202      	movs	r2, #2
 8000f12:	490d      	ldr	r1, [pc, #52]	; (8000f48 <main+0xa0>)
 8000f14:	480b      	ldr	r0, [pc, #44]	; (8000f44 <main+0x9c>)
 8000f16:	f000 ff23 	bl	8001d60 <HAL_ADC_Start_DMA>

	//Motor_test(&hVNH2);
	//Motor_test(&hVNH1);
	def_pid_1();
 8000f1a:	f000 f8ab 	bl	8001074 <def_pid_1>
	pid_Enable(&PIDh1);
 8000f1e:	480b      	ldr	r0, [pc, #44]	; (8000f4c <main+0xa4>)
 8000f20:	f7ff fa30 	bl	8000384 <pid_Enable>
	HAL_TIM_Base_Start_IT(&htim6);
 8000f24:	480a      	ldr	r0, [pc, #40]	; (8000f50 <main+0xa8>)
 8000f26:	f004 fe5b 	bl	8005be0 <HAL_TIM_Base_Start_IT>
	VNH_SetDir(&hVNH1,dir_HL);
 8000f2a:	2101      	movs	r1, #1
 8000f2c:	4809      	ldr	r0, [pc, #36]	; (8000f54 <main+0xac>)
 8000f2e:	f7ff fb8f 	bl	8000650 <VNH_SetDir>
	VNH_Enable(&hVNH1);
 8000f32:	4808      	ldr	r0, [pc, #32]	; (8000f54 <main+0xac>)
 8000f34:	f7ff fb15 	bl	8000562 <VNH_Enable>
	VNH_EnableCurSens(&hVNH1);
 8000f38:	4806      	ldr	r0, [pc, #24]	; (8000f54 <main+0xac>)
 8000f3a:	f7ff fcbd 	bl	80008b8 <VNH_EnableCurSens>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f3e:	e7fe      	b.n	8000f3e <main+0x96>
 8000f40:	20000278 	.word	0x20000278
 8000f44:	20000098 	.word	0x20000098
 8000f48:	20000090 	.word	0x20000090
 8000f4c:	200001e8 	.word	0x200001e8
 8000f50:	200002c4 	.word	0x200002c4
 8000f54:	2000005c 	.word	0x2000005c

08000f58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b096      	sub	sp, #88	; 0x58
 8000f5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f5e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f62:	2228      	movs	r2, #40	; 0x28
 8000f64:	2100      	movs	r1, #0
 8000f66:	4618      	mov	r0, r3
 8000f68:	f006 fc78 	bl	800785c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f6c:	f107 031c 	add.w	r3, r7, #28
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f7c:	1d3b      	adds	r3, r7, #4
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	605a      	str	r2, [r3, #4]
 8000f84:	609a      	str	r2, [r3, #8]
 8000f86:	60da      	str	r2, [r3, #12]
 8000f88:	611a      	str	r2, [r3, #16]
 8000f8a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f90:	2301      	movs	r3, #1
 8000f92:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f94:	2310      	movs	r3, #16
 8000f96:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000fa0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000fa4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000faa:	4618      	mov	r0, r3
 8000fac:	f003 fb5c 	bl	8004668 <HAL_RCC_OscConfig>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000fb6:	f000 f857 	bl	8001068 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fba:	230f      	movs	r3, #15
 8000fbc:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fce:	f107 031c 	add.w	r3, r7, #28
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f004 fa4f 	bl	8005478 <HAL_RCC_ClockConfig>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000fe0:	f000 f842 	bl	8001068 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC12;
 8000fe4:	23a0      	movs	r3, #160	; 0xa0
 8000fe6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV32;
 8000fe8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000fec:	617b      	str	r3, [r7, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ff2:	1d3b      	adds	r3, r7, #4
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f004 fc75 	bl	80058e4 <HAL_RCCEx_PeriphCLKConfig>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001000:	f000 f832 	bl	8001068 <Error_Handler>
  }
}
 8001004:	bf00      	nop
 8001006:	3758      	adds	r7, #88	; 0x58
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
	if (htim==&htim6){
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4a11      	ldr	r2, [pc, #68]	; (800105c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d11b      	bne.n	8001054 <HAL_TIM_PeriodElapsedCallback+0x48>

		*PIDh1.input=(float)*hVNH1.CS_sig;
 800101c:	4b10      	ldr	r3, [pc, #64]	; (8001060 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800101e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	4b10      	ldr	r3, [pc, #64]	; (8001064 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	ee07 2a90 	vmov	s15, r2
 800102a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800102e:	edc3 7a00 	vstr	s15, [r3]

		pid_compute(&PIDh1);
 8001032:	480c      	ldr	r0, [pc, #48]	; (8001064 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001034:	f7ff f8fe 	bl	8000234 <pid_compute>

		VNH_SetPWM(&hVNH1,(float)*PIDh1.output);
 8001038:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	edd3 7a00 	vldr	s15, [r3]
 8001040:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001044:	edc7 7a00 	vstr	s15, [r7]
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	b2db      	uxtb	r3, r3
 800104c:	4619      	mov	r1, r3
 800104e:	4804      	ldr	r0, [pc, #16]	; (8001060 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001050:	f7ff fb7a 	bl	8000748 <VNH_SetPWM>

	}
}
 8001054:	bf00      	nop
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	200002c4 	.word	0x200002c4
 8001060:	2000005c 	.word	0x2000005c
 8001064:	200001e8 	.word	0x200001e8

08001068 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800106c:	b672      	cpsid	i
}
 800106e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001070:	e7fe      	b.n	8001070 <Error_Handler+0x8>
	...

08001074 <def_pid_1>:
	float test_output;
	float test_setpoint;
	PID_handler PIDh1;


void def_pid_1(){
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
	Pid_Create(&PIDh1);
 8001078:	4814      	ldr	r0, [pc, #80]	; (80010cc <def_pid_1+0x58>)
 800107a:	f7ff f8a5 	bl	80001c8 <Pid_Create>
	PIDh1.Kp=0.05;
 800107e:	4b13      	ldr	r3, [pc, #76]	; (80010cc <def_pid_1+0x58>)
 8001080:	4a13      	ldr	r2, [pc, #76]	; (80010d0 <def_pid_1+0x5c>)
 8001082:	60da      	str	r2, [r3, #12]
	PIDh1.Ki=10;
 8001084:	4b11      	ldr	r3, [pc, #68]	; (80010cc <def_pid_1+0x58>)
 8001086:	4a13      	ldr	r2, [pc, #76]	; (80010d4 <def_pid_1+0x60>)
 8001088:	611a      	str	r2, [r3, #16]
	PIDh1.Kd=0.1;
 800108a:	4b10      	ldr	r3, [pc, #64]	; (80010cc <def_pid_1+0x58>)
 800108c:	4a12      	ldr	r2, [pc, #72]	; (80010d8 <def_pid_1+0x64>)
 800108e:	615a      	str	r2, [r3, #20]

	test_setpoint=800;
 8001090:	4b12      	ldr	r3, [pc, #72]	; (80010dc <def_pid_1+0x68>)
 8001092:	4a13      	ldr	r2, [pc, #76]	; (80010e0 <def_pid_1+0x6c>)
 8001094:	601a      	str	r2, [r3, #0]
	PIDh1.omin=0;
 8001096:	4b0d      	ldr	r3, [pc, #52]	; (80010cc <def_pid_1+0x58>)
 8001098:	f04f 0200 	mov.w	r2, #0
 800109c:	619a      	str	r2, [r3, #24]
	PIDh1.omax=100;
 800109e:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <def_pid_1+0x58>)
 80010a0:	4a10      	ldr	r2, [pc, #64]	; (80010e4 <def_pid_1+0x70>)
 80010a2:	61da      	str	r2, [r3, #28]
	PIDh1.I_max=50;
 80010a4:	4b09      	ldr	r3, [pc, #36]	; (80010cc <def_pid_1+0x58>)
 80010a6:	4a10      	ldr	r2, [pc, #64]	; (80010e8 <def_pid_1+0x74>)
 80010a8:	629a      	str	r2, [r3, #40]	; 0x28
	PIDh1.I_mini=-50;
 80010aa:	4b08      	ldr	r3, [pc, #32]	; (80010cc <def_pid_1+0x58>)
 80010ac:	4a0f      	ldr	r2, [pc, #60]	; (80010ec <def_pid_1+0x78>)
 80010ae:	62da      	str	r2, [r3, #44]	; 0x2c

	PIDh1.sampletime=(float)1/1000;
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <def_pid_1+0x58>)
 80010b2:	4a0f      	ldr	r2, [pc, #60]	; (80010f0 <def_pid_1+0x7c>)
 80010b4:	635a      	str	r2, [r3, #52]	; 0x34
	PIDh1.input=&test_input;
 80010b6:	4b05      	ldr	r3, [pc, #20]	; (80010cc <def_pid_1+0x58>)
 80010b8:	4a0e      	ldr	r2, [pc, #56]	; (80010f4 <def_pid_1+0x80>)
 80010ba:	601a      	str	r2, [r3, #0]
	PIDh1.output=&test_output;
 80010bc:	4b03      	ldr	r3, [pc, #12]	; (80010cc <def_pid_1+0x58>)
 80010be:	4a0e      	ldr	r2, [pc, #56]	; (80010f8 <def_pid_1+0x84>)
 80010c0:	605a      	str	r2, [r3, #4]
	PIDh1.setpoint=&test_setpoint;
 80010c2:	4b02      	ldr	r3, [pc, #8]	; (80010cc <def_pid_1+0x58>)
 80010c4:	4a05      	ldr	r2, [pc, #20]	; (80010dc <def_pid_1+0x68>)
 80010c6:	609a      	str	r2, [r3, #8]

}
 80010c8:	bf00      	nop
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	200001e8 	.word	0x200001e8
 80010d0:	3d4ccccd 	.word	0x3d4ccccd
 80010d4:	41200000 	.word	0x41200000
 80010d8:	3dcccccd 	.word	0x3dcccccd
 80010dc:	200001e4 	.word	0x200001e4
 80010e0:	44480000 	.word	0x44480000
 80010e4:	42c80000 	.word	0x42c80000
 80010e8:	42480000 	.word	0x42480000
 80010ec:	c2480000 	.word	0xc2480000
 80010f0:	3a83126f 	.word	0x3a83126f
 80010f4:	20000228 	.word	0x20000228
 80010f8:	20000224 	.word	0x20000224

080010fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001102:	4b0f      	ldr	r3, [pc, #60]	; (8001140 <HAL_MspInit+0x44>)
 8001104:	699b      	ldr	r3, [r3, #24]
 8001106:	4a0e      	ldr	r2, [pc, #56]	; (8001140 <HAL_MspInit+0x44>)
 8001108:	f043 0301 	orr.w	r3, r3, #1
 800110c:	6193      	str	r3, [r2, #24]
 800110e:	4b0c      	ldr	r3, [pc, #48]	; (8001140 <HAL_MspInit+0x44>)
 8001110:	699b      	ldr	r3, [r3, #24]
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	607b      	str	r3, [r7, #4]
 8001118:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800111a:	4b09      	ldr	r3, [pc, #36]	; (8001140 <HAL_MspInit+0x44>)
 800111c:	69db      	ldr	r3, [r3, #28]
 800111e:	4a08      	ldr	r2, [pc, #32]	; (8001140 <HAL_MspInit+0x44>)
 8001120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001124:	61d3      	str	r3, [r2, #28]
 8001126:	4b06      	ldr	r3, [pc, #24]	; (8001140 <HAL_MspInit+0x44>)
 8001128:	69db      	ldr	r3, [r3, #28]
 800112a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800112e:	603b      	str	r3, [r7, #0]
 8001130:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	40021000 	.word	0x40021000

08001144 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001148:	e7fe      	b.n	8001148 <NMI_Handler+0x4>

0800114a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800114a:	b480      	push	{r7}
 800114c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800114e:	e7fe      	b.n	800114e <HardFault_Handler+0x4>

08001150 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001154:	e7fe      	b.n	8001154 <MemManage_Handler+0x4>

08001156 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001156:	b480      	push	{r7}
 8001158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800115a:	e7fe      	b.n	800115a <BusFault_Handler+0x4>

0800115c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001160:	e7fe      	b.n	8001160 <UsageFault_Handler+0x4>

08001162 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001162:	b480      	push	{r7}
 8001164:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr

0800117e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800117e:	b480      	push	{r7}
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001190:	f000 fbdc 	bl	800194c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001194:	bf00      	nop
 8001196:	bd80      	pop	{r7, pc}

08001198 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800119c:	4802      	ldr	r0, [pc, #8]	; (80011a8 <DMA1_Channel1_IRQHandler+0x10>)
 800119e:	f002 f91c 	bl	80033da <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	200000e8 	.word	0x200000e8

080011ac <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80011b0:	4802      	ldr	r0, [pc, #8]	; (80011bc <DMA1_Channel4_IRQHandler+0x10>)
 80011b2:	f002 f912 	bl	80033da <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000154 	.word	0x20000154

080011c0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim17_ch1_up);
 80011c4:	4802      	ldr	r0, [pc, #8]	; (80011d0 <DMA1_Channel7_IRQHandler+0x10>)
 80011c6:	f002 f908 	bl	80033da <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	2000035c 	.word	0x2000035c

080011d4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80011d8:	4802      	ldr	r0, [pc, #8]	; (80011e4 <ADC1_2_IRQHandler+0x10>)
 80011da:	f000 fe9b 	bl	8001f14 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000098 	.word	0x20000098

080011e8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXT line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80011ec:	4802      	ldr	r0, [pc, #8]	; (80011f8 <I2C1_EV_IRQHandler+0x10>)
 80011ee:	f002 fc0c 	bl	8003a0a <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20000198 	.word	0x20000198

080011fc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001200:	4802      	ldr	r0, [pc, #8]	; (800120c <I2C1_ER_IRQHandler+0x10>)
 8001202:	f002 fc1c 	bl	8003a3e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20000198 	.word	0x20000198

08001210 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001214:	4802      	ldr	r0, [pc, #8]	; (8001220 <TIM6_DAC1_IRQHandler+0x10>)
 8001216:	f004 ffc1 	bl	800619c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	200002c4 	.word	0x200002c4

08001224 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001228:	4b06      	ldr	r3, [pc, #24]	; (8001244 <SystemInit+0x20>)
 800122a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800122e:	4a05      	ldr	r2, [pc, #20]	; (8001244 <SystemInit+0x20>)
 8001230:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001234:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <MX_TIM2_Init>:
TIM_HandleTypeDef htim17;
DMA_HandleTypeDef hdma_tim17_ch1_up;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b08e      	sub	sp, #56	; 0x38
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800124e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	609a      	str	r2, [r3, #8]
 800125a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800125c:	f107 031c 	add.w	r3, r7, #28
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001268:	463b      	mov	r3, r7
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	60da      	str	r2, [r3, #12]
 8001274:	611a      	str	r2, [r3, #16]
 8001276:	615a      	str	r2, [r3, #20]
 8001278:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800127a:	4b2d      	ldr	r3, [pc, #180]	; (8001330 <MX_TIM2_Init+0xe8>)
 800127c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001280:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001282:	4b2b      	ldr	r3, [pc, #172]	; (8001330 <MX_TIM2_Init+0xe8>)
 8001284:	2200      	movs	r2, #0
 8001286:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001288:	4b29      	ldr	r3, [pc, #164]	; (8001330 <MX_TIM2_Init+0xe8>)
 800128a:	2200      	movs	r2, #0
 800128c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xff;
 800128e:	4b28      	ldr	r3, [pc, #160]	; (8001330 <MX_TIM2_Init+0xe8>)
 8001290:	22ff      	movs	r2, #255	; 0xff
 8001292:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001294:	4b26      	ldr	r3, [pc, #152]	; (8001330 <MX_TIM2_Init+0xe8>)
 8001296:	2200      	movs	r2, #0
 8001298:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800129a:	4b25      	ldr	r3, [pc, #148]	; (8001330 <MX_TIM2_Init+0xe8>)
 800129c:	2200      	movs	r2, #0
 800129e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012a0:	4823      	ldr	r0, [pc, #140]	; (8001330 <MX_TIM2_Init+0xe8>)
 80012a2:	f004 fc45 	bl	8005b30 <HAL_TIM_Base_Init>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80012ac:	f7ff fedc 	bl	8001068 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012b4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012ba:	4619      	mov	r1, r3
 80012bc:	481c      	ldr	r0, [pc, #112]	; (8001330 <MX_TIM2_Init+0xe8>)
 80012be:	f005 f9a1 	bl	8006604 <HAL_TIM_ConfigClockSource>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80012c8:	f7ff fece 	bl	8001068 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80012cc:	4818      	ldr	r0, [pc, #96]	; (8001330 <MX_TIM2_Init+0xe8>)
 80012ce:	f004 fce3 	bl	8005c98 <HAL_TIM_PWM_Init>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80012d8:	f7ff fec6 	bl	8001068 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012dc:	2300      	movs	r3, #0
 80012de:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e0:	2300      	movs	r3, #0
 80012e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012e4:	f107 031c 	add.w	r3, r7, #28
 80012e8:	4619      	mov	r1, r3
 80012ea:	4811      	ldr	r0, [pc, #68]	; (8001330 <MX_TIM2_Init+0xe8>)
 80012ec:	f005 fe5a 	bl	8006fa4 <HAL_TIMEx_MasterConfigSynchronization>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80012f6:	f7ff feb7 	bl	8001068 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012fa:	2360      	movs	r3, #96	; 0x60
 80012fc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 32767;
 80012fe:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001302:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001304:	2300      	movs	r3, #0
 8001306:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001308:	2300      	movs	r3, #0
 800130a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800130c:	463b      	mov	r3, r7
 800130e:	220c      	movs	r2, #12
 8001310:	4619      	mov	r1, r3
 8001312:	4807      	ldr	r0, [pc, #28]	; (8001330 <MX_TIM2_Init+0xe8>)
 8001314:	f005 f862 	bl	80063dc <HAL_TIM_PWM_ConfigChannel>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800131e:	f7ff fea3 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001322:	4803      	ldr	r0, [pc, #12]	; (8001330 <MX_TIM2_Init+0xe8>)
 8001324:	f000 f9d4 	bl	80016d0 <HAL_TIM_MspPostInit>

}
 8001328:	bf00      	nop
 800132a:	3738      	adds	r7, #56	; 0x38
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20000310 	.word	0x20000310

08001334 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08c      	sub	sp, #48	; 0x30
 8001338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800133a:	f107 030c 	add.w	r3, r7, #12
 800133e:	2224      	movs	r2, #36	; 0x24
 8001340:	2100      	movs	r1, #0
 8001342:	4618      	mov	r0, r3
 8001344:	f006 fa8a 	bl	800785c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001348:	463b      	mov	r3, r7
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001352:	4b21      	ldr	r3, [pc, #132]	; (80013d8 <MX_TIM3_Init+0xa4>)
 8001354:	4a21      	ldr	r2, [pc, #132]	; (80013dc <MX_TIM3_Init+0xa8>)
 8001356:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4;
 8001358:	4b1f      	ldr	r3, [pc, #124]	; (80013d8 <MX_TIM3_Init+0xa4>)
 800135a:	2204      	movs	r2, #4
 800135c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800135e:	4b1e      	ldr	r3, [pc, #120]	; (80013d8 <MX_TIM3_Init+0xa4>)
 8001360:	2200      	movs	r2, #0
 8001362:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001364:	4b1c      	ldr	r3, [pc, #112]	; (80013d8 <MX_TIM3_Init+0xa4>)
 8001366:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800136a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800136c:	4b1a      	ldr	r3, [pc, #104]	; (80013d8 <MX_TIM3_Init+0xa4>)
 800136e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001372:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001374:	4b18      	ldr	r3, [pc, #96]	; (80013d8 <MX_TIM3_Init+0xa4>)
 8001376:	2200      	movs	r2, #0
 8001378:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800137a:	2303      	movs	r3, #3
 800137c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800137e:	2300      	movs	r3, #0
 8001380:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001382:	2301      	movs	r3, #1
 8001384:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV4;
 8001386:	2308      	movs	r3, #8
 8001388:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800138a:	230f      	movs	r3, #15
 800138c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800138e:	2300      	movs	r3, #0
 8001390:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001392:	2301      	movs	r3, #1
 8001394:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
 8001396:	2308      	movs	r3, #8
 8001398:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 800139a:	230f      	movs	r3, #15
 800139c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800139e:	f107 030c 	add.w	r3, r7, #12
 80013a2:	4619      	mov	r1, r3
 80013a4:	480c      	ldr	r0, [pc, #48]	; (80013d8 <MX_TIM3_Init+0xa4>)
 80013a6:	f004 fdc5 	bl	8005f34 <HAL_TIM_Encoder_Init>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80013b0:	f7ff fe5a 	bl	8001068 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013b4:	2300      	movs	r3, #0
 80013b6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013bc:	463b      	mov	r3, r7
 80013be:	4619      	mov	r1, r3
 80013c0:	4805      	ldr	r0, [pc, #20]	; (80013d8 <MX_TIM3_Init+0xa4>)
 80013c2:	f005 fdef 	bl	8006fa4 <HAL_TIMEx_MasterConfigSynchronization>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80013cc:	f7ff fe4c 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013d0:	bf00      	nop
 80013d2:	3730      	adds	r7, #48	; 0x30
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20000278 	.word	0x20000278
 80013dc:	40000400 	.word	0x40000400

080013e0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e6:	1d3b      	adds	r3, r7, #4
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80013f0:	4b14      	ldr	r3, [pc, #80]	; (8001444 <MX_TIM6_Init+0x64>)
 80013f2:	4a15      	ldr	r2, [pc, #84]	; (8001448 <MX_TIM6_Init+0x68>)
 80013f4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80013f6:	4b13      	ldr	r3, [pc, #76]	; (8001444 <MX_TIM6_Init+0x64>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013fc:	4b11      	ldr	r3, [pc, #68]	; (8001444 <MX_TIM6_Init+0x64>)
 80013fe:	2200      	movs	r2, #0
 8001400:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 8000;
 8001402:	4b10      	ldr	r3, [pc, #64]	; (8001444 <MX_TIM6_Init+0x64>)
 8001404:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001408:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800140a:	4b0e      	ldr	r3, [pc, #56]	; (8001444 <MX_TIM6_Init+0x64>)
 800140c:	2200      	movs	r2, #0
 800140e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001410:	480c      	ldr	r0, [pc, #48]	; (8001444 <MX_TIM6_Init+0x64>)
 8001412:	f004 fb8d 	bl	8005b30 <HAL_TIM_Base_Init>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800141c:	f7ff fe24 	bl	8001068 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001420:	2300      	movs	r3, #0
 8001422:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001424:	2300      	movs	r3, #0
 8001426:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001428:	1d3b      	adds	r3, r7, #4
 800142a:	4619      	mov	r1, r3
 800142c:	4805      	ldr	r0, [pc, #20]	; (8001444 <MX_TIM6_Init+0x64>)
 800142e:	f005 fdb9 	bl	8006fa4 <HAL_TIMEx_MasterConfigSynchronization>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001438:	f7ff fe16 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800143c:	bf00      	nop
 800143e:	3710      	adds	r7, #16
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	200002c4 	.word	0x200002c4
 8001448:	40001000 	.word	0x40001000

0800144c <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b092      	sub	sp, #72	; 0x48
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001452:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	609a      	str	r2, [r3, #8]
 800145e:	60da      	str	r2, [r3, #12]
 8001460:	611a      	str	r2, [r3, #16]
 8001462:	615a      	str	r2, [r3, #20]
 8001464:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001466:	463b      	mov	r3, r7
 8001468:	222c      	movs	r2, #44	; 0x2c
 800146a:	2100      	movs	r1, #0
 800146c:	4618      	mov	r0, r3
 800146e:	f006 f9f5 	bl	800785c <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001472:	4b31      	ldr	r3, [pc, #196]	; (8001538 <MX_TIM17_Init+0xec>)
 8001474:	4a31      	ldr	r2, [pc, #196]	; (800153c <MX_TIM17_Init+0xf0>)
 8001476:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8001478:	4b2f      	ldr	r3, [pc, #188]	; (8001538 <MX_TIM17_Init+0xec>)
 800147a:	2200      	movs	r2, #0
 800147c:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800147e:	4b2e      	ldr	r3, [pc, #184]	; (8001538 <MX_TIM17_Init+0xec>)
 8001480:	2200      	movs	r2, #0
 8001482:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 255;
 8001484:	4b2c      	ldr	r3, [pc, #176]	; (8001538 <MX_TIM17_Init+0xec>)
 8001486:	22ff      	movs	r2, #255	; 0xff
 8001488:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800148a:	4b2b      	ldr	r3, [pc, #172]	; (8001538 <MX_TIM17_Init+0xec>)
 800148c:	2200      	movs	r2, #0
 800148e:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001490:	4b29      	ldr	r3, [pc, #164]	; (8001538 <MX_TIM17_Init+0xec>)
 8001492:	2200      	movs	r2, #0
 8001494:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001496:	4b28      	ldr	r3, [pc, #160]	; (8001538 <MX_TIM17_Init+0xec>)
 8001498:	2200      	movs	r2, #0
 800149a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800149c:	4826      	ldr	r0, [pc, #152]	; (8001538 <MX_TIM17_Init+0xec>)
 800149e:	f004 fb47 	bl	8005b30 <HAL_TIM_Base_Init>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 80014a8:	f7ff fdde 	bl	8001068 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80014ac:	4822      	ldr	r0, [pc, #136]	; (8001538 <MX_TIM17_Init+0xec>)
 80014ae:	f004 fbf3 	bl	8005c98 <HAL_TIM_PWM_Init>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_TIM17_Init+0x70>
  {
    Error_Handler();
 80014b8:	f7ff fdd6 	bl	8001068 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014bc:	2360      	movs	r3, #96	; 0x60
 80014be:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 32767;
 80014c0:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80014c4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014c6:	2300      	movs	r3, #0
 80014c8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014ca:	2300      	movs	r3, #0
 80014cc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014ce:	2300      	movs	r3, #0
 80014d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 80014d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014d6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014d8:	2300      	movs	r3, #0
 80014da:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014e0:	2200      	movs	r2, #0
 80014e2:	4619      	mov	r1, r3
 80014e4:	4814      	ldr	r0, [pc, #80]	; (8001538 <MX_TIM17_Init+0xec>)
 80014e6:	f004 ff79 	bl	80063dc <HAL_TIM_PWM_ConfigChannel>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_TIM17_Init+0xa8>
  {
    Error_Handler();
 80014f0:	f7ff fdba 	bl	8001068 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014f4:	2300      	movs	r3, #0
 80014f6:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014f8:	2300      	movs	r3, #0
 80014fa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014fc:	2300      	movs	r3, #0
 80014fe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001500:	2300      	movs	r3, #0
 8001502:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001504:	2300      	movs	r3, #0
 8001506:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001508:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800150c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800150e:	2300      	movs	r3, #0
 8001510:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001512:	2300      	movs	r3, #0
 8001514:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001516:	463b      	mov	r3, r7
 8001518:	4619      	mov	r1, r3
 800151a:	4807      	ldr	r0, [pc, #28]	; (8001538 <MX_TIM17_Init+0xec>)
 800151c:	f005 fdb0 	bl	8007080 <HAL_TIMEx_ConfigBreakDeadTime>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_TIM17_Init+0xde>
  {
    Error_Handler();
 8001526:	f7ff fd9f 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 800152a:	4803      	ldr	r0, [pc, #12]	; (8001538 <MX_TIM17_Init+0xec>)
 800152c:	f000 f8d0 	bl	80016d0 <HAL_TIM_MspPostInit>

}
 8001530:	bf00      	nop
 8001532:	3748      	adds	r7, #72	; 0x48
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	2000022c 	.word	0x2000022c
 800153c:	40014800 	.word	0x40014800

08001540 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001550:	d10c      	bne.n	800156c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001552:	4b38      	ldr	r3, [pc, #224]	; (8001634 <HAL_TIM_Base_MspInit+0xf4>)
 8001554:	69db      	ldr	r3, [r3, #28]
 8001556:	4a37      	ldr	r2, [pc, #220]	; (8001634 <HAL_TIM_Base_MspInit+0xf4>)
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	61d3      	str	r3, [r2, #28]
 800155e:	4b35      	ldr	r3, [pc, #212]	; (8001634 <HAL_TIM_Base_MspInit+0xf4>)
 8001560:	69db      	ldr	r3, [r3, #28]
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	617b      	str	r3, [r7, #20]
 8001568:	697b      	ldr	r3, [r7, #20]

  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 800156a:	e05e      	b.n	800162a <HAL_TIM_Base_MspInit+0xea>
  else if(tim_baseHandle->Instance==TIM6)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a31      	ldr	r2, [pc, #196]	; (8001638 <HAL_TIM_Base_MspInit+0xf8>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d114      	bne.n	80015a0 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001576:	4b2f      	ldr	r3, [pc, #188]	; (8001634 <HAL_TIM_Base_MspInit+0xf4>)
 8001578:	69db      	ldr	r3, [r3, #28]
 800157a:	4a2e      	ldr	r2, [pc, #184]	; (8001634 <HAL_TIM_Base_MspInit+0xf4>)
 800157c:	f043 0310 	orr.w	r3, r3, #16
 8001580:	61d3      	str	r3, [r2, #28]
 8001582:	4b2c      	ldr	r3, [pc, #176]	; (8001634 <HAL_TIM_Base_MspInit+0xf4>)
 8001584:	69db      	ldr	r3, [r3, #28]
 8001586:	f003 0310 	and.w	r3, r3, #16
 800158a:	613b      	str	r3, [r7, #16]
 800158c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 800158e:	2200      	movs	r2, #0
 8001590:	2100      	movs	r1, #0
 8001592:	2036      	movs	r0, #54	; 0x36
 8001594:	f001 fe07 	bl	80031a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8001598:	2036      	movs	r0, #54	; 0x36
 800159a:	f001 fe20 	bl	80031de <HAL_NVIC_EnableIRQ>
}
 800159e:	e044      	b.n	800162a <HAL_TIM_Base_MspInit+0xea>
  else if(tim_baseHandle->Instance==TIM17)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a25      	ldr	r2, [pc, #148]	; (800163c <HAL_TIM_Base_MspInit+0xfc>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d13f      	bne.n	800162a <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80015aa:	4b22      	ldr	r3, [pc, #136]	; (8001634 <HAL_TIM_Base_MspInit+0xf4>)
 80015ac:	699b      	ldr	r3, [r3, #24]
 80015ae:	4a21      	ldr	r2, [pc, #132]	; (8001634 <HAL_TIM_Base_MspInit+0xf4>)
 80015b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015b4:	6193      	str	r3, [r2, #24]
 80015b6:	4b1f      	ldr	r3, [pc, #124]	; (8001634 <HAL_TIM_Base_MspInit+0xf4>)
 80015b8:	699b      	ldr	r3, [r3, #24]
 80015ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]
    hdma_tim17_ch1_up.Instance = DMA1_Channel7;
 80015c2:	4b1f      	ldr	r3, [pc, #124]	; (8001640 <HAL_TIM_Base_MspInit+0x100>)
 80015c4:	4a1f      	ldr	r2, [pc, #124]	; (8001644 <HAL_TIM_Base_MspInit+0x104>)
 80015c6:	601a      	str	r2, [r3, #0]
    hdma_tim17_ch1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015c8:	4b1d      	ldr	r3, [pc, #116]	; (8001640 <HAL_TIM_Base_MspInit+0x100>)
 80015ca:	2210      	movs	r2, #16
 80015cc:	605a      	str	r2, [r3, #4]
    hdma_tim17_ch1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80015ce:	4b1c      	ldr	r3, [pc, #112]	; (8001640 <HAL_TIM_Base_MspInit+0x100>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	609a      	str	r2, [r3, #8]
    hdma_tim17_ch1_up.Init.MemInc = DMA_MINC_ENABLE;
 80015d4:	4b1a      	ldr	r3, [pc, #104]	; (8001640 <HAL_TIM_Base_MspInit+0x100>)
 80015d6:	2280      	movs	r2, #128	; 0x80
 80015d8:	60da      	str	r2, [r3, #12]
    hdma_tim17_ch1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015da:	4b19      	ldr	r3, [pc, #100]	; (8001640 <HAL_TIM_Base_MspInit+0x100>)
 80015dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015e0:	611a      	str	r2, [r3, #16]
    hdma_tim17_ch1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015e2:	4b17      	ldr	r3, [pc, #92]	; (8001640 <HAL_TIM_Base_MspInit+0x100>)
 80015e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015e8:	615a      	str	r2, [r3, #20]
    hdma_tim17_ch1_up.Init.Mode = DMA_NORMAL;
 80015ea:	4b15      	ldr	r3, [pc, #84]	; (8001640 <HAL_TIM_Base_MspInit+0x100>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	619a      	str	r2, [r3, #24]
    hdma_tim17_ch1_up.Init.Priority = DMA_PRIORITY_LOW;
 80015f0:	4b13      	ldr	r3, [pc, #76]	; (8001640 <HAL_TIM_Base_MspInit+0x100>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim17_ch1_up) != HAL_OK)
 80015f6:	4812      	ldr	r0, [pc, #72]	; (8001640 <HAL_TIM_Base_MspInit+0x100>)
 80015f8:	f001 fe0b 	bl	8003212 <HAL_DMA_Init>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <HAL_TIM_Base_MspInit+0xc6>
      Error_Handler();
 8001602:	f7ff fd31 	bl	8001068 <Error_Handler>
    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM17_DMA1_CH7);
 8001606:	4b10      	ldr	r3, [pc, #64]	; (8001648 <HAL_TIM_Base_MspInit+0x108>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a0f      	ldr	r2, [pc, #60]	; (8001648 <HAL_TIM_Base_MspInit+0x108>)
 800160c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001610:	6013      	str	r3, [r2, #0]
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim17_ch1_up);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a0a      	ldr	r2, [pc, #40]	; (8001640 <HAL_TIM_Base_MspInit+0x100>)
 8001616:	625a      	str	r2, [r3, #36]	; 0x24
 8001618:	4a09      	ldr	r2, [pc, #36]	; (8001640 <HAL_TIM_Base_MspInit+0x100>)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim17_ch1_up);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a07      	ldr	r2, [pc, #28]	; (8001640 <HAL_TIM_Base_MspInit+0x100>)
 8001622:	621a      	str	r2, [r3, #32]
 8001624:	4a06      	ldr	r2, [pc, #24]	; (8001640 <HAL_TIM_Base_MspInit+0x100>)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6253      	str	r3, [r2, #36]	; 0x24
}
 800162a:	bf00      	nop
 800162c:	3718      	adds	r7, #24
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40021000 	.word	0x40021000
 8001638:	40001000 	.word	0x40001000
 800163c:	40014800 	.word	0x40014800
 8001640:	2000035c 	.word	0x2000035c
 8001644:	40020080 	.word	0x40020080
 8001648:	40010000 	.word	0x40010000

0800164c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b08a      	sub	sp, #40	; 0x28
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001654:	f107 0314 	add.w	r3, r7, #20
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	60da      	str	r2, [r3, #12]
 8001662:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a17      	ldr	r2, [pc, #92]	; (80016c8 <HAL_TIM_Encoder_MspInit+0x7c>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d128      	bne.n	80016c0 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800166e:	4b17      	ldr	r3, [pc, #92]	; (80016cc <HAL_TIM_Encoder_MspInit+0x80>)
 8001670:	69db      	ldr	r3, [r3, #28]
 8001672:	4a16      	ldr	r2, [pc, #88]	; (80016cc <HAL_TIM_Encoder_MspInit+0x80>)
 8001674:	f043 0302 	orr.w	r3, r3, #2
 8001678:	61d3      	str	r3, [r2, #28]
 800167a:	4b14      	ldr	r3, [pc, #80]	; (80016cc <HAL_TIM_Encoder_MspInit+0x80>)
 800167c:	69db      	ldr	r3, [r3, #28]
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	613b      	str	r3, [r7, #16]
 8001684:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001686:	4b11      	ldr	r3, [pc, #68]	; (80016cc <HAL_TIM_Encoder_MspInit+0x80>)
 8001688:	695b      	ldr	r3, [r3, #20]
 800168a:	4a10      	ldr	r2, [pc, #64]	; (80016cc <HAL_TIM_Encoder_MspInit+0x80>)
 800168c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001690:	6153      	str	r3, [r2, #20]
 8001692:	4b0e      	ldr	r3, [pc, #56]	; (80016cc <HAL_TIM_Encoder_MspInit+0x80>)
 8001694:	695b      	ldr	r3, [r3, #20]
 8001696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_B_Pin|ENC_A_Pin;
 800169e:	23c0      	movs	r3, #192	; 0xc0
 80016a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a2:	2302      	movs	r3, #2
 80016a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016aa:	2300      	movs	r3, #0
 80016ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016ae:	2302      	movs	r3, #2
 80016b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b2:	f107 0314 	add.w	r3, r7, #20
 80016b6:	4619      	mov	r1, r3
 80016b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016bc:	f001 ff8c 	bl	80035d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80016c0:	bf00      	nop
 80016c2:	3728      	adds	r7, #40	; 0x28
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	40000400 	.word	0x40000400
 80016cc:	40021000 	.word	0x40021000

080016d0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b08a      	sub	sp, #40	; 0x28
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016f0:	d11d      	bne.n	800172e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f2:	4b21      	ldr	r3, [pc, #132]	; (8001778 <HAL_TIM_MspPostInit+0xa8>)
 80016f4:	695b      	ldr	r3, [r3, #20]
 80016f6:	4a20      	ldr	r2, [pc, #128]	; (8001778 <HAL_TIM_MspPostInit+0xa8>)
 80016f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016fc:	6153      	str	r3, [r2, #20]
 80016fe:	4b1e      	ldr	r3, [pc, #120]	; (8001778 <HAL_TIM_MspPostInit+0xa8>)
 8001700:	695b      	ldr	r3, [r3, #20]
 8001702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001706:	613b      	str	r3, [r7, #16]
 8001708:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = M2_PWM_Pin;
 800170a:	2308      	movs	r3, #8
 800170c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170e:	2302      	movs	r3, #2
 8001710:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001712:	2300      	movs	r3, #0
 8001714:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001716:	2300      	movs	r3, #0
 8001718:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800171a:	2301      	movs	r3, #1
 800171c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(M2_PWM_GPIO_Port, &GPIO_InitStruct);
 800171e:	f107 0314 	add.w	r3, r7, #20
 8001722:	4619      	mov	r1, r3
 8001724:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001728:	f001 ff56 	bl	80035d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 800172c:	e020      	b.n	8001770 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM17)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a12      	ldr	r2, [pc, #72]	; (800177c <HAL_TIM_MspPostInit+0xac>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d11b      	bne.n	8001770 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001738:	4b0f      	ldr	r3, [pc, #60]	; (8001778 <HAL_TIM_MspPostInit+0xa8>)
 800173a:	695b      	ldr	r3, [r3, #20]
 800173c:	4a0e      	ldr	r2, [pc, #56]	; (8001778 <HAL_TIM_MspPostInit+0xa8>)
 800173e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001742:	6153      	str	r3, [r2, #20]
 8001744:	4b0c      	ldr	r3, [pc, #48]	; (8001778 <HAL_TIM_MspPostInit+0xa8>)
 8001746:	695b      	ldr	r3, [r3, #20]
 8001748:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800174c:	60fb      	str	r3, [r7, #12]
 800174e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M1_PWM_Pin;
 8001750:	2320      	movs	r3, #32
 8001752:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001754:	2302      	movs	r3, #2
 8001756:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	2300      	movs	r3, #0
 800175a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175c:	2300      	movs	r3, #0
 800175e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 8001760:	230a      	movs	r3, #10
 8001762:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(M1_PWM_GPIO_Port, &GPIO_InitStruct);
 8001764:	f107 0314 	add.w	r3, r7, #20
 8001768:	4619      	mov	r1, r3
 800176a:	4805      	ldr	r0, [pc, #20]	; (8001780 <HAL_TIM_MspPostInit+0xb0>)
 800176c:	f001 ff34 	bl	80035d8 <HAL_GPIO_Init>
}
 8001770:	bf00      	nop
 8001772:	3728      	adds	r7, #40	; 0x28
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40021000 	.word	0x40021000
 800177c:	40014800 	.word	0x40014800
 8001780:	48000400 	.word	0x48000400

08001784 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001788:	4b14      	ldr	r3, [pc, #80]	; (80017dc <MX_USART2_UART_Init+0x58>)
 800178a:	4a15      	ldr	r2, [pc, #84]	; (80017e0 <MX_USART2_UART_Init+0x5c>)
 800178c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800178e:	4b13      	ldr	r3, [pc, #76]	; (80017dc <MX_USART2_UART_Init+0x58>)
 8001790:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001794:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001796:	4b11      	ldr	r3, [pc, #68]	; (80017dc <MX_USART2_UART_Init+0x58>)
 8001798:	2200      	movs	r2, #0
 800179a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800179c:	4b0f      	ldr	r3, [pc, #60]	; (80017dc <MX_USART2_UART_Init+0x58>)
 800179e:	2200      	movs	r2, #0
 80017a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017a2:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <MX_USART2_UART_Init+0x58>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017a8:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <MX_USART2_UART_Init+0x58>)
 80017aa:	220c      	movs	r2, #12
 80017ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ae:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <MX_USART2_UART_Init+0x58>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017b4:	4b09      	ldr	r3, [pc, #36]	; (80017dc <MX_USART2_UART_Init+0x58>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017ba:	4b08      	ldr	r3, [pc, #32]	; (80017dc <MX_USART2_UART_Init+0x58>)
 80017bc:	2200      	movs	r2, #0
 80017be:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017c0:	4b06      	ldr	r3, [pc, #24]	; (80017dc <MX_USART2_UART_Init+0x58>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017c6:	4805      	ldr	r0, [pc, #20]	; (80017dc <MX_USART2_UART_Init+0x58>)
 80017c8:	f005 fcf0 	bl	80071ac <HAL_UART_Init>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80017d2:	f7ff fc49 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	200003a0 	.word	0x200003a0
 80017e0:	40004400 	.word	0x40004400

080017e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b08a      	sub	sp, #40	; 0x28
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ec:	f107 0314 	add.w	r3, r7, #20
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a17      	ldr	r2, [pc, #92]	; (8001860 <HAL_UART_MspInit+0x7c>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d127      	bne.n	8001856 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001806:	4b17      	ldr	r3, [pc, #92]	; (8001864 <HAL_UART_MspInit+0x80>)
 8001808:	69db      	ldr	r3, [r3, #28]
 800180a:	4a16      	ldr	r2, [pc, #88]	; (8001864 <HAL_UART_MspInit+0x80>)
 800180c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001810:	61d3      	str	r3, [r2, #28]
 8001812:	4b14      	ldr	r3, [pc, #80]	; (8001864 <HAL_UART_MspInit+0x80>)
 8001814:	69db      	ldr	r3, [r3, #28]
 8001816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181a:	613b      	str	r3, [r7, #16]
 800181c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800181e:	4b11      	ldr	r3, [pc, #68]	; (8001864 <HAL_UART_MspInit+0x80>)
 8001820:	695b      	ldr	r3, [r3, #20]
 8001822:	4a10      	ldr	r2, [pc, #64]	; (8001864 <HAL_UART_MspInit+0x80>)
 8001824:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001828:	6153      	str	r3, [r2, #20]
 800182a:	4b0e      	ldr	r3, [pc, #56]	; (8001864 <HAL_UART_MspInit+0x80>)
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001836:	2318      	movs	r3, #24
 8001838:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183a:	2302      	movs	r3, #2
 800183c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183e:	2300      	movs	r3, #0
 8001840:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001842:	2303      	movs	r3, #3
 8001844:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001846:	2307      	movs	r3, #7
 8001848:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800184a:	f107 0314 	add.w	r3, r7, #20
 800184e:	4619      	mov	r1, r3
 8001850:	4805      	ldr	r0, [pc, #20]	; (8001868 <HAL_UART_MspInit+0x84>)
 8001852:	f001 fec1 	bl	80035d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001856:	bf00      	nop
 8001858:	3728      	adds	r7, #40	; 0x28
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40004400 	.word	0x40004400
 8001864:	40021000 	.word	0x40021000
 8001868:	48000400 	.word	0x48000400

0800186c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800186c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018a4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001870:	480d      	ldr	r0, [pc, #52]	; (80018a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001872:	490e      	ldr	r1, [pc, #56]	; (80018ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001874:	4a0e      	ldr	r2, [pc, #56]	; (80018b0 <LoopForever+0xe>)
  movs r3, #0
 8001876:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001878:	e002      	b.n	8001880 <LoopCopyDataInit>

0800187a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800187a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800187c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800187e:	3304      	adds	r3, #4

08001880 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001880:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001882:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001884:	d3f9      	bcc.n	800187a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001886:	4a0b      	ldr	r2, [pc, #44]	; (80018b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001888:	4c0b      	ldr	r4, [pc, #44]	; (80018b8 <LoopForever+0x16>)
  movs r3, #0
 800188a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800188c:	e001      	b.n	8001892 <LoopFillZerobss>

0800188e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800188e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001890:	3204      	adds	r2, #4

08001892 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001892:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001894:	d3fb      	bcc.n	800188e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001896:	f7ff fcc5 	bl	8001224 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800189a:	f005 ffbb 	bl	8007814 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800189e:	f7ff fb03 	bl	8000ea8 <main>

080018a2 <LoopForever>:

LoopForever:
    b LoopForever
 80018a2:	e7fe      	b.n	80018a2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80018a4:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80018a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018ac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80018b0:	080078c4 	.word	0x080078c4
  ldr r2, =_sbss
 80018b4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80018b8:	20000428 	.word	0x20000428

080018bc <CAN_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018bc:	e7fe      	b.n	80018bc <CAN_RX0_IRQHandler>
	...

080018c0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018c4:	4b08      	ldr	r3, [pc, #32]	; (80018e8 <HAL_Init+0x28>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a07      	ldr	r2, [pc, #28]	; (80018e8 <HAL_Init+0x28>)
 80018ca:	f043 0310 	orr.w	r3, r3, #16
 80018ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018d0:	2003      	movs	r0, #3
 80018d2:	f001 fc5d 	bl	8003190 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018d6:	2000      	movs	r0, #0
 80018d8:	f000 f808 	bl	80018ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018dc:	f7ff fc0e 	bl	80010fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40022000 	.word	0x40022000

080018ec <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018f4:	4b12      	ldr	r3, [pc, #72]	; (8001940 <HAL_InitTick+0x54>)
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	4b12      	ldr	r3, [pc, #72]	; (8001944 <HAL_InitTick+0x58>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	4619      	mov	r1, r3
 80018fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001902:	fbb3 f3f1 	udiv	r3, r3, r1
 8001906:	fbb2 f3f3 	udiv	r3, r2, r3
 800190a:	4618      	mov	r0, r3
 800190c:	f001 fc75 	bl	80031fa <HAL_SYSTICK_Config>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e00e      	b.n	8001938 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2b0f      	cmp	r3, #15
 800191e:	d80a      	bhi.n	8001936 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001920:	2200      	movs	r2, #0
 8001922:	6879      	ldr	r1, [r7, #4]
 8001924:	f04f 30ff 	mov.w	r0, #4294967295
 8001928:	f001 fc3d 	bl	80031a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800192c:	4a06      	ldr	r2, [pc, #24]	; (8001948 <HAL_InitTick+0x5c>)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001932:	2300      	movs	r3, #0
 8001934:	e000      	b.n	8001938 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
}
 8001938:	4618      	mov	r0, r3
 800193a:	3708      	adds	r7, #8
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	20000000 	.word	0x20000000
 8001944:	20000008 	.word	0x20000008
 8001948:	20000004 	.word	0x20000004

0800194c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001950:	4b06      	ldr	r3, [pc, #24]	; (800196c <HAL_IncTick+0x20>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	461a      	mov	r2, r3
 8001956:	4b06      	ldr	r3, [pc, #24]	; (8001970 <HAL_IncTick+0x24>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4413      	add	r3, r2
 800195c:	4a04      	ldr	r2, [pc, #16]	; (8001970 <HAL_IncTick+0x24>)
 800195e:	6013      	str	r3, [r2, #0]
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	20000008 	.word	0x20000008
 8001970:	20000424 	.word	0x20000424

08001974 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  return uwTick;  
 8001978:	4b03      	ldr	r3, [pc, #12]	; (8001988 <HAL_GetTick+0x14>)
 800197a:	681b      	ldr	r3, [r3, #0]
}
 800197c:	4618      	mov	r0, r3
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	20000424 	.word	0x20000424

0800198c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001994:	f7ff ffee 	bl	8001974 <HAL_GetTick>
 8001998:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019a4:	d005      	beq.n	80019b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019a6:	4b0a      	ldr	r3, [pc, #40]	; (80019d0 <HAL_Delay+0x44>)
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	461a      	mov	r2, r3
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	4413      	add	r3, r2
 80019b0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80019b2:	bf00      	nop
 80019b4:	f7ff ffde 	bl	8001974 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d8f7      	bhi.n	80019b4 <HAL_Delay+0x28>
  {
  }
}
 80019c4:	bf00      	nop
 80019c6:	bf00      	nop
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20000008 	.word	0x20000008

080019d4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <HAL_ADC_GetState>:
  *           " if (HAL_IS_BIT_SET(HAL_ADC_GetState(hadc1), HAL_ADC_STATE_AWD1)    ) "
  * @param  hadc ADC handle
  * @retval HAL state
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Return ADC state */
  return hadc->State;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b09a      	sub	sp, #104	; 0x68
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a44:	2300      	movs	r3, #0
 8001a46:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d101      	bne.n	8001a5c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e172      	b.n	8001d42 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	691b      	ldr	r3, [r3, #16]
 8001a60:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	f003 0310 	and.w	r3, r3, #16
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d176      	bne.n	8001b5c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d152      	bne.n	8001b1c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f7fe ff9f 	bl	80009d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d13b      	bne.n	8001b1c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f001 f941 	bl	8002d2c <ADC_Disable>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab4:	f003 0310 	and.w	r3, r3, #16
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d12f      	bne.n	8001b1c <HAL_ADC_Init+0xe0>
 8001abc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d12b      	bne.n	8001b1c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001acc:	f023 0302 	bic.w	r3, r3, #2
 8001ad0:	f043 0202 	orr.w	r2, r3, #2
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	689a      	ldr	r2, [r3, #8]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ae6:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	689a      	ldr	r2, [r3, #8]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001af6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001af8:	4b94      	ldr	r3, [pc, #592]	; (8001d4c <HAL_ADC_Init+0x310>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a94      	ldr	r2, [pc, #592]	; (8001d50 <HAL_ADC_Init+0x314>)
 8001afe:	fba2 2303 	umull	r2, r3, r2, r3
 8001b02:	0c9a      	lsrs	r2, r3, #18
 8001b04:	4613      	mov	r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	4413      	add	r3, r2
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b0e:	e002      	b.n	8001b16 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	3b01      	subs	r3, #1
 8001b14:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d1f9      	bne.n	8001b10 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d007      	beq.n	8001b3a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001b34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b38:	d110      	bne.n	8001b5c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	f023 0312 	bic.w	r3, r3, #18
 8001b42:	f043 0210 	orr.w	r2, r3, #16
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4e:	f043 0201 	orr.w	r2, r3, #1
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b60:	f003 0310 	and.w	r3, r3, #16
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	f040 80df 	bne.w	8001d28 <HAL_ADC_Init+0x2ec>
 8001b6a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f040 80da 	bne.w	8001d28 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f040 80d2 	bne.w	8001d28 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b88:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001b8c:	f043 0202 	orr.w	r2, r3, #2
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b94:	4b6f      	ldr	r3, [pc, #444]	; (8001d54 <HAL_ADC_Init+0x318>)
 8001b96:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ba0:	d102      	bne.n	8001ba8 <HAL_ADC_Init+0x16c>
 8001ba2:	4b6d      	ldr	r3, [pc, #436]	; (8001d58 <HAL_ADC_Init+0x31c>)
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	e002      	b.n	8001bae <HAL_ADC_Init+0x172>
 8001ba8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001bac:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f003 0303 	and.w	r3, r3, #3
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d108      	bne.n	8001bce <HAL_ADC_Init+0x192>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d101      	bne.n	8001bce <HAL_ADC_Init+0x192>
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e000      	b.n	8001bd0 <HAL_ADC_Init+0x194>
 8001bce:	2300      	movs	r3, #0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d11c      	bne.n	8001c0e <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001bd4:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d010      	beq.n	8001bfc <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f003 0303 	and.w	r3, r3, #3
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d107      	bne.n	8001bf6 <HAL_ADC_Init+0x1ba>
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d101      	bne.n	8001bf6 <HAL_ADC_Init+0x1ba>
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e000      	b.n	8001bf8 <HAL_ADC_Init+0x1bc>
 8001bf6:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d108      	bne.n	8001c0e <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001bfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	431a      	orrs	r2, r3
 8001c0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c0c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	7e5b      	ldrb	r3, [r3, #25]
 8001c12:	035b      	lsls	r3, r3, #13
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c18:	2a01      	cmp	r2, #1
 8001c1a:	d002      	beq.n	8001c22 <HAL_ADC_Init+0x1e6>
 8001c1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c20:	e000      	b.n	8001c24 <HAL_ADC_Init+0x1e8>
 8001c22:	2200      	movs	r2, #0
 8001c24:	431a      	orrs	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	431a      	orrs	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c34:	4313      	orrs	r3, r2
 8001c36:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d11b      	bne.n	8001c7a <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	7e5b      	ldrb	r3, [r3, #25]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d109      	bne.n	8001c5e <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	045a      	lsls	r2, r3, #17
 8001c52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c54:	4313      	orrs	r3, r2
 8001c56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c5a:	663b      	str	r3, [r7, #96]	; 0x60
 8001c5c:	e00d      	b.n	8001c7a <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c62:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001c66:	f043 0220 	orr.w	r2, r3, #32
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c72:	f043 0201 	orr.w	r2, r3, #1
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d007      	beq.n	8001c92 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f003 030c 	and.w	r3, r3, #12
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d114      	bne.n	8001cca <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	6812      	ldr	r2, [r2, #0]
 8001caa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001cae:	f023 0302 	bic.w	r3, r3, #2
 8001cb2:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	7e1b      	ldrb	r3, [r3, #24]
 8001cb8:	039a      	lsls	r2, r3, #14
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	68da      	ldr	r2, [r3, #12]
 8001cd0:	4b22      	ldr	r3, [pc, #136]	; (8001d5c <HAL_ADC_Init+0x320>)
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	6812      	ldr	r2, [r2, #0]
 8001cd8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001cda:	430b      	orrs	r3, r1
 8001cdc:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d10c      	bne.n	8001d00 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cec:	f023 010f 	bic.w	r1, r3, #15
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	69db      	ldr	r3, [r3, #28]
 8001cf4:	1e5a      	subs	r2, r3, #1
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	631a      	str	r2, [r3, #48]	; 0x30
 8001cfe:	e007      	b.n	8001d10 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f022 020f 	bic.w	r2, r2, #15
 8001d0e:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1a:	f023 0303 	bic.w	r3, r3, #3
 8001d1e:	f043 0201 	orr.w	r2, r3, #1
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	641a      	str	r2, [r3, #64]	; 0x40
 8001d26:	e00a      	b.n	8001d3e <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2c:	f023 0312 	bic.w	r3, r3, #18
 8001d30:	f043 0210 	orr.w	r2, r3, #16
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001d38:	2301      	movs	r3, #1
 8001d3a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001d3e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3768      	adds	r7, #104	; 0x68
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	20000000 	.word	0x20000000
 8001d50:	431bde83 	.word	0x431bde83
 8001d54:	50000300 	.word	0x50000300
 8001d58:	50000100 	.word	0x50000100
 8001d5c:	fff0c007 	.word	0xfff0c007

08001d60 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f003 0304 	and.w	r3, r3, #4
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f040 80b9 	bne.w	8001ef2 <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d101      	bne.n	8001d8e <HAL_ADC_Start_DMA+0x2e>
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	e0b4      	b.n	8001ef8 <HAL_ADC_Start_DMA+0x198>
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2201      	movs	r2, #1
 8001d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8001d96:	4b5a      	ldr	r3, [pc, #360]	; (8001f00 <HAL_ADC_Start_DMA+0x1a0>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f003 031f 	and.w	r3, r3, #31
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f040 80a0 	bne.w	8001ee4 <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001da4:	68f8      	ldr	r0, [r7, #12]
 8001da6:	f000 ff5d 	bl	8002c64 <ADC_Enable>
 8001daa:	4603      	mov	r3, r0
 8001dac:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001dae:	7dfb      	ldrb	r3, [r7, #23]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	f040 8092 	bne.w	8001eda <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dba:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001dbe:	f023 0301 	bic.w	r3, r3, #1
 8001dc2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001dca:	4b4d      	ldr	r3, [pc, #308]	; (8001f00 <HAL_ADC_Start_DMA+0x1a0>)
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f003 031f 	and.w	r3, r3, #31
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d004      	beq.n	8001de0 <HAL_ADC_Start_DMA+0x80>
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001dde:	d115      	bne.n	8001e0c <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d027      	beq.n	8001e4a <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e02:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001e0a:	e01e      	b.n	8001e4a <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e10:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e20:	d004      	beq.n	8001e2c <HAL_ADC_Start_DMA+0xcc>
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a37      	ldr	r2, [pc, #220]	; (8001f04 <HAL_ADC_Start_DMA+0x1a4>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d10e      	bne.n	8001e4a <HAL_ADC_Start_DMA+0xea>
 8001e2c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d007      	beq.n	8001e4a <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e42:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e56:	d106      	bne.n	8001e66 <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5c:	f023 0206 	bic.w	r2, r3, #6
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	645a      	str	r2, [r3, #68]	; 0x44
 8001e64:	e002      	b.n	8001e6c <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e78:	4a23      	ldr	r2, [pc, #140]	; (8001f08 <HAL_ADC_Start_DMA+0x1a8>)
 8001e7a:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e80:	4a22      	ldr	r2, [pc, #136]	; (8001f0c <HAL_ADC_Start_DMA+0x1ac>)
 8001e82:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e88:	4a21      	ldr	r2, [pc, #132]	; (8001f10 <HAL_ADC_Start_DMA+0x1b0>)
 8001e8a:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	221c      	movs	r2, #28
 8001e92:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	685a      	ldr	r2, [r3, #4]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f042 0210 	orr.w	r2, r2, #16
 8001ea2:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	68da      	ldr	r2, [r3, #12]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f042 0201 	orr.w	r2, r2, #1
 8001eb2:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	3340      	adds	r3, #64	; 0x40
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	68ba      	ldr	r2, [r7, #8]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f001 f9ec 	bl	80032a0 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	689a      	ldr	r2, [r3, #8]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f042 0204 	orr.w	r2, r2, #4
 8001ed6:	609a      	str	r2, [r3, #8]
 8001ed8:	e00d      	b.n	8001ef6 <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001ee2:	e008      	b.n	8001ef6 <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001ef0:	e001      	b.n	8001ef6 <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001ef6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3718      	adds	r7, #24
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	50000300 	.word	0x50000300
 8001f04:	50000100 	.word	0x50000100
 8001f08:	08002b99 	.word	0x08002b99
 8001f0c:	08002c13 	.word	0x08002c13
 8001f10:	08002c2f 	.word	0x08002c2f

08001f14 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001f20:	2300      	movs	r3, #0
 8001f22:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8001f24:	2300      	movs	r3, #0
 8001f26:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0304 	and.w	r3, r3, #4
 8001f32:	2b04      	cmp	r3, #4
 8001f34:	d106      	bne.n	8001f44 <HAL_ADC_IRQHandler+0x30>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f003 0304 	and.w	r3, r3, #4
 8001f40:	2b04      	cmp	r3, #4
 8001f42:	d00d      	beq.n	8001f60 <HAL_ADC_IRQHandler+0x4c>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001f4e:	2b08      	cmp	r3, #8
 8001f50:	d17a      	bne.n	8002048 <HAL_ADC_IRQHandler+0x134>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f003 0308 	and.w	r3, r3, #8
 8001f5c:	2b08      	cmp	r3, #8
 8001f5e:	d173      	bne.n	8002048 <HAL_ADC_IRQHandler+0x134>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f64:	f003 0310 	and.w	r3, r3, #16
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d105      	bne.n	8001f78 <HAL_ADC_IRQHandler+0x64>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f70:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001f78:	4b88      	ldr	r3, [pc, #544]	; (800219c <HAL_ADC_IRQHandler+0x288>)
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f003 031f 	and.w	r3, r3, #31
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d010      	beq.n	8001fa6 <HAL_ADC_IRQHandler+0x92>
 8001f84:	4b85      	ldr	r3, [pc, #532]	; (800219c <HAL_ADC_IRQHandler+0x288>)
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	f003 031f 	and.w	r3, r3, #31
 8001f8c:	2b05      	cmp	r3, #5
 8001f8e:	d00a      	beq.n	8001fa6 <HAL_ADC_IRQHandler+0x92>
 8001f90:	4b82      	ldr	r3, [pc, #520]	; (800219c <HAL_ADC_IRQHandler+0x288>)
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f003 031f 	and.w	r3, r3, #31
 8001f98:	2b09      	cmp	r3, #9
 8001f9a:	d004      	beq.n	8001fa6 <HAL_ADC_IRQHandler+0x92>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fa4:	d104      	bne.n	8001fb0 <HAL_ADC_IRQHandler+0x9c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	613b      	str	r3, [r7, #16]
 8001fae:	e003      	b.n	8001fb8 <HAL_ADC_IRQHandler+0xa4>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001fb0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d139      	bne.n	800203a <HAL_ADC_IRQHandler+0x126>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d134      	bne.n	800203a <HAL_ADC_IRQHandler+0x126>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0308 	and.w	r3, r3, #8
 8001fda:	2b08      	cmp	r3, #8
 8001fdc:	d12d      	bne.n	800203a <HAL_ADC_IRQHandler+0x126>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f003 0304 	and.w	r3, r3, #4
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d11a      	bne.n	8002022 <HAL_ADC_IRQHandler+0x10e>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	685a      	ldr	r2, [r3, #4]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f022 020c 	bic.w	r2, r2, #12
 8001ffa:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002000:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d112      	bne.n	800203a <HAL_ADC_IRQHandler+0x126>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002018:	f043 0201 	orr.w	r2, r3, #1
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	641a      	str	r2, [r3, #64]	; 0x40
 8002020:	e00b      	b.n	800203a <HAL_ADC_IRQHandler+0x126>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002026:	f043 0210 	orr.w	r2, r3, #16
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002032:	f043 0201 	orr.w	r2, r3, #1
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f7ff fcca 	bl	80019d4 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	220c      	movs	r2, #12
 8002046:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0320 	and.w	r3, r3, #32
 8002052:	2b20      	cmp	r3, #32
 8002054:	d106      	bne.n	8002064 <HAL_ADC_IRQHandler+0x150>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f003 0320 	and.w	r3, r3, #32
 8002060:	2b20      	cmp	r3, #32
 8002062:	d00f      	beq.n	8002084 <HAL_ADC_IRQHandler+0x170>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 800206e:	2b40      	cmp	r3, #64	; 0x40
 8002070:	f040 80a9 	bne.w	80021c6 <HAL_ADC_IRQHandler+0x2b2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800207e:	2b40      	cmp	r3, #64	; 0x40
 8002080:	f040 80a1 	bne.w	80021c6 <HAL_ADC_IRQHandler+0x2b2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002088:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002090:	4b42      	ldr	r3, [pc, #264]	; (800219c <HAL_ADC_IRQHandler+0x288>)
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f003 031f 	and.w	r3, r3, #31
 8002098:	2b00      	cmp	r3, #0
 800209a:	d010      	beq.n	80020be <HAL_ADC_IRQHandler+0x1aa>
 800209c:	4b3f      	ldr	r3, [pc, #252]	; (800219c <HAL_ADC_IRQHandler+0x288>)
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f003 031f 	and.w	r3, r3, #31
 80020a4:	2b05      	cmp	r3, #5
 80020a6:	d00a      	beq.n	80020be <HAL_ADC_IRQHandler+0x1aa>
 80020a8:	4b3c      	ldr	r3, [pc, #240]	; (800219c <HAL_ADC_IRQHandler+0x288>)
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f003 031f 	and.w	r3, r3, #31
 80020b0:	2b09      	cmp	r3, #9
 80020b2:	d004      	beq.n	80020be <HAL_ADC_IRQHandler+0x1aa>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020bc:	d104      	bne.n	80020c8 <HAL_ADC_IRQHandler+0x1b4>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	613b      	str	r3, [r7, #16]
 80020c6:	e003      	b.n	80020d0 <HAL_ADC_IRQHandler+0x1bc>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80020c8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d16c      	bne.n	80021b8 <HAL_ADC_IRQHandler+0x2a4>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d00b      	beq.n	8002100 <HAL_ADC_IRQHandler+0x1ec>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d160      	bne.n	80021b8 <HAL_ADC_IRQHandler+0x2a4>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d15b      	bne.n	80021b8 <HAL_ADC_IRQHandler+0x2a4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800210a:	2b40      	cmp	r3, #64	; 0x40
 800210c:	d154      	bne.n	80021b8 <HAL_ADC_IRQHandler+0x2a4>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 800210e:	4b23      	ldr	r3, [pc, #140]	; (800219c <HAL_ADC_IRQHandler+0x288>)
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f003 031f 	and.w	r3, r3, #31
 8002116:	2b00      	cmp	r3, #0
 8002118:	d010      	beq.n	800213c <HAL_ADC_IRQHandler+0x228>
 800211a:	4b20      	ldr	r3, [pc, #128]	; (800219c <HAL_ADC_IRQHandler+0x288>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f003 031f 	and.w	r3, r3, #31
 8002122:	2b06      	cmp	r3, #6
 8002124:	d00a      	beq.n	800213c <HAL_ADC_IRQHandler+0x228>
 8002126:	4b1d      	ldr	r3, [pc, #116]	; (800219c <HAL_ADC_IRQHandler+0x288>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f003 031f 	and.w	r3, r3, #31
 800212e:	2b07      	cmp	r3, #7
 8002130:	d004      	beq.n	800213c <HAL_ADC_IRQHandler+0x228>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800213a:	d104      	bne.n	8002146 <HAL_ADC_IRQHandler+0x232>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	e003      	b.n	800214e <HAL_ADC_IRQHandler+0x23a>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002146:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	60fb      	str	r3, [r7, #12]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d12f      	bne.n	80021b8 <HAL_ADC_IRQHandler+0x2a4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f003 0308 	and.w	r3, r3, #8
 8002162:	2b00      	cmp	r3, #0
 8002164:	d11c      	bne.n	80021a0 <HAL_ADC_IRQHandler+0x28c>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	685a      	ldr	r2, [r3, #4]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002174:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800218a:	2b00      	cmp	r3, #0
 800218c:	d114      	bne.n	80021b8 <HAL_ADC_IRQHandler+0x2a4>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002192:	f043 0201 	orr.w	r2, r3, #1
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	641a      	str	r2, [r3, #64]	; 0x40
 800219a:	e00d      	b.n	80021b8 <HAL_ADC_IRQHandler+0x2a4>
 800219c:	50000300 	.word	0x50000300
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a4:	f043 0210 	orr.w	r2, r3, #16
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b0:	f043 0201 	orr.w	r2, r3, #1
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f000 f93d 	bl	8002438 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2260      	movs	r2, #96	; 0x60
 80021c4:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021d0:	2b80      	cmp	r3, #128	; 0x80
 80021d2:	d113      	bne.n	80021fc <HAL_ADC_IRQHandler+0x2e8>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021de:	2b80      	cmp	r3, #128	; 0x80
 80021e0:	d10c      	bne.n	80021fc <HAL_ADC_IRQHandler+0x2e8>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f7ff fc04 	bl	80019fc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2280      	movs	r2, #128	; 0x80
 80021fa:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002206:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800220a:	d115      	bne.n	8002238 <HAL_ADC_IRQHandler+0x324>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002216:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800221a:	d10d      	bne.n	8002238 <HAL_ADC_IRQHandler+0x324>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002220:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f000 f919 	bl	8002460 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002236:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002242:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002246:	d115      	bne.n	8002274 <HAL_ADC_IRQHandler+0x360>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002252:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002256:	d10d      	bne.n	8002274 <HAL_ADC_IRQHandler+0x360>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f000 f905 	bl	8002474 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002272:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0310 	and.w	r3, r3, #16
 800227e:	2b10      	cmp	r3, #16
 8002280:	d13d      	bne.n	80022fe <HAL_ADC_IRQHandler+0x3ea>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f003 0310 	and.w	r3, r3, #16
 800228c:	2b10      	cmp	r3, #16
 800228e:	d136      	bne.n	80022fe <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002294:	2b01      	cmp	r3, #1
 8002296:	d102      	bne.n	800229e <HAL_ADC_IRQHandler+0x38a>
    {
      overrun_error = 1U;
 8002298:	2301      	movs	r3, #1
 800229a:	617b      	str	r3, [r7, #20]
 800229c:	e019      	b.n	80022d2 <HAL_ADC_IRQHandler+0x3be>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800229e:	4b2c      	ldr	r3, [pc, #176]	; (8002350 <HAL_ADC_IRQHandler+0x43c>)
 80022a0:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f003 031f 	and.w	r3, r3, #31
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d109      	bne.n	80022c2 <HAL_ADC_IRQHandler+0x3ae>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	f003 0301 	and.w	r3, r3, #1
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d10a      	bne.n	80022d2 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1U;  
 80022bc:	2301      	movs	r3, #1
 80022be:	617b      	str	r3, [r7, #20]
 80022c0:	e007      	b.n	80022d2 <HAL_ADC_IRQHandler+0x3be>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1U;  
 80022ce:	2301      	movs	r3, #1
 80022d0:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d10e      	bne.n	80022f6 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022dc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e8:	f043 0202 	orr.w	r2, r3, #2
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f7ff fb8d 	bl	8001a10 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2210      	movs	r2, #16
 80022fc:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002308:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800230c:	d11b      	bne.n	8002346 <HAL_ADC_IRQHandler+0x432>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002318:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800231c:	d113      	bne.n	8002346 <HAL_ADC_IRQHandler+0x432>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002322:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232e:	f043 0208 	orr.w	r2, r3, #8
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800233e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f000 f883 	bl	800244c <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8002346:	bf00      	nop
 8002348:	3718      	adds	r7, #24
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	50000300 	.word	0x50000300

08002354 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800235e:	2300      	movs	r3, #0
 8002360:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002368:	2b01      	cmp	r3, #1
 800236a:	d101      	bne.n	8002370 <HAL_ADCEx_Calibration_Start+0x1c>
 800236c:	2302      	movs	r3, #2
 800236e:	e05f      	b.n	8002430 <HAL_ADCEx_Calibration_Start+0xdc>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f000 fcd7 	bl	8002d2c <ADC_Disable>
 800237e:	4603      	mov	r3, r0
 8002380:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002382:	7bfb      	ldrb	r3, [r7, #15]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d14e      	bne.n	8002426 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	689a      	ldr	r2, [r3, #8]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800239c:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d107      	bne.n	80023b4 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	689a      	ldr	r2, [r3, #8]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80023b2:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	689a      	ldr	r2, [r3, #8]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80023c2:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 80023c4:	f7ff fad6 	bl	8001974 <HAL_GetTick>
 80023c8:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80023ca:	e01c      	b.n	8002406 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80023cc:	f7ff fad2 	bl	8001974 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b0a      	cmp	r3, #10
 80023d8:	d915      	bls.n	8002406 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80023e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80023e8:	d10d      	bne.n	8002406 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	f023 0312 	bic.w	r3, r3, #18
 80023f2:	f043 0210 	orr.w	r2, r3, #16
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e014      	b.n	8002430 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002410:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002414:	d0da      	beq.n	80023cc <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241a:	f023 0303 	bic.w	r3, r3, #3
 800241e:	f043 0201 	orr.w	r2, r3, #1
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800242e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002430:	4618      	mov	r0, r3
 8002432:	3710      	adds	r7, #16
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 800247c:	bf00      	nop
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002488:	b480      	push	{r7}
 800248a:	b09b      	sub	sp, #108	; 0x6c
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002492:	2300      	movs	r3, #0
 8002494:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002498:	2300      	movs	r3, #0
 800249a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d101      	bne.n	80024aa <HAL_ADC_ConfigChannel+0x22>
 80024a6:	2302      	movs	r3, #2
 80024a8:	e2a5      	b.n	80029f6 <HAL_ADC_ConfigChannel+0x56e>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2201      	movs	r2, #1
 80024ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f003 0304 	and.w	r3, r3, #4
 80024bc:	2b00      	cmp	r3, #0
 80024be:	f040 8289 	bne.w	80029d4 <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	2b04      	cmp	r3, #4
 80024c8:	d81c      	bhi.n	8002504 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685a      	ldr	r2, [r3, #4]
 80024d4:	4613      	mov	r3, r2
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	4413      	add	r3, r2
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	461a      	mov	r2, r3
 80024de:	231f      	movs	r3, #31
 80024e0:	4093      	lsls	r3, r2
 80024e2:	43db      	mvns	r3, r3
 80024e4:	4019      	ands	r1, r3
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	6818      	ldr	r0, [r3, #0]
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685a      	ldr	r2, [r3, #4]
 80024ee:	4613      	mov	r3, r2
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	4413      	add	r3, r2
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	fa00 f203 	lsl.w	r2, r0, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	430a      	orrs	r2, r1
 8002500:	631a      	str	r2, [r3, #48]	; 0x30
 8002502:	e063      	b.n	80025cc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	2b09      	cmp	r3, #9
 800250a:	d81e      	bhi.n	800254a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685a      	ldr	r2, [r3, #4]
 8002516:	4613      	mov	r3, r2
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	4413      	add	r3, r2
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	3b1e      	subs	r3, #30
 8002520:	221f      	movs	r2, #31
 8002522:	fa02 f303 	lsl.w	r3, r2, r3
 8002526:	43db      	mvns	r3, r3
 8002528:	4019      	ands	r1, r3
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	6818      	ldr	r0, [r3, #0]
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685a      	ldr	r2, [r3, #4]
 8002532:	4613      	mov	r3, r2
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	4413      	add	r3, r2
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	3b1e      	subs	r3, #30
 800253c:	fa00 f203 	lsl.w	r2, r0, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	430a      	orrs	r2, r1
 8002546:	635a      	str	r2, [r3, #52]	; 0x34
 8002548:	e040      	b.n	80025cc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	2b0e      	cmp	r3, #14
 8002550:	d81e      	bhi.n	8002590 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	4613      	mov	r3, r2
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	4413      	add	r3, r2
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	3b3c      	subs	r3, #60	; 0x3c
 8002566:	221f      	movs	r2, #31
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	43db      	mvns	r3, r3
 800256e:	4019      	ands	r1, r3
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	6818      	ldr	r0, [r3, #0]
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685a      	ldr	r2, [r3, #4]
 8002578:	4613      	mov	r3, r2
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	4413      	add	r3, r2
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	3b3c      	subs	r3, #60	; 0x3c
 8002582:	fa00 f203 	lsl.w	r2, r0, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	430a      	orrs	r2, r1
 800258c:	639a      	str	r2, [r3, #56]	; 0x38
 800258e:	e01d      	b.n	80025cc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685a      	ldr	r2, [r3, #4]
 800259a:	4613      	mov	r3, r2
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	4413      	add	r3, r2
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	3b5a      	subs	r3, #90	; 0x5a
 80025a4:	221f      	movs	r2, #31
 80025a6:	fa02 f303 	lsl.w	r3, r2, r3
 80025aa:	43db      	mvns	r3, r3
 80025ac:	4019      	ands	r1, r3
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	6818      	ldr	r0, [r3, #0]
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685a      	ldr	r2, [r3, #4]
 80025b6:	4613      	mov	r3, r2
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	4413      	add	r3, r2
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	3b5a      	subs	r3, #90	; 0x5a
 80025c0:	fa00 f203 	lsl.w	r2, r0, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	430a      	orrs	r2, r1
 80025ca:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f003 030c 	and.w	r3, r3, #12
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	f040 80e5 	bne.w	80027a6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2b09      	cmp	r3, #9
 80025e2:	d91c      	bls.n	800261e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6999      	ldr	r1, [r3, #24]
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	4613      	mov	r3, r2
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	4413      	add	r3, r2
 80025f4:	3b1e      	subs	r3, #30
 80025f6:	2207      	movs	r2, #7
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	43db      	mvns	r3, r3
 80025fe:	4019      	ands	r1, r3
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	6898      	ldr	r0, [r3, #8]
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	4613      	mov	r3, r2
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	4413      	add	r3, r2
 800260e:	3b1e      	subs	r3, #30
 8002610:	fa00 f203 	lsl.w	r2, r0, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	430a      	orrs	r2, r1
 800261a:	619a      	str	r2, [r3, #24]
 800261c:	e019      	b.n	8002652 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	6959      	ldr	r1, [r3, #20]
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	4613      	mov	r3, r2
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	4413      	add	r3, r2
 800262e:	2207      	movs	r2, #7
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	43db      	mvns	r3, r3
 8002636:	4019      	ands	r1, r3
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	6898      	ldr	r0, [r3, #8]
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	4613      	mov	r3, r2
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	4413      	add	r3, r2
 8002646:	fa00 f203 	lsl.w	r2, r0, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	430a      	orrs	r2, r1
 8002650:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	695a      	ldr	r2, [r3, #20]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	08db      	lsrs	r3, r3, #3
 800265e:	f003 0303 	and.w	r3, r3, #3
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	3b01      	subs	r3, #1
 8002670:	2b03      	cmp	r3, #3
 8002672:	d84f      	bhi.n	8002714 <HAL_ADC_ConfigChannel+0x28c>
 8002674:	a201      	add	r2, pc, #4	; (adr r2, 800267c <HAL_ADC_ConfigChannel+0x1f4>)
 8002676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800267a:	bf00      	nop
 800267c:	0800268d 	.word	0x0800268d
 8002680:	080026af 	.word	0x080026af
 8002684:	080026d1 	.word	0x080026d1
 8002688:	080026f3 	.word	0x080026f3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002692:	4b9e      	ldr	r3, [pc, #632]	; (800290c <HAL_ADC_ConfigChannel+0x484>)
 8002694:	4013      	ands	r3, r2
 8002696:	683a      	ldr	r2, [r7, #0]
 8002698:	6812      	ldr	r2, [r2, #0]
 800269a:	0691      	lsls	r1, r2, #26
 800269c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800269e:	430a      	orrs	r2, r1
 80026a0:	431a      	orrs	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80026aa:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80026ac:	e07e      	b.n	80027ac <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80026b4:	4b95      	ldr	r3, [pc, #596]	; (800290c <HAL_ADC_ConfigChannel+0x484>)
 80026b6:	4013      	ands	r3, r2
 80026b8:	683a      	ldr	r2, [r7, #0]
 80026ba:	6812      	ldr	r2, [r2, #0]
 80026bc:	0691      	lsls	r1, r2, #26
 80026be:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80026c0:	430a      	orrs	r2, r1
 80026c2:	431a      	orrs	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80026cc:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80026ce:	e06d      	b.n	80027ac <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80026d6:	4b8d      	ldr	r3, [pc, #564]	; (800290c <HAL_ADC_ConfigChannel+0x484>)
 80026d8:	4013      	ands	r3, r2
 80026da:	683a      	ldr	r2, [r7, #0]
 80026dc:	6812      	ldr	r2, [r2, #0]
 80026de:	0691      	lsls	r1, r2, #26
 80026e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80026e2:	430a      	orrs	r2, r1
 80026e4:	431a      	orrs	r2, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80026ee:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80026f0:	e05c      	b.n	80027ac <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80026f8:	4b84      	ldr	r3, [pc, #528]	; (800290c <HAL_ADC_ConfigChannel+0x484>)
 80026fa:	4013      	ands	r3, r2
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	6812      	ldr	r2, [r2, #0]
 8002700:	0691      	lsls	r1, r2, #26
 8002702:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002704:	430a      	orrs	r2, r1
 8002706:	431a      	orrs	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002710:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002712:	e04b      	b.n	80027ac <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800271a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	069b      	lsls	r3, r3, #26
 8002724:	429a      	cmp	r2, r3
 8002726:	d107      	bne.n	8002738 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002736:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800273e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	069b      	lsls	r3, r3, #26
 8002748:	429a      	cmp	r2, r3
 800274a:	d107      	bne.n	800275c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800275a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002762:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	069b      	lsls	r3, r3, #26
 800276c:	429a      	cmp	r2, r3
 800276e:	d107      	bne.n	8002780 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800277e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002786:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	069b      	lsls	r3, r3, #26
 8002790:	429a      	cmp	r2, r3
 8002792:	d10a      	bne.n	80027aa <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80027a2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80027a4:	e001      	b.n	80027aa <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80027a6:	bf00      	nop
 80027a8:	e000      	b.n	80027ac <HAL_ADC_ConfigChannel+0x324>
      break;
 80027aa:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f003 0303 	and.w	r3, r3, #3
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d108      	bne.n	80027cc <HAL_ADC_ConfigChannel+0x344>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d101      	bne.n	80027cc <HAL_ADC_ConfigChannel+0x344>
 80027c8:	2301      	movs	r3, #1
 80027ca:	e000      	b.n	80027ce <HAL_ADC_ConfigChannel+0x346>
 80027cc:	2300      	movs	r3, #0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	f040 810b 	bne.w	80029ea <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d00f      	beq.n	80027fc <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2201      	movs	r2, #1
 80027ea:	fa02 f303 	lsl.w	r3, r2, r3
 80027ee:	43da      	mvns	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	400a      	ands	r2, r1
 80027f6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80027fa:	e049      	b.n	8002890 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2201      	movs	r2, #1
 800280a:	409a      	lsls	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	430a      	orrs	r2, r1
 8002812:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2b09      	cmp	r3, #9
 800281c:	d91c      	bls.n	8002858 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	6999      	ldr	r1, [r3, #24]
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	4613      	mov	r3, r2
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	4413      	add	r3, r2
 800282e:	3b1b      	subs	r3, #27
 8002830:	2207      	movs	r2, #7
 8002832:	fa02 f303 	lsl.w	r3, r2, r3
 8002836:	43db      	mvns	r3, r3
 8002838:	4019      	ands	r1, r3
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	6898      	ldr	r0, [r3, #8]
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	4613      	mov	r3, r2
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	4413      	add	r3, r2
 8002848:	3b1b      	subs	r3, #27
 800284a:	fa00 f203 	lsl.w	r2, r0, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	430a      	orrs	r2, r1
 8002854:	619a      	str	r2, [r3, #24]
 8002856:	e01b      	b.n	8002890 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	6959      	ldr	r1, [r3, #20]
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	1c5a      	adds	r2, r3, #1
 8002864:	4613      	mov	r3, r2
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	4413      	add	r3, r2
 800286a:	2207      	movs	r2, #7
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	43db      	mvns	r3, r3
 8002872:	4019      	ands	r1, r3
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	6898      	ldr	r0, [r3, #8]
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	1c5a      	adds	r2, r3, #1
 800287e:	4613      	mov	r3, r2
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	4413      	add	r3, r2
 8002884:	fa00 f203 	lsl.w	r2, r0, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	430a      	orrs	r2, r1
 800288e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002890:	4b1f      	ldr	r3, [pc, #124]	; (8002910 <HAL_ADC_ConfigChannel+0x488>)
 8002892:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2b10      	cmp	r3, #16
 800289a:	d105      	bne.n	80028a8 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800289c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d015      	beq.n	80028d4 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80028ac:	2b11      	cmp	r3, #17
 80028ae:	d105      	bne.n	80028bc <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80028b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d00b      	beq.n	80028d4 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80028c0:	2b12      	cmp	r3, #18
 80028c2:	f040 8092 	bne.w	80029ea <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80028c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f040 808b 	bne.w	80029ea <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028dc:	d102      	bne.n	80028e4 <HAL_ADC_ConfigChannel+0x45c>
 80028de:	4b0d      	ldr	r3, [pc, #52]	; (8002914 <HAL_ADC_ConfigChannel+0x48c>)
 80028e0:	60fb      	str	r3, [r7, #12]
 80028e2:	e002      	b.n	80028ea <HAL_ADC_ConfigChannel+0x462>
 80028e4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80028e8:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f003 0303 	and.w	r3, r3, #3
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d10f      	bne.n	8002918 <HAL_ADC_ConfigChannel+0x490>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	2b01      	cmp	r3, #1
 8002904:	d108      	bne.n	8002918 <HAL_ADC_ConfigChannel+0x490>
 8002906:	2301      	movs	r3, #1
 8002908:	e007      	b.n	800291a <HAL_ADC_ConfigChannel+0x492>
 800290a:	bf00      	nop
 800290c:	83fff000 	.word	0x83fff000
 8002910:	50000300 	.word	0x50000300
 8002914:	50000100 	.word	0x50000100
 8002918:	2300      	movs	r3, #0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d150      	bne.n	80029c0 <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800291e:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002920:	2b00      	cmp	r3, #0
 8002922:	d010      	beq.n	8002946 <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f003 0303 	and.w	r3, r3, #3
 800292c:	2b01      	cmp	r3, #1
 800292e:	d107      	bne.n	8002940 <HAL_ADC_ConfigChannel+0x4b8>
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0301 	and.w	r3, r3, #1
 8002938:	2b01      	cmp	r3, #1
 800293a:	d101      	bne.n	8002940 <HAL_ADC_ConfigChannel+0x4b8>
 800293c:	2301      	movs	r3, #1
 800293e:	e000      	b.n	8002942 <HAL_ADC_ConfigChannel+0x4ba>
 8002940:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002942:	2b00      	cmp	r3, #0
 8002944:	d13c      	bne.n	80029c0 <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2b10      	cmp	r3, #16
 800294c:	d11d      	bne.n	800298a <HAL_ADC_ConfigChannel+0x502>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002956:	d118      	bne.n	800298a <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002958:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002960:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002962:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002964:	4b27      	ldr	r3, [pc, #156]	; (8002a04 <HAL_ADC_ConfigChannel+0x57c>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a27      	ldr	r2, [pc, #156]	; (8002a08 <HAL_ADC_ConfigChannel+0x580>)
 800296a:	fba2 2303 	umull	r2, r3, r2, r3
 800296e:	0c9a      	lsrs	r2, r3, #18
 8002970:	4613      	mov	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	4413      	add	r3, r2
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800297a:	e002      	b.n	8002982 <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	3b01      	subs	r3, #1
 8002980:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d1f9      	bne.n	800297c <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002988:	e02e      	b.n	80029e8 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2b11      	cmp	r3, #17
 8002990:	d10b      	bne.n	80029aa <HAL_ADC_ConfigChannel+0x522>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800299a:	d106      	bne.n	80029aa <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800299c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80029a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029a6:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80029a8:	e01e      	b.n	80029e8 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2b12      	cmp	r3, #18
 80029b0:	d11a      	bne.n	80029e8 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80029b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80029ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029bc:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80029be:	e013      	b.n	80029e8 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c4:	f043 0220 	orr.w	r2, r3, #32
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80029d2:	e00a      	b.n	80029ea <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d8:	f043 0220 	orr.w	r2, r3, #32
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80029e6:	e000      	b.n	80029ea <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80029e8:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80029f2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	376c      	adds	r7, #108	; 0x6c
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	20000000 	.word	0x20000000
 8002a08:	431bde83 	.word	0x431bde83

08002a0c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b099      	sub	sp, #100	; 0x64
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a16:	2300      	movs	r3, #0
 8002a18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a24:	d102      	bne.n	8002a2c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002a26:	4b5a      	ldr	r3, [pc, #360]	; (8002b90 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8002a28:	60bb      	str	r3, [r7, #8]
 8002a2a:	e002      	b.n	8002a32 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8002a2c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002a30:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d101      	bne.n	8002a3c <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e0a2      	b.n	8002b82 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d101      	bne.n	8002a4a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002a46:	2302      	movs	r3, #2
 8002a48:	e09b      	b.n	8002b82 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f003 0304 	and.w	r3, r3, #4
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d17f      	bne.n	8002b60 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f003 0304 	and.w	r3, r3, #4
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d179      	bne.n	8002b60 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a6c:	4b49      	ldr	r3, [pc, #292]	; (8002b94 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8002a6e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d040      	beq.n	8002afa <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002a78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	6859      	ldr	r1, [r3, #4]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a8a:	035b      	lsls	r3, r3, #13
 8002a8c:	430b      	orrs	r3, r1
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a92:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f003 0303 	and.w	r3, r3, #3
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d108      	bne.n	8002ab4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0301 	and.w	r3, r3, #1
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d101      	bne.n	8002ab4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e000      	b.n	8002ab6 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d15c      	bne.n	8002b74 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f003 0303 	and.w	r3, r3, #3
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d107      	bne.n	8002ad6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d101      	bne.n	8002ad6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e000      	b.n	8002ad8 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8002ad6:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d14b      	bne.n	8002b74 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002adc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002ae4:	f023 030f 	bic.w	r3, r3, #15
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	6811      	ldr	r1, [r2, #0]
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	6892      	ldr	r2, [r2, #8]
 8002af0:	430a      	orrs	r2, r1
 8002af2:	431a      	orrs	r2, r3
 8002af4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002af6:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002af8:	e03c      	b.n	8002b74 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002afa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b04:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f003 0303 	and.w	r3, r3, #3
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d108      	bne.n	8002b26 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d101      	bne.n	8002b26 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002b22:	2301      	movs	r3, #1
 8002b24:	e000      	b.n	8002b28 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8002b26:	2300      	movs	r3, #0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d123      	bne.n	8002b74 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f003 0303 	and.w	r3, r3, #3
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d107      	bne.n	8002b48 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0301 	and.w	r3, r3, #1
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d101      	bne.n	8002b48 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002b44:	2301      	movs	r3, #1
 8002b46:	e000      	b.n	8002b4a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002b48:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d112      	bne.n	8002b74 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002b4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002b56:	f023 030f 	bic.w	r3, r3, #15
 8002b5a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b5c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b5e:	e009      	b.n	8002b74 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b64:	f043 0220 	orr.w	r2, r3, #32
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002b72:	e000      	b.n	8002b76 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b74:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002b7e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002b82:	4618      	mov	r0, r3
 8002b84:	3764      	adds	r7, #100	; 0x64
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	50000100 	.word	0x50000100
 8002b94:	50000300 	.word	0x50000300

08002b98 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba4:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d126      	bne.n	8002c00 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d115      	bne.n	8002bf8 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d111      	bne.n	8002bf8 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d105      	bne.n	8002bf8 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf0:	f043 0201 	orr.w	r2, r3, #1
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002bf8:	68f8      	ldr	r0, [r7, #12]
 8002bfa:	f7fe feeb 	bl	80019d4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002bfe:	e004      	b.n	8002c0a <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	4798      	blx	r3
}
 8002c0a:	bf00      	nop
 8002c0c:	3710      	adds	r7, #16
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b084      	sub	sp, #16
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002c20:	68f8      	ldr	r0, [r7, #12]
 8002c22:	f7fe fee1 	bl	80019e8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8002c26:	bf00      	nop
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b084      	sub	sp, #16
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c40:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4c:	f043 0204 	orr.w	r2, r3, #4
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002c54:	68f8      	ldr	r0, [r7, #12]
 8002c56:	f7fe fedb 	bl	8001a10 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c5a:	bf00      	nop
 8002c5c:	3710      	adds	r7, #16
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
	...

08002c64 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f003 0303 	and.w	r3, r3, #3
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d108      	bne.n	8002c90 <ADC_Enable+0x2c>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0301 	and.w	r3, r3, #1
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d101      	bne.n	8002c90 <ADC_Enable+0x2c>
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e000      	b.n	8002c92 <ADC_Enable+0x2e>
 8002c90:	2300      	movs	r3, #0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d143      	bne.n	8002d1e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	689a      	ldr	r2, [r3, #8]
 8002c9c:	4b22      	ldr	r3, [pc, #136]	; (8002d28 <ADC_Enable+0xc4>)
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00d      	beq.n	8002cc0 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca8:	f043 0210 	orr.w	r2, r3, #16
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb4:	f043 0201 	orr.w	r2, r3, #1
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e02f      	b.n	8002d20 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	689a      	ldr	r2, [r3, #8]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f042 0201 	orr.w	r2, r2, #1
 8002cce:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002cd0:	f7fe fe50 	bl	8001974 <HAL_GetTick>
 8002cd4:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002cd6:	e01b      	b.n	8002d10 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002cd8:	f7fe fe4c 	bl	8001974 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d914      	bls.n	8002d10 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0301 	and.w	r3, r3, #1
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d00d      	beq.n	8002d10 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf8:	f043 0210 	orr.w	r2, r3, #16
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d04:	f043 0201 	orr.w	r2, r3, #1
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e007      	b.n	8002d20 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d1dc      	bne.n	8002cd8 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3710      	adds	r7, #16
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	8000003f 	.word	0x8000003f

08002d2c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d34:	2300      	movs	r3, #0
 8002d36:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f003 0303 	and.w	r3, r3, #3
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d108      	bne.n	8002d58 <ADC_Disable+0x2c>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0301 	and.w	r3, r3, #1
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d101      	bne.n	8002d58 <ADC_Disable+0x2c>
 8002d54:	2301      	movs	r3, #1
 8002d56:	e000      	b.n	8002d5a <ADC_Disable+0x2e>
 8002d58:	2300      	movs	r3, #0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d047      	beq.n	8002dee <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f003 030d 	and.w	r3, r3, #13
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d10f      	bne.n	8002d8c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	689a      	ldr	r2, [r3, #8]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f042 0202 	orr.w	r2, r2, #2
 8002d7a:	609a      	str	r2, [r3, #8]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2203      	movs	r2, #3
 8002d82:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002d84:	f7fe fdf6 	bl	8001974 <HAL_GetTick>
 8002d88:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002d8a:	e029      	b.n	8002de0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d90:	f043 0210 	orr.w	r2, r3, #16
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9c:	f043 0201 	orr.w	r2, r3, #1
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e023      	b.n	8002df0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002da8:	f7fe fde4 	bl	8001974 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d914      	bls.n	8002de0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f003 0301 	and.w	r3, r3, #1
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d10d      	bne.n	8002de0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc8:	f043 0210 	orr.w	r2, r3, #16
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd4:	f043 0201 	orr.w	r2, r3, #1
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e007      	b.n	8002df0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d0dc      	beq.n	8002da8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3710      	adds	r7, #16
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e0ed      	b.n	8002fe6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d102      	bne.n	8002e1c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f7fd fe80 	bl	8000b1c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f042 0201 	orr.w	r2, r2, #1
 8002e2a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e2c:	f7fe fda2 	bl	8001974 <HAL_GetTick>
 8002e30:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002e32:	e012      	b.n	8002e5a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002e34:	f7fe fd9e 	bl	8001974 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b0a      	cmp	r3, #10
 8002e40:	d90b      	bls.n	8002e5a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e46:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2205      	movs	r2, #5
 8002e52:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e0c5      	b.n	8002fe6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f003 0301 	and.w	r3, r3, #1
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d0e5      	beq.n	8002e34 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f022 0202 	bic.w	r2, r2, #2
 8002e76:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e78:	f7fe fd7c 	bl	8001974 <HAL_GetTick>
 8002e7c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002e7e:	e012      	b.n	8002ea6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002e80:	f7fe fd78 	bl	8001974 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b0a      	cmp	r3, #10
 8002e8c:	d90b      	bls.n	8002ea6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e92:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2205      	movs	r2, #5
 8002e9e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e09f      	b.n	8002fe6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d1e5      	bne.n	8002e80 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	7e1b      	ldrb	r3, [r3, #24]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d108      	bne.n	8002ece <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002eca:	601a      	str	r2, [r3, #0]
 8002ecc:	e007      	b.n	8002ede <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002edc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	7e5b      	ldrb	r3, [r3, #25]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d108      	bne.n	8002ef8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ef4:	601a      	str	r2, [r3, #0]
 8002ef6:	e007      	b.n	8002f08 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f06:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	7e9b      	ldrb	r3, [r3, #26]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d108      	bne.n	8002f22 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f042 0220 	orr.w	r2, r2, #32
 8002f1e:	601a      	str	r2, [r3, #0]
 8002f20:	e007      	b.n	8002f32 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f022 0220 	bic.w	r2, r2, #32
 8002f30:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	7edb      	ldrb	r3, [r3, #27]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d108      	bne.n	8002f4c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f022 0210 	bic.w	r2, r2, #16
 8002f48:	601a      	str	r2, [r3, #0]
 8002f4a:	e007      	b.n	8002f5c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f042 0210 	orr.w	r2, r2, #16
 8002f5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	7f1b      	ldrb	r3, [r3, #28]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d108      	bne.n	8002f76 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f042 0208 	orr.w	r2, r2, #8
 8002f72:	601a      	str	r2, [r3, #0]
 8002f74:	e007      	b.n	8002f86 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f022 0208 	bic.w	r2, r2, #8
 8002f84:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	7f5b      	ldrb	r3, [r3, #29]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d108      	bne.n	8002fa0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f042 0204 	orr.w	r2, r2, #4
 8002f9c:	601a      	str	r2, [r3, #0]
 8002f9e:	e007      	b.n	8002fb0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f022 0204 	bic.w	r2, r2, #4
 8002fae:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689a      	ldr	r2, [r3, #8]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	431a      	orrs	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	431a      	orrs	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	695b      	ldr	r3, [r3, #20]
 8002fc4:	ea42 0103 	orr.w	r1, r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	1e5a      	subs	r2, r3, #1
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3710      	adds	r7, #16
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
	...

08002ff0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f003 0307 	and.w	r3, r3, #7
 8002ffe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003000:	4b0c      	ldr	r3, [pc, #48]	; (8003034 <__NVIC_SetPriorityGrouping+0x44>)
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003006:	68ba      	ldr	r2, [r7, #8]
 8003008:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800300c:	4013      	ands	r3, r2
 800300e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003018:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800301c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003020:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003022:	4a04      	ldr	r2, [pc, #16]	; (8003034 <__NVIC_SetPriorityGrouping+0x44>)
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	60d3      	str	r3, [r2, #12]
}
 8003028:	bf00      	nop
 800302a:	3714      	adds	r7, #20
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr
 8003034:	e000ed00 	.word	0xe000ed00

08003038 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800303c:	4b04      	ldr	r3, [pc, #16]	; (8003050 <__NVIC_GetPriorityGrouping+0x18>)
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	0a1b      	lsrs	r3, r3, #8
 8003042:	f003 0307 	and.w	r3, r3, #7
}
 8003046:	4618      	mov	r0, r3
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr
 8003050:	e000ed00 	.word	0xe000ed00

08003054 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	4603      	mov	r3, r0
 800305c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800305e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003062:	2b00      	cmp	r3, #0
 8003064:	db0b      	blt.n	800307e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003066:	79fb      	ldrb	r3, [r7, #7]
 8003068:	f003 021f 	and.w	r2, r3, #31
 800306c:	4907      	ldr	r1, [pc, #28]	; (800308c <__NVIC_EnableIRQ+0x38>)
 800306e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003072:	095b      	lsrs	r3, r3, #5
 8003074:	2001      	movs	r0, #1
 8003076:	fa00 f202 	lsl.w	r2, r0, r2
 800307a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800307e:	bf00      	nop
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	e000e100 	.word	0xe000e100

08003090 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	4603      	mov	r3, r0
 8003098:	6039      	str	r1, [r7, #0]
 800309a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800309c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	db0a      	blt.n	80030ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	b2da      	uxtb	r2, r3
 80030a8:	490c      	ldr	r1, [pc, #48]	; (80030dc <__NVIC_SetPriority+0x4c>)
 80030aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ae:	0112      	lsls	r2, r2, #4
 80030b0:	b2d2      	uxtb	r2, r2
 80030b2:	440b      	add	r3, r1
 80030b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030b8:	e00a      	b.n	80030d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	b2da      	uxtb	r2, r3
 80030be:	4908      	ldr	r1, [pc, #32]	; (80030e0 <__NVIC_SetPriority+0x50>)
 80030c0:	79fb      	ldrb	r3, [r7, #7]
 80030c2:	f003 030f 	and.w	r3, r3, #15
 80030c6:	3b04      	subs	r3, #4
 80030c8:	0112      	lsls	r2, r2, #4
 80030ca:	b2d2      	uxtb	r2, r2
 80030cc:	440b      	add	r3, r1
 80030ce:	761a      	strb	r2, [r3, #24]
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	e000e100 	.word	0xe000e100
 80030e0:	e000ed00 	.word	0xe000ed00

080030e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b089      	sub	sp, #36	; 0x24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f003 0307 	and.w	r3, r3, #7
 80030f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	f1c3 0307 	rsb	r3, r3, #7
 80030fe:	2b04      	cmp	r3, #4
 8003100:	bf28      	it	cs
 8003102:	2304      	movcs	r3, #4
 8003104:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	3304      	adds	r3, #4
 800310a:	2b06      	cmp	r3, #6
 800310c:	d902      	bls.n	8003114 <NVIC_EncodePriority+0x30>
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	3b03      	subs	r3, #3
 8003112:	e000      	b.n	8003116 <NVIC_EncodePriority+0x32>
 8003114:	2300      	movs	r3, #0
 8003116:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003118:	f04f 32ff 	mov.w	r2, #4294967295
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	fa02 f303 	lsl.w	r3, r2, r3
 8003122:	43da      	mvns	r2, r3
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	401a      	ands	r2, r3
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800312c:	f04f 31ff 	mov.w	r1, #4294967295
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	fa01 f303 	lsl.w	r3, r1, r3
 8003136:	43d9      	mvns	r1, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800313c:	4313      	orrs	r3, r2
         );
}
 800313e:	4618      	mov	r0, r3
 8003140:	3724      	adds	r7, #36	; 0x24
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
	...

0800314c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	3b01      	subs	r3, #1
 8003158:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800315c:	d301      	bcc.n	8003162 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800315e:	2301      	movs	r3, #1
 8003160:	e00f      	b.n	8003182 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003162:	4a0a      	ldr	r2, [pc, #40]	; (800318c <SysTick_Config+0x40>)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	3b01      	subs	r3, #1
 8003168:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800316a:	210f      	movs	r1, #15
 800316c:	f04f 30ff 	mov.w	r0, #4294967295
 8003170:	f7ff ff8e 	bl	8003090 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003174:	4b05      	ldr	r3, [pc, #20]	; (800318c <SysTick_Config+0x40>)
 8003176:	2200      	movs	r2, #0
 8003178:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800317a:	4b04      	ldr	r3, [pc, #16]	; (800318c <SysTick_Config+0x40>)
 800317c:	2207      	movs	r2, #7
 800317e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	e000e010 	.word	0xe000e010

08003190 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f7ff ff29 	bl	8002ff0 <__NVIC_SetPriorityGrouping>
}
 800319e:	bf00      	nop
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b086      	sub	sp, #24
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	4603      	mov	r3, r0
 80031ae:	60b9      	str	r1, [r7, #8]
 80031b0:	607a      	str	r2, [r7, #4]
 80031b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031b4:	2300      	movs	r3, #0
 80031b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031b8:	f7ff ff3e 	bl	8003038 <__NVIC_GetPriorityGrouping>
 80031bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	68b9      	ldr	r1, [r7, #8]
 80031c2:	6978      	ldr	r0, [r7, #20]
 80031c4:	f7ff ff8e 	bl	80030e4 <NVIC_EncodePriority>
 80031c8:	4602      	mov	r2, r0
 80031ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031ce:	4611      	mov	r1, r2
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7ff ff5d 	bl	8003090 <__NVIC_SetPriority>
}
 80031d6:	bf00      	nop
 80031d8:	3718      	adds	r7, #24
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b082      	sub	sp, #8
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	4603      	mov	r3, r0
 80031e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7ff ff31 	bl	8003054 <__NVIC_EnableIRQ>
}
 80031f2:	bf00      	nop
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b082      	sub	sp, #8
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f7ff ffa2 	bl	800314c <SysTick_Config>
 8003208:	4603      	mov	r3, r0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3708      	adds	r7, #8
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}

08003212 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8003212:	b580      	push	{r7, lr}
 8003214:	b084      	sub	sp, #16
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800321a:	2300      	movs	r3, #0
 800321c:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d101      	bne.n	8003228 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e037      	b.n	8003298 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2202      	movs	r2, #2
 800322c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800323e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003242:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800324c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003258:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003264:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	69db      	ldr	r3, [r3, #28]
 800326a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800326c:	68fa      	ldr	r2, [r7, #12]
 800326e:	4313      	orrs	r3, r2
 8003270:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 f98c 	bl	8003598 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2201      	movs	r2, #1
 800328a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003296:	2300      	movs	r3, #0
}  
 8003298:	4618      	mov	r0, r3
 800329a:	3710      	adds	r7, #16
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b086      	sub	sp, #24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
 80032ac:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80032ae:	2300      	movs	r3, #0
 80032b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d101      	bne.n	80032c0 <HAL_DMA_Start_IT+0x20>
 80032bc:	2302      	movs	r3, #2
 80032be:	e04a      	b.n	8003356 <HAL_DMA_Start_IT+0xb6>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d13a      	bne.n	8003348 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2202      	movs	r2, #2
 80032d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2200      	movs	r2, #0
 80032de:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f022 0201 	bic.w	r2, r2, #1
 80032ee:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	68b9      	ldr	r1, [r7, #8]
 80032f6:	68f8      	ldr	r0, [r7, #12]
 80032f8:	f000 f91f 	bl	800353a <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003300:	2b00      	cmp	r3, #0
 8003302:	d008      	beq.n	8003316 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f042 020e 	orr.w	r2, r2, #14
 8003312:	601a      	str	r2, [r3, #0]
 8003314:	e00f      	b.n	8003336 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f042 020a 	orr.w	r2, r2, #10
 8003324:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f022 0204 	bic.w	r2, r2, #4
 8003334:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f042 0201 	orr.w	r2, r2, #1
 8003344:	601a      	str	r2, [r3, #0]
 8003346:	e005      	b.n	8003354 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8003350:	2302      	movs	r3, #2
 8003352:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8003354:	7dfb      	ldrb	r3, [r7, #23]
} 
 8003356:	4618      	mov	r0, r3
 8003358:	3718      	adds	r7, #24
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800335e:	b580      	push	{r7, lr}
 8003360:	b084      	sub	sp, #16
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003366:	2300      	movs	r3, #0
 8003368:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003370:	2b02      	cmp	r3, #2
 8003372:	d005      	beq.n	8003380 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2204      	movs	r2, #4
 8003378:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	73fb      	strb	r3, [r7, #15]
 800337e:	e027      	b.n	80033d0 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f022 020e 	bic.w	r2, r2, #14
 800338e:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f022 0201 	bic.w	r2, r2, #1
 800339e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a8:	2101      	movs	r1, #1
 80033aa:	fa01 f202 	lsl.w	r2, r1, r2
 80033ae:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d003      	beq.n	80033d0 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	4798      	blx	r3
    } 
  }
  return status;
 80033d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3710      	adds	r7, #16
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	b084      	sub	sp, #16
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f6:	2204      	movs	r2, #4
 80033f8:	409a      	lsls	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	4013      	ands	r3, r2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d024      	beq.n	800344c <HAL_DMA_IRQHandler+0x72>
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	f003 0304 	and.w	r3, r3, #4
 8003408:	2b00      	cmp	r3, #0
 800340a:	d01f      	beq.n	800344c <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0320 	and.w	r3, r3, #32
 8003416:	2b00      	cmp	r3, #0
 8003418:	d107      	bne.n	800342a <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f022 0204 	bic.w	r2, r2, #4
 8003428:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003432:	2104      	movs	r1, #4
 8003434:	fa01 f202 	lsl.w	r2, r1, r2
 8003438:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800343e:	2b00      	cmp	r3, #0
 8003440:	d06a      	beq.n	8003518 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800344a:	e065      	b.n	8003518 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003450:	2202      	movs	r2, #2
 8003452:	409a      	lsls	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	4013      	ands	r3, r2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d02c      	beq.n	80034b6 <HAL_DMA_IRQHandler+0xdc>
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d027      	beq.n	80034b6 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0320 	and.w	r3, r3, #32
 8003470:	2b00      	cmp	r3, #0
 8003472:	d10b      	bne.n	800348c <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f022 020a 	bic.w	r2, r2, #10
 8003482:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003494:	2102      	movs	r1, #2
 8003496:	fa01 f202 	lsl.w	r2, r1, r2
 800349a:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d035      	beq.n	8003518 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80034b4:	e030      	b.n	8003518 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ba:	2208      	movs	r2, #8
 80034bc:	409a      	lsls	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	4013      	ands	r3, r2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d028      	beq.n	8003518 <HAL_DMA_IRQHandler+0x13e>
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	f003 0308 	and.w	r3, r3, #8
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d023      	beq.n	8003518 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 020e 	bic.w	r2, r2, #14
 80034de:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034e8:	2101      	movs	r1, #1
 80034ea:	fa01 f202 	lsl.w	r2, r1, r2
 80034ee:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2201      	movs	r2, #1
 80034fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350a:	2b00      	cmp	r3, #0
 800350c:	d004      	beq.n	8003518 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	4798      	blx	r3
    }
  }
}  
 8003516:	e7ff      	b.n	8003518 <HAL_DMA_IRQHandler+0x13e>
 8003518:	bf00      	nop
 800351a:	3710      	adds	r7, #16
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 800352e:	4618      	mov	r0, r3
 8003530:	370c      	adds	r7, #12
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr

0800353a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800353a:	b480      	push	{r7}
 800353c:	b085      	sub	sp, #20
 800353e:	af00      	add	r7, sp, #0
 8003540:	60f8      	str	r0, [r7, #12]
 8003542:	60b9      	str	r1, [r7, #8]
 8003544:	607a      	str	r2, [r7, #4]
 8003546:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003550:	2101      	movs	r1, #1
 8003552:	fa01 f202 	lsl.w	r2, r1, r2
 8003556:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	683a      	ldr	r2, [r7, #0]
 800355e:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	2b10      	cmp	r3, #16
 8003566:	d108      	bne.n	800357a <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	68ba      	ldr	r2, [r7, #8]
 8003576:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003578:	e007      	b.n	800358a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68ba      	ldr	r2, [r7, #8]
 8003580:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	60da      	str	r2, [r3, #12]
}
 800358a:	bf00      	nop
 800358c:	3714      	adds	r7, #20
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
	...

08003598 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	461a      	mov	r2, r3
 80035a6:	4b09      	ldr	r3, [pc, #36]	; (80035cc <DMA_CalcBaseAndBitshift+0x34>)
 80035a8:	4413      	add	r3, r2
 80035aa:	4a09      	ldr	r2, [pc, #36]	; (80035d0 <DMA_CalcBaseAndBitshift+0x38>)
 80035ac:	fba2 2303 	umull	r2, r3, r2, r3
 80035b0:	091b      	lsrs	r3, r3, #4
 80035b2:	009a      	lsls	r2, r3, #2
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a06      	ldr	r2, [pc, #24]	; (80035d4 <DMA_CalcBaseAndBitshift+0x3c>)
 80035bc:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80035be:	bf00      	nop
 80035c0:	370c      	adds	r7, #12
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	bffdfff8 	.word	0xbffdfff8
 80035d0:	cccccccd 	.word	0xcccccccd
 80035d4:	40020000 	.word	0x40020000

080035d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035d8:	b480      	push	{r7}
 80035da:	b087      	sub	sp, #28
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035e2:	2300      	movs	r3, #0
 80035e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035e6:	e14e      	b.n	8003886 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	2101      	movs	r1, #1
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	fa01 f303 	lsl.w	r3, r1, r3
 80035f4:	4013      	ands	r3, r2
 80035f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f000 8140 	beq.w	8003880 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f003 0303 	and.w	r3, r3, #3
 8003608:	2b01      	cmp	r3, #1
 800360a:	d005      	beq.n	8003618 <HAL_GPIO_Init+0x40>
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f003 0303 	and.w	r3, r3, #3
 8003614:	2b02      	cmp	r3, #2
 8003616:	d130      	bne.n	800367a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	005b      	lsls	r3, r3, #1
 8003622:	2203      	movs	r2, #3
 8003624:	fa02 f303 	lsl.w	r3, r2, r3
 8003628:	43db      	mvns	r3, r3
 800362a:	693a      	ldr	r2, [r7, #16]
 800362c:	4013      	ands	r3, r2
 800362e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	68da      	ldr	r2, [r3, #12]
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	005b      	lsls	r3, r3, #1
 8003638:	fa02 f303 	lsl.w	r3, r2, r3
 800363c:	693a      	ldr	r2, [r7, #16]
 800363e:	4313      	orrs	r3, r2
 8003640:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	693a      	ldr	r2, [r7, #16]
 8003646:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800364e:	2201      	movs	r2, #1
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	fa02 f303 	lsl.w	r3, r2, r3
 8003656:	43db      	mvns	r3, r3
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	4013      	ands	r3, r2
 800365c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	091b      	lsrs	r3, r3, #4
 8003664:	f003 0201 	and.w	r2, r3, #1
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	fa02 f303 	lsl.w	r3, r2, r3
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	4313      	orrs	r3, r2
 8003672:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f003 0303 	and.w	r3, r3, #3
 8003682:	2b03      	cmp	r3, #3
 8003684:	d017      	beq.n	80036b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	2203      	movs	r2, #3
 8003692:	fa02 f303 	lsl.w	r3, r2, r3
 8003696:	43db      	mvns	r3, r3
 8003698:	693a      	ldr	r2, [r7, #16]
 800369a:	4013      	ands	r3, r2
 800369c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	689a      	ldr	r2, [r3, #8]
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	005b      	lsls	r3, r3, #1
 80036a6:	fa02 f303 	lsl.w	r3, r2, r3
 80036aa:	693a      	ldr	r2, [r7, #16]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	693a      	ldr	r2, [r7, #16]
 80036b4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f003 0303 	and.w	r3, r3, #3
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d123      	bne.n	800370a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	08da      	lsrs	r2, r3, #3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	3208      	adds	r2, #8
 80036ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	f003 0307 	and.w	r3, r3, #7
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	220f      	movs	r2, #15
 80036da:	fa02 f303 	lsl.w	r3, r2, r3
 80036de:	43db      	mvns	r3, r3
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	4013      	ands	r3, r2
 80036e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	691a      	ldr	r2, [r3, #16]
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	f003 0307 	and.w	r3, r3, #7
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	fa02 f303 	lsl.w	r3, r2, r3
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	08da      	lsrs	r2, r3, #3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	3208      	adds	r2, #8
 8003704:	6939      	ldr	r1, [r7, #16]
 8003706:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	005b      	lsls	r3, r3, #1
 8003714:	2203      	movs	r2, #3
 8003716:	fa02 f303 	lsl.w	r3, r2, r3
 800371a:	43db      	mvns	r3, r3
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	4013      	ands	r3, r2
 8003720:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f003 0203 	and.w	r2, r3, #3
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	fa02 f303 	lsl.w	r3, r2, r3
 8003732:	693a      	ldr	r2, [r7, #16]
 8003734:	4313      	orrs	r3, r2
 8003736:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	693a      	ldr	r2, [r7, #16]
 800373c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003746:	2b00      	cmp	r3, #0
 8003748:	f000 809a 	beq.w	8003880 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800374c:	4b55      	ldr	r3, [pc, #340]	; (80038a4 <HAL_GPIO_Init+0x2cc>)
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	4a54      	ldr	r2, [pc, #336]	; (80038a4 <HAL_GPIO_Init+0x2cc>)
 8003752:	f043 0301 	orr.w	r3, r3, #1
 8003756:	6193      	str	r3, [r2, #24]
 8003758:	4b52      	ldr	r3, [pc, #328]	; (80038a4 <HAL_GPIO_Init+0x2cc>)
 800375a:	699b      	ldr	r3, [r3, #24]
 800375c:	f003 0301 	and.w	r3, r3, #1
 8003760:	60bb      	str	r3, [r7, #8]
 8003762:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003764:	4a50      	ldr	r2, [pc, #320]	; (80038a8 <HAL_GPIO_Init+0x2d0>)
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	089b      	lsrs	r3, r3, #2
 800376a:	3302      	adds	r3, #2
 800376c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003770:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	f003 0303 	and.w	r3, r3, #3
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	220f      	movs	r2, #15
 800377c:	fa02 f303 	lsl.w	r3, r2, r3
 8003780:	43db      	mvns	r3, r3
 8003782:	693a      	ldr	r2, [r7, #16]
 8003784:	4013      	ands	r3, r2
 8003786:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800378e:	d013      	beq.n	80037b8 <HAL_GPIO_Init+0x1e0>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4a46      	ldr	r2, [pc, #280]	; (80038ac <HAL_GPIO_Init+0x2d4>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d00d      	beq.n	80037b4 <HAL_GPIO_Init+0x1dc>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	4a45      	ldr	r2, [pc, #276]	; (80038b0 <HAL_GPIO_Init+0x2d8>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d007      	beq.n	80037b0 <HAL_GPIO_Init+0x1d8>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a44      	ldr	r2, [pc, #272]	; (80038b4 <HAL_GPIO_Init+0x2dc>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d101      	bne.n	80037ac <HAL_GPIO_Init+0x1d4>
 80037a8:	2303      	movs	r3, #3
 80037aa:	e006      	b.n	80037ba <HAL_GPIO_Init+0x1e2>
 80037ac:	2305      	movs	r3, #5
 80037ae:	e004      	b.n	80037ba <HAL_GPIO_Init+0x1e2>
 80037b0:	2302      	movs	r3, #2
 80037b2:	e002      	b.n	80037ba <HAL_GPIO_Init+0x1e2>
 80037b4:	2301      	movs	r3, #1
 80037b6:	e000      	b.n	80037ba <HAL_GPIO_Init+0x1e2>
 80037b8:	2300      	movs	r3, #0
 80037ba:	697a      	ldr	r2, [r7, #20]
 80037bc:	f002 0203 	and.w	r2, r2, #3
 80037c0:	0092      	lsls	r2, r2, #2
 80037c2:	4093      	lsls	r3, r2
 80037c4:	693a      	ldr	r2, [r7, #16]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80037ca:	4937      	ldr	r1, [pc, #220]	; (80038a8 <HAL_GPIO_Init+0x2d0>)
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	089b      	lsrs	r3, r3, #2
 80037d0:	3302      	adds	r3, #2
 80037d2:	693a      	ldr	r2, [r7, #16]
 80037d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037d8:	4b37      	ldr	r3, [pc, #220]	; (80038b8 <HAL_GPIO_Init+0x2e0>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	43db      	mvns	r3, r3
 80037e2:	693a      	ldr	r2, [r7, #16]
 80037e4:	4013      	ands	r3, r2
 80037e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d003      	beq.n	80037fc <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80037f4:	693a      	ldr	r2, [r7, #16]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80037fc:	4a2e      	ldr	r2, [pc, #184]	; (80038b8 <HAL_GPIO_Init+0x2e0>)
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003802:	4b2d      	ldr	r3, [pc, #180]	; (80038b8 <HAL_GPIO_Init+0x2e0>)
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	43db      	mvns	r3, r3
 800380c:	693a      	ldr	r2, [r7, #16]
 800380e:	4013      	ands	r3, r2
 8003810:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d003      	beq.n	8003826 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800381e:	693a      	ldr	r2, [r7, #16]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	4313      	orrs	r3, r2
 8003824:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003826:	4a24      	ldr	r2, [pc, #144]	; (80038b8 <HAL_GPIO_Init+0x2e0>)
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800382c:	4b22      	ldr	r3, [pc, #136]	; (80038b8 <HAL_GPIO_Init+0x2e0>)
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	43db      	mvns	r3, r3
 8003836:	693a      	ldr	r2, [r7, #16]
 8003838:	4013      	ands	r3, r2
 800383a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d003      	beq.n	8003850 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8003848:	693a      	ldr	r2, [r7, #16]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	4313      	orrs	r3, r2
 800384e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003850:	4a19      	ldr	r2, [pc, #100]	; (80038b8 <HAL_GPIO_Init+0x2e0>)
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003856:	4b18      	ldr	r3, [pc, #96]	; (80038b8 <HAL_GPIO_Init+0x2e0>)
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	43db      	mvns	r3, r3
 8003860:	693a      	ldr	r2, [r7, #16]
 8003862:	4013      	ands	r3, r2
 8003864:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d003      	beq.n	800387a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8003872:	693a      	ldr	r2, [r7, #16]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	4313      	orrs	r3, r2
 8003878:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800387a:	4a0f      	ldr	r2, [pc, #60]	; (80038b8 <HAL_GPIO_Init+0x2e0>)
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	3301      	adds	r3, #1
 8003884:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	fa22 f303 	lsr.w	r3, r2, r3
 8003890:	2b00      	cmp	r3, #0
 8003892:	f47f aea9 	bne.w	80035e8 <HAL_GPIO_Init+0x10>
  }
}
 8003896:	bf00      	nop
 8003898:	bf00      	nop
 800389a:	371c      	adds	r7, #28
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr
 80038a4:	40021000 	.word	0x40021000
 80038a8:	40010000 	.word	0x40010000
 80038ac:	48000400 	.word	0x48000400
 80038b0:	48000800 	.word	0x48000800
 80038b4:	48000c00 	.word	0x48000c00
 80038b8:	40010400 	.word	0x40010400

080038bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	460b      	mov	r3, r1
 80038c6:	807b      	strh	r3, [r7, #2]
 80038c8:	4613      	mov	r3, r2
 80038ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038cc:	787b      	ldrb	r3, [r7, #1]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d003      	beq.n	80038da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80038d2:	887a      	ldrh	r2, [r7, #2]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80038d8:	e002      	b.n	80038e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80038da:	887a      	ldrh	r2, [r7, #2]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80038e0:	bf00      	nop
 80038e2:	370c      	adds	r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d101      	bne.n	80038fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e081      	b.n	8003a02 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b00      	cmp	r3, #0
 8003908:	d106      	bne.n	8003918 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f7fd fa42 	bl	8000d9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2224      	movs	r2, #36	; 0x24
 800391c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f022 0201 	bic.w	r2, r2, #1
 800392e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685a      	ldr	r2, [r3, #4]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800393c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	689a      	ldr	r2, [r3, #8]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800394c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d107      	bne.n	8003966 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	689a      	ldr	r2, [r3, #8]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003962:	609a      	str	r2, [r3, #8]
 8003964:	e006      	b.n	8003974 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	689a      	ldr	r2, [r3, #8]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003972:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	2b02      	cmp	r3, #2
 800397a:	d104      	bne.n	8003986 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003984:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	6812      	ldr	r2, [r2, #0]
 8003990:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003994:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003998:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68da      	ldr	r2, [r3, #12]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	691a      	ldr	r2, [r3, #16]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	695b      	ldr	r3, [r3, #20]
 80039b2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	430a      	orrs	r2, r1
 80039c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	69d9      	ldr	r1, [r3, #28]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a1a      	ldr	r2, [r3, #32]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	430a      	orrs	r2, r1
 80039d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f042 0201 	orr.w	r2, r2, #1
 80039e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2220      	movs	r2, #32
 80039ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3708      	adds	r7, #8
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b084      	sub	sp, #16
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	699b      	ldr	r3, [r3, #24]
 8003a18:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d005      	beq.n	8003a36 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a2e:	68ba      	ldr	r2, [r7, #8]
 8003a30:	68f9      	ldr	r1, [r7, #12]
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	4798      	blx	r3
  }
}
 8003a36:	bf00      	nop
 8003a38:	3710      	adds	r7, #16
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b086      	sub	sp, #24
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	699b      	ldr	r3, [r3, #24]
 8003a4c:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	0a1b      	lsrs	r3, r3, #8
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d010      	beq.n	8003a84 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	09db      	lsrs	r3, r3, #7
 8003a66:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00a      	beq.n	8003a84 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a72:	f043 0201 	orr.w	r2, r3, #1
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a82:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	0a9b      	lsrs	r3, r3, #10
 8003a88:	f003 0301 	and.w	r3, r3, #1
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d010      	beq.n	8003ab2 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	09db      	lsrs	r3, r3, #7
 8003a94:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00a      	beq.n	8003ab2 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa0:	f043 0208 	orr.w	r2, r3, #8
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ab0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	0a5b      	lsrs	r3, r3, #9
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d010      	beq.n	8003ae0 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	09db      	lsrs	r3, r3, #7
 8003ac2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00a      	beq.n	8003ae0 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ace:	f043 0202 	orr.w	r2, r3, #2
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ade:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae4:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f003 030b 	and.w	r3, r3, #11
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d003      	beq.n	8003af8 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8003af0:	68f9      	ldr	r1, [r7, #12]
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 fb8a 	bl	800420c <I2C_ITError>
  }
}
 8003af8:	bf00      	nop
 8003afa:	3718      	adds	r7, #24
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003b08:	bf00      	nop
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003b1c:	bf00      	nop
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	460b      	mov	r3, r1
 8003b32:	70fb      	strb	r3, [r7, #3]
 8003b34:	4613      	mov	r3, r2
 8003b36:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003b38:	bf00      	nop
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003b4c:	bf00      	nop
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003b60:	bf00      	nop
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b90:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d101      	bne.n	8003ba4 <I2C_Slave_ISR_IT+0x24>
 8003ba0:	2302      	movs	r3, #2
 8003ba2:	e0ec      	b.n	8003d7e <I2C_Slave_ISR_IT+0x1fe>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	095b      	lsrs	r3, r3, #5
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d009      	beq.n	8003bcc <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	095b      	lsrs	r3, r3, #5
 8003bbc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d003      	beq.n	8003bcc <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003bc4:	6939      	ldr	r1, [r7, #16]
 8003bc6:	68f8      	ldr	r0, [r7, #12]
 8003bc8:	f000 f9c0 	bl	8003f4c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	091b      	lsrs	r3, r3, #4
 8003bd0:	f003 0301 	and.w	r3, r3, #1
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d04d      	beq.n	8003c74 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	091b      	lsrs	r3, r3, #4
 8003bdc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d047      	beq.n	8003c74 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d128      	bne.n	8003c40 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b28      	cmp	r3, #40	; 0x28
 8003bf8:	d108      	bne.n	8003c0c <I2C_Slave_ISR_IT+0x8c>
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c00:	d104      	bne.n	8003c0c <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003c02:	6939      	ldr	r1, [r7, #16]
 8003c04:	68f8      	ldr	r0, [r7, #12]
 8003c06:	f000 faab 	bl	8004160 <I2C_ITListenCplt>
 8003c0a:	e032      	b.n	8003c72 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	2b29      	cmp	r3, #41	; 0x29
 8003c16:	d10e      	bne.n	8003c36 <I2C_Slave_ISR_IT+0xb6>
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c1e:	d00a      	beq.n	8003c36 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2210      	movs	r2, #16
 8003c26:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003c28:	68f8      	ldr	r0, [r7, #12]
 8003c2a:	f000 fbe6 	bl	80043fa <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	f000 f92d 	bl	8003e8e <I2C_ITSlaveSeqCplt>
 8003c34:	e01d      	b.n	8003c72 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2210      	movs	r2, #16
 8003c3c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003c3e:	e096      	b.n	8003d6e <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2210      	movs	r2, #16
 8003c46:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c4c:	f043 0204 	orr.w	r2, r3, #4
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d004      	beq.n	8003c64 <I2C_Slave_ISR_IT+0xe4>
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c60:	f040 8085 	bne.w	8003d6e <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c68:	4619      	mov	r1, r3
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f000 face 	bl	800420c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003c70:	e07d      	b.n	8003d6e <I2C_Slave_ISR_IT+0x1ee>
 8003c72:	e07c      	b.n	8003d6e <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	089b      	lsrs	r3, r3, #2
 8003c78:	f003 0301 	and.w	r3, r3, #1
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d030      	beq.n	8003ce2 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	089b      	lsrs	r3, r3, #2
 8003c84:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d02a      	beq.n	8003ce2 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d018      	beq.n	8003cc8 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca0:	b2d2      	uxtb	r2, r2
 8003ca2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca8:	1c5a      	adds	r2, r3, #1
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	b29a      	uxth	r2, r3
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	b29a      	uxth	r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d14f      	bne.n	8003d72 <I2C_Slave_ISR_IT+0x1f2>
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003cd8:	d04b      	beq.n	8003d72 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	f000 f8d7 	bl	8003e8e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003ce0:	e047      	b.n	8003d72 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	08db      	lsrs	r3, r3, #3
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00a      	beq.n	8003d04 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	08db      	lsrs	r3, r3, #3
 8003cf2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d004      	beq.n	8003d04 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003cfa:	6939      	ldr	r1, [r7, #16]
 8003cfc:	68f8      	ldr	r0, [r7, #12]
 8003cfe:	f000 f842 	bl	8003d86 <I2C_ITAddrCplt>
 8003d02:	e037      	b.n	8003d74 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	085b      	lsrs	r3, r3, #1
 8003d08:	f003 0301 	and.w	r3, r3, #1
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d031      	beq.n	8003d74 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	085b      	lsrs	r3, r3, #1
 8003d14:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d02b      	beq.n	8003d74 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d018      	beq.n	8003d58 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2a:	781a      	ldrb	r2, [r3, #0]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d36:	1c5a      	adds	r2, r3, #1
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	3b01      	subs	r3, #1
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	851a      	strh	r2, [r3, #40]	; 0x28
 8003d56:	e00d      	b.n	8003d74 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d5e:	d002      	beq.n	8003d66 <I2C_Slave_ISR_IT+0x1e6>
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d106      	bne.n	8003d74 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003d66:	68f8      	ldr	r0, [r7, #12]
 8003d68:	f000 f891 	bl	8003e8e <I2C_ITSlaveSeqCplt>
 8003d6c:	e002      	b.n	8003d74 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8003d6e:	bf00      	nop
 8003d70:	e000      	b.n	8003d74 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8003d72:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3718      	adds	r7, #24
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}

08003d86 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003d86:	b580      	push	{r7, lr}
 8003d88:	b084      	sub	sp, #16
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
 8003d8e:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003d9c:	2b28      	cmp	r3, #40	; 0x28
 8003d9e:	d16a      	bne.n	8003e76 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	0c1b      	lsrs	r3, r3, #16
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	0c1b      	lsrs	r3, r3, #16
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003dbe:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003dcc:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003dda:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d138      	bne.n	8003e56 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003de4:	897b      	ldrh	r3, [r7, #10]
 8003de6:	09db      	lsrs	r3, r3, #7
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	89bb      	ldrh	r3, [r7, #12]
 8003dec:	4053      	eors	r3, r2
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	f003 0306 	and.w	r3, r3, #6
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d11c      	bne.n	8003e32 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003df8:	897b      	ldrh	r3, [r7, #10]
 8003dfa:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e00:	1c5a      	adds	r2, r3, #1
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d13b      	bne.n	8003e86 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2208      	movs	r2, #8
 8003e1a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003e24:	89ba      	ldrh	r2, [r7, #12]
 8003e26:	7bfb      	ldrb	r3, [r7, #15]
 8003e28:	4619      	mov	r1, r3
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f7ff fe7c 	bl	8003b28 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003e30:	e029      	b.n	8003e86 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003e32:	893b      	ldrh	r3, [r7, #8]
 8003e34:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003e36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 fb1f 	bl	800447e <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003e48:	89ba      	ldrh	r2, [r7, #12]
 8003e4a:	7bfb      	ldrb	r3, [r7, #15]
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f7ff fe6a 	bl	8003b28 <HAL_I2C_AddrCallback>
}
 8003e54:	e017      	b.n	8003e86 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003e56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 fb0f 	bl	800447e <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003e68:	89ba      	ldrh	r2, [r7, #12]
 8003e6a:	7bfb      	ldrb	r3, [r7, #15]
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f7ff fe5a 	bl	8003b28 <HAL_I2C_AddrCallback>
}
 8003e74:	e007      	b.n	8003e86 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2208      	movs	r2, #8
 8003e7c:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003e86:	bf00      	nop
 8003e88:	3710      	adds	r7, #16
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b084      	sub	sp, #16
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	0b9b      	lsrs	r3, r3, #14
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d008      	beq.n	8003ec4 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003ec0:	601a      	str	r2, [r3, #0]
 8003ec2:	e00d      	b.n	8003ee0 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	0bdb      	lsrs	r3, r3, #15
 8003ec8:	f003 0301 	and.w	r3, r3, #1
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d007      	beq.n	8003ee0 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ede:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	2b29      	cmp	r3, #41	; 0x29
 8003eea:	d112      	bne.n	8003f12 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2228      	movs	r2, #40	; 0x28
 8003ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2221      	movs	r2, #33	; 0x21
 8003ef8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003efa:	2101      	movs	r1, #1
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f000 fabe 	bl	800447e <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f7ff fdf8 	bl	8003b00 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003f10:	e017      	b.n	8003f42 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b2a      	cmp	r3, #42	; 0x2a
 8003f1c:	d111      	bne.n	8003f42 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2228      	movs	r2, #40	; 0x28
 8003f22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2222      	movs	r2, #34	; 0x22
 8003f2a:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003f2c:	2102      	movs	r1, #2
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 faa5 	bl	800447e <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f7ff fde9 	bl	8003b14 <HAL_I2C_SlaveRxCpltCallback>
}
 8003f42:	bf00      	nop
 8003f44:	3710      	adds	r7, #16
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
	...

08003f4c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b086      	sub	sp, #24
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f68:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2220      	movs	r2, #32
 8003f70:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003f72:	7bfb      	ldrb	r3, [r7, #15]
 8003f74:	2b21      	cmp	r3, #33	; 0x21
 8003f76:	d002      	beq.n	8003f7e <I2C_ITSlaveCplt+0x32>
 8003f78:	7bfb      	ldrb	r3, [r7, #15]
 8003f7a:	2b29      	cmp	r3, #41	; 0x29
 8003f7c:	d108      	bne.n	8003f90 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003f7e:	f248 0101 	movw	r1, #32769	; 0x8001
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 fa7b 	bl	800447e <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2221      	movs	r2, #33	; 0x21
 8003f8c:	631a      	str	r2, [r3, #48]	; 0x30
 8003f8e:	e00d      	b.n	8003fac <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003f90:	7bfb      	ldrb	r3, [r7, #15]
 8003f92:	2b22      	cmp	r3, #34	; 0x22
 8003f94:	d002      	beq.n	8003f9c <I2C_ITSlaveCplt+0x50>
 8003f96:	7bfb      	ldrb	r3, [r7, #15]
 8003f98:	2b2a      	cmp	r3, #42	; 0x2a
 8003f9a:	d107      	bne.n	8003fac <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003f9c:	f248 0102 	movw	r1, #32770	; 0x8002
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f000 fa6c 	bl	800447e <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2222      	movs	r2, #34	; 0x22
 8003faa:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	685a      	ldr	r2, [r3, #4]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fba:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	6859      	ldr	r1, [r3, #4]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	4b64      	ldr	r3, [pc, #400]	; (8004158 <I2C_ITSlaveCplt+0x20c>)
 8003fc8:	400b      	ands	r3, r1
 8003fca:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f000 fa14 	bl	80043fa <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	0b9b      	lsrs	r3, r3, #14
 8003fd6:	f003 0301 	and.w	r3, r3, #1
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d013      	beq.n	8004006 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003fec:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d020      	beq.n	8004038 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	b29a      	uxth	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004004:	e018      	b.n	8004038 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	0bdb      	lsrs	r3, r3, #15
 800400a:	f003 0301 	and.w	r3, r3, #1
 800400e:	2b00      	cmp	r3, #0
 8004010:	d012      	beq.n	8004038 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004020:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004026:	2b00      	cmp	r3, #0
 8004028:	d006      	beq.n	8004038 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	b29a      	uxth	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	089b      	lsrs	r3, r3, #2
 800403c:	f003 0301 	and.w	r3, r3, #1
 8004040:	2b00      	cmp	r3, #0
 8004042:	d020      	beq.n	8004086 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	f023 0304 	bic.w	r3, r3, #4
 800404a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004056:	b2d2      	uxtb	r2, r2
 8004058:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405e:	1c5a      	adds	r2, r3, #1
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00c      	beq.n	8004086 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004070:	3b01      	subs	r3, #1
 8004072:	b29a      	uxth	r2, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800407c:	b29b      	uxth	r3, r3
 800407e:	3b01      	subs	r3, #1
 8004080:	b29a      	uxth	r2, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800408a:	b29b      	uxth	r3, r3
 800408c:	2b00      	cmp	r3, #0
 800408e:	d005      	beq.n	800409c <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004094:	f043 0204 	orr.w	r2, r3, #4
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d010      	beq.n	80040d4 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b6:	4619      	mov	r1, r3
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f000 f8a7 	bl	800420c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b28      	cmp	r3, #40	; 0x28
 80040c8:	d141      	bne.n	800414e <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80040ca:	6979      	ldr	r1, [r7, #20]
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 f847 	bl	8004160 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80040d2:	e03c      	b.n	800414e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80040dc:	d014      	beq.n	8004108 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f7ff fed5 	bl	8003e8e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a1d      	ldr	r2, [pc, #116]	; (800415c <I2C_ITSlaveCplt+0x210>)
 80040e8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2220      	movs	r2, #32
 80040ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f7ff fd1f 	bl	8003b44 <HAL_I2C_ListenCpltCallback>
}
 8004106:	e022      	b.n	800414e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800410e:	b2db      	uxtb	r3, r3
 8004110:	2b22      	cmp	r3, #34	; 0x22
 8004112:	d10e      	bne.n	8004132 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2220      	movs	r2, #32
 8004118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f7ff fcf2 	bl	8003b14 <HAL_I2C_SlaveRxCpltCallback>
}
 8004130:	e00d      	b.n	800414e <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2220      	movs	r2, #32
 8004136:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f7ff fcd9 	bl	8003b00 <HAL_I2C_SlaveTxCpltCallback>
}
 800414e:	bf00      	nop
 8004150:	3718      	adds	r7, #24
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	fe00e800 	.word	0xfe00e800
 800415c:	ffff0000 	.word	0xffff0000

08004160 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a26      	ldr	r2, [pc, #152]	; (8004208 <I2C_ITListenCplt+0xa8>)
 800416e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2220      	movs	r2, #32
 800417a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	089b      	lsrs	r3, r3, #2
 8004190:	f003 0301 	and.w	r3, r3, #1
 8004194:	2b00      	cmp	r3, #0
 8004196:	d022      	beq.n	80041de <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a2:	b2d2      	uxtb	r2, r2
 80041a4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041aa:	1c5a      	adds	r2, r3, #1
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d012      	beq.n	80041de <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041bc:	3b01      	subs	r3, #1
 80041be:	b29a      	uxth	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	3b01      	subs	r3, #1
 80041cc:	b29a      	uxth	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041d6:	f043 0204 	orr.w	r2, r3, #4
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80041de:	f248 0103 	movw	r1, #32771	; 0x8003
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 f94b 	bl	800447e <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2210      	movs	r2, #16
 80041ee:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f7ff fca3 	bl	8003b44 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80041fe:	bf00      	nop
 8004200:	3708      	adds	r7, #8
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	ffff0000 	.word	0xffff0000

0800420c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800421c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a5d      	ldr	r2, [pc, #372]	; (80043a0 <I2C_ITError+0x194>)
 800422a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	431a      	orrs	r2, r3
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800423e:	7bfb      	ldrb	r3, [r7, #15]
 8004240:	2b28      	cmp	r3, #40	; 0x28
 8004242:	d005      	beq.n	8004250 <I2C_ITError+0x44>
 8004244:	7bfb      	ldrb	r3, [r7, #15]
 8004246:	2b29      	cmp	r3, #41	; 0x29
 8004248:	d002      	beq.n	8004250 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800424a:	7bfb      	ldrb	r3, [r7, #15]
 800424c:	2b2a      	cmp	r3, #42	; 0x2a
 800424e:	d10b      	bne.n	8004268 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004250:	2103      	movs	r1, #3
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 f913 	bl	800447e <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2228      	movs	r2, #40	; 0x28
 800425c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a50      	ldr	r2, [pc, #320]	; (80043a4 <I2C_ITError+0x198>)
 8004264:	635a      	str	r2, [r3, #52]	; 0x34
 8004266:	e011      	b.n	800428c <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004268:	f248 0103 	movw	r1, #32771	; 0x8003
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 f906 	bl	800447e <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004278:	b2db      	uxtb	r3, r3
 800427a:	2b60      	cmp	r3, #96	; 0x60
 800427c:	d003      	beq.n	8004286 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2220      	movs	r2, #32
 8004282:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004290:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004296:	2b00      	cmp	r3, #0
 8004298:	d039      	beq.n	800430e <I2C_ITError+0x102>
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	2b11      	cmp	r3, #17
 800429e:	d002      	beq.n	80042a6 <I2C_ITError+0x9a>
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	2b21      	cmp	r3, #33	; 0x21
 80042a4:	d133      	bne.n	800430e <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042b4:	d107      	bne.n	80042c6 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80042c4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7ff f928 	bl	8003520 <HAL_DMA_GetState>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d017      	beq.n	8004306 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042da:	4a33      	ldr	r2, [pc, #204]	; (80043a8 <I2C_ITError+0x19c>)
 80042dc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7ff f837 	bl	800335e <HAL_DMA_Abort_IT>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d04d      	beq.n	8004392 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004300:	4610      	mov	r0, r2
 8004302:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004304:	e045      	b.n	8004392 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 f850 	bl	80043ac <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800430c:	e041      	b.n	8004392 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004312:	2b00      	cmp	r3, #0
 8004314:	d039      	beq.n	800438a <I2C_ITError+0x17e>
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	2b12      	cmp	r3, #18
 800431a:	d002      	beq.n	8004322 <I2C_ITError+0x116>
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	2b22      	cmp	r3, #34	; 0x22
 8004320:	d133      	bne.n	800438a <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800432c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004330:	d107      	bne.n	8004342 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004340:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004346:	4618      	mov	r0, r3
 8004348:	f7ff f8ea 	bl	8003520 <HAL_DMA_GetState>
 800434c:	4603      	mov	r3, r0
 800434e:	2b01      	cmp	r3, #1
 8004350:	d017      	beq.n	8004382 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004356:	4a14      	ldr	r2, [pc, #80]	; (80043a8 <I2C_ITError+0x19c>)
 8004358:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004366:	4618      	mov	r0, r3
 8004368:	f7fe fff9 	bl	800335e <HAL_DMA_Abort_IT>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d011      	beq.n	8004396 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800437c:	4610      	mov	r0, r2
 800437e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004380:	e009      	b.n	8004396 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 f812 	bl	80043ac <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004388:	e005      	b.n	8004396 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 f80e 	bl	80043ac <I2C_TreatErrorCallback>
  }
}
 8004390:	e002      	b.n	8004398 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004392:	bf00      	nop
 8004394:	e000      	b.n	8004398 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004396:	bf00      	nop
}
 8004398:	bf00      	nop
 800439a:	3710      	adds	r7, #16
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	ffff0000 	.word	0xffff0000
 80043a4:	08003b81 	.word	0x08003b81
 80043a8:	08004443 	.word	0x08004443

080043ac <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	2b60      	cmp	r3, #96	; 0x60
 80043be:	d10e      	bne.n	80043de <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2220      	movs	r2, #32
 80043c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f7ff fbc8 	bl	8003b6c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80043dc:	e009      	b.n	80043f2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f7ff fbb3 	bl	8003b58 <HAL_I2C_ErrorCallback>
}
 80043f2:	bf00      	nop
 80043f4:	3708      	adds	r7, #8
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}

080043fa <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80043fa:	b480      	push	{r7}
 80043fc:	b083      	sub	sp, #12
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	699b      	ldr	r3, [r3, #24]
 8004408:	f003 0302 	and.w	r3, r3, #2
 800440c:	2b02      	cmp	r3, #2
 800440e:	d103      	bne.n	8004418 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2200      	movs	r2, #0
 8004416:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	699b      	ldr	r3, [r3, #24]
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	2b01      	cmp	r3, #1
 8004424:	d007      	beq.n	8004436 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	699a      	ldr	r2, [r3, #24]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f042 0201 	orr.w	r2, r2, #1
 8004434:	619a      	str	r2, [r3, #24]
  }
}
 8004436:	bf00      	nop
 8004438:	370c      	adds	r7, #12
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr

08004442 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004442:	b580      	push	{r7, lr}
 8004444:	b084      	sub	sp, #16
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004454:	2b00      	cmp	r3, #0
 8004456:	d003      	beq.n	8004460 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800445c:	2200      	movs	r2, #0
 800445e:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004464:	2b00      	cmp	r3, #0
 8004466:	d003      	beq.n	8004470 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800446c:	2200      	movs	r2, #0
 800446e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 8004470:	68f8      	ldr	r0, [r7, #12]
 8004472:	f7ff ff9b 	bl	80043ac <I2C_TreatErrorCallback>
}
 8004476:	bf00      	nop
 8004478:	3710      	adds	r7, #16
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}

0800447e <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800447e:	b480      	push	{r7}
 8004480:	b085      	sub	sp, #20
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
 8004486:	460b      	mov	r3, r1
 8004488:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800448a:	2300      	movs	r3, #0
 800448c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800448e:	887b      	ldrh	r3, [r7, #2]
 8004490:	f003 0301 	and.w	r3, r3, #1
 8004494:	2b00      	cmp	r3, #0
 8004496:	d00f      	beq.n	80044b8 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800449e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80044ac:	2b28      	cmp	r3, #40	; 0x28
 80044ae:	d003      	beq.n	80044b8 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80044b6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80044b8:	887b      	ldrh	r3, [r7, #2]
 80044ba:	f003 0302 	and.w	r3, r3, #2
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00f      	beq.n	80044e2 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80044c8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80044d6:	2b28      	cmp	r3, #40	; 0x28
 80044d8:	d003      	beq.n	80044e2 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80044e0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80044e2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	da03      	bge.n	80044f2 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80044f0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80044f2:	887b      	ldrh	r3, [r7, #2]
 80044f4:	2b10      	cmp	r3, #16
 80044f6:	d103      	bne.n	8004500 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80044fe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004500:	887b      	ldrh	r3, [r7, #2]
 8004502:	2b20      	cmp	r3, #32
 8004504:	d103      	bne.n	800450e <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f043 0320 	orr.w	r3, r3, #32
 800450c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800450e:	887b      	ldrh	r3, [r7, #2]
 8004510:	2b40      	cmp	r3, #64	; 0x40
 8004512:	d103      	bne.n	800451c <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800451a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	6819      	ldr	r1, [r3, #0]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	43da      	mvns	r2, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	400a      	ands	r2, r1
 800452c:	601a      	str	r2, [r3, #0]
}
 800452e:	bf00      	nop
 8004530:	3714      	adds	r7, #20
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr

0800453a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800453a:	b480      	push	{r7}
 800453c:	b083      	sub	sp, #12
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
 8004542:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800454a:	b2db      	uxtb	r3, r3
 800454c:	2b20      	cmp	r3, #32
 800454e:	d138      	bne.n	80045c2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004556:	2b01      	cmp	r3, #1
 8004558:	d101      	bne.n	800455e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800455a:	2302      	movs	r3, #2
 800455c:	e032      	b.n	80045c4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2201      	movs	r2, #1
 8004562:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2224      	movs	r2, #36	; 0x24
 800456a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f022 0201 	bic.w	r2, r2, #1
 800457c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800458c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	6819      	ldr	r1, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	683a      	ldr	r2, [r7, #0]
 800459a:	430a      	orrs	r2, r1
 800459c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f042 0201 	orr.w	r2, r2, #1
 80045ac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2220      	movs	r2, #32
 80045b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80045be:	2300      	movs	r3, #0
 80045c0:	e000      	b.n	80045c4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80045c2:	2302      	movs	r3, #2
  }
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b085      	sub	sp, #20
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	2b20      	cmp	r3, #32
 80045e4:	d139      	bne.n	800465a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d101      	bne.n	80045f4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80045f0:	2302      	movs	r3, #2
 80045f2:	e033      	b.n	800465c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2224      	movs	r2, #36	; 0x24
 8004600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f022 0201 	bic.w	r2, r2, #1
 8004612:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004622:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	021b      	lsls	r3, r3, #8
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	4313      	orrs	r3, r2
 800462c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f042 0201 	orr.w	r2, r2, #1
 8004644:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2220      	movs	r2, #32
 800464a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004656:	2300      	movs	r3, #0
 8004658:	e000      	b.n	800465c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800465a:	2302      	movs	r3, #2
  }
}
 800465c:	4618      	mov	r0, r3
 800465e:	3714      	adds	r7, #20
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800466e:	af00      	add	r7, sp, #0
 8004670:	1d3b      	adds	r3, r7, #4
 8004672:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004674:	1d3b      	adds	r3, r7, #4
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d102      	bne.n	8004682 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	f000 bef4 	b.w	800546a <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004682:	1d3b      	adds	r3, r7, #4
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0301 	and.w	r3, r3, #1
 800468c:	2b00      	cmp	r3, #0
 800468e:	f000 816a 	beq.w	8004966 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004692:	4bb3      	ldr	r3, [pc, #716]	; (8004960 <HAL_RCC_OscConfig+0x2f8>)
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	f003 030c 	and.w	r3, r3, #12
 800469a:	2b04      	cmp	r3, #4
 800469c:	d00c      	beq.n	80046b8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800469e:	4bb0      	ldr	r3, [pc, #704]	; (8004960 <HAL_RCC_OscConfig+0x2f8>)
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	f003 030c 	and.w	r3, r3, #12
 80046a6:	2b08      	cmp	r3, #8
 80046a8:	d159      	bne.n	800475e <HAL_RCC_OscConfig+0xf6>
 80046aa:	4bad      	ldr	r3, [pc, #692]	; (8004960 <HAL_RCC_OscConfig+0x2f8>)
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046b6:	d152      	bne.n	800475e <HAL_RCC_OscConfig+0xf6>
 80046b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80046bc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80046c4:	fa93 f3a3 	rbit	r3, r3
 80046c8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80046cc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046d0:	fab3 f383 	clz	r3, r3
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	095b      	lsrs	r3, r3, #5
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	f043 0301 	orr.w	r3, r3, #1
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d102      	bne.n	80046ea <HAL_RCC_OscConfig+0x82>
 80046e4:	4b9e      	ldr	r3, [pc, #632]	; (8004960 <HAL_RCC_OscConfig+0x2f8>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	e015      	b.n	8004716 <HAL_RCC_OscConfig+0xae>
 80046ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80046ee:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046f2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80046f6:	fa93 f3a3 	rbit	r3, r3
 80046fa:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80046fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004702:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004706:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800470a:	fa93 f3a3 	rbit	r3, r3
 800470e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004712:	4b93      	ldr	r3, [pc, #588]	; (8004960 <HAL_RCC_OscConfig+0x2f8>)
 8004714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004716:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800471a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800471e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004722:	fa92 f2a2 	rbit	r2, r2
 8004726:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800472a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800472e:	fab2 f282 	clz	r2, r2
 8004732:	b2d2      	uxtb	r2, r2
 8004734:	f042 0220 	orr.w	r2, r2, #32
 8004738:	b2d2      	uxtb	r2, r2
 800473a:	f002 021f 	and.w	r2, r2, #31
 800473e:	2101      	movs	r1, #1
 8004740:	fa01 f202 	lsl.w	r2, r1, r2
 8004744:	4013      	ands	r3, r2
 8004746:	2b00      	cmp	r3, #0
 8004748:	f000 810c 	beq.w	8004964 <HAL_RCC_OscConfig+0x2fc>
 800474c:	1d3b      	adds	r3, r7, #4
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	2b00      	cmp	r3, #0
 8004754:	f040 8106 	bne.w	8004964 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	f000 be86 	b.w	800546a <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800475e:	1d3b      	adds	r3, r7, #4
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004768:	d106      	bne.n	8004778 <HAL_RCC_OscConfig+0x110>
 800476a:	4b7d      	ldr	r3, [pc, #500]	; (8004960 <HAL_RCC_OscConfig+0x2f8>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a7c      	ldr	r2, [pc, #496]	; (8004960 <HAL_RCC_OscConfig+0x2f8>)
 8004770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004774:	6013      	str	r3, [r2, #0]
 8004776:	e030      	b.n	80047da <HAL_RCC_OscConfig+0x172>
 8004778:	1d3b      	adds	r3, r7, #4
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d10c      	bne.n	800479c <HAL_RCC_OscConfig+0x134>
 8004782:	4b77      	ldr	r3, [pc, #476]	; (8004960 <HAL_RCC_OscConfig+0x2f8>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a76      	ldr	r2, [pc, #472]	; (8004960 <HAL_RCC_OscConfig+0x2f8>)
 8004788:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800478c:	6013      	str	r3, [r2, #0]
 800478e:	4b74      	ldr	r3, [pc, #464]	; (8004960 <HAL_RCC_OscConfig+0x2f8>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a73      	ldr	r2, [pc, #460]	; (8004960 <HAL_RCC_OscConfig+0x2f8>)
 8004794:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004798:	6013      	str	r3, [r2, #0]
 800479a:	e01e      	b.n	80047da <HAL_RCC_OscConfig+0x172>
 800479c:	1d3b      	adds	r3, r7, #4
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047a6:	d10c      	bne.n	80047c2 <HAL_RCC_OscConfig+0x15a>
 80047a8:	4b6d      	ldr	r3, [pc, #436]	; (8004960 <HAL_RCC_OscConfig+0x2f8>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a6c      	ldr	r2, [pc, #432]	; (8004960 <HAL_RCC_OscConfig+0x2f8>)
 80047ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047b2:	6013      	str	r3, [r2, #0]
 80047b4:	4b6a      	ldr	r3, [pc, #424]	; (8004960 <HAL_RCC_OscConfig+0x2f8>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a69      	ldr	r2, [pc, #420]	; (8004960 <HAL_RCC_OscConfig+0x2f8>)
 80047ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047be:	6013      	str	r3, [r2, #0]
 80047c0:	e00b      	b.n	80047da <HAL_RCC_OscConfig+0x172>
 80047c2:	4b67      	ldr	r3, [pc, #412]	; (8004960 <HAL_RCC_OscConfig+0x2f8>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a66      	ldr	r2, [pc, #408]	; (8004960 <HAL_RCC_OscConfig+0x2f8>)
 80047c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047cc:	6013      	str	r3, [r2, #0]
 80047ce:	4b64      	ldr	r3, [pc, #400]	; (8004960 <HAL_RCC_OscConfig+0x2f8>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a63      	ldr	r2, [pc, #396]	; (8004960 <HAL_RCC_OscConfig+0x2f8>)
 80047d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047d8:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80047da:	4b61      	ldr	r3, [pc, #388]	; (8004960 <HAL_RCC_OscConfig+0x2f8>)
 80047dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047de:	f023 020f 	bic.w	r2, r3, #15
 80047e2:	1d3b      	adds	r3, r7, #4
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	495d      	ldr	r1, [pc, #372]	; (8004960 <HAL_RCC_OscConfig+0x2f8>)
 80047ea:	4313      	orrs	r3, r2
 80047ec:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047ee:	1d3b      	adds	r3, r7, #4
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d059      	beq.n	80048ac <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047f8:	f7fd f8bc 	bl	8001974 <HAL_GetTick>
 80047fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004800:	e00a      	b.n	8004818 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004802:	f7fd f8b7 	bl	8001974 <HAL_GetTick>
 8004806:	4602      	mov	r2, r0
 8004808:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	2b64      	cmp	r3, #100	; 0x64
 8004810:	d902      	bls.n	8004818 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	f000 be29 	b.w	800546a <HAL_RCC_OscConfig+0xe02>
 8004818:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800481c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004820:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004824:	fa93 f3a3 	rbit	r3, r3
 8004828:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800482c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004830:	fab3 f383 	clz	r3, r3
 8004834:	b2db      	uxtb	r3, r3
 8004836:	095b      	lsrs	r3, r3, #5
 8004838:	b2db      	uxtb	r3, r3
 800483a:	f043 0301 	orr.w	r3, r3, #1
 800483e:	b2db      	uxtb	r3, r3
 8004840:	2b01      	cmp	r3, #1
 8004842:	d102      	bne.n	800484a <HAL_RCC_OscConfig+0x1e2>
 8004844:	4b46      	ldr	r3, [pc, #280]	; (8004960 <HAL_RCC_OscConfig+0x2f8>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	e015      	b.n	8004876 <HAL_RCC_OscConfig+0x20e>
 800484a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800484e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004852:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004856:	fa93 f3a3 	rbit	r3, r3
 800485a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800485e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004862:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004866:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800486a:	fa93 f3a3 	rbit	r3, r3
 800486e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004872:	4b3b      	ldr	r3, [pc, #236]	; (8004960 <HAL_RCC_OscConfig+0x2f8>)
 8004874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004876:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800487a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800487e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004882:	fa92 f2a2 	rbit	r2, r2
 8004886:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800488a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800488e:	fab2 f282 	clz	r2, r2
 8004892:	b2d2      	uxtb	r2, r2
 8004894:	f042 0220 	orr.w	r2, r2, #32
 8004898:	b2d2      	uxtb	r2, r2
 800489a:	f002 021f 	and.w	r2, r2, #31
 800489e:	2101      	movs	r1, #1
 80048a0:	fa01 f202 	lsl.w	r2, r1, r2
 80048a4:	4013      	ands	r3, r2
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d0ab      	beq.n	8004802 <HAL_RCC_OscConfig+0x19a>
 80048aa:	e05c      	b.n	8004966 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ac:	f7fd f862 	bl	8001974 <HAL_GetTick>
 80048b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048b4:	e00a      	b.n	80048cc <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048b6:	f7fd f85d 	bl	8001974 <HAL_GetTick>
 80048ba:	4602      	mov	r2, r0
 80048bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	2b64      	cmp	r3, #100	; 0x64
 80048c4:	d902      	bls.n	80048cc <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	f000 bdcf 	b.w	800546a <HAL_RCC_OscConfig+0xe02>
 80048cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048d0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048d4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80048d8:	fa93 f3a3 	rbit	r3, r3
 80048dc:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80048e0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048e4:	fab3 f383 	clz	r3, r3
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	095b      	lsrs	r3, r3, #5
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	f043 0301 	orr.w	r3, r3, #1
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d102      	bne.n	80048fe <HAL_RCC_OscConfig+0x296>
 80048f8:	4b19      	ldr	r3, [pc, #100]	; (8004960 <HAL_RCC_OscConfig+0x2f8>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	e015      	b.n	800492a <HAL_RCC_OscConfig+0x2c2>
 80048fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004902:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004906:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800490a:	fa93 f3a3 	rbit	r3, r3
 800490e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004912:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004916:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800491a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800491e:	fa93 f3a3 	rbit	r3, r3
 8004922:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004926:	4b0e      	ldr	r3, [pc, #56]	; (8004960 <HAL_RCC_OscConfig+0x2f8>)
 8004928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800492e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004932:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004936:	fa92 f2a2 	rbit	r2, r2
 800493a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800493e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004942:	fab2 f282 	clz	r2, r2
 8004946:	b2d2      	uxtb	r2, r2
 8004948:	f042 0220 	orr.w	r2, r2, #32
 800494c:	b2d2      	uxtb	r2, r2
 800494e:	f002 021f 	and.w	r2, r2, #31
 8004952:	2101      	movs	r1, #1
 8004954:	fa01 f202 	lsl.w	r2, r1, r2
 8004958:	4013      	ands	r3, r2
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1ab      	bne.n	80048b6 <HAL_RCC_OscConfig+0x24e>
 800495e:	e002      	b.n	8004966 <HAL_RCC_OscConfig+0x2fe>
 8004960:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004964:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004966:	1d3b      	adds	r3, r7, #4
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0302 	and.w	r3, r3, #2
 8004970:	2b00      	cmp	r3, #0
 8004972:	f000 816f 	beq.w	8004c54 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004976:	4bd0      	ldr	r3, [pc, #832]	; (8004cb8 <HAL_RCC_OscConfig+0x650>)
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f003 030c 	and.w	r3, r3, #12
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00b      	beq.n	800499a <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004982:	4bcd      	ldr	r3, [pc, #820]	; (8004cb8 <HAL_RCC_OscConfig+0x650>)
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f003 030c 	and.w	r3, r3, #12
 800498a:	2b08      	cmp	r3, #8
 800498c:	d16c      	bne.n	8004a68 <HAL_RCC_OscConfig+0x400>
 800498e:	4bca      	ldr	r3, [pc, #808]	; (8004cb8 <HAL_RCC_OscConfig+0x650>)
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d166      	bne.n	8004a68 <HAL_RCC_OscConfig+0x400>
 800499a:	2302      	movs	r3, #2
 800499c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049a0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80049a4:	fa93 f3a3 	rbit	r3, r3
 80049a8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80049ac:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049b0:	fab3 f383 	clz	r3, r3
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	095b      	lsrs	r3, r3, #5
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	f043 0301 	orr.w	r3, r3, #1
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d102      	bne.n	80049ca <HAL_RCC_OscConfig+0x362>
 80049c4:	4bbc      	ldr	r3, [pc, #752]	; (8004cb8 <HAL_RCC_OscConfig+0x650>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	e013      	b.n	80049f2 <HAL_RCC_OscConfig+0x38a>
 80049ca:	2302      	movs	r3, #2
 80049cc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049d0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80049d4:	fa93 f3a3 	rbit	r3, r3
 80049d8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80049dc:	2302      	movs	r3, #2
 80049de:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80049e2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80049e6:	fa93 f3a3 	rbit	r3, r3
 80049ea:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80049ee:	4bb2      	ldr	r3, [pc, #712]	; (8004cb8 <HAL_RCC_OscConfig+0x650>)
 80049f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f2:	2202      	movs	r2, #2
 80049f4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80049f8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80049fc:	fa92 f2a2 	rbit	r2, r2
 8004a00:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004a04:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004a08:	fab2 f282 	clz	r2, r2
 8004a0c:	b2d2      	uxtb	r2, r2
 8004a0e:	f042 0220 	orr.w	r2, r2, #32
 8004a12:	b2d2      	uxtb	r2, r2
 8004a14:	f002 021f 	and.w	r2, r2, #31
 8004a18:	2101      	movs	r1, #1
 8004a1a:	fa01 f202 	lsl.w	r2, r1, r2
 8004a1e:	4013      	ands	r3, r2
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d007      	beq.n	8004a34 <HAL_RCC_OscConfig+0x3cc>
 8004a24:	1d3b      	adds	r3, r7, #4
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d002      	beq.n	8004a34 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	f000 bd1b 	b.w	800546a <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a34:	4ba0      	ldr	r3, [pc, #640]	; (8004cb8 <HAL_RCC_OscConfig+0x650>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a3c:	1d3b      	adds	r3, r7, #4
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	695b      	ldr	r3, [r3, #20]
 8004a42:	21f8      	movs	r1, #248	; 0xf8
 8004a44:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a48:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004a4c:	fa91 f1a1 	rbit	r1, r1
 8004a50:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004a54:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004a58:	fab1 f181 	clz	r1, r1
 8004a5c:	b2c9      	uxtb	r1, r1
 8004a5e:	408b      	lsls	r3, r1
 8004a60:	4995      	ldr	r1, [pc, #596]	; (8004cb8 <HAL_RCC_OscConfig+0x650>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a66:	e0f5      	b.n	8004c54 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a68:	1d3b      	adds	r3, r7, #4
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	f000 8085 	beq.w	8004b7e <HAL_RCC_OscConfig+0x516>
 8004a74:	2301      	movs	r3, #1
 8004a76:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a7a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004a7e:	fa93 f3a3 	rbit	r3, r3
 8004a82:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004a86:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a8a:	fab3 f383 	clz	r3, r3
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004a94:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aa0:	f7fc ff68 	bl	8001974 <HAL_GetTick>
 8004aa4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aa8:	e00a      	b.n	8004ac0 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004aaa:	f7fc ff63 	bl	8001974 <HAL_GetTick>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d902      	bls.n	8004ac0 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	f000 bcd5 	b.w	800546a <HAL_RCC_OscConfig+0xe02>
 8004ac0:	2302      	movs	r3, #2
 8004ac2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ac6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004aca:	fa93 f3a3 	rbit	r3, r3
 8004ace:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004ad2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ad6:	fab3 f383 	clz	r3, r3
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	095b      	lsrs	r3, r3, #5
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	f043 0301 	orr.w	r3, r3, #1
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d102      	bne.n	8004af0 <HAL_RCC_OscConfig+0x488>
 8004aea:	4b73      	ldr	r3, [pc, #460]	; (8004cb8 <HAL_RCC_OscConfig+0x650>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	e013      	b.n	8004b18 <HAL_RCC_OscConfig+0x4b0>
 8004af0:	2302      	movs	r3, #2
 8004af2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004af6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004afa:	fa93 f3a3 	rbit	r3, r3
 8004afe:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004b02:	2302      	movs	r3, #2
 8004b04:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004b08:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004b0c:	fa93 f3a3 	rbit	r3, r3
 8004b10:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004b14:	4b68      	ldr	r3, [pc, #416]	; (8004cb8 <HAL_RCC_OscConfig+0x650>)
 8004b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b18:	2202      	movs	r2, #2
 8004b1a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004b1e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004b22:	fa92 f2a2 	rbit	r2, r2
 8004b26:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004b2a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004b2e:	fab2 f282 	clz	r2, r2
 8004b32:	b2d2      	uxtb	r2, r2
 8004b34:	f042 0220 	orr.w	r2, r2, #32
 8004b38:	b2d2      	uxtb	r2, r2
 8004b3a:	f002 021f 	and.w	r2, r2, #31
 8004b3e:	2101      	movs	r1, #1
 8004b40:	fa01 f202 	lsl.w	r2, r1, r2
 8004b44:	4013      	ands	r3, r2
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d0af      	beq.n	8004aaa <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b4a:	4b5b      	ldr	r3, [pc, #364]	; (8004cb8 <HAL_RCC_OscConfig+0x650>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b52:	1d3b      	adds	r3, r7, #4
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	695b      	ldr	r3, [r3, #20]
 8004b58:	21f8      	movs	r1, #248	; 0xf8
 8004b5a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b5e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004b62:	fa91 f1a1 	rbit	r1, r1
 8004b66:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004b6a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004b6e:	fab1 f181 	clz	r1, r1
 8004b72:	b2c9      	uxtb	r1, r1
 8004b74:	408b      	lsls	r3, r1
 8004b76:	4950      	ldr	r1, [pc, #320]	; (8004cb8 <HAL_RCC_OscConfig+0x650>)
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	600b      	str	r3, [r1, #0]
 8004b7c:	e06a      	b.n	8004c54 <HAL_RCC_OscConfig+0x5ec>
 8004b7e:	2301      	movs	r3, #1
 8004b80:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b84:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004b88:	fa93 f3a3 	rbit	r3, r3
 8004b8c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004b90:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b94:	fab3 f383 	clz	r3, r3
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004b9e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004baa:	f7fc fee3 	bl	8001974 <HAL_GetTick>
 8004bae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bb2:	e00a      	b.n	8004bca <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bb4:	f7fc fede 	bl	8001974 <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d902      	bls.n	8004bca <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	f000 bc50 	b.w	800546a <HAL_RCC_OscConfig+0xe02>
 8004bca:	2302      	movs	r3, #2
 8004bcc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bd0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004bd4:	fa93 f3a3 	rbit	r3, r3
 8004bd8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004bdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004be0:	fab3 f383 	clz	r3, r3
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	095b      	lsrs	r3, r3, #5
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	f043 0301 	orr.w	r3, r3, #1
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d102      	bne.n	8004bfa <HAL_RCC_OscConfig+0x592>
 8004bf4:	4b30      	ldr	r3, [pc, #192]	; (8004cb8 <HAL_RCC_OscConfig+0x650>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	e013      	b.n	8004c22 <HAL_RCC_OscConfig+0x5ba>
 8004bfa:	2302      	movs	r3, #2
 8004bfc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c00:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004c04:	fa93 f3a3 	rbit	r3, r3
 8004c08:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004c0c:	2302      	movs	r3, #2
 8004c0e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004c12:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004c16:	fa93 f3a3 	rbit	r3, r3
 8004c1a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004c1e:	4b26      	ldr	r3, [pc, #152]	; (8004cb8 <HAL_RCC_OscConfig+0x650>)
 8004c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c22:	2202      	movs	r2, #2
 8004c24:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004c28:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004c2c:	fa92 f2a2 	rbit	r2, r2
 8004c30:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004c34:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004c38:	fab2 f282 	clz	r2, r2
 8004c3c:	b2d2      	uxtb	r2, r2
 8004c3e:	f042 0220 	orr.w	r2, r2, #32
 8004c42:	b2d2      	uxtb	r2, r2
 8004c44:	f002 021f 	and.w	r2, r2, #31
 8004c48:	2101      	movs	r1, #1
 8004c4a:	fa01 f202 	lsl.w	r2, r1, r2
 8004c4e:	4013      	ands	r3, r2
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d1af      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c54:	1d3b      	adds	r3, r7, #4
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0308 	and.w	r3, r3, #8
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	f000 80da 	beq.w	8004e18 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c64:	1d3b      	adds	r3, r7, #4
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d069      	beq.n	8004d42 <HAL_RCC_OscConfig+0x6da>
 8004c6e:	2301      	movs	r3, #1
 8004c70:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c74:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004c78:	fa93 f3a3 	rbit	r3, r3
 8004c7c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004c80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c84:	fab3 f383 	clz	r3, r3
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	4b0b      	ldr	r3, [pc, #44]	; (8004cbc <HAL_RCC_OscConfig+0x654>)
 8004c8e:	4413      	add	r3, r2
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	461a      	mov	r2, r3
 8004c94:	2301      	movs	r3, #1
 8004c96:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c98:	f7fc fe6c 	bl	8001974 <HAL_GetTick>
 8004c9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ca0:	e00e      	b.n	8004cc0 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ca2:	f7fc fe67 	bl	8001974 <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d906      	bls.n	8004cc0 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e3d9      	b.n	800546a <HAL_RCC_OscConfig+0xe02>
 8004cb6:	bf00      	nop
 8004cb8:	40021000 	.word	0x40021000
 8004cbc:	10908120 	.word	0x10908120
 8004cc0:	2302      	movs	r3, #2
 8004cc2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cc6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004cca:	fa93 f3a3 	rbit	r3, r3
 8004cce:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004cd2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004cd6:	2202      	movs	r2, #2
 8004cd8:	601a      	str	r2, [r3, #0]
 8004cda:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	fa93 f2a3 	rbit	r2, r3
 8004ce4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004ce8:	601a      	str	r2, [r3, #0]
 8004cea:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004cee:	2202      	movs	r2, #2
 8004cf0:	601a      	str	r2, [r3, #0]
 8004cf2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	fa93 f2a3 	rbit	r2, r3
 8004cfc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8004d00:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d02:	4ba5      	ldr	r3, [pc, #660]	; (8004f98 <HAL_RCC_OscConfig+0x930>)
 8004d04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d06:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004d0a:	2102      	movs	r1, #2
 8004d0c:	6019      	str	r1, [r3, #0]
 8004d0e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	fa93 f1a3 	rbit	r1, r3
 8004d18:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004d1c:	6019      	str	r1, [r3, #0]
  return result;
 8004d1e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	fab3 f383 	clz	r3, r3
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	f003 031f 	and.w	r3, r3, #31
 8004d34:	2101      	movs	r1, #1
 8004d36:	fa01 f303 	lsl.w	r3, r1, r3
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d0b0      	beq.n	8004ca2 <HAL_RCC_OscConfig+0x63a>
 8004d40:	e06a      	b.n	8004e18 <HAL_RCC_OscConfig+0x7b0>
 8004d42:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004d46:	2201      	movs	r2, #1
 8004d48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d4a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	fa93 f2a3 	rbit	r2, r3
 8004d54:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004d58:	601a      	str	r2, [r3, #0]
  return result;
 8004d5a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004d5e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d60:	fab3 f383 	clz	r3, r3
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	461a      	mov	r2, r3
 8004d68:	4b8c      	ldr	r3, [pc, #560]	; (8004f9c <HAL_RCC_OscConfig+0x934>)
 8004d6a:	4413      	add	r3, r2
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	461a      	mov	r2, r3
 8004d70:	2300      	movs	r3, #0
 8004d72:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d74:	f7fc fdfe 	bl	8001974 <HAL_GetTick>
 8004d78:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d7c:	e009      	b.n	8004d92 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d7e:	f7fc fdf9 	bl	8001974 <HAL_GetTick>
 8004d82:	4602      	mov	r2, r0
 8004d84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d901      	bls.n	8004d92 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e36b      	b.n	800546a <HAL_RCC_OscConfig+0xe02>
 8004d92:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004d96:	2202      	movs	r2, #2
 8004d98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d9a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	fa93 f2a3 	rbit	r2, r3
 8004da4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004da8:	601a      	str	r2, [r3, #0]
 8004daa:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004dae:	2202      	movs	r2, #2
 8004db0:	601a      	str	r2, [r3, #0]
 8004db2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	fa93 f2a3 	rbit	r2, r3
 8004dbc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004dc0:	601a      	str	r2, [r3, #0]
 8004dc2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004dc6:	2202      	movs	r2, #2
 8004dc8:	601a      	str	r2, [r3, #0]
 8004dca:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	fa93 f2a3 	rbit	r2, r3
 8004dd4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004dd8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dda:	4b6f      	ldr	r3, [pc, #444]	; (8004f98 <HAL_RCC_OscConfig+0x930>)
 8004ddc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004dde:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004de2:	2102      	movs	r1, #2
 8004de4:	6019      	str	r1, [r3, #0]
 8004de6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	fa93 f1a3 	rbit	r1, r3
 8004df0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004df4:	6019      	str	r1, [r3, #0]
  return result;
 8004df6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	fab3 f383 	clz	r3, r3
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	f003 031f 	and.w	r3, r3, #31
 8004e0c:	2101      	movs	r1, #1
 8004e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e12:	4013      	ands	r3, r2
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d1b2      	bne.n	8004d7e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e18:	1d3b      	adds	r3, r7, #4
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0304 	and.w	r3, r3, #4
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	f000 8158 	beq.w	80050d8 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e2e:	4b5a      	ldr	r3, [pc, #360]	; (8004f98 <HAL_RCC_OscConfig+0x930>)
 8004e30:	69db      	ldr	r3, [r3, #28]
 8004e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d112      	bne.n	8004e60 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e3a:	4b57      	ldr	r3, [pc, #348]	; (8004f98 <HAL_RCC_OscConfig+0x930>)
 8004e3c:	69db      	ldr	r3, [r3, #28]
 8004e3e:	4a56      	ldr	r2, [pc, #344]	; (8004f98 <HAL_RCC_OscConfig+0x930>)
 8004e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e44:	61d3      	str	r3, [r2, #28]
 8004e46:	4b54      	ldr	r3, [pc, #336]	; (8004f98 <HAL_RCC_OscConfig+0x930>)
 8004e48:	69db      	ldr	r3, [r3, #28]
 8004e4a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004e4e:	f107 0308 	add.w	r3, r7, #8
 8004e52:	601a      	str	r2, [r3, #0]
 8004e54:	f107 0308 	add.w	r3, r7, #8
 8004e58:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e60:	4b4f      	ldr	r3, [pc, #316]	; (8004fa0 <HAL_RCC_OscConfig+0x938>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d11a      	bne.n	8004ea2 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e6c:	4b4c      	ldr	r3, [pc, #304]	; (8004fa0 <HAL_RCC_OscConfig+0x938>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a4b      	ldr	r2, [pc, #300]	; (8004fa0 <HAL_RCC_OscConfig+0x938>)
 8004e72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e76:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e78:	f7fc fd7c 	bl	8001974 <HAL_GetTick>
 8004e7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e80:	e009      	b.n	8004e96 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e82:	f7fc fd77 	bl	8001974 <HAL_GetTick>
 8004e86:	4602      	mov	r2, r0
 8004e88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	2b64      	cmp	r3, #100	; 0x64
 8004e90:	d901      	bls.n	8004e96 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e2e9      	b.n	800546a <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e96:	4b42      	ldr	r3, [pc, #264]	; (8004fa0 <HAL_RCC_OscConfig+0x938>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d0ef      	beq.n	8004e82 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ea2:	1d3b      	adds	r3, r7, #4
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d106      	bne.n	8004eba <HAL_RCC_OscConfig+0x852>
 8004eac:	4b3a      	ldr	r3, [pc, #232]	; (8004f98 <HAL_RCC_OscConfig+0x930>)
 8004eae:	6a1b      	ldr	r3, [r3, #32]
 8004eb0:	4a39      	ldr	r2, [pc, #228]	; (8004f98 <HAL_RCC_OscConfig+0x930>)
 8004eb2:	f043 0301 	orr.w	r3, r3, #1
 8004eb6:	6213      	str	r3, [r2, #32]
 8004eb8:	e02f      	b.n	8004f1a <HAL_RCC_OscConfig+0x8b2>
 8004eba:	1d3b      	adds	r3, r7, #4
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d10c      	bne.n	8004ede <HAL_RCC_OscConfig+0x876>
 8004ec4:	4b34      	ldr	r3, [pc, #208]	; (8004f98 <HAL_RCC_OscConfig+0x930>)
 8004ec6:	6a1b      	ldr	r3, [r3, #32]
 8004ec8:	4a33      	ldr	r2, [pc, #204]	; (8004f98 <HAL_RCC_OscConfig+0x930>)
 8004eca:	f023 0301 	bic.w	r3, r3, #1
 8004ece:	6213      	str	r3, [r2, #32]
 8004ed0:	4b31      	ldr	r3, [pc, #196]	; (8004f98 <HAL_RCC_OscConfig+0x930>)
 8004ed2:	6a1b      	ldr	r3, [r3, #32]
 8004ed4:	4a30      	ldr	r2, [pc, #192]	; (8004f98 <HAL_RCC_OscConfig+0x930>)
 8004ed6:	f023 0304 	bic.w	r3, r3, #4
 8004eda:	6213      	str	r3, [r2, #32]
 8004edc:	e01d      	b.n	8004f1a <HAL_RCC_OscConfig+0x8b2>
 8004ede:	1d3b      	adds	r3, r7, #4
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	2b05      	cmp	r3, #5
 8004ee6:	d10c      	bne.n	8004f02 <HAL_RCC_OscConfig+0x89a>
 8004ee8:	4b2b      	ldr	r3, [pc, #172]	; (8004f98 <HAL_RCC_OscConfig+0x930>)
 8004eea:	6a1b      	ldr	r3, [r3, #32]
 8004eec:	4a2a      	ldr	r2, [pc, #168]	; (8004f98 <HAL_RCC_OscConfig+0x930>)
 8004eee:	f043 0304 	orr.w	r3, r3, #4
 8004ef2:	6213      	str	r3, [r2, #32]
 8004ef4:	4b28      	ldr	r3, [pc, #160]	; (8004f98 <HAL_RCC_OscConfig+0x930>)
 8004ef6:	6a1b      	ldr	r3, [r3, #32]
 8004ef8:	4a27      	ldr	r2, [pc, #156]	; (8004f98 <HAL_RCC_OscConfig+0x930>)
 8004efa:	f043 0301 	orr.w	r3, r3, #1
 8004efe:	6213      	str	r3, [r2, #32]
 8004f00:	e00b      	b.n	8004f1a <HAL_RCC_OscConfig+0x8b2>
 8004f02:	4b25      	ldr	r3, [pc, #148]	; (8004f98 <HAL_RCC_OscConfig+0x930>)
 8004f04:	6a1b      	ldr	r3, [r3, #32]
 8004f06:	4a24      	ldr	r2, [pc, #144]	; (8004f98 <HAL_RCC_OscConfig+0x930>)
 8004f08:	f023 0301 	bic.w	r3, r3, #1
 8004f0c:	6213      	str	r3, [r2, #32]
 8004f0e:	4b22      	ldr	r3, [pc, #136]	; (8004f98 <HAL_RCC_OscConfig+0x930>)
 8004f10:	6a1b      	ldr	r3, [r3, #32]
 8004f12:	4a21      	ldr	r2, [pc, #132]	; (8004f98 <HAL_RCC_OscConfig+0x930>)
 8004f14:	f023 0304 	bic.w	r3, r3, #4
 8004f18:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f1a:	1d3b      	adds	r3, r7, #4
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d06b      	beq.n	8004ffc <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f24:	f7fc fd26 	bl	8001974 <HAL_GetTick>
 8004f28:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f2c:	e00b      	b.n	8004f46 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f2e:	f7fc fd21 	bl	8001974 <HAL_GetTick>
 8004f32:	4602      	mov	r2, r0
 8004f34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d901      	bls.n	8004f46 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e291      	b.n	800546a <HAL_RCC_OscConfig+0xe02>
 8004f46:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004f4a:	2202      	movs	r2, #2
 8004f4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f4e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	fa93 f2a3 	rbit	r2, r3
 8004f58:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004f5c:	601a      	str	r2, [r3, #0]
 8004f5e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004f62:	2202      	movs	r2, #2
 8004f64:	601a      	str	r2, [r3, #0]
 8004f66:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	fa93 f2a3 	rbit	r2, r3
 8004f70:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004f74:	601a      	str	r2, [r3, #0]
  return result;
 8004f76:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004f7a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f7c:	fab3 f383 	clz	r3, r3
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	095b      	lsrs	r3, r3, #5
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	f043 0302 	orr.w	r3, r3, #2
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d109      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x93c>
 8004f90:	4b01      	ldr	r3, [pc, #4]	; (8004f98 <HAL_RCC_OscConfig+0x930>)
 8004f92:	6a1b      	ldr	r3, [r3, #32]
 8004f94:	e014      	b.n	8004fc0 <HAL_RCC_OscConfig+0x958>
 8004f96:	bf00      	nop
 8004f98:	40021000 	.word	0x40021000
 8004f9c:	10908120 	.word	0x10908120
 8004fa0:	40007000 	.word	0x40007000
 8004fa4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004fa8:	2202      	movs	r2, #2
 8004faa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fac:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	fa93 f2a3 	rbit	r2, r3
 8004fb6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004fba:	601a      	str	r2, [r3, #0]
 8004fbc:	4bbb      	ldr	r3, [pc, #748]	; (80052ac <HAL_RCC_OscConfig+0xc44>)
 8004fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004fc4:	2102      	movs	r1, #2
 8004fc6:	6011      	str	r1, [r2, #0]
 8004fc8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004fcc:	6812      	ldr	r2, [r2, #0]
 8004fce:	fa92 f1a2 	rbit	r1, r2
 8004fd2:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8004fd6:	6011      	str	r1, [r2, #0]
  return result;
 8004fd8:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8004fdc:	6812      	ldr	r2, [r2, #0]
 8004fde:	fab2 f282 	clz	r2, r2
 8004fe2:	b2d2      	uxtb	r2, r2
 8004fe4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fe8:	b2d2      	uxtb	r2, r2
 8004fea:	f002 021f 	and.w	r2, r2, #31
 8004fee:	2101      	movs	r1, #1
 8004ff0:	fa01 f202 	lsl.w	r2, r1, r2
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d099      	beq.n	8004f2e <HAL_RCC_OscConfig+0x8c6>
 8004ffa:	e063      	b.n	80050c4 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ffc:	f7fc fcba 	bl	8001974 <HAL_GetTick>
 8005000:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005004:	e00b      	b.n	800501e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005006:	f7fc fcb5 	bl	8001974 <HAL_GetTick>
 800500a:	4602      	mov	r2, r0
 800500c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	f241 3288 	movw	r2, #5000	; 0x1388
 8005016:	4293      	cmp	r3, r2
 8005018:	d901      	bls.n	800501e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	e225      	b.n	800546a <HAL_RCC_OscConfig+0xe02>
 800501e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005022:	2202      	movs	r2, #2
 8005024:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005026:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	fa93 f2a3 	rbit	r2, r3
 8005030:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005034:	601a      	str	r2, [r3, #0]
 8005036:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800503a:	2202      	movs	r2, #2
 800503c:	601a      	str	r2, [r3, #0]
 800503e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	fa93 f2a3 	rbit	r2, r3
 8005048:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800504c:	601a      	str	r2, [r3, #0]
  return result;
 800504e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005052:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005054:	fab3 f383 	clz	r3, r3
 8005058:	b2db      	uxtb	r3, r3
 800505a:	095b      	lsrs	r3, r3, #5
 800505c:	b2db      	uxtb	r3, r3
 800505e:	f043 0302 	orr.w	r3, r3, #2
 8005062:	b2db      	uxtb	r3, r3
 8005064:	2b02      	cmp	r3, #2
 8005066:	d102      	bne.n	800506e <HAL_RCC_OscConfig+0xa06>
 8005068:	4b90      	ldr	r3, [pc, #576]	; (80052ac <HAL_RCC_OscConfig+0xc44>)
 800506a:	6a1b      	ldr	r3, [r3, #32]
 800506c:	e00d      	b.n	800508a <HAL_RCC_OscConfig+0xa22>
 800506e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005072:	2202      	movs	r2, #2
 8005074:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005076:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	fa93 f2a3 	rbit	r2, r3
 8005080:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8005084:	601a      	str	r2, [r3, #0]
 8005086:	4b89      	ldr	r3, [pc, #548]	; (80052ac <HAL_RCC_OscConfig+0xc44>)
 8005088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800508e:	2102      	movs	r1, #2
 8005090:	6011      	str	r1, [r2, #0]
 8005092:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005096:	6812      	ldr	r2, [r2, #0]
 8005098:	fa92 f1a2 	rbit	r1, r2
 800509c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80050a0:	6011      	str	r1, [r2, #0]
  return result;
 80050a2:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80050a6:	6812      	ldr	r2, [r2, #0]
 80050a8:	fab2 f282 	clz	r2, r2
 80050ac:	b2d2      	uxtb	r2, r2
 80050ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050b2:	b2d2      	uxtb	r2, r2
 80050b4:	f002 021f 	and.w	r2, r2, #31
 80050b8:	2101      	movs	r1, #1
 80050ba:	fa01 f202 	lsl.w	r2, r1, r2
 80050be:	4013      	ands	r3, r2
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d1a0      	bne.n	8005006 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80050c4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d105      	bne.n	80050d8 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050cc:	4b77      	ldr	r3, [pc, #476]	; (80052ac <HAL_RCC_OscConfig+0xc44>)
 80050ce:	69db      	ldr	r3, [r3, #28]
 80050d0:	4a76      	ldr	r2, [pc, #472]	; (80052ac <HAL_RCC_OscConfig+0xc44>)
 80050d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050d6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050d8:	1d3b      	adds	r3, r7, #4
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	69db      	ldr	r3, [r3, #28]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	f000 81c2 	beq.w	8005468 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050e4:	4b71      	ldr	r3, [pc, #452]	; (80052ac <HAL_RCC_OscConfig+0xc44>)
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	f003 030c 	and.w	r3, r3, #12
 80050ec:	2b08      	cmp	r3, #8
 80050ee:	f000 819c 	beq.w	800542a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050f2:	1d3b      	adds	r3, r7, #4
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	69db      	ldr	r3, [r3, #28]
 80050f8:	2b02      	cmp	r3, #2
 80050fa:	f040 8114 	bne.w	8005326 <HAL_RCC_OscConfig+0xcbe>
 80050fe:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005102:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005106:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005108:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	fa93 f2a3 	rbit	r2, r3
 8005112:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005116:	601a      	str	r2, [r3, #0]
  return result;
 8005118:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800511c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800511e:	fab3 f383 	clz	r3, r3
 8005122:	b2db      	uxtb	r3, r3
 8005124:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005128:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	461a      	mov	r2, r3
 8005130:	2300      	movs	r3, #0
 8005132:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005134:	f7fc fc1e 	bl	8001974 <HAL_GetTick>
 8005138:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800513c:	e009      	b.n	8005152 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800513e:	f7fc fc19 	bl	8001974 <HAL_GetTick>
 8005142:	4602      	mov	r2, r0
 8005144:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	2b02      	cmp	r3, #2
 800514c:	d901      	bls.n	8005152 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800514e:	2303      	movs	r3, #3
 8005150:	e18b      	b.n	800546a <HAL_RCC_OscConfig+0xe02>
 8005152:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005156:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800515a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800515c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	fa93 f2a3 	rbit	r2, r3
 8005166:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800516a:	601a      	str	r2, [r3, #0]
  return result;
 800516c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005170:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005172:	fab3 f383 	clz	r3, r3
 8005176:	b2db      	uxtb	r3, r3
 8005178:	095b      	lsrs	r3, r3, #5
 800517a:	b2db      	uxtb	r3, r3
 800517c:	f043 0301 	orr.w	r3, r3, #1
 8005180:	b2db      	uxtb	r3, r3
 8005182:	2b01      	cmp	r3, #1
 8005184:	d102      	bne.n	800518c <HAL_RCC_OscConfig+0xb24>
 8005186:	4b49      	ldr	r3, [pc, #292]	; (80052ac <HAL_RCC_OscConfig+0xc44>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	e01b      	b.n	80051c4 <HAL_RCC_OscConfig+0xb5c>
 800518c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005190:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005194:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005196:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	fa93 f2a3 	rbit	r2, r3
 80051a0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80051a4:	601a      	str	r2, [r3, #0]
 80051a6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80051aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80051ae:	601a      	str	r2, [r3, #0]
 80051b0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	fa93 f2a3 	rbit	r2, r3
 80051ba:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80051be:	601a      	str	r2, [r3, #0]
 80051c0:	4b3a      	ldr	r3, [pc, #232]	; (80052ac <HAL_RCC_OscConfig+0xc44>)
 80051c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80051c8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80051cc:	6011      	str	r1, [r2, #0]
 80051ce:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80051d2:	6812      	ldr	r2, [r2, #0]
 80051d4:	fa92 f1a2 	rbit	r1, r2
 80051d8:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80051dc:	6011      	str	r1, [r2, #0]
  return result;
 80051de:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80051e2:	6812      	ldr	r2, [r2, #0]
 80051e4:	fab2 f282 	clz	r2, r2
 80051e8:	b2d2      	uxtb	r2, r2
 80051ea:	f042 0220 	orr.w	r2, r2, #32
 80051ee:	b2d2      	uxtb	r2, r2
 80051f0:	f002 021f 	and.w	r2, r2, #31
 80051f4:	2101      	movs	r1, #1
 80051f6:	fa01 f202 	lsl.w	r2, r1, r2
 80051fa:	4013      	ands	r3, r2
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d19e      	bne.n	800513e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005200:	4b2a      	ldr	r3, [pc, #168]	; (80052ac <HAL_RCC_OscConfig+0xc44>)
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005208:	1d3b      	adds	r3, r7, #4
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800520e:	1d3b      	adds	r3, r7, #4
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	6a1b      	ldr	r3, [r3, #32]
 8005214:	430b      	orrs	r3, r1
 8005216:	4925      	ldr	r1, [pc, #148]	; (80052ac <HAL_RCC_OscConfig+0xc44>)
 8005218:	4313      	orrs	r3, r2
 800521a:	604b      	str	r3, [r1, #4]
 800521c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005220:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005224:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005226:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	fa93 f2a3 	rbit	r2, r3
 8005230:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005234:	601a      	str	r2, [r3, #0]
  return result;
 8005236:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800523a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800523c:	fab3 f383 	clz	r3, r3
 8005240:	b2db      	uxtb	r3, r3
 8005242:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005246:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	461a      	mov	r2, r3
 800524e:	2301      	movs	r3, #1
 8005250:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005252:	f7fc fb8f 	bl	8001974 <HAL_GetTick>
 8005256:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800525a:	e009      	b.n	8005270 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800525c:	f7fc fb8a 	bl	8001974 <HAL_GetTick>
 8005260:	4602      	mov	r2, r0
 8005262:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	2b02      	cmp	r3, #2
 800526a:	d901      	bls.n	8005270 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800526c:	2303      	movs	r3, #3
 800526e:	e0fc      	b.n	800546a <HAL_RCC_OscConfig+0xe02>
 8005270:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005274:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005278:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800527a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	fa93 f2a3 	rbit	r2, r3
 8005284:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005288:	601a      	str	r2, [r3, #0]
  return result;
 800528a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800528e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005290:	fab3 f383 	clz	r3, r3
 8005294:	b2db      	uxtb	r3, r3
 8005296:	095b      	lsrs	r3, r3, #5
 8005298:	b2db      	uxtb	r3, r3
 800529a:	f043 0301 	orr.w	r3, r3, #1
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d105      	bne.n	80052b0 <HAL_RCC_OscConfig+0xc48>
 80052a4:	4b01      	ldr	r3, [pc, #4]	; (80052ac <HAL_RCC_OscConfig+0xc44>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	e01e      	b.n	80052e8 <HAL_RCC_OscConfig+0xc80>
 80052aa:	bf00      	nop
 80052ac:	40021000 	.word	0x40021000
 80052b0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80052b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80052b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052ba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	fa93 f2a3 	rbit	r2, r3
 80052c4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80052c8:	601a      	str	r2, [r3, #0]
 80052ca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80052ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80052d2:	601a      	str	r2, [r3, #0]
 80052d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	fa93 f2a3 	rbit	r2, r3
 80052de:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80052e2:	601a      	str	r2, [r3, #0]
 80052e4:	4b63      	ldr	r3, [pc, #396]	; (8005474 <HAL_RCC_OscConfig+0xe0c>)
 80052e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80052ec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80052f0:	6011      	str	r1, [r2, #0]
 80052f2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80052f6:	6812      	ldr	r2, [r2, #0]
 80052f8:	fa92 f1a2 	rbit	r1, r2
 80052fc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005300:	6011      	str	r1, [r2, #0]
  return result;
 8005302:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005306:	6812      	ldr	r2, [r2, #0]
 8005308:	fab2 f282 	clz	r2, r2
 800530c:	b2d2      	uxtb	r2, r2
 800530e:	f042 0220 	orr.w	r2, r2, #32
 8005312:	b2d2      	uxtb	r2, r2
 8005314:	f002 021f 	and.w	r2, r2, #31
 8005318:	2101      	movs	r1, #1
 800531a:	fa01 f202 	lsl.w	r2, r1, r2
 800531e:	4013      	ands	r3, r2
 8005320:	2b00      	cmp	r3, #0
 8005322:	d09b      	beq.n	800525c <HAL_RCC_OscConfig+0xbf4>
 8005324:	e0a0      	b.n	8005468 <HAL_RCC_OscConfig+0xe00>
 8005326:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800532a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800532e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005330:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	fa93 f2a3 	rbit	r2, r3
 800533a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800533e:	601a      	str	r2, [r3, #0]
  return result;
 8005340:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005344:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005346:	fab3 f383 	clz	r3, r3
 800534a:	b2db      	uxtb	r3, r3
 800534c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005350:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	461a      	mov	r2, r3
 8005358:	2300      	movs	r3, #0
 800535a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800535c:	f7fc fb0a 	bl	8001974 <HAL_GetTick>
 8005360:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005364:	e009      	b.n	800537a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005366:	f7fc fb05 	bl	8001974 <HAL_GetTick>
 800536a:	4602      	mov	r2, r0
 800536c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	2b02      	cmp	r3, #2
 8005374:	d901      	bls.n	800537a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8005376:	2303      	movs	r3, #3
 8005378:	e077      	b.n	800546a <HAL_RCC_OscConfig+0xe02>
 800537a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800537e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005382:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005384:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	fa93 f2a3 	rbit	r2, r3
 800538e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005392:	601a      	str	r2, [r3, #0]
  return result;
 8005394:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005398:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800539a:	fab3 f383 	clz	r3, r3
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	095b      	lsrs	r3, r3, #5
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	f043 0301 	orr.w	r3, r3, #1
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d102      	bne.n	80053b4 <HAL_RCC_OscConfig+0xd4c>
 80053ae:	4b31      	ldr	r3, [pc, #196]	; (8005474 <HAL_RCC_OscConfig+0xe0c>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	e01b      	b.n	80053ec <HAL_RCC_OscConfig+0xd84>
 80053b4:	f107 0320 	add.w	r3, r7, #32
 80053b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80053bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053be:	f107 0320 	add.w	r3, r7, #32
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	fa93 f2a3 	rbit	r2, r3
 80053c8:	f107 031c 	add.w	r3, r7, #28
 80053cc:	601a      	str	r2, [r3, #0]
 80053ce:	f107 0318 	add.w	r3, r7, #24
 80053d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80053d6:	601a      	str	r2, [r3, #0]
 80053d8:	f107 0318 	add.w	r3, r7, #24
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	fa93 f2a3 	rbit	r2, r3
 80053e2:	f107 0314 	add.w	r3, r7, #20
 80053e6:	601a      	str	r2, [r3, #0]
 80053e8:	4b22      	ldr	r3, [pc, #136]	; (8005474 <HAL_RCC_OscConfig+0xe0c>)
 80053ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ec:	f107 0210 	add.w	r2, r7, #16
 80053f0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80053f4:	6011      	str	r1, [r2, #0]
 80053f6:	f107 0210 	add.w	r2, r7, #16
 80053fa:	6812      	ldr	r2, [r2, #0]
 80053fc:	fa92 f1a2 	rbit	r1, r2
 8005400:	f107 020c 	add.w	r2, r7, #12
 8005404:	6011      	str	r1, [r2, #0]
  return result;
 8005406:	f107 020c 	add.w	r2, r7, #12
 800540a:	6812      	ldr	r2, [r2, #0]
 800540c:	fab2 f282 	clz	r2, r2
 8005410:	b2d2      	uxtb	r2, r2
 8005412:	f042 0220 	orr.w	r2, r2, #32
 8005416:	b2d2      	uxtb	r2, r2
 8005418:	f002 021f 	and.w	r2, r2, #31
 800541c:	2101      	movs	r1, #1
 800541e:	fa01 f202 	lsl.w	r2, r1, r2
 8005422:	4013      	ands	r3, r2
 8005424:	2b00      	cmp	r3, #0
 8005426:	d19e      	bne.n	8005366 <HAL_RCC_OscConfig+0xcfe>
 8005428:	e01e      	b.n	8005468 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800542a:	1d3b      	adds	r3, r7, #4
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	69db      	ldr	r3, [r3, #28]
 8005430:	2b01      	cmp	r3, #1
 8005432:	d101      	bne.n	8005438 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e018      	b.n	800546a <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005438:	4b0e      	ldr	r3, [pc, #56]	; (8005474 <HAL_RCC_OscConfig+0xe0c>)
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005440:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005444:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005448:	1d3b      	adds	r3, r7, #4
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	6a1b      	ldr	r3, [r3, #32]
 800544e:	429a      	cmp	r2, r3
 8005450:	d108      	bne.n	8005464 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005452:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005456:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800545a:	1d3b      	adds	r3, r7, #4
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005460:	429a      	cmp	r2, r3
 8005462:	d001      	beq.n	8005468 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e000      	b.n	800546a <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8005468:	2300      	movs	r3, #0
}
 800546a:	4618      	mov	r0, r3
 800546c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}
 8005474:	40021000 	.word	0x40021000

08005478 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b09e      	sub	sp, #120	; 0x78
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005482:	2300      	movs	r3, #0
 8005484:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d101      	bne.n	8005490 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e162      	b.n	8005756 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005490:	4b90      	ldr	r3, [pc, #576]	; (80056d4 <HAL_RCC_ClockConfig+0x25c>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0307 	and.w	r3, r3, #7
 8005498:	683a      	ldr	r2, [r7, #0]
 800549a:	429a      	cmp	r2, r3
 800549c:	d910      	bls.n	80054c0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800549e:	4b8d      	ldr	r3, [pc, #564]	; (80056d4 <HAL_RCC_ClockConfig+0x25c>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f023 0207 	bic.w	r2, r3, #7
 80054a6:	498b      	ldr	r1, [pc, #556]	; (80056d4 <HAL_RCC_ClockConfig+0x25c>)
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054ae:	4b89      	ldr	r3, [pc, #548]	; (80056d4 <HAL_RCC_ClockConfig+0x25c>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 0307 	and.w	r3, r3, #7
 80054b6:	683a      	ldr	r2, [r7, #0]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d001      	beq.n	80054c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e14a      	b.n	8005756 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0302 	and.w	r3, r3, #2
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d008      	beq.n	80054de <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054cc:	4b82      	ldr	r3, [pc, #520]	; (80056d8 <HAL_RCC_ClockConfig+0x260>)
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	497f      	ldr	r1, [pc, #508]	; (80056d8 <HAL_RCC_ClockConfig+0x260>)
 80054da:	4313      	orrs	r3, r2
 80054dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0301 	and.w	r3, r3, #1
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	f000 80dc 	beq.w	80056a4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d13c      	bne.n	800556e <HAL_RCC_ClockConfig+0xf6>
 80054f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80054f8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054fc:	fa93 f3a3 	rbit	r3, r3
 8005500:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005502:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005504:	fab3 f383 	clz	r3, r3
 8005508:	b2db      	uxtb	r3, r3
 800550a:	095b      	lsrs	r3, r3, #5
 800550c:	b2db      	uxtb	r3, r3
 800550e:	f043 0301 	orr.w	r3, r3, #1
 8005512:	b2db      	uxtb	r3, r3
 8005514:	2b01      	cmp	r3, #1
 8005516:	d102      	bne.n	800551e <HAL_RCC_ClockConfig+0xa6>
 8005518:	4b6f      	ldr	r3, [pc, #444]	; (80056d8 <HAL_RCC_ClockConfig+0x260>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	e00f      	b.n	800553e <HAL_RCC_ClockConfig+0xc6>
 800551e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005522:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005524:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005526:	fa93 f3a3 	rbit	r3, r3
 800552a:	667b      	str	r3, [r7, #100]	; 0x64
 800552c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005530:	663b      	str	r3, [r7, #96]	; 0x60
 8005532:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005534:	fa93 f3a3 	rbit	r3, r3
 8005538:	65fb      	str	r3, [r7, #92]	; 0x5c
 800553a:	4b67      	ldr	r3, [pc, #412]	; (80056d8 <HAL_RCC_ClockConfig+0x260>)
 800553c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005542:	65ba      	str	r2, [r7, #88]	; 0x58
 8005544:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005546:	fa92 f2a2 	rbit	r2, r2
 800554a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800554c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800554e:	fab2 f282 	clz	r2, r2
 8005552:	b2d2      	uxtb	r2, r2
 8005554:	f042 0220 	orr.w	r2, r2, #32
 8005558:	b2d2      	uxtb	r2, r2
 800555a:	f002 021f 	and.w	r2, r2, #31
 800555e:	2101      	movs	r1, #1
 8005560:	fa01 f202 	lsl.w	r2, r1, r2
 8005564:	4013      	ands	r3, r2
 8005566:	2b00      	cmp	r3, #0
 8005568:	d17b      	bne.n	8005662 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e0f3      	b.n	8005756 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	2b02      	cmp	r3, #2
 8005574:	d13c      	bne.n	80055f0 <HAL_RCC_ClockConfig+0x178>
 8005576:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800557a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800557c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800557e:	fa93 f3a3 	rbit	r3, r3
 8005582:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005584:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005586:	fab3 f383 	clz	r3, r3
 800558a:	b2db      	uxtb	r3, r3
 800558c:	095b      	lsrs	r3, r3, #5
 800558e:	b2db      	uxtb	r3, r3
 8005590:	f043 0301 	orr.w	r3, r3, #1
 8005594:	b2db      	uxtb	r3, r3
 8005596:	2b01      	cmp	r3, #1
 8005598:	d102      	bne.n	80055a0 <HAL_RCC_ClockConfig+0x128>
 800559a:	4b4f      	ldr	r3, [pc, #316]	; (80056d8 <HAL_RCC_ClockConfig+0x260>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	e00f      	b.n	80055c0 <HAL_RCC_ClockConfig+0x148>
 80055a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80055a4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055a8:	fa93 f3a3 	rbit	r3, r3
 80055ac:	647b      	str	r3, [r7, #68]	; 0x44
 80055ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80055b2:	643b      	str	r3, [r7, #64]	; 0x40
 80055b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055b6:	fa93 f3a3 	rbit	r3, r3
 80055ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055bc:	4b46      	ldr	r3, [pc, #280]	; (80056d8 <HAL_RCC_ClockConfig+0x260>)
 80055be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80055c4:	63ba      	str	r2, [r7, #56]	; 0x38
 80055c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055c8:	fa92 f2a2 	rbit	r2, r2
 80055cc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80055ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055d0:	fab2 f282 	clz	r2, r2
 80055d4:	b2d2      	uxtb	r2, r2
 80055d6:	f042 0220 	orr.w	r2, r2, #32
 80055da:	b2d2      	uxtb	r2, r2
 80055dc:	f002 021f 	and.w	r2, r2, #31
 80055e0:	2101      	movs	r1, #1
 80055e2:	fa01 f202 	lsl.w	r2, r1, r2
 80055e6:	4013      	ands	r3, r2
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d13a      	bne.n	8005662 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e0b2      	b.n	8005756 <HAL_RCC_ClockConfig+0x2de>
 80055f0:	2302      	movs	r3, #2
 80055f2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f6:	fa93 f3a3 	rbit	r3, r3
 80055fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80055fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055fe:	fab3 f383 	clz	r3, r3
 8005602:	b2db      	uxtb	r3, r3
 8005604:	095b      	lsrs	r3, r3, #5
 8005606:	b2db      	uxtb	r3, r3
 8005608:	f043 0301 	orr.w	r3, r3, #1
 800560c:	b2db      	uxtb	r3, r3
 800560e:	2b01      	cmp	r3, #1
 8005610:	d102      	bne.n	8005618 <HAL_RCC_ClockConfig+0x1a0>
 8005612:	4b31      	ldr	r3, [pc, #196]	; (80056d8 <HAL_RCC_ClockConfig+0x260>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	e00d      	b.n	8005634 <HAL_RCC_ClockConfig+0x1bc>
 8005618:	2302      	movs	r3, #2
 800561a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800561c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800561e:	fa93 f3a3 	rbit	r3, r3
 8005622:	627b      	str	r3, [r7, #36]	; 0x24
 8005624:	2302      	movs	r3, #2
 8005626:	623b      	str	r3, [r7, #32]
 8005628:	6a3b      	ldr	r3, [r7, #32]
 800562a:	fa93 f3a3 	rbit	r3, r3
 800562e:	61fb      	str	r3, [r7, #28]
 8005630:	4b29      	ldr	r3, [pc, #164]	; (80056d8 <HAL_RCC_ClockConfig+0x260>)
 8005632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005634:	2202      	movs	r2, #2
 8005636:	61ba      	str	r2, [r7, #24]
 8005638:	69ba      	ldr	r2, [r7, #24]
 800563a:	fa92 f2a2 	rbit	r2, r2
 800563e:	617a      	str	r2, [r7, #20]
  return result;
 8005640:	697a      	ldr	r2, [r7, #20]
 8005642:	fab2 f282 	clz	r2, r2
 8005646:	b2d2      	uxtb	r2, r2
 8005648:	f042 0220 	orr.w	r2, r2, #32
 800564c:	b2d2      	uxtb	r2, r2
 800564e:	f002 021f 	and.w	r2, r2, #31
 8005652:	2101      	movs	r1, #1
 8005654:	fa01 f202 	lsl.w	r2, r1, r2
 8005658:	4013      	ands	r3, r2
 800565a:	2b00      	cmp	r3, #0
 800565c:	d101      	bne.n	8005662 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e079      	b.n	8005756 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005662:	4b1d      	ldr	r3, [pc, #116]	; (80056d8 <HAL_RCC_ClockConfig+0x260>)
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	f023 0203 	bic.w	r2, r3, #3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	491a      	ldr	r1, [pc, #104]	; (80056d8 <HAL_RCC_ClockConfig+0x260>)
 8005670:	4313      	orrs	r3, r2
 8005672:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005674:	f7fc f97e 	bl	8001974 <HAL_GetTick>
 8005678:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800567a:	e00a      	b.n	8005692 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800567c:	f7fc f97a 	bl	8001974 <HAL_GetTick>
 8005680:	4602      	mov	r2, r0
 8005682:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	f241 3288 	movw	r2, #5000	; 0x1388
 800568a:	4293      	cmp	r3, r2
 800568c:	d901      	bls.n	8005692 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800568e:	2303      	movs	r3, #3
 8005690:	e061      	b.n	8005756 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005692:	4b11      	ldr	r3, [pc, #68]	; (80056d8 <HAL_RCC_ClockConfig+0x260>)
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	f003 020c 	and.w	r2, r3, #12
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d1eb      	bne.n	800567c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80056a4:	4b0b      	ldr	r3, [pc, #44]	; (80056d4 <HAL_RCC_ClockConfig+0x25c>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0307 	and.w	r3, r3, #7
 80056ac:	683a      	ldr	r2, [r7, #0]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d214      	bcs.n	80056dc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056b2:	4b08      	ldr	r3, [pc, #32]	; (80056d4 <HAL_RCC_ClockConfig+0x25c>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f023 0207 	bic.w	r2, r3, #7
 80056ba:	4906      	ldr	r1, [pc, #24]	; (80056d4 <HAL_RCC_ClockConfig+0x25c>)
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	4313      	orrs	r3, r2
 80056c0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056c2:	4b04      	ldr	r3, [pc, #16]	; (80056d4 <HAL_RCC_ClockConfig+0x25c>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 0307 	and.w	r3, r3, #7
 80056ca:	683a      	ldr	r2, [r7, #0]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d005      	beq.n	80056dc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	e040      	b.n	8005756 <HAL_RCC_ClockConfig+0x2de>
 80056d4:	40022000 	.word	0x40022000
 80056d8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f003 0304 	and.w	r3, r3, #4
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d008      	beq.n	80056fa <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056e8:	4b1d      	ldr	r3, [pc, #116]	; (8005760 <HAL_RCC_ClockConfig+0x2e8>)
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	491a      	ldr	r1, [pc, #104]	; (8005760 <HAL_RCC_ClockConfig+0x2e8>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 0308 	and.w	r3, r3, #8
 8005702:	2b00      	cmp	r3, #0
 8005704:	d009      	beq.n	800571a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005706:	4b16      	ldr	r3, [pc, #88]	; (8005760 <HAL_RCC_ClockConfig+0x2e8>)
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	00db      	lsls	r3, r3, #3
 8005714:	4912      	ldr	r1, [pc, #72]	; (8005760 <HAL_RCC_ClockConfig+0x2e8>)
 8005716:	4313      	orrs	r3, r2
 8005718:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800571a:	f000 f829 	bl	8005770 <HAL_RCC_GetSysClockFreq>
 800571e:	4601      	mov	r1, r0
 8005720:	4b0f      	ldr	r3, [pc, #60]	; (8005760 <HAL_RCC_ClockConfig+0x2e8>)
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005728:	22f0      	movs	r2, #240	; 0xf0
 800572a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800572c:	693a      	ldr	r2, [r7, #16]
 800572e:	fa92 f2a2 	rbit	r2, r2
 8005732:	60fa      	str	r2, [r7, #12]
  return result;
 8005734:	68fa      	ldr	r2, [r7, #12]
 8005736:	fab2 f282 	clz	r2, r2
 800573a:	b2d2      	uxtb	r2, r2
 800573c:	40d3      	lsrs	r3, r2
 800573e:	4a09      	ldr	r2, [pc, #36]	; (8005764 <HAL_RCC_ClockConfig+0x2ec>)
 8005740:	5cd3      	ldrb	r3, [r2, r3]
 8005742:	fa21 f303 	lsr.w	r3, r1, r3
 8005746:	4a08      	ldr	r2, [pc, #32]	; (8005768 <HAL_RCC_ClockConfig+0x2f0>)
 8005748:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800574a:	4b08      	ldr	r3, [pc, #32]	; (800576c <HAL_RCC_ClockConfig+0x2f4>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4618      	mov	r0, r3
 8005750:	f7fc f8cc 	bl	80018ec <HAL_InitTick>
  
  return HAL_OK;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	3778      	adds	r7, #120	; 0x78
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	40021000 	.word	0x40021000
 8005764:	08007884 	.word	0x08007884
 8005768:	20000000 	.word	0x20000000
 800576c:	20000004 	.word	0x20000004

08005770 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005770:	b480      	push	{r7}
 8005772:	b08b      	sub	sp, #44	; 0x2c
 8005774:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005776:	2300      	movs	r3, #0
 8005778:	61fb      	str	r3, [r7, #28]
 800577a:	2300      	movs	r3, #0
 800577c:	61bb      	str	r3, [r7, #24]
 800577e:	2300      	movs	r3, #0
 8005780:	627b      	str	r3, [r7, #36]	; 0x24
 8005782:	2300      	movs	r3, #0
 8005784:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005786:	2300      	movs	r3, #0
 8005788:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800578a:	4b29      	ldr	r3, [pc, #164]	; (8005830 <HAL_RCC_GetSysClockFreq+0xc0>)
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	f003 030c 	and.w	r3, r3, #12
 8005796:	2b04      	cmp	r3, #4
 8005798:	d002      	beq.n	80057a0 <HAL_RCC_GetSysClockFreq+0x30>
 800579a:	2b08      	cmp	r3, #8
 800579c:	d003      	beq.n	80057a6 <HAL_RCC_GetSysClockFreq+0x36>
 800579e:	e03c      	b.n	800581a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80057a0:	4b24      	ldr	r3, [pc, #144]	; (8005834 <HAL_RCC_GetSysClockFreq+0xc4>)
 80057a2:	623b      	str	r3, [r7, #32]
      break;
 80057a4:	e03c      	b.n	8005820 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80057ac:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80057b0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057b2:	68ba      	ldr	r2, [r7, #8]
 80057b4:	fa92 f2a2 	rbit	r2, r2
 80057b8:	607a      	str	r2, [r7, #4]
  return result;
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	fab2 f282 	clz	r2, r2
 80057c0:	b2d2      	uxtb	r2, r2
 80057c2:	40d3      	lsrs	r3, r2
 80057c4:	4a1c      	ldr	r2, [pc, #112]	; (8005838 <HAL_RCC_GetSysClockFreq+0xc8>)
 80057c6:	5cd3      	ldrb	r3, [r2, r3]
 80057c8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80057ca:	4b19      	ldr	r3, [pc, #100]	; (8005830 <HAL_RCC_GetSysClockFreq+0xc0>)
 80057cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ce:	f003 030f 	and.w	r3, r3, #15
 80057d2:	220f      	movs	r2, #15
 80057d4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057d6:	693a      	ldr	r2, [r7, #16]
 80057d8:	fa92 f2a2 	rbit	r2, r2
 80057dc:	60fa      	str	r2, [r7, #12]
  return result;
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	fab2 f282 	clz	r2, r2
 80057e4:	b2d2      	uxtb	r2, r2
 80057e6:	40d3      	lsrs	r3, r2
 80057e8:	4a14      	ldr	r2, [pc, #80]	; (800583c <HAL_RCC_GetSysClockFreq+0xcc>)
 80057ea:	5cd3      	ldrb	r3, [r2, r3]
 80057ec:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d008      	beq.n	800580a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80057f8:	4a0e      	ldr	r2, [pc, #56]	; (8005834 <HAL_RCC_GetSysClockFreq+0xc4>)
 80057fa:	69bb      	ldr	r3, [r7, #24]
 80057fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	fb02 f303 	mul.w	r3, r2, r3
 8005806:	627b      	str	r3, [r7, #36]	; 0x24
 8005808:	e004      	b.n	8005814 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	4a0c      	ldr	r2, [pc, #48]	; (8005840 <HAL_RCC_GetSysClockFreq+0xd0>)
 800580e:	fb02 f303 	mul.w	r3, r2, r3
 8005812:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005816:	623b      	str	r3, [r7, #32]
      break;
 8005818:	e002      	b.n	8005820 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800581a:	4b06      	ldr	r3, [pc, #24]	; (8005834 <HAL_RCC_GetSysClockFreq+0xc4>)
 800581c:	623b      	str	r3, [r7, #32]
      break;
 800581e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005820:	6a3b      	ldr	r3, [r7, #32]
}
 8005822:	4618      	mov	r0, r3
 8005824:	372c      	adds	r7, #44	; 0x2c
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr
 800582e:	bf00      	nop
 8005830:	40021000 	.word	0x40021000
 8005834:	007a1200 	.word	0x007a1200
 8005838:	0800789c 	.word	0x0800789c
 800583c:	080078ac 	.word	0x080078ac
 8005840:	003d0900 	.word	0x003d0900

08005844 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005844:	b480      	push	{r7}
 8005846:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005848:	4b03      	ldr	r3, [pc, #12]	; (8005858 <HAL_RCC_GetHCLKFreq+0x14>)
 800584a:	681b      	ldr	r3, [r3, #0]
}
 800584c:	4618      	mov	r0, r3
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr
 8005856:	bf00      	nop
 8005858:	20000000 	.word	0x20000000

0800585c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b082      	sub	sp, #8
 8005860:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005862:	f7ff ffef 	bl	8005844 <HAL_RCC_GetHCLKFreq>
 8005866:	4601      	mov	r1, r0
 8005868:	4b0b      	ldr	r3, [pc, #44]	; (8005898 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005870:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005874:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	fa92 f2a2 	rbit	r2, r2
 800587c:	603a      	str	r2, [r7, #0]
  return result;
 800587e:	683a      	ldr	r2, [r7, #0]
 8005880:	fab2 f282 	clz	r2, r2
 8005884:	b2d2      	uxtb	r2, r2
 8005886:	40d3      	lsrs	r3, r2
 8005888:	4a04      	ldr	r2, [pc, #16]	; (800589c <HAL_RCC_GetPCLK1Freq+0x40>)
 800588a:	5cd3      	ldrb	r3, [r2, r3]
 800588c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005890:	4618      	mov	r0, r3
 8005892:	3708      	adds	r7, #8
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}
 8005898:	40021000 	.word	0x40021000
 800589c:	08007894 	.word	0x08007894

080058a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b082      	sub	sp, #8
 80058a4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80058a6:	f7ff ffcd 	bl	8005844 <HAL_RCC_GetHCLKFreq>
 80058aa:	4601      	mov	r1, r0
 80058ac:	4b0b      	ldr	r3, [pc, #44]	; (80058dc <HAL_RCC_GetPCLK2Freq+0x3c>)
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80058b4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80058b8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	fa92 f2a2 	rbit	r2, r2
 80058c0:	603a      	str	r2, [r7, #0]
  return result;
 80058c2:	683a      	ldr	r2, [r7, #0]
 80058c4:	fab2 f282 	clz	r2, r2
 80058c8:	b2d2      	uxtb	r2, r2
 80058ca:	40d3      	lsrs	r3, r2
 80058cc:	4a04      	ldr	r2, [pc, #16]	; (80058e0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80058ce:	5cd3      	ldrb	r3, [r2, r3]
 80058d0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80058d4:	4618      	mov	r0, r3
 80058d6:	3708      	adds	r7, #8
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	40021000 	.word	0x40021000
 80058e0:	08007894 	.word	0x08007894

080058e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b092      	sub	sp, #72	; 0x48
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80058ec:	2300      	movs	r3, #0
 80058ee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80058f0:	2300      	movs	r3, #0
 80058f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80058f4:	2300      	movs	r3, #0
 80058f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005902:	2b00      	cmp	r3, #0
 8005904:	f000 80cd 	beq.w	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005908:	4b86      	ldr	r3, [pc, #536]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800590a:	69db      	ldr	r3, [r3, #28]
 800590c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005910:	2b00      	cmp	r3, #0
 8005912:	d10e      	bne.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005914:	4b83      	ldr	r3, [pc, #524]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005916:	69db      	ldr	r3, [r3, #28]
 8005918:	4a82      	ldr	r2, [pc, #520]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800591a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800591e:	61d3      	str	r3, [r2, #28]
 8005920:	4b80      	ldr	r3, [pc, #512]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005922:	69db      	ldr	r3, [r3, #28]
 8005924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005928:	60bb      	str	r3, [r7, #8]
 800592a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800592c:	2301      	movs	r3, #1
 800592e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005932:	4b7d      	ldr	r3, [pc, #500]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800593a:	2b00      	cmp	r3, #0
 800593c:	d118      	bne.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800593e:	4b7a      	ldr	r3, [pc, #488]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a79      	ldr	r2, [pc, #484]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005944:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005948:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800594a:	f7fc f813 	bl	8001974 <HAL_GetTick>
 800594e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005950:	e008      	b.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005952:	f7fc f80f 	bl	8001974 <HAL_GetTick>
 8005956:	4602      	mov	r2, r0
 8005958:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800595a:	1ad3      	subs	r3, r2, r3
 800595c:	2b64      	cmp	r3, #100	; 0x64
 800595e:	d901      	bls.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005960:	2303      	movs	r3, #3
 8005962:	e0db      	b.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005964:	4b70      	ldr	r3, [pc, #448]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800596c:	2b00      	cmp	r3, #0
 800596e:	d0f0      	beq.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005970:	4b6c      	ldr	r3, [pc, #432]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005972:	6a1b      	ldr	r3, [r3, #32]
 8005974:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005978:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800597a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800597c:	2b00      	cmp	r3, #0
 800597e:	d07d      	beq.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005988:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800598a:	429a      	cmp	r2, r3
 800598c:	d076      	beq.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800598e:	4b65      	ldr	r3, [pc, #404]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005990:	6a1b      	ldr	r3, [r3, #32]
 8005992:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005996:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005998:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800599c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800599e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a0:	fa93 f3a3 	rbit	r3, r3
 80059a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80059a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80059a8:	fab3 f383 	clz	r3, r3
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	461a      	mov	r2, r3
 80059b0:	4b5e      	ldr	r3, [pc, #376]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80059b2:	4413      	add	r3, r2
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	461a      	mov	r2, r3
 80059b8:	2301      	movs	r3, #1
 80059ba:	6013      	str	r3, [r2, #0]
 80059bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80059c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c4:	fa93 f3a3 	rbit	r3, r3
 80059c8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80059ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80059cc:	fab3 f383 	clz	r3, r3
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	461a      	mov	r2, r3
 80059d4:	4b55      	ldr	r3, [pc, #340]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80059d6:	4413      	add	r3, r2
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	461a      	mov	r2, r3
 80059dc:	2300      	movs	r3, #0
 80059de:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80059e0:	4a50      	ldr	r2, [pc, #320]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80059e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059e4:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80059e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059e8:	f003 0301 	and.w	r3, r3, #1
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d045      	beq.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059f0:	f7fb ffc0 	bl	8001974 <HAL_GetTick>
 80059f4:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059f6:	e00a      	b.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059f8:	f7fb ffbc 	bl	8001974 <HAL_GetTick>
 80059fc:	4602      	mov	r2, r0
 80059fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a00:	1ad3      	subs	r3, r2, r3
 8005a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d901      	bls.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	e086      	b.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x238>
 8005a0e:	2302      	movs	r3, #2
 8005a10:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a14:	fa93 f3a3 	rbit	r3, r3
 8005a18:	627b      	str	r3, [r7, #36]	; 0x24
 8005a1a:	2302      	movs	r3, #2
 8005a1c:	623b      	str	r3, [r7, #32]
 8005a1e:	6a3b      	ldr	r3, [r7, #32]
 8005a20:	fa93 f3a3 	rbit	r3, r3
 8005a24:	61fb      	str	r3, [r7, #28]
  return result;
 8005a26:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a28:	fab3 f383 	clz	r3, r3
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	095b      	lsrs	r3, r3, #5
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	f043 0302 	orr.w	r3, r3, #2
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d102      	bne.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005a3c:	4b39      	ldr	r3, [pc, #228]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005a3e:	6a1b      	ldr	r3, [r3, #32]
 8005a40:	e007      	b.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8005a42:	2302      	movs	r3, #2
 8005a44:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	fa93 f3a3 	rbit	r3, r3
 8005a4c:	617b      	str	r3, [r7, #20]
 8005a4e:	4b35      	ldr	r3, [pc, #212]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a52:	2202      	movs	r2, #2
 8005a54:	613a      	str	r2, [r7, #16]
 8005a56:	693a      	ldr	r2, [r7, #16]
 8005a58:	fa92 f2a2 	rbit	r2, r2
 8005a5c:	60fa      	str	r2, [r7, #12]
  return result;
 8005a5e:	68fa      	ldr	r2, [r7, #12]
 8005a60:	fab2 f282 	clz	r2, r2
 8005a64:	b2d2      	uxtb	r2, r2
 8005a66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a6a:	b2d2      	uxtb	r2, r2
 8005a6c:	f002 021f 	and.w	r2, r2, #31
 8005a70:	2101      	movs	r1, #1
 8005a72:	fa01 f202 	lsl.w	r2, r1, r2
 8005a76:	4013      	ands	r3, r2
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d0bd      	beq.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005a7c:	4b29      	ldr	r3, [pc, #164]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005a7e:	6a1b      	ldr	r3, [r3, #32]
 8005a80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	4926      	ldr	r1, [pc, #152]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005a8e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d105      	bne.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a96:	4b23      	ldr	r3, [pc, #140]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005a98:	69db      	ldr	r3, [r3, #28]
 8005a9a:	4a22      	ldr	r2, [pc, #136]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005a9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005aa0:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 0301 	and.w	r3, r3, #1
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d008      	beq.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005aae:	4b1d      	ldr	r3, [pc, #116]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab2:	f023 0203 	bic.w	r2, r3, #3
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	491a      	ldr	r1, [pc, #104]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005abc:	4313      	orrs	r3, r2
 8005abe:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 0320 	and.w	r3, r3, #32
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d008      	beq.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005acc:	4b15      	ldr	r3, [pc, #84]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ad0:	f023 0210 	bic.w	r2, r3, #16
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	4912      	ldr	r1, [pc, #72]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005ada:	4313      	orrs	r3, r2
 8005adc:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d008      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005aea:	4b0e      	ldr	r3, [pc, #56]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aee:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	490b      	ldr	r1, [pc, #44]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005af8:	4313      	orrs	r3, r2
 8005afa:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d008      	beq.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005b08:	4b06      	ldr	r3, [pc, #24]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b0c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	695b      	ldr	r3, [r3, #20]
 8005b14:	4903      	ldr	r1, [pc, #12]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005b16:	4313      	orrs	r3, r2
 8005b18:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005b1a:	2300      	movs	r3, #0
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3748      	adds	r7, #72	; 0x48
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	40021000 	.word	0x40021000
 8005b28:	40007000 	.word	0x40007000
 8005b2c:	10908100 	.word	0x10908100

08005b30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b082      	sub	sp, #8
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d101      	bne.n	8005b42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e049      	b.n	8005bd6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d106      	bne.n	8005b5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f7fb fcf2 	bl	8001540 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2202      	movs	r2, #2
 8005b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	3304      	adds	r3, #4
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	4610      	mov	r0, r2
 8005b70:	f000 fe3a 	bl	80067e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005bd4:	2300      	movs	r3, #0
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3708      	adds	r7, #8
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
	...

08005be0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b085      	sub	sp, #20
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d001      	beq.n	8005bf8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e040      	b.n	8005c7a <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2202      	movs	r2, #2
 8005bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68da      	ldr	r2, [r3, #12]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f042 0201 	orr.w	r2, r2, #1
 8005c0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a1c      	ldr	r2, [pc, #112]	; (8005c88 <HAL_TIM_Base_Start_IT+0xa8>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d00e      	beq.n	8005c38 <HAL_TIM_Base_Start_IT+0x58>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c22:	d009      	beq.n	8005c38 <HAL_TIM_Base_Start_IT+0x58>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a18      	ldr	r2, [pc, #96]	; (8005c8c <HAL_TIM_Base_Start_IT+0xac>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d004      	beq.n	8005c38 <HAL_TIM_Base_Start_IT+0x58>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a17      	ldr	r2, [pc, #92]	; (8005c90 <HAL_TIM_Base_Start_IT+0xb0>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d115      	bne.n	8005c64 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	689a      	ldr	r2, [r3, #8]
 8005c3e:	4b15      	ldr	r3, [pc, #84]	; (8005c94 <HAL_TIM_Base_Start_IT+0xb4>)
 8005c40:	4013      	ands	r3, r2
 8005c42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2b06      	cmp	r3, #6
 8005c48:	d015      	beq.n	8005c76 <HAL_TIM_Base_Start_IT+0x96>
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c50:	d011      	beq.n	8005c76 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f042 0201 	orr.w	r2, r2, #1
 8005c60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c62:	e008      	b.n	8005c76 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f042 0201 	orr.w	r2, r2, #1
 8005c72:	601a      	str	r2, [r3, #0]
 8005c74:	e000      	b.n	8005c78 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c76:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3714      	adds	r7, #20
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr
 8005c86:	bf00      	nop
 8005c88:	40012c00 	.word	0x40012c00
 8005c8c:	40000400 	.word	0x40000400
 8005c90:	40014000 	.word	0x40014000
 8005c94:	00010007 	.word	0x00010007

08005c98 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b082      	sub	sp, #8
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d101      	bne.n	8005caa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e049      	b.n	8005d3e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d106      	bne.n	8005cc4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 f841 	bl	8005d46 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2202      	movs	r2, #2
 8005cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	3304      	adds	r3, #4
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	4610      	mov	r0, r2
 8005cd8:	f000 fd86 	bl	80067e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3708      	adds	r7, #8
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}

08005d46 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005d46:	b480      	push	{r7}
 8005d48:	b083      	sub	sp, #12
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005d4e:	bf00      	nop
 8005d50:	370c      	adds	r7, #12
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr
	...

08005d5c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d109      	bne.n	8005d80 <HAL_TIM_PWM_Start+0x24>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	bf14      	ite	ne
 8005d78:	2301      	movne	r3, #1
 8005d7a:	2300      	moveq	r3, #0
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	e03c      	b.n	8005dfa <HAL_TIM_PWM_Start+0x9e>
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	2b04      	cmp	r3, #4
 8005d84:	d109      	bne.n	8005d9a <HAL_TIM_PWM_Start+0x3e>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	bf14      	ite	ne
 8005d92:	2301      	movne	r3, #1
 8005d94:	2300      	moveq	r3, #0
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	e02f      	b.n	8005dfa <HAL_TIM_PWM_Start+0x9e>
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	2b08      	cmp	r3, #8
 8005d9e:	d109      	bne.n	8005db4 <HAL_TIM_PWM_Start+0x58>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	bf14      	ite	ne
 8005dac:	2301      	movne	r3, #1
 8005dae:	2300      	moveq	r3, #0
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	e022      	b.n	8005dfa <HAL_TIM_PWM_Start+0x9e>
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	2b0c      	cmp	r3, #12
 8005db8:	d109      	bne.n	8005dce <HAL_TIM_PWM_Start+0x72>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	bf14      	ite	ne
 8005dc6:	2301      	movne	r3, #1
 8005dc8:	2300      	moveq	r3, #0
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	e015      	b.n	8005dfa <HAL_TIM_PWM_Start+0x9e>
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	2b10      	cmp	r3, #16
 8005dd2:	d109      	bne.n	8005de8 <HAL_TIM_PWM_Start+0x8c>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	bf14      	ite	ne
 8005de0:	2301      	movne	r3, #1
 8005de2:	2300      	moveq	r3, #0
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	e008      	b.n	8005dfa <HAL_TIM_PWM_Start+0x9e>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	bf14      	ite	ne
 8005df4:	2301      	movne	r3, #1
 8005df6:	2300      	moveq	r3, #0
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d001      	beq.n	8005e02 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e088      	b.n	8005f14 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d104      	bne.n	8005e12 <HAL_TIM_PWM_Start+0xb6>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2202      	movs	r2, #2
 8005e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e10:	e023      	b.n	8005e5a <HAL_TIM_PWM_Start+0xfe>
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	2b04      	cmp	r3, #4
 8005e16:	d104      	bne.n	8005e22 <HAL_TIM_PWM_Start+0xc6>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2202      	movs	r2, #2
 8005e1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e20:	e01b      	b.n	8005e5a <HAL_TIM_PWM_Start+0xfe>
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	2b08      	cmp	r3, #8
 8005e26:	d104      	bne.n	8005e32 <HAL_TIM_PWM_Start+0xd6>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2202      	movs	r2, #2
 8005e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e30:	e013      	b.n	8005e5a <HAL_TIM_PWM_Start+0xfe>
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	2b0c      	cmp	r3, #12
 8005e36:	d104      	bne.n	8005e42 <HAL_TIM_PWM_Start+0xe6>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2202      	movs	r2, #2
 8005e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e40:	e00b      	b.n	8005e5a <HAL_TIM_PWM_Start+0xfe>
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	2b10      	cmp	r3, #16
 8005e46:	d104      	bne.n	8005e52 <HAL_TIM_PWM_Start+0xf6>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2202      	movs	r2, #2
 8005e4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e50:	e003      	b.n	8005e5a <HAL_TIM_PWM_Start+0xfe>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2202      	movs	r2, #2
 8005e56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	6839      	ldr	r1, [r7, #0]
 8005e62:	4618      	mov	r0, r3
 8005e64:	f001 f878 	bl	8006f58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a2b      	ldr	r2, [pc, #172]	; (8005f1c <HAL_TIM_PWM_Start+0x1c0>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d00e      	beq.n	8005e90 <HAL_TIM_PWM_Start+0x134>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a2a      	ldr	r2, [pc, #168]	; (8005f20 <HAL_TIM_PWM_Start+0x1c4>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d009      	beq.n	8005e90 <HAL_TIM_PWM_Start+0x134>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a28      	ldr	r2, [pc, #160]	; (8005f24 <HAL_TIM_PWM_Start+0x1c8>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d004      	beq.n	8005e90 <HAL_TIM_PWM_Start+0x134>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a27      	ldr	r2, [pc, #156]	; (8005f28 <HAL_TIM_PWM_Start+0x1cc>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d101      	bne.n	8005e94 <HAL_TIM_PWM_Start+0x138>
 8005e90:	2301      	movs	r3, #1
 8005e92:	e000      	b.n	8005e96 <HAL_TIM_PWM_Start+0x13a>
 8005e94:	2300      	movs	r3, #0
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d007      	beq.n	8005eaa <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ea8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a1b      	ldr	r2, [pc, #108]	; (8005f1c <HAL_TIM_PWM_Start+0x1c0>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d00e      	beq.n	8005ed2 <HAL_TIM_PWM_Start+0x176>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ebc:	d009      	beq.n	8005ed2 <HAL_TIM_PWM_Start+0x176>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a1a      	ldr	r2, [pc, #104]	; (8005f2c <HAL_TIM_PWM_Start+0x1d0>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d004      	beq.n	8005ed2 <HAL_TIM_PWM_Start+0x176>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a14      	ldr	r2, [pc, #80]	; (8005f20 <HAL_TIM_PWM_Start+0x1c4>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d115      	bne.n	8005efe <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	689a      	ldr	r2, [r3, #8]
 8005ed8:	4b15      	ldr	r3, [pc, #84]	; (8005f30 <HAL_TIM_PWM_Start+0x1d4>)
 8005eda:	4013      	ands	r3, r2
 8005edc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2b06      	cmp	r3, #6
 8005ee2:	d015      	beq.n	8005f10 <HAL_TIM_PWM_Start+0x1b4>
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005eea:	d011      	beq.n	8005f10 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f042 0201 	orr.w	r2, r2, #1
 8005efa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005efc:	e008      	b.n	8005f10 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f042 0201 	orr.w	r2, r2, #1
 8005f0c:	601a      	str	r2, [r3, #0]
 8005f0e:	e000      	b.n	8005f12 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f10:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f12:	2300      	movs	r3, #0
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3710      	adds	r7, #16
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}
 8005f1c:	40012c00 	.word	0x40012c00
 8005f20:	40014000 	.word	0x40014000
 8005f24:	40014400 	.word	0x40014400
 8005f28:	40014800 	.word	0x40014800
 8005f2c:	40000400 	.word	0x40000400
 8005f30:	00010007 	.word	0x00010007

08005f34 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b086      	sub	sp, #24
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d101      	bne.n	8005f48 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	e097      	b.n	8006078 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d106      	bne.n	8005f62 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f7fb fb75 	bl	800164c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2202      	movs	r2, #2
 8005f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	6812      	ldr	r2, [r2, #0]
 8005f74:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8005f78:	f023 0307 	bic.w	r3, r3, #7
 8005f7c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	3304      	adds	r3, #4
 8005f86:	4619      	mov	r1, r3
 8005f88:	4610      	mov	r0, r2
 8005f8a:	f000 fc2d 	bl	80067e8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	699b      	ldr	r3, [r3, #24]
 8005f9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	6a1b      	ldr	r3, [r3, #32]
 8005fa4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	697a      	ldr	r2, [r7, #20]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fb6:	f023 0303 	bic.w	r3, r3, #3
 8005fba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	689a      	ldr	r2, [r3, #8]
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	699b      	ldr	r3, [r3, #24]
 8005fc4:	021b      	lsls	r3, r3, #8
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	693a      	ldr	r2, [r7, #16]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005fd4:	f023 030c 	bic.w	r3, r3, #12
 8005fd8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005fe0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fe4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	68da      	ldr	r2, [r3, #12]
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	69db      	ldr	r3, [r3, #28]
 8005fee:	021b      	lsls	r3, r3, #8
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	693a      	ldr	r2, [r7, #16]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	691b      	ldr	r3, [r3, #16]
 8005ffc:	011a      	lsls	r2, r3, #4
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	6a1b      	ldr	r3, [r3, #32]
 8006002:	031b      	lsls	r3, r3, #12
 8006004:	4313      	orrs	r3, r2
 8006006:	693a      	ldr	r2, [r7, #16]
 8006008:	4313      	orrs	r3, r2
 800600a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006012:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800601a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	685a      	ldr	r2, [r3, #4]
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	695b      	ldr	r3, [r3, #20]
 8006024:	011b      	lsls	r3, r3, #4
 8006026:	4313      	orrs	r3, r2
 8006028:	68fa      	ldr	r2, [r7, #12]
 800602a:	4313      	orrs	r3, r2
 800602c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	697a      	ldr	r2, [r7, #20]
 8006034:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	693a      	ldr	r2, [r7, #16]
 800603c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	68fa      	ldr	r2, [r7, #12]
 8006044:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2201      	movs	r2, #1
 800604a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2201      	movs	r2, #1
 8006052:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2201      	movs	r2, #1
 800605a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2201      	movs	r2, #1
 8006062:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2201      	movs	r2, #1
 800606a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2201      	movs	r2, #1
 8006072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006076:	2300      	movs	r3, #0
}
 8006078:	4618      	mov	r0, r3
 800607a:	3718      	adds	r7, #24
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006090:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006098:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80060a0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060a8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d110      	bne.n	80060d2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80060b0:	7bfb      	ldrb	r3, [r7, #15]
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d102      	bne.n	80060bc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80060b6:	7b7b      	ldrb	r3, [r7, #13]
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d001      	beq.n	80060c0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	e069      	b.n	8006194 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2202      	movs	r2, #2
 80060c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2202      	movs	r2, #2
 80060cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060d0:	e031      	b.n	8006136 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	2b04      	cmp	r3, #4
 80060d6:	d110      	bne.n	80060fa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80060d8:	7bbb      	ldrb	r3, [r7, #14]
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d102      	bne.n	80060e4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80060de:	7b3b      	ldrb	r3, [r7, #12]
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d001      	beq.n	80060e8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	e055      	b.n	8006194 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2202      	movs	r2, #2
 80060ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2202      	movs	r2, #2
 80060f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060f8:	e01d      	b.n	8006136 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80060fa:	7bfb      	ldrb	r3, [r7, #15]
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d108      	bne.n	8006112 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006100:	7bbb      	ldrb	r3, [r7, #14]
 8006102:	2b01      	cmp	r3, #1
 8006104:	d105      	bne.n	8006112 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006106:	7b7b      	ldrb	r3, [r7, #13]
 8006108:	2b01      	cmp	r3, #1
 800610a:	d102      	bne.n	8006112 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800610c:	7b3b      	ldrb	r3, [r7, #12]
 800610e:	2b01      	cmp	r3, #1
 8006110:	d001      	beq.n	8006116 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	e03e      	b.n	8006194 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2202      	movs	r2, #2
 800611a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2202      	movs	r2, #2
 8006122:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2202      	movs	r2, #2
 800612a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2202      	movs	r2, #2
 8006132:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d003      	beq.n	8006144 <HAL_TIM_Encoder_Start+0xc4>
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	2b04      	cmp	r3, #4
 8006140:	d008      	beq.n	8006154 <HAL_TIM_Encoder_Start+0xd4>
 8006142:	e00f      	b.n	8006164 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2201      	movs	r2, #1
 800614a:	2100      	movs	r1, #0
 800614c:	4618      	mov	r0, r3
 800614e:	f000 ff03 	bl	8006f58 <TIM_CCxChannelCmd>
      break;
 8006152:	e016      	b.n	8006182 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	2201      	movs	r2, #1
 800615a:	2104      	movs	r1, #4
 800615c:	4618      	mov	r0, r3
 800615e:	f000 fefb 	bl	8006f58 <TIM_CCxChannelCmd>
      break;
 8006162:	e00e      	b.n	8006182 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	2201      	movs	r2, #1
 800616a:	2100      	movs	r1, #0
 800616c:	4618      	mov	r0, r3
 800616e:	f000 fef3 	bl	8006f58 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	2201      	movs	r2, #1
 8006178:	2104      	movs	r1, #4
 800617a:	4618      	mov	r0, r3
 800617c:	f000 feec 	bl	8006f58 <TIM_CCxChannelCmd>
      break;
 8006180:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f042 0201 	orr.w	r2, r2, #1
 8006190:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006192:	2300      	movs	r3, #0
}
 8006194:	4618      	mov	r0, r3
 8006196:	3710      	adds	r7, #16
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b082      	sub	sp, #8
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	f003 0302 	and.w	r3, r3, #2
 80061ae:	2b02      	cmp	r3, #2
 80061b0:	d122      	bne.n	80061f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	f003 0302 	and.w	r3, r3, #2
 80061bc:	2b02      	cmp	r3, #2
 80061be:	d11b      	bne.n	80061f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f06f 0202 	mvn.w	r2, #2
 80061c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2201      	movs	r2, #1
 80061ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	699b      	ldr	r3, [r3, #24]
 80061d6:	f003 0303 	and.w	r3, r3, #3
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d003      	beq.n	80061e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 fae3 	bl	80067aa <HAL_TIM_IC_CaptureCallback>
 80061e4:	e005      	b.n	80061f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 fad5 	bl	8006796 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f000 fae6 	bl	80067be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	691b      	ldr	r3, [r3, #16]
 80061fe:	f003 0304 	and.w	r3, r3, #4
 8006202:	2b04      	cmp	r3, #4
 8006204:	d122      	bne.n	800624c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	f003 0304 	and.w	r3, r3, #4
 8006210:	2b04      	cmp	r3, #4
 8006212:	d11b      	bne.n	800624c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f06f 0204 	mvn.w	r2, #4
 800621c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2202      	movs	r2, #2
 8006222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	699b      	ldr	r3, [r3, #24]
 800622a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800622e:	2b00      	cmp	r3, #0
 8006230:	d003      	beq.n	800623a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 fab9 	bl	80067aa <HAL_TIM_IC_CaptureCallback>
 8006238:	e005      	b.n	8006246 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 faab 	bl	8006796 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f000 fabc 	bl	80067be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	691b      	ldr	r3, [r3, #16]
 8006252:	f003 0308 	and.w	r3, r3, #8
 8006256:	2b08      	cmp	r3, #8
 8006258:	d122      	bne.n	80062a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	68db      	ldr	r3, [r3, #12]
 8006260:	f003 0308 	and.w	r3, r3, #8
 8006264:	2b08      	cmp	r3, #8
 8006266:	d11b      	bne.n	80062a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f06f 0208 	mvn.w	r2, #8
 8006270:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2204      	movs	r2, #4
 8006276:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	69db      	ldr	r3, [r3, #28]
 800627e:	f003 0303 	and.w	r3, r3, #3
 8006282:	2b00      	cmp	r3, #0
 8006284:	d003      	beq.n	800628e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 fa8f 	bl	80067aa <HAL_TIM_IC_CaptureCallback>
 800628c:	e005      	b.n	800629a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 fa81 	bl	8006796 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f000 fa92 	bl	80067be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2200      	movs	r2, #0
 800629e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	691b      	ldr	r3, [r3, #16]
 80062a6:	f003 0310 	and.w	r3, r3, #16
 80062aa:	2b10      	cmp	r3, #16
 80062ac:	d122      	bne.n	80062f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	f003 0310 	and.w	r3, r3, #16
 80062b8:	2b10      	cmp	r3, #16
 80062ba:	d11b      	bne.n	80062f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f06f 0210 	mvn.w	r2, #16
 80062c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2208      	movs	r2, #8
 80062ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	69db      	ldr	r3, [r3, #28]
 80062d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d003      	beq.n	80062e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 fa65 	bl	80067aa <HAL_TIM_IC_CaptureCallback>
 80062e0:	e005      	b.n	80062ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f000 fa57 	bl	8006796 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f000 fa68 	bl	80067be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2200      	movs	r2, #0
 80062f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	f003 0301 	and.w	r3, r3, #1
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d10e      	bne.n	8006320 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	f003 0301 	and.w	r3, r3, #1
 800630c:	2b01      	cmp	r3, #1
 800630e:	d107      	bne.n	8006320 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f06f 0201 	mvn.w	r2, #1
 8006318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f7fa fe76 	bl	800100c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800632a:	2b80      	cmp	r3, #128	; 0x80
 800632c:	d10e      	bne.n	800634c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006338:	2b80      	cmp	r3, #128	; 0x80
 800633a:	d107      	bne.n	800634c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f000 ff1c 	bl	8007184 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006356:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800635a:	d10e      	bne.n	800637a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	68db      	ldr	r3, [r3, #12]
 8006362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006366:	2b80      	cmp	r3, #128	; 0x80
 8006368:	d107      	bne.n	800637a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006372:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f000 ff0f 	bl	8007198 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	691b      	ldr	r3, [r3, #16]
 8006380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006384:	2b40      	cmp	r3, #64	; 0x40
 8006386:	d10e      	bne.n	80063a6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	68db      	ldr	r3, [r3, #12]
 800638e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006392:	2b40      	cmp	r3, #64	; 0x40
 8006394:	d107      	bne.n	80063a6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800639e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f000 fa16 	bl	80067d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	691b      	ldr	r3, [r3, #16]
 80063ac:	f003 0320 	and.w	r3, r3, #32
 80063b0:	2b20      	cmp	r3, #32
 80063b2:	d10e      	bne.n	80063d2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	68db      	ldr	r3, [r3, #12]
 80063ba:	f003 0320 	and.w	r3, r3, #32
 80063be:	2b20      	cmp	r3, #32
 80063c0:	d107      	bne.n	80063d2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f06f 0220 	mvn.w	r2, #32
 80063ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 fecf 	bl	8007170 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80063d2:	bf00      	nop
 80063d4:	3708      	adds	r7, #8
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
	...

080063dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b086      	sub	sp, #24
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063e8:	2300      	movs	r3, #0
 80063ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d101      	bne.n	80063fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80063f6:	2302      	movs	r3, #2
 80063f8:	e0ff      	b.n	80065fa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2201      	movs	r2, #1
 80063fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2b14      	cmp	r3, #20
 8006406:	f200 80f0 	bhi.w	80065ea <HAL_TIM_PWM_ConfigChannel+0x20e>
 800640a:	a201      	add	r2, pc, #4	; (adr r2, 8006410 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800640c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006410:	08006465 	.word	0x08006465
 8006414:	080065eb 	.word	0x080065eb
 8006418:	080065eb 	.word	0x080065eb
 800641c:	080065eb 	.word	0x080065eb
 8006420:	080064a5 	.word	0x080064a5
 8006424:	080065eb 	.word	0x080065eb
 8006428:	080065eb 	.word	0x080065eb
 800642c:	080065eb 	.word	0x080065eb
 8006430:	080064e7 	.word	0x080064e7
 8006434:	080065eb 	.word	0x080065eb
 8006438:	080065eb 	.word	0x080065eb
 800643c:	080065eb 	.word	0x080065eb
 8006440:	08006527 	.word	0x08006527
 8006444:	080065eb 	.word	0x080065eb
 8006448:	080065eb 	.word	0x080065eb
 800644c:	080065eb 	.word	0x080065eb
 8006450:	08006569 	.word	0x08006569
 8006454:	080065eb 	.word	0x080065eb
 8006458:	080065eb 	.word	0x080065eb
 800645c:	080065eb 	.word	0x080065eb
 8006460:	080065a9 	.word	0x080065a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	68b9      	ldr	r1, [r7, #8]
 800646a:	4618      	mov	r0, r3
 800646c:	f000 fa34 	bl	80068d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	699a      	ldr	r2, [r3, #24]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f042 0208 	orr.w	r2, r2, #8
 800647e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	699a      	ldr	r2, [r3, #24]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f022 0204 	bic.w	r2, r2, #4
 800648e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	6999      	ldr	r1, [r3, #24]
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	691a      	ldr	r2, [r3, #16]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	430a      	orrs	r2, r1
 80064a0:	619a      	str	r2, [r3, #24]
      break;
 80064a2:	e0a5      	b.n	80065f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	68b9      	ldr	r1, [r7, #8]
 80064aa:	4618      	mov	r0, r3
 80064ac:	f000 fa9a 	bl	80069e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	699a      	ldr	r2, [r3, #24]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	699a      	ldr	r2, [r3, #24]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	6999      	ldr	r1, [r3, #24]
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	691b      	ldr	r3, [r3, #16]
 80064da:	021a      	lsls	r2, r3, #8
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	430a      	orrs	r2, r1
 80064e2:	619a      	str	r2, [r3, #24]
      break;
 80064e4:	e084      	b.n	80065f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	68b9      	ldr	r1, [r7, #8]
 80064ec:	4618      	mov	r0, r3
 80064ee:	f000 faf9 	bl	8006ae4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	69da      	ldr	r2, [r3, #28]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f042 0208 	orr.w	r2, r2, #8
 8006500:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	69da      	ldr	r2, [r3, #28]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f022 0204 	bic.w	r2, r2, #4
 8006510:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	69d9      	ldr	r1, [r3, #28]
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	691a      	ldr	r2, [r3, #16]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	430a      	orrs	r2, r1
 8006522:	61da      	str	r2, [r3, #28]
      break;
 8006524:	e064      	b.n	80065f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	68b9      	ldr	r1, [r7, #8]
 800652c:	4618      	mov	r0, r3
 800652e:	f000 fb57 	bl	8006be0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	69da      	ldr	r2, [r3, #28]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006540:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	69da      	ldr	r2, [r3, #28]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006550:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	69d9      	ldr	r1, [r3, #28]
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	691b      	ldr	r3, [r3, #16]
 800655c:	021a      	lsls	r2, r3, #8
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	430a      	orrs	r2, r1
 8006564:	61da      	str	r2, [r3, #28]
      break;
 8006566:	e043      	b.n	80065f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	68b9      	ldr	r1, [r7, #8]
 800656e:	4618      	mov	r0, r3
 8006570:	f000 fb9a 	bl	8006ca8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f042 0208 	orr.w	r2, r2, #8
 8006582:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f022 0204 	bic.w	r2, r2, #4
 8006592:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	691a      	ldr	r2, [r3, #16]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	430a      	orrs	r2, r1
 80065a4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80065a6:	e023      	b.n	80065f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	68b9      	ldr	r1, [r7, #8]
 80065ae:	4618      	mov	r0, r3
 80065b0:	f000 fbd8 	bl	8006d64 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	691b      	ldr	r3, [r3, #16]
 80065de:	021a      	lsls	r2, r3, #8
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	430a      	orrs	r2, r1
 80065e6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80065e8:	e002      	b.n	80065f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	75fb      	strb	r3, [r7, #23]
      break;
 80065ee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2200      	movs	r2, #0
 80065f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80065f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3718      	adds	r7, #24
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}
 8006602:	bf00      	nop

08006604 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800660e:	2300      	movs	r3, #0
 8006610:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006618:	2b01      	cmp	r3, #1
 800661a:	d101      	bne.n	8006620 <HAL_TIM_ConfigClockSource+0x1c>
 800661c:	2302      	movs	r3, #2
 800661e:	e0b6      	b.n	800678e <HAL_TIM_ConfigClockSource+0x18a>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2202      	movs	r2, #2
 800662c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800663e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006642:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800664a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	68ba      	ldr	r2, [r7, #8]
 8006652:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800665c:	d03e      	beq.n	80066dc <HAL_TIM_ConfigClockSource+0xd8>
 800665e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006662:	f200 8087 	bhi.w	8006774 <HAL_TIM_ConfigClockSource+0x170>
 8006666:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800666a:	f000 8086 	beq.w	800677a <HAL_TIM_ConfigClockSource+0x176>
 800666e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006672:	d87f      	bhi.n	8006774 <HAL_TIM_ConfigClockSource+0x170>
 8006674:	2b70      	cmp	r3, #112	; 0x70
 8006676:	d01a      	beq.n	80066ae <HAL_TIM_ConfigClockSource+0xaa>
 8006678:	2b70      	cmp	r3, #112	; 0x70
 800667a:	d87b      	bhi.n	8006774 <HAL_TIM_ConfigClockSource+0x170>
 800667c:	2b60      	cmp	r3, #96	; 0x60
 800667e:	d050      	beq.n	8006722 <HAL_TIM_ConfigClockSource+0x11e>
 8006680:	2b60      	cmp	r3, #96	; 0x60
 8006682:	d877      	bhi.n	8006774 <HAL_TIM_ConfigClockSource+0x170>
 8006684:	2b50      	cmp	r3, #80	; 0x50
 8006686:	d03c      	beq.n	8006702 <HAL_TIM_ConfigClockSource+0xfe>
 8006688:	2b50      	cmp	r3, #80	; 0x50
 800668a:	d873      	bhi.n	8006774 <HAL_TIM_ConfigClockSource+0x170>
 800668c:	2b40      	cmp	r3, #64	; 0x40
 800668e:	d058      	beq.n	8006742 <HAL_TIM_ConfigClockSource+0x13e>
 8006690:	2b40      	cmp	r3, #64	; 0x40
 8006692:	d86f      	bhi.n	8006774 <HAL_TIM_ConfigClockSource+0x170>
 8006694:	2b30      	cmp	r3, #48	; 0x30
 8006696:	d064      	beq.n	8006762 <HAL_TIM_ConfigClockSource+0x15e>
 8006698:	2b30      	cmp	r3, #48	; 0x30
 800669a:	d86b      	bhi.n	8006774 <HAL_TIM_ConfigClockSource+0x170>
 800669c:	2b20      	cmp	r3, #32
 800669e:	d060      	beq.n	8006762 <HAL_TIM_ConfigClockSource+0x15e>
 80066a0:	2b20      	cmp	r3, #32
 80066a2:	d867      	bhi.n	8006774 <HAL_TIM_ConfigClockSource+0x170>
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d05c      	beq.n	8006762 <HAL_TIM_ConfigClockSource+0x15e>
 80066a8:	2b10      	cmp	r3, #16
 80066aa:	d05a      	beq.n	8006762 <HAL_TIM_ConfigClockSource+0x15e>
 80066ac:	e062      	b.n	8006774 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6818      	ldr	r0, [r3, #0]
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	6899      	ldr	r1, [r3, #8]
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	685a      	ldr	r2, [r3, #4]
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	68db      	ldr	r3, [r3, #12]
 80066be:	f000 fc2b 	bl	8006f18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80066d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	68ba      	ldr	r2, [r7, #8]
 80066d8:	609a      	str	r2, [r3, #8]
      break;
 80066da:	e04f      	b.n	800677c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6818      	ldr	r0, [r3, #0]
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	6899      	ldr	r1, [r3, #8]
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	685a      	ldr	r2, [r3, #4]
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	f000 fc14 	bl	8006f18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	689a      	ldr	r2, [r3, #8]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066fe:	609a      	str	r2, [r3, #8]
      break;
 8006700:	e03c      	b.n	800677c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6818      	ldr	r0, [r3, #0]
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	6859      	ldr	r1, [r3, #4]
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	68db      	ldr	r3, [r3, #12]
 800670e:	461a      	mov	r2, r3
 8006710:	f000 fb88 	bl	8006e24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	2150      	movs	r1, #80	; 0x50
 800671a:	4618      	mov	r0, r3
 800671c:	f000 fbe1 	bl	8006ee2 <TIM_ITRx_SetConfig>
      break;
 8006720:	e02c      	b.n	800677c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6818      	ldr	r0, [r3, #0]
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	6859      	ldr	r1, [r3, #4]
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	68db      	ldr	r3, [r3, #12]
 800672e:	461a      	mov	r2, r3
 8006730:	f000 fba7 	bl	8006e82 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	2160      	movs	r1, #96	; 0x60
 800673a:	4618      	mov	r0, r3
 800673c:	f000 fbd1 	bl	8006ee2 <TIM_ITRx_SetConfig>
      break;
 8006740:	e01c      	b.n	800677c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6818      	ldr	r0, [r3, #0]
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	6859      	ldr	r1, [r3, #4]
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	461a      	mov	r2, r3
 8006750:	f000 fb68 	bl	8006e24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	2140      	movs	r1, #64	; 0x40
 800675a:	4618      	mov	r0, r3
 800675c:	f000 fbc1 	bl	8006ee2 <TIM_ITRx_SetConfig>
      break;
 8006760:	e00c      	b.n	800677c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4619      	mov	r1, r3
 800676c:	4610      	mov	r0, r2
 800676e:	f000 fbb8 	bl	8006ee2 <TIM_ITRx_SetConfig>
      break;
 8006772:	e003      	b.n	800677c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	73fb      	strb	r3, [r7, #15]
      break;
 8006778:	e000      	b.n	800677c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800677a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2201      	movs	r2, #1
 8006780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800678c:	7bfb      	ldrb	r3, [r7, #15]
}
 800678e:	4618      	mov	r0, r3
 8006790:	3710      	adds	r7, #16
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}

08006796 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006796:	b480      	push	{r7}
 8006798:	b083      	sub	sp, #12
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800679e:	bf00      	nop
 80067a0:	370c      	adds	r7, #12
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr

080067aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80067aa:	b480      	push	{r7}
 80067ac:	b083      	sub	sp, #12
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80067b2:	bf00      	nop
 80067b4:	370c      	adds	r7, #12
 80067b6:	46bd      	mov	sp, r7
 80067b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067bc:	4770      	bx	lr

080067be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80067be:	b480      	push	{r7}
 80067c0:	b083      	sub	sp, #12
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80067c6:	bf00      	nop
 80067c8:	370c      	adds	r7, #12
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr

080067d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80067d2:	b480      	push	{r7}
 80067d4:	b083      	sub	sp, #12
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80067da:	bf00      	nop
 80067dc:	370c      	adds	r7, #12
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr
	...

080067e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b085      	sub	sp, #20
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a32      	ldr	r2, [pc, #200]	; (80068c4 <TIM_Base_SetConfig+0xdc>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d007      	beq.n	8006810 <TIM_Base_SetConfig+0x28>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006806:	d003      	beq.n	8006810 <TIM_Base_SetConfig+0x28>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	4a2f      	ldr	r2, [pc, #188]	; (80068c8 <TIM_Base_SetConfig+0xe0>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d108      	bne.n	8006822 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006816:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	68fa      	ldr	r2, [r7, #12]
 800681e:	4313      	orrs	r3, r2
 8006820:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a27      	ldr	r2, [pc, #156]	; (80068c4 <TIM_Base_SetConfig+0xdc>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d013      	beq.n	8006852 <TIM_Base_SetConfig+0x6a>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006830:	d00f      	beq.n	8006852 <TIM_Base_SetConfig+0x6a>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4a24      	ldr	r2, [pc, #144]	; (80068c8 <TIM_Base_SetConfig+0xe0>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d00b      	beq.n	8006852 <TIM_Base_SetConfig+0x6a>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4a23      	ldr	r2, [pc, #140]	; (80068cc <TIM_Base_SetConfig+0xe4>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d007      	beq.n	8006852 <TIM_Base_SetConfig+0x6a>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4a22      	ldr	r2, [pc, #136]	; (80068d0 <TIM_Base_SetConfig+0xe8>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d003      	beq.n	8006852 <TIM_Base_SetConfig+0x6a>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4a21      	ldr	r2, [pc, #132]	; (80068d4 <TIM_Base_SetConfig+0xec>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d108      	bne.n	8006864 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006858:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	68fa      	ldr	r2, [r7, #12]
 8006860:	4313      	orrs	r3, r2
 8006862:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	695b      	ldr	r3, [r3, #20]
 800686e:	4313      	orrs	r3, r2
 8006870:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	68fa      	ldr	r2, [r7, #12]
 8006876:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	689a      	ldr	r2, [r3, #8]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a0e      	ldr	r2, [pc, #56]	; (80068c4 <TIM_Base_SetConfig+0xdc>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d00b      	beq.n	80068a8 <TIM_Base_SetConfig+0xc0>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4a0e      	ldr	r2, [pc, #56]	; (80068cc <TIM_Base_SetConfig+0xe4>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d007      	beq.n	80068a8 <TIM_Base_SetConfig+0xc0>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4a0d      	ldr	r2, [pc, #52]	; (80068d0 <TIM_Base_SetConfig+0xe8>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d003      	beq.n	80068a8 <TIM_Base_SetConfig+0xc0>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4a0c      	ldr	r2, [pc, #48]	; (80068d4 <TIM_Base_SetConfig+0xec>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d103      	bne.n	80068b0 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	691a      	ldr	r2, [r3, #16]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2201      	movs	r2, #1
 80068b4:	615a      	str	r2, [r3, #20]
}
 80068b6:	bf00      	nop
 80068b8:	3714      	adds	r7, #20
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr
 80068c2:	bf00      	nop
 80068c4:	40012c00 	.word	0x40012c00
 80068c8:	40000400 	.word	0x40000400
 80068cc:	40014000 	.word	0x40014000
 80068d0:	40014400 	.word	0x40014400
 80068d4:	40014800 	.word	0x40014800

080068d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068d8:	b480      	push	{r7}
 80068da:	b087      	sub	sp, #28
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a1b      	ldr	r3, [r3, #32]
 80068e6:	f023 0201 	bic.w	r2, r3, #1
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6a1b      	ldr	r3, [r3, #32]
 80068f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	699b      	ldr	r3, [r3, #24]
 80068fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800690a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f023 0303 	bic.w	r3, r3, #3
 8006912:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	68fa      	ldr	r2, [r7, #12]
 800691a:	4313      	orrs	r3, r2
 800691c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	f023 0302 	bic.w	r3, r3, #2
 8006924:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	697a      	ldr	r2, [r7, #20]
 800692c:	4313      	orrs	r3, r2
 800692e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	4a28      	ldr	r2, [pc, #160]	; (80069d4 <TIM_OC1_SetConfig+0xfc>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d00b      	beq.n	8006950 <TIM_OC1_SetConfig+0x78>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4a27      	ldr	r2, [pc, #156]	; (80069d8 <TIM_OC1_SetConfig+0x100>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d007      	beq.n	8006950 <TIM_OC1_SetConfig+0x78>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	4a26      	ldr	r2, [pc, #152]	; (80069dc <TIM_OC1_SetConfig+0x104>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d003      	beq.n	8006950 <TIM_OC1_SetConfig+0x78>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	4a25      	ldr	r2, [pc, #148]	; (80069e0 <TIM_OC1_SetConfig+0x108>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d10c      	bne.n	800696a <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	f023 0308 	bic.w	r3, r3, #8
 8006956:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	697a      	ldr	r2, [r7, #20]
 800695e:	4313      	orrs	r3, r2
 8006960:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	f023 0304 	bic.w	r3, r3, #4
 8006968:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4a19      	ldr	r2, [pc, #100]	; (80069d4 <TIM_OC1_SetConfig+0xfc>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d00b      	beq.n	800698a <TIM_OC1_SetConfig+0xb2>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a18      	ldr	r2, [pc, #96]	; (80069d8 <TIM_OC1_SetConfig+0x100>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d007      	beq.n	800698a <TIM_OC1_SetConfig+0xb2>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4a17      	ldr	r2, [pc, #92]	; (80069dc <TIM_OC1_SetConfig+0x104>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d003      	beq.n	800698a <TIM_OC1_SetConfig+0xb2>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4a16      	ldr	r2, [pc, #88]	; (80069e0 <TIM_OC1_SetConfig+0x108>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d111      	bne.n	80069ae <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006990:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006998:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	695b      	ldr	r3, [r3, #20]
 800699e:	693a      	ldr	r2, [r7, #16]
 80069a0:	4313      	orrs	r3, r2
 80069a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	699b      	ldr	r3, [r3, #24]
 80069a8:	693a      	ldr	r2, [r7, #16]
 80069aa:	4313      	orrs	r3, r2
 80069ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	693a      	ldr	r2, [r7, #16]
 80069b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	68fa      	ldr	r2, [r7, #12]
 80069b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	685a      	ldr	r2, [r3, #4]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	697a      	ldr	r2, [r7, #20]
 80069c6:	621a      	str	r2, [r3, #32]
}
 80069c8:	bf00      	nop
 80069ca:	371c      	adds	r7, #28
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr
 80069d4:	40012c00 	.word	0x40012c00
 80069d8:	40014000 	.word	0x40014000
 80069dc:	40014400 	.word	0x40014400
 80069e0:	40014800 	.word	0x40014800

080069e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b087      	sub	sp, #28
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6a1b      	ldr	r3, [r3, #32]
 80069f2:	f023 0210 	bic.w	r2, r3, #16
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6a1b      	ldr	r3, [r3, #32]
 80069fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	699b      	ldr	r3, [r3, #24]
 8006a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	021b      	lsls	r3, r3, #8
 8006a26:	68fa      	ldr	r2, [r7, #12]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	f023 0320 	bic.w	r3, r3, #32
 8006a32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	011b      	lsls	r3, r3, #4
 8006a3a:	697a      	ldr	r2, [r7, #20]
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	4a24      	ldr	r2, [pc, #144]	; (8006ad4 <TIM_OC2_SetConfig+0xf0>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d10d      	bne.n	8006a64 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	011b      	lsls	r3, r3, #4
 8006a56:	697a      	ldr	r2, [r7, #20]
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a62:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	4a1b      	ldr	r2, [pc, #108]	; (8006ad4 <TIM_OC2_SetConfig+0xf0>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d00b      	beq.n	8006a84 <TIM_OC2_SetConfig+0xa0>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	4a1a      	ldr	r2, [pc, #104]	; (8006ad8 <TIM_OC2_SetConfig+0xf4>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d007      	beq.n	8006a84 <TIM_OC2_SetConfig+0xa0>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	4a19      	ldr	r2, [pc, #100]	; (8006adc <TIM_OC2_SetConfig+0xf8>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d003      	beq.n	8006a84 <TIM_OC2_SetConfig+0xa0>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	4a18      	ldr	r2, [pc, #96]	; (8006ae0 <TIM_OC2_SetConfig+0xfc>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d113      	bne.n	8006aac <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a8a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a92:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	695b      	ldr	r3, [r3, #20]
 8006a98:	009b      	lsls	r3, r3, #2
 8006a9a:	693a      	ldr	r2, [r7, #16]
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	699b      	ldr	r3, [r3, #24]
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	693a      	ldr	r2, [r7, #16]
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	693a      	ldr	r2, [r7, #16]
 8006ab0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	68fa      	ldr	r2, [r7, #12]
 8006ab6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	685a      	ldr	r2, [r3, #4]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	697a      	ldr	r2, [r7, #20]
 8006ac4:	621a      	str	r2, [r3, #32]
}
 8006ac6:	bf00      	nop
 8006ac8:	371c      	adds	r7, #28
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr
 8006ad2:	bf00      	nop
 8006ad4:	40012c00 	.word	0x40012c00
 8006ad8:	40014000 	.word	0x40014000
 8006adc:	40014400 	.word	0x40014400
 8006ae0:	40014800 	.word	0x40014800

08006ae4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b087      	sub	sp, #28
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6a1b      	ldr	r3, [r3, #32]
 8006af2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6a1b      	ldr	r3, [r3, #32]
 8006afe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	69db      	ldr	r3, [r3, #28]
 8006b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f023 0303 	bic.w	r3, r3, #3
 8006b1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	68fa      	ldr	r2, [r7, #12]
 8006b26:	4313      	orrs	r3, r2
 8006b28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	021b      	lsls	r3, r3, #8
 8006b38:	697a      	ldr	r2, [r7, #20]
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4a23      	ldr	r2, [pc, #140]	; (8006bd0 <TIM_OC3_SetConfig+0xec>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d10d      	bne.n	8006b62 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	68db      	ldr	r3, [r3, #12]
 8006b52:	021b      	lsls	r3, r3, #8
 8006b54:	697a      	ldr	r2, [r7, #20]
 8006b56:	4313      	orrs	r3, r2
 8006b58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b60:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	4a1a      	ldr	r2, [pc, #104]	; (8006bd0 <TIM_OC3_SetConfig+0xec>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d00b      	beq.n	8006b82 <TIM_OC3_SetConfig+0x9e>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4a19      	ldr	r2, [pc, #100]	; (8006bd4 <TIM_OC3_SetConfig+0xf0>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d007      	beq.n	8006b82 <TIM_OC3_SetConfig+0x9e>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	4a18      	ldr	r2, [pc, #96]	; (8006bd8 <TIM_OC3_SetConfig+0xf4>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d003      	beq.n	8006b82 <TIM_OC3_SetConfig+0x9e>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4a17      	ldr	r2, [pc, #92]	; (8006bdc <TIM_OC3_SetConfig+0xf8>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d113      	bne.n	8006baa <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	695b      	ldr	r3, [r3, #20]
 8006b96:	011b      	lsls	r3, r3, #4
 8006b98:	693a      	ldr	r2, [r7, #16]
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	699b      	ldr	r3, [r3, #24]
 8006ba2:	011b      	lsls	r3, r3, #4
 8006ba4:	693a      	ldr	r2, [r7, #16]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	693a      	ldr	r2, [r7, #16]
 8006bae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	68fa      	ldr	r2, [r7, #12]
 8006bb4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	685a      	ldr	r2, [r3, #4]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	697a      	ldr	r2, [r7, #20]
 8006bc2:	621a      	str	r2, [r3, #32]
}
 8006bc4:	bf00      	nop
 8006bc6:	371c      	adds	r7, #28
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr
 8006bd0:	40012c00 	.word	0x40012c00
 8006bd4:	40014000 	.word	0x40014000
 8006bd8:	40014400 	.word	0x40014400
 8006bdc:	40014800 	.word	0x40014800

08006be0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b087      	sub	sp, #28
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6a1b      	ldr	r3, [r3, #32]
 8006bee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6a1b      	ldr	r3, [r3, #32]
 8006bfa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	69db      	ldr	r3, [r3, #28]
 8006c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	021b      	lsls	r3, r3, #8
 8006c22:	68fa      	ldr	r2, [r7, #12]
 8006c24:	4313      	orrs	r3, r2
 8006c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	031b      	lsls	r3, r3, #12
 8006c36:	693a      	ldr	r2, [r7, #16]
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	4a16      	ldr	r2, [pc, #88]	; (8006c98 <TIM_OC4_SetConfig+0xb8>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d00b      	beq.n	8006c5c <TIM_OC4_SetConfig+0x7c>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	4a15      	ldr	r2, [pc, #84]	; (8006c9c <TIM_OC4_SetConfig+0xbc>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d007      	beq.n	8006c5c <TIM_OC4_SetConfig+0x7c>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	4a14      	ldr	r2, [pc, #80]	; (8006ca0 <TIM_OC4_SetConfig+0xc0>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d003      	beq.n	8006c5c <TIM_OC4_SetConfig+0x7c>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	4a13      	ldr	r2, [pc, #76]	; (8006ca4 <TIM_OC4_SetConfig+0xc4>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d109      	bne.n	8006c70 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	695b      	ldr	r3, [r3, #20]
 8006c68:	019b      	lsls	r3, r3, #6
 8006c6a:	697a      	ldr	r2, [r7, #20]
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	697a      	ldr	r2, [r7, #20]
 8006c74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	68fa      	ldr	r2, [r7, #12]
 8006c7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	685a      	ldr	r2, [r3, #4]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	693a      	ldr	r2, [r7, #16]
 8006c88:	621a      	str	r2, [r3, #32]
}
 8006c8a:	bf00      	nop
 8006c8c:	371c      	adds	r7, #28
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c94:	4770      	bx	lr
 8006c96:	bf00      	nop
 8006c98:	40012c00 	.word	0x40012c00
 8006c9c:	40014000 	.word	0x40014000
 8006ca0:	40014400 	.word	0x40014400
 8006ca4:	40014800 	.word	0x40014800

08006ca8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b087      	sub	sp, #28
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6a1b      	ldr	r3, [r3, #32]
 8006cb6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6a1b      	ldr	r3, [r3, #32]
 8006cc2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	68fa      	ldr	r2, [r7, #12]
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006cec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	041b      	lsls	r3, r3, #16
 8006cf4:	693a      	ldr	r2, [r7, #16]
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a15      	ldr	r2, [pc, #84]	; (8006d54 <TIM_OC5_SetConfig+0xac>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d00b      	beq.n	8006d1a <TIM_OC5_SetConfig+0x72>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a14      	ldr	r2, [pc, #80]	; (8006d58 <TIM_OC5_SetConfig+0xb0>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d007      	beq.n	8006d1a <TIM_OC5_SetConfig+0x72>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a13      	ldr	r2, [pc, #76]	; (8006d5c <TIM_OC5_SetConfig+0xb4>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d003      	beq.n	8006d1a <TIM_OC5_SetConfig+0x72>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4a12      	ldr	r2, [pc, #72]	; (8006d60 <TIM_OC5_SetConfig+0xb8>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d109      	bne.n	8006d2e <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d20:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	695b      	ldr	r3, [r3, #20]
 8006d26:	021b      	lsls	r3, r3, #8
 8006d28:	697a      	ldr	r2, [r7, #20]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	697a      	ldr	r2, [r7, #20]
 8006d32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	68fa      	ldr	r2, [r7, #12]
 8006d38:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	685a      	ldr	r2, [r3, #4]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	693a      	ldr	r2, [r7, #16]
 8006d46:	621a      	str	r2, [r3, #32]
}
 8006d48:	bf00      	nop
 8006d4a:	371c      	adds	r7, #28
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr
 8006d54:	40012c00 	.word	0x40012c00
 8006d58:	40014000 	.word	0x40014000
 8006d5c:	40014400 	.word	0x40014400
 8006d60:	40014800 	.word	0x40014800

08006d64 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b087      	sub	sp, #28
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6a1b      	ldr	r3, [r3, #32]
 8006d72:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6a1b      	ldr	r3, [r3, #32]
 8006d7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	021b      	lsls	r3, r3, #8
 8006d9e:	68fa      	ldr	r2, [r7, #12]
 8006da0:	4313      	orrs	r3, r2
 8006da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006daa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	051b      	lsls	r3, r3, #20
 8006db2:	693a      	ldr	r2, [r7, #16]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	4a16      	ldr	r2, [pc, #88]	; (8006e14 <TIM_OC6_SetConfig+0xb0>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d00b      	beq.n	8006dd8 <TIM_OC6_SetConfig+0x74>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	4a15      	ldr	r2, [pc, #84]	; (8006e18 <TIM_OC6_SetConfig+0xb4>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d007      	beq.n	8006dd8 <TIM_OC6_SetConfig+0x74>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	4a14      	ldr	r2, [pc, #80]	; (8006e1c <TIM_OC6_SetConfig+0xb8>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d003      	beq.n	8006dd8 <TIM_OC6_SetConfig+0x74>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	4a13      	ldr	r2, [pc, #76]	; (8006e20 <TIM_OC6_SetConfig+0xbc>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d109      	bne.n	8006dec <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006dde:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	695b      	ldr	r3, [r3, #20]
 8006de4:	029b      	lsls	r3, r3, #10
 8006de6:	697a      	ldr	r2, [r7, #20]
 8006de8:	4313      	orrs	r3, r2
 8006dea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	697a      	ldr	r2, [r7, #20]
 8006df0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	68fa      	ldr	r2, [r7, #12]
 8006df6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	685a      	ldr	r2, [r3, #4]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	693a      	ldr	r2, [r7, #16]
 8006e04:	621a      	str	r2, [r3, #32]
}
 8006e06:	bf00      	nop
 8006e08:	371c      	adds	r7, #28
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr
 8006e12:	bf00      	nop
 8006e14:	40012c00 	.word	0x40012c00
 8006e18:	40014000 	.word	0x40014000
 8006e1c:	40014400 	.word	0x40014400
 8006e20:	40014800 	.word	0x40014800

08006e24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b087      	sub	sp, #28
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	60f8      	str	r0, [r7, #12]
 8006e2c:	60b9      	str	r1, [r7, #8]
 8006e2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6a1b      	ldr	r3, [r3, #32]
 8006e34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	6a1b      	ldr	r3, [r3, #32]
 8006e3a:	f023 0201 	bic.w	r2, r3, #1
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	699b      	ldr	r3, [r3, #24]
 8006e46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	011b      	lsls	r3, r3, #4
 8006e54:	693a      	ldr	r2, [r7, #16]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	f023 030a 	bic.w	r3, r3, #10
 8006e60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e62:	697a      	ldr	r2, [r7, #20]
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	4313      	orrs	r3, r2
 8006e68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	693a      	ldr	r2, [r7, #16]
 8006e6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	697a      	ldr	r2, [r7, #20]
 8006e74:	621a      	str	r2, [r3, #32]
}
 8006e76:	bf00      	nop
 8006e78:	371c      	adds	r7, #28
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr

08006e82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e82:	b480      	push	{r7}
 8006e84:	b087      	sub	sp, #28
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	60f8      	str	r0, [r7, #12]
 8006e8a:	60b9      	str	r1, [r7, #8]
 8006e8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	6a1b      	ldr	r3, [r3, #32]
 8006e92:	f023 0210 	bic.w	r2, r3, #16
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	699b      	ldr	r3, [r3, #24]
 8006e9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	6a1b      	ldr	r3, [r3, #32]
 8006ea4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006eac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	031b      	lsls	r3, r3, #12
 8006eb2:	697a      	ldr	r2, [r7, #20]
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ebe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	011b      	lsls	r3, r3, #4
 8006ec4:	693a      	ldr	r2, [r7, #16]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	697a      	ldr	r2, [r7, #20]
 8006ece:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	693a      	ldr	r2, [r7, #16]
 8006ed4:	621a      	str	r2, [r3, #32]
}
 8006ed6:	bf00      	nop
 8006ed8:	371c      	adds	r7, #28
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr

08006ee2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ee2:	b480      	push	{r7}
 8006ee4:	b085      	sub	sp, #20
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
 8006eea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	689b      	ldr	r3, [r3, #8]
 8006ef0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ef8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006efa:	683a      	ldr	r2, [r7, #0]
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	4313      	orrs	r3, r2
 8006f00:	f043 0307 	orr.w	r3, r3, #7
 8006f04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	68fa      	ldr	r2, [r7, #12]
 8006f0a:	609a      	str	r2, [r3, #8]
}
 8006f0c:	bf00      	nop
 8006f0e:	3714      	adds	r7, #20
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b087      	sub	sp, #28
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	60f8      	str	r0, [r7, #12]
 8006f20:	60b9      	str	r1, [r7, #8]
 8006f22:	607a      	str	r2, [r7, #4]
 8006f24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	689b      	ldr	r3, [r3, #8]
 8006f2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	021a      	lsls	r2, r3, #8
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	431a      	orrs	r2, r3
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	697a      	ldr	r2, [r7, #20]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	697a      	ldr	r2, [r7, #20]
 8006f4a:	609a      	str	r2, [r3, #8]
}
 8006f4c:	bf00      	nop
 8006f4e:	371c      	adds	r7, #28
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr

08006f58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b087      	sub	sp, #28
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	60f8      	str	r0, [r7, #12]
 8006f60:	60b9      	str	r1, [r7, #8]
 8006f62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	f003 031f 	and.w	r3, r3, #31
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	6a1a      	ldr	r2, [r3, #32]
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	43db      	mvns	r3, r3
 8006f7a:	401a      	ands	r2, r3
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	6a1a      	ldr	r2, [r3, #32]
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	f003 031f 	and.w	r3, r3, #31
 8006f8a:	6879      	ldr	r1, [r7, #4]
 8006f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8006f90:	431a      	orrs	r2, r3
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	621a      	str	r2, [r3, #32]
}
 8006f96:	bf00      	nop
 8006f98:	371c      	adds	r7, #28
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr
	...

08006fa4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b085      	sub	sp, #20
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d101      	bne.n	8006fbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006fb8:	2302      	movs	r3, #2
 8006fba:	e054      	b.n	8007066 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2202      	movs	r2, #2
 8006fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a24      	ldr	r2, [pc, #144]	; (8007074 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d108      	bne.n	8006ff8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006fec:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	68fa      	ldr	r2, [r7, #12]
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ffe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	68fa      	ldr	r2, [r7, #12]
 8007006:	4313      	orrs	r3, r2
 8007008:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	68fa      	ldr	r2, [r7, #12]
 8007010:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a17      	ldr	r2, [pc, #92]	; (8007074 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d00e      	beq.n	800703a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007024:	d009      	beq.n	800703a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a13      	ldr	r2, [pc, #76]	; (8007078 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d004      	beq.n	800703a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a11      	ldr	r2, [pc, #68]	; (800707c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d10c      	bne.n	8007054 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007040:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	68ba      	ldr	r2, [r7, #8]
 8007048:	4313      	orrs	r3, r2
 800704a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	68ba      	ldr	r2, [r7, #8]
 8007052:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2201      	movs	r2, #1
 8007058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2200      	movs	r2, #0
 8007060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007064:	2300      	movs	r3, #0
}
 8007066:	4618      	mov	r0, r3
 8007068:	3714      	adds	r7, #20
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr
 8007072:	bf00      	nop
 8007074:	40012c00 	.word	0x40012c00
 8007078:	40000400 	.word	0x40000400
 800707c:	40014000 	.word	0x40014000

08007080 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007080:	b480      	push	{r7}
 8007082:	b085      	sub	sp, #20
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
 8007088:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800708a:	2300      	movs	r3, #0
 800708c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007094:	2b01      	cmp	r3, #1
 8007096:	d101      	bne.n	800709c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007098:	2302      	movs	r3, #2
 800709a:	e060      	b.n	800715e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2201      	movs	r2, #1
 80070a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	68db      	ldr	r3, [r3, #12]
 80070ae:	4313      	orrs	r3, r2
 80070b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	4313      	orrs	r3, r2
 80070be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	4313      	orrs	r3, r2
 80070cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4313      	orrs	r3, r2
 80070da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	691b      	ldr	r3, [r3, #16]
 80070e6:	4313      	orrs	r3, r2
 80070e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	695b      	ldr	r3, [r3, #20]
 80070f4:	4313      	orrs	r3, r2
 80070f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007102:	4313      	orrs	r3, r2
 8007104:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	699b      	ldr	r3, [r3, #24]
 8007110:	041b      	lsls	r3, r3, #16
 8007112:	4313      	orrs	r3, r2
 8007114:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a14      	ldr	r2, [pc, #80]	; (800716c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d115      	bne.n	800714c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712a:	051b      	lsls	r3, r3, #20
 800712c:	4313      	orrs	r3, r2
 800712e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	69db      	ldr	r3, [r3, #28]
 800713a:	4313      	orrs	r3, r2
 800713c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	6a1b      	ldr	r3, [r3, #32]
 8007148:	4313      	orrs	r3, r2
 800714a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	68fa      	ldr	r2, [r7, #12]
 8007152:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800715c:	2300      	movs	r3, #0
}
 800715e:	4618      	mov	r0, r3
 8007160:	3714      	adds	r7, #20
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr
 800716a:	bf00      	nop
 800716c:	40012c00 	.word	0x40012c00

08007170 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007170:	b480      	push	{r7}
 8007172:	b083      	sub	sp, #12
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007178:	bf00      	nop
 800717a:	370c      	adds	r7, #12
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr

08007184 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800718c:	bf00      	nop
 800718e:	370c      	adds	r7, #12
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr

08007198 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80071a0:	bf00      	nop
 80071a2:	370c      	adds	r7, #12
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr

080071ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b082      	sub	sp, #8
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d101      	bne.n	80071be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	e040      	b.n	8007240 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d106      	bne.n	80071d4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2200      	movs	r2, #0
 80071ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f7fa fb08 	bl	80017e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2224      	movs	r2, #36	; 0x24
 80071d8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f022 0201 	bic.w	r2, r2, #1
 80071e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f000 f82c 	bl	8007248 <UART_SetConfig>
 80071f0:	4603      	mov	r3, r0
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d101      	bne.n	80071fa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80071f6:	2301      	movs	r3, #1
 80071f8:	e022      	b.n	8007240 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d002      	beq.n	8007208 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 f956 	bl	80074b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	685a      	ldr	r2, [r3, #4]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007216:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	689a      	ldr	r2, [r3, #8]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007226:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f042 0201 	orr.w	r2, r2, #1
 8007236:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 f9dd 	bl	80075f8 <UART_CheckIdleState>
 800723e:	4603      	mov	r3, r0
}
 8007240:	4618      	mov	r0, r3
 8007242:	3708      	adds	r7, #8
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}

08007248 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b088      	sub	sp, #32
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007250:	2300      	movs	r3, #0
 8007252:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	689a      	ldr	r2, [r3, #8]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	691b      	ldr	r3, [r3, #16]
 800725c:	431a      	orrs	r2, r3
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	695b      	ldr	r3, [r3, #20]
 8007262:	431a      	orrs	r2, r3
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	69db      	ldr	r3, [r3, #28]
 8007268:	4313      	orrs	r3, r2
 800726a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	4b8a      	ldr	r3, [pc, #552]	; (800749c <UART_SetConfig+0x254>)
 8007274:	4013      	ands	r3, r2
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	6812      	ldr	r2, [r2, #0]
 800727a:	6979      	ldr	r1, [r7, #20]
 800727c:	430b      	orrs	r3, r1
 800727e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	68da      	ldr	r2, [r3, #12]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	430a      	orrs	r2, r1
 8007294:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	699b      	ldr	r3, [r3, #24]
 800729a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6a1b      	ldr	r3, [r3, #32]
 80072a0:	697a      	ldr	r2, [r7, #20]
 80072a2:	4313      	orrs	r3, r2
 80072a4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	697a      	ldr	r2, [r7, #20]
 80072b6:	430a      	orrs	r2, r1
 80072b8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a78      	ldr	r2, [pc, #480]	; (80074a0 <UART_SetConfig+0x258>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d120      	bne.n	8007306 <UART_SetConfig+0xbe>
 80072c4:	4b77      	ldr	r3, [pc, #476]	; (80074a4 <UART_SetConfig+0x25c>)
 80072c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072c8:	f003 0303 	and.w	r3, r3, #3
 80072cc:	2b03      	cmp	r3, #3
 80072ce:	d817      	bhi.n	8007300 <UART_SetConfig+0xb8>
 80072d0:	a201      	add	r2, pc, #4	; (adr r2, 80072d8 <UART_SetConfig+0x90>)
 80072d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072d6:	bf00      	nop
 80072d8:	080072e9 	.word	0x080072e9
 80072dc:	080072f5 	.word	0x080072f5
 80072e0:	080072fb 	.word	0x080072fb
 80072e4:	080072ef 	.word	0x080072ef
 80072e8:	2300      	movs	r3, #0
 80072ea:	77fb      	strb	r3, [r7, #31]
 80072ec:	e01d      	b.n	800732a <UART_SetConfig+0xe2>
 80072ee:	2302      	movs	r3, #2
 80072f0:	77fb      	strb	r3, [r7, #31]
 80072f2:	e01a      	b.n	800732a <UART_SetConfig+0xe2>
 80072f4:	2304      	movs	r3, #4
 80072f6:	77fb      	strb	r3, [r7, #31]
 80072f8:	e017      	b.n	800732a <UART_SetConfig+0xe2>
 80072fa:	2308      	movs	r3, #8
 80072fc:	77fb      	strb	r3, [r7, #31]
 80072fe:	e014      	b.n	800732a <UART_SetConfig+0xe2>
 8007300:	2310      	movs	r3, #16
 8007302:	77fb      	strb	r3, [r7, #31]
 8007304:	e011      	b.n	800732a <UART_SetConfig+0xe2>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a67      	ldr	r2, [pc, #412]	; (80074a8 <UART_SetConfig+0x260>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d102      	bne.n	8007316 <UART_SetConfig+0xce>
 8007310:	2300      	movs	r3, #0
 8007312:	77fb      	strb	r3, [r7, #31]
 8007314:	e009      	b.n	800732a <UART_SetConfig+0xe2>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a64      	ldr	r2, [pc, #400]	; (80074ac <UART_SetConfig+0x264>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d102      	bne.n	8007326 <UART_SetConfig+0xde>
 8007320:	2300      	movs	r3, #0
 8007322:	77fb      	strb	r3, [r7, #31]
 8007324:	e001      	b.n	800732a <UART_SetConfig+0xe2>
 8007326:	2310      	movs	r3, #16
 8007328:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	69db      	ldr	r3, [r3, #28]
 800732e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007332:	d15b      	bne.n	80073ec <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8007334:	7ffb      	ldrb	r3, [r7, #31]
 8007336:	2b08      	cmp	r3, #8
 8007338:	d827      	bhi.n	800738a <UART_SetConfig+0x142>
 800733a:	a201      	add	r2, pc, #4	; (adr r2, 8007340 <UART_SetConfig+0xf8>)
 800733c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007340:	08007365 	.word	0x08007365
 8007344:	0800736d 	.word	0x0800736d
 8007348:	08007375 	.word	0x08007375
 800734c:	0800738b 	.word	0x0800738b
 8007350:	0800737b 	.word	0x0800737b
 8007354:	0800738b 	.word	0x0800738b
 8007358:	0800738b 	.word	0x0800738b
 800735c:	0800738b 	.word	0x0800738b
 8007360:	08007383 	.word	0x08007383
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007364:	f7fe fa7a 	bl	800585c <HAL_RCC_GetPCLK1Freq>
 8007368:	61b8      	str	r0, [r7, #24]
        break;
 800736a:	e013      	b.n	8007394 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800736c:	f7fe fa98 	bl	80058a0 <HAL_RCC_GetPCLK2Freq>
 8007370:	61b8      	str	r0, [r7, #24]
        break;
 8007372:	e00f      	b.n	8007394 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007374:	4b4e      	ldr	r3, [pc, #312]	; (80074b0 <UART_SetConfig+0x268>)
 8007376:	61bb      	str	r3, [r7, #24]
        break;
 8007378:	e00c      	b.n	8007394 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800737a:	f7fe f9f9 	bl	8005770 <HAL_RCC_GetSysClockFreq>
 800737e:	61b8      	str	r0, [r7, #24]
        break;
 8007380:	e008      	b.n	8007394 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007382:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007386:	61bb      	str	r3, [r7, #24]
        break;
 8007388:	e004      	b.n	8007394 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800738a:	2300      	movs	r3, #0
 800738c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800738e:	2301      	movs	r3, #1
 8007390:	77bb      	strb	r3, [r7, #30]
        break;
 8007392:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007394:	69bb      	ldr	r3, [r7, #24]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d074      	beq.n	8007484 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800739a:	69bb      	ldr	r3, [r7, #24]
 800739c:	005a      	lsls	r2, r3, #1
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	085b      	lsrs	r3, r3, #1
 80073a4:	441a      	add	r2, r3
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	2b0f      	cmp	r3, #15
 80073b6:	d916      	bls.n	80073e6 <UART_SetConfig+0x19e>
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073be:	d212      	bcs.n	80073e6 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	f023 030f 	bic.w	r3, r3, #15
 80073c8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	085b      	lsrs	r3, r3, #1
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	f003 0307 	and.w	r3, r3, #7
 80073d4:	b29a      	uxth	r2, r3
 80073d6:	89fb      	ldrh	r3, [r7, #14]
 80073d8:	4313      	orrs	r3, r2
 80073da:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	89fa      	ldrh	r2, [r7, #14]
 80073e2:	60da      	str	r2, [r3, #12]
 80073e4:	e04e      	b.n	8007484 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80073e6:	2301      	movs	r3, #1
 80073e8:	77bb      	strb	r3, [r7, #30]
 80073ea:	e04b      	b.n	8007484 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80073ec:	7ffb      	ldrb	r3, [r7, #31]
 80073ee:	2b08      	cmp	r3, #8
 80073f0:	d827      	bhi.n	8007442 <UART_SetConfig+0x1fa>
 80073f2:	a201      	add	r2, pc, #4	; (adr r2, 80073f8 <UART_SetConfig+0x1b0>)
 80073f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073f8:	0800741d 	.word	0x0800741d
 80073fc:	08007425 	.word	0x08007425
 8007400:	0800742d 	.word	0x0800742d
 8007404:	08007443 	.word	0x08007443
 8007408:	08007433 	.word	0x08007433
 800740c:	08007443 	.word	0x08007443
 8007410:	08007443 	.word	0x08007443
 8007414:	08007443 	.word	0x08007443
 8007418:	0800743b 	.word	0x0800743b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800741c:	f7fe fa1e 	bl	800585c <HAL_RCC_GetPCLK1Freq>
 8007420:	61b8      	str	r0, [r7, #24]
        break;
 8007422:	e013      	b.n	800744c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007424:	f7fe fa3c 	bl	80058a0 <HAL_RCC_GetPCLK2Freq>
 8007428:	61b8      	str	r0, [r7, #24]
        break;
 800742a:	e00f      	b.n	800744c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800742c:	4b20      	ldr	r3, [pc, #128]	; (80074b0 <UART_SetConfig+0x268>)
 800742e:	61bb      	str	r3, [r7, #24]
        break;
 8007430:	e00c      	b.n	800744c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007432:	f7fe f99d 	bl	8005770 <HAL_RCC_GetSysClockFreq>
 8007436:	61b8      	str	r0, [r7, #24]
        break;
 8007438:	e008      	b.n	800744c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800743a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800743e:	61bb      	str	r3, [r7, #24]
        break;
 8007440:	e004      	b.n	800744c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8007442:	2300      	movs	r3, #0
 8007444:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007446:	2301      	movs	r3, #1
 8007448:	77bb      	strb	r3, [r7, #30]
        break;
 800744a:	bf00      	nop
    }

    if (pclk != 0U)
 800744c:	69bb      	ldr	r3, [r7, #24]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d018      	beq.n	8007484 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	085a      	lsrs	r2, r3, #1
 8007458:	69bb      	ldr	r3, [r7, #24]
 800745a:	441a      	add	r2, r3
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	fbb2 f3f3 	udiv	r3, r2, r3
 8007464:	b29b      	uxth	r3, r3
 8007466:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	2b0f      	cmp	r3, #15
 800746c:	d908      	bls.n	8007480 <UART_SetConfig+0x238>
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007474:	d204      	bcs.n	8007480 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	693a      	ldr	r2, [r7, #16]
 800747c:	60da      	str	r2, [r3, #12]
 800747e:	e001      	b.n	8007484 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8007480:	2301      	movs	r3, #1
 8007482:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007490:	7fbb      	ldrb	r3, [r7, #30]
}
 8007492:	4618      	mov	r0, r3
 8007494:	3720      	adds	r7, #32
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}
 800749a:	bf00      	nop
 800749c:	efff69f3 	.word	0xefff69f3
 80074a0:	40013800 	.word	0x40013800
 80074a4:	40021000 	.word	0x40021000
 80074a8:	40004400 	.word	0x40004400
 80074ac:	40004800 	.word	0x40004800
 80074b0:	007a1200 	.word	0x007a1200

080074b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b083      	sub	sp, #12
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c0:	f003 0301 	and.w	r3, r3, #1
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d00a      	beq.n	80074de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	430a      	orrs	r2, r1
 80074dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e2:	f003 0302 	and.w	r3, r3, #2
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d00a      	beq.n	8007500 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	430a      	orrs	r2, r1
 80074fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007504:	f003 0304 	and.w	r3, r3, #4
 8007508:	2b00      	cmp	r3, #0
 800750a:	d00a      	beq.n	8007522 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	430a      	orrs	r2, r1
 8007520:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007526:	f003 0308 	and.w	r3, r3, #8
 800752a:	2b00      	cmp	r3, #0
 800752c:	d00a      	beq.n	8007544 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	430a      	orrs	r2, r1
 8007542:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007548:	f003 0310 	and.w	r3, r3, #16
 800754c:	2b00      	cmp	r3, #0
 800754e:	d00a      	beq.n	8007566 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	689b      	ldr	r3, [r3, #8]
 8007556:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	430a      	orrs	r2, r1
 8007564:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800756a:	f003 0320 	and.w	r3, r3, #32
 800756e:	2b00      	cmp	r3, #0
 8007570:	d00a      	beq.n	8007588 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	430a      	orrs	r2, r1
 8007586:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800758c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007590:	2b00      	cmp	r3, #0
 8007592:	d01a      	beq.n	80075ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	430a      	orrs	r2, r1
 80075a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075b2:	d10a      	bne.n	80075ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	430a      	orrs	r2, r1
 80075c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d00a      	beq.n	80075ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	430a      	orrs	r2, r1
 80075ea:	605a      	str	r2, [r3, #4]
  }
}
 80075ec:	bf00      	nop
 80075ee:	370c      	adds	r7, #12
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr

080075f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b086      	sub	sp, #24
 80075fc:	af02      	add	r7, sp, #8
 80075fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2200      	movs	r2, #0
 8007604:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007608:	f7fa f9b4 	bl	8001974 <HAL_GetTick>
 800760c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f003 0308 	and.w	r3, r3, #8
 8007618:	2b08      	cmp	r3, #8
 800761a:	d10e      	bne.n	800763a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800761c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007620:	9300      	str	r3, [sp, #0]
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2200      	movs	r2, #0
 8007626:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f000 f82d 	bl	800768a <UART_WaitOnFlagUntilTimeout>
 8007630:	4603      	mov	r3, r0
 8007632:	2b00      	cmp	r3, #0
 8007634:	d001      	beq.n	800763a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007636:	2303      	movs	r3, #3
 8007638:	e023      	b.n	8007682 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f003 0304 	and.w	r3, r3, #4
 8007644:	2b04      	cmp	r3, #4
 8007646:	d10e      	bne.n	8007666 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007648:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800764c:	9300      	str	r3, [sp, #0]
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2200      	movs	r2, #0
 8007652:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f000 f817 	bl	800768a <UART_WaitOnFlagUntilTimeout>
 800765c:	4603      	mov	r3, r0
 800765e:	2b00      	cmp	r3, #0
 8007660:	d001      	beq.n	8007666 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007662:	2303      	movs	r3, #3
 8007664:	e00d      	b.n	8007682 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2220      	movs	r2, #32
 800766a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2220      	movs	r2, #32
 8007670:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2200      	movs	r2, #0
 8007676:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2200      	movs	r2, #0
 800767c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007680:	2300      	movs	r3, #0
}
 8007682:	4618      	mov	r0, r3
 8007684:	3710      	adds	r7, #16
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}

0800768a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800768a:	b580      	push	{r7, lr}
 800768c:	b09c      	sub	sp, #112	; 0x70
 800768e:	af00      	add	r7, sp, #0
 8007690:	60f8      	str	r0, [r7, #12]
 8007692:	60b9      	str	r1, [r7, #8]
 8007694:	603b      	str	r3, [r7, #0]
 8007696:	4613      	mov	r3, r2
 8007698:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800769a:	e0a5      	b.n	80077e8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800769c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800769e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076a2:	f000 80a1 	beq.w	80077e8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076a6:	f7fa f965 	bl	8001974 <HAL_GetTick>
 80076aa:	4602      	mov	r2, r0
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	1ad3      	subs	r3, r2, r3
 80076b0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d302      	bcc.n	80076bc <UART_WaitOnFlagUntilTimeout+0x32>
 80076b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d13e      	bne.n	800773a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076c4:	e853 3f00 	ldrex	r3, [r3]
 80076c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80076ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80076d0:	667b      	str	r3, [r7, #100]	; 0x64
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	461a      	mov	r2, r3
 80076d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80076dc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80076e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80076e2:	e841 2300 	strex	r3, r2, [r1]
 80076e6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80076e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d1e6      	bne.n	80076bc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	3308      	adds	r3, #8
 80076f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076f8:	e853 3f00 	ldrex	r3, [r3]
 80076fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80076fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007700:	f023 0301 	bic.w	r3, r3, #1
 8007704:	663b      	str	r3, [r7, #96]	; 0x60
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	3308      	adds	r3, #8
 800770c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800770e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007710:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007712:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007714:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007716:	e841 2300 	strex	r3, r2, [r1]
 800771a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800771c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800771e:	2b00      	cmp	r3, #0
 8007720:	d1e5      	bne.n	80076ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2220      	movs	r2, #32
 8007726:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	2220      	movs	r2, #32
 800772c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	2200      	movs	r2, #0
 8007732:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007736:	2303      	movs	r3, #3
 8007738:	e067      	b.n	800780a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f003 0304 	and.w	r3, r3, #4
 8007744:	2b00      	cmp	r3, #0
 8007746:	d04f      	beq.n	80077e8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	69db      	ldr	r3, [r3, #28]
 800774e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007752:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007756:	d147      	bne.n	80077e8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007760:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800776a:	e853 3f00 	ldrex	r3, [r3]
 800776e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007772:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007776:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	461a      	mov	r2, r3
 800777e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007780:	637b      	str	r3, [r7, #52]	; 0x34
 8007782:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007784:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007786:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007788:	e841 2300 	strex	r3, r2, [r1]
 800778c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800778e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007790:	2b00      	cmp	r3, #0
 8007792:	d1e6      	bne.n	8007762 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	3308      	adds	r3, #8
 800779a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	e853 3f00 	ldrex	r3, [r3]
 80077a2:	613b      	str	r3, [r7, #16]
   return(result);
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	f023 0301 	bic.w	r3, r3, #1
 80077aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	3308      	adds	r3, #8
 80077b2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80077b4:	623a      	str	r2, [r7, #32]
 80077b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b8:	69f9      	ldr	r1, [r7, #28]
 80077ba:	6a3a      	ldr	r2, [r7, #32]
 80077bc:	e841 2300 	strex	r3, r2, [r1]
 80077c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80077c2:	69bb      	ldr	r3, [r7, #24]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d1e5      	bne.n	8007794 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2220      	movs	r2, #32
 80077cc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2220      	movs	r2, #32
 80077d2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2220      	movs	r2, #32
 80077d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2200      	movs	r2, #0
 80077e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80077e4:	2303      	movs	r3, #3
 80077e6:	e010      	b.n	800780a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	69da      	ldr	r2, [r3, #28]
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	4013      	ands	r3, r2
 80077f2:	68ba      	ldr	r2, [r7, #8]
 80077f4:	429a      	cmp	r2, r3
 80077f6:	bf0c      	ite	eq
 80077f8:	2301      	moveq	r3, #1
 80077fa:	2300      	movne	r3, #0
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	461a      	mov	r2, r3
 8007800:	79fb      	ldrb	r3, [r7, #7]
 8007802:	429a      	cmp	r2, r3
 8007804:	f43f af4a 	beq.w	800769c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007808:	2300      	movs	r3, #0
}
 800780a:	4618      	mov	r0, r3
 800780c:	3770      	adds	r7, #112	; 0x70
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}
	...

08007814 <__libc_init_array>:
 8007814:	b570      	push	{r4, r5, r6, lr}
 8007816:	4d0d      	ldr	r5, [pc, #52]	; (800784c <__libc_init_array+0x38>)
 8007818:	4c0d      	ldr	r4, [pc, #52]	; (8007850 <__libc_init_array+0x3c>)
 800781a:	1b64      	subs	r4, r4, r5
 800781c:	10a4      	asrs	r4, r4, #2
 800781e:	2600      	movs	r6, #0
 8007820:	42a6      	cmp	r6, r4
 8007822:	d109      	bne.n	8007838 <__libc_init_array+0x24>
 8007824:	4d0b      	ldr	r5, [pc, #44]	; (8007854 <__libc_init_array+0x40>)
 8007826:	4c0c      	ldr	r4, [pc, #48]	; (8007858 <__libc_init_array+0x44>)
 8007828:	f000 f820 	bl	800786c <_init>
 800782c:	1b64      	subs	r4, r4, r5
 800782e:	10a4      	asrs	r4, r4, #2
 8007830:	2600      	movs	r6, #0
 8007832:	42a6      	cmp	r6, r4
 8007834:	d105      	bne.n	8007842 <__libc_init_array+0x2e>
 8007836:	bd70      	pop	{r4, r5, r6, pc}
 8007838:	f855 3b04 	ldr.w	r3, [r5], #4
 800783c:	4798      	blx	r3
 800783e:	3601      	adds	r6, #1
 8007840:	e7ee      	b.n	8007820 <__libc_init_array+0xc>
 8007842:	f855 3b04 	ldr.w	r3, [r5], #4
 8007846:	4798      	blx	r3
 8007848:	3601      	adds	r6, #1
 800784a:	e7f2      	b.n	8007832 <__libc_init_array+0x1e>
 800784c:	080078bc 	.word	0x080078bc
 8007850:	080078bc 	.word	0x080078bc
 8007854:	080078bc 	.word	0x080078bc
 8007858:	080078c0 	.word	0x080078c0

0800785c <memset>:
 800785c:	4402      	add	r2, r0
 800785e:	4603      	mov	r3, r0
 8007860:	4293      	cmp	r3, r2
 8007862:	d100      	bne.n	8007866 <memset+0xa>
 8007864:	4770      	bx	lr
 8007866:	f803 1b01 	strb.w	r1, [r3], #1
 800786a:	e7f9      	b.n	8007860 <memset+0x4>

0800786c <_init>:
 800786c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800786e:	bf00      	nop
 8007870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007872:	bc08      	pop	{r3}
 8007874:	469e      	mov	lr, r3
 8007876:	4770      	bx	lr

08007878 <_fini>:
 8007878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800787a:	bf00      	nop
 800787c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800787e:	bc08      	pop	{r3}
 8007880:	469e      	mov	lr, r3
 8007882:	4770      	bx	lr
