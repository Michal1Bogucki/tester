
tester.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006990  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006b18  08006b18  00016b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b50  08006b50  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08006b50  08006b50  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006b50  08006b50  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b50  08006b50  00016b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b54  08006b54  00016b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006b58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000380  2000000c  08006b64  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000038c  08006b64  0002038c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000225be  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a9e  00000000  00000000  000425fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001468  00000000  00000000  00046098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012e0  00000000  00000000  00047500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004ac6  00000000  00000000  000487e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c655  00000000  00000000  0004d2a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b0637  00000000  00000000  000698fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00119f32  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054e0  00000000  00000000  00119f88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006b00 	.word	0x08006b00

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08006b00 	.word	0x08006b00

080001c8 <Motors_Init>:

VNH_HANDLE hVNH1;
VNH_HANDLE hVNH2;
uint32_t adc_dma_buffer[2];

void Motors_Init(void){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
	// IO Pins set
	PRIM_IOPIN IOpin;
	//M1
	IOpin.gpiopin=M1_ENA_Pin;
 80001ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001d2:	81bb      	strh	r3, [r7, #12]
	IOpin.gpioport=M1_ENA_GPIO_Port;
 80001d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80001d8:	60bb      	str	r3, [r7, #8]
	hVNH1.ENA_sig=IOpin;
 80001da:	4b50      	ldr	r3, [pc, #320]	; (800031c <Motors_Init+0x154>)
 80001dc:	3318      	adds	r3, #24
 80001de:	f107 0208 	add.w	r2, r7, #8
 80001e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80001e6:	e883 0003 	stmia.w	r3, {r0, r1}

	IOpin.gpiopin=M1_INA_Pin;
 80001ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80001ee:	81bb      	strh	r3, [r7, #12]
	IOpin.gpioport=M1_INA_GPIO_Port;
 80001f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80001f4:	60bb      	str	r3, [r7, #8]
	hVNH1.MA_sig=IOpin;
 80001f6:	4b49      	ldr	r3, [pc, #292]	; (800031c <Motors_Init+0x154>)
 80001f8:	3308      	adds	r3, #8
 80001fa:	f107 0208 	add.w	r2, r7, #8
 80001fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000202:	e883 0003 	stmia.w	r3, {r0, r1}

	IOpin.gpiopin=M1_INB_Pin;
 8000206:	f44f 7380 	mov.w	r3, #256	; 0x100
 800020a:	81bb      	strh	r3, [r7, #12]
	IOpin.gpioport=M1_INB_GPIO_Port;
 800020c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000210:	60bb      	str	r3, [r7, #8]
	hVNH1.MB_sig=IOpin;
 8000212:	4b42      	ldr	r3, [pc, #264]	; (800031c <Motors_Init+0x154>)
 8000214:	3310      	adds	r3, #16
 8000216:	f107 0208 	add.w	r2, r7, #8
 800021a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800021e:	e883 0003 	stmia.w	r3, {r0, r1}

	IOpin.gpiopin=CMES_ENA_Pin;
 8000222:	2304      	movs	r3, #4
 8000224:	81bb      	strh	r3, [r7, #12]
	IOpin.gpioport=CMES_ENA_GPIO_Port;
 8000226:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800022a:	60bb      	str	r3, [r7, #8]

	hVNH1.CS_dis_sig=IOpin;
 800022c:	4b3b      	ldr	r3, [pc, #236]	; (800031c <Motors_Init+0x154>)
 800022e:	3320      	adds	r3, #32
 8000230:	f107 0208 	add.w	r2, r7, #8
 8000234:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000238:	e883 0003 	stmia.w	r3, {r0, r1}
	//M2
	IOpin.gpiopin=M2_ENA_Pin;
 800023c:	2301      	movs	r3, #1
 800023e:	81bb      	strh	r3, [r7, #12]
	IOpin.gpioport=M2_ENA_GPIO_Port;
 8000240:	4b37      	ldr	r3, [pc, #220]	; (8000320 <Motors_Init+0x158>)
 8000242:	60bb      	str	r3, [r7, #8]
	hVNH2.ENA_sig=IOpin;
 8000244:	4b37      	ldr	r3, [pc, #220]	; (8000324 <Motors_Init+0x15c>)
 8000246:	3318      	adds	r3, #24
 8000248:	f107 0208 	add.w	r2, r7, #8
 800024c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000250:	e883 0003 	stmia.w	r3, {r0, r1}

	IOpin.gpiopin=M2_INA_Pin;
 8000254:	2302      	movs	r3, #2
 8000256:	81bb      	strh	r3, [r7, #12]
	IOpin.gpioport=M2_INA_GPIO_Port;
 8000258:	4b31      	ldr	r3, [pc, #196]	; (8000320 <Motors_Init+0x158>)
 800025a:	60bb      	str	r3, [r7, #8]
	hVNH2.MA_sig=IOpin;
 800025c:	4b31      	ldr	r3, [pc, #196]	; (8000324 <Motors_Init+0x15c>)
 800025e:	3308      	adds	r3, #8
 8000260:	f107 0208 	add.w	r2, r7, #8
 8000264:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000268:	e883 0003 	stmia.w	r3, {r0, r1}

	IOpin.gpiopin=M2_INB_Pin;
 800026c:	2310      	movs	r3, #16
 800026e:	81bb      	strh	r3, [r7, #12]
	IOpin.gpioport=M2_INB_GPIO_Port;
 8000270:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000274:	60bb      	str	r3, [r7, #8]
	hVNH2.MB_sig=IOpin;
 8000276:	4b2b      	ldr	r3, [pc, #172]	; (8000324 <Motors_Init+0x15c>)
 8000278:	3310      	adds	r3, #16
 800027a:	f107 0208 	add.w	r2, r7, #8
 800027e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000282:	e883 0003 	stmia.w	r3, {r0, r1}

	IOpin.gpiopin=CMES_ENA_Pin;
 8000286:	2304      	movs	r3, #4
 8000288:	81bb      	strh	r3, [r7, #12]
	IOpin.gpioport=CMES_ENA_GPIO_Port;
 800028a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800028e:	60bb      	str	r3, [r7, #8]

	hVNH2.CS_dis_sig=IOpin;
 8000290:	4b24      	ldr	r3, [pc, #144]	; (8000324 <Motors_Init+0x15c>)
 8000292:	3320      	adds	r3, #32
 8000294:	f107 0208 	add.w	r2, r7, #8
 8000298:	e892 0003 	ldmia.w	r2, {r0, r1}
 800029c:	e883 0003 	stmia.w	r3, {r0, r1}

	//PWM SET
	//M1
	PRIM_PWM PWMpin;

	PWMpin.Chanel=TIM_CHANNEL_1;
 80002a0:	2300      	movs	r3, #0
 80002a2:	607b      	str	r3, [r7, #4]
	PWMpin.timh=&htim17;
 80002a4:	4b20      	ldr	r3, [pc, #128]	; (8000328 <Motors_Init+0x160>)
 80002a6:	603b      	str	r3, [r7, #0]
	hVNH1.PWM_sig=PWMpin;
 80002a8:	4b1c      	ldr	r3, [pc, #112]	; (800031c <Motors_Init+0x154>)
 80002aa:	461a      	mov	r2, r3
 80002ac:	463b      	mov	r3, r7
 80002ae:	e893 0003 	ldmia.w	r3, {r0, r1}
 80002b2:	e882 0003 	stmia.w	r2, {r0, r1}
	//M2
	PWMpin.Chanel=TIM_CHANNEL_4;
 80002b6:	230c      	movs	r3, #12
 80002b8:	607b      	str	r3, [r7, #4]
	PWMpin.timh=&htim2;
 80002ba:	4b1c      	ldr	r3, [pc, #112]	; (800032c <Motors_Init+0x164>)
 80002bc:	603b      	str	r3, [r7, #0]
	hVNH2.PWM_sig=PWMpin;
 80002be:	4b19      	ldr	r3, [pc, #100]	; (8000324 <Motors_Init+0x15c>)
 80002c0:	461a      	mov	r2, r3
 80002c2:	463b      	mov	r3, r7
 80002c4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80002c8:	e882 0003 	stmia.w	r2, {r0, r1}

	//ADC SET
	HAL_ADCEx_Calibration_Start(&hadc1,ADC_SINGLE_ENDED);
 80002cc:	2100      	movs	r1, #0
 80002ce:	4818      	ldr	r0, [pc, #96]	; (8000330 <Motors_Init+0x168>)
 80002d0:	f001 fca6 	bl	8001c20 <HAL_ADCEx_Calibration_Start>
	while (HAL_IS_BIT_SET(HAL_ADC_GetState(&hadc1), HAL_ADC_STATE_BUSY_INTERNAL)){
 80002d4:	e002      	b.n	80002dc <Motors_Init+0x114>
		HAL_Delay(1);
 80002d6:	2001      	movs	r0, #1
 80002d8:	f001 f8a2 	bl	8001420 <HAL_Delay>
	while (HAL_IS_BIT_SET(HAL_ADC_GetState(&hadc1), HAL_ADC_STATE_BUSY_INTERNAL)){
 80002dc:	4814      	ldr	r0, [pc, #80]	; (8000330 <Motors_Init+0x168>)
 80002de:	f001 f8e1 	bl	80014a4 <HAL_ADC_GetState>
 80002e2:	4603      	mov	r3, r0
 80002e4:	f003 0302 	and.w	r3, r3, #2
 80002e8:	2b02      	cmp	r3, #2
 80002ea:	d0f4      	beq.n	80002d6 <Motors_Init+0x10e>
	}

	//HAL_ADC_Start_DMA(&hadc1,adc_dma_buffer,2);


	hVNH1.CS_sig=&adc_dma_buffer[0];
 80002ec:	4b0b      	ldr	r3, [pc, #44]	; (800031c <Motors_Init+0x154>)
 80002ee:	4a11      	ldr	r2, [pc, #68]	; (8000334 <Motors_Init+0x16c>)
 80002f0:	629a      	str	r2, [r3, #40]	; 0x28
	hVNH2.CS_sig=&adc_dma_buffer[1];
 80002f2:	4b0c      	ldr	r3, [pc, #48]	; (8000324 <Motors_Init+0x15c>)
 80002f4:	4a10      	ldr	r2, [pc, #64]	; (8000338 <Motors_Init+0x170>)
 80002f6:	629a      	str	r2, [r3, #40]	; 0x28

	hVNH1.CS_Rez_Val=12000;
 80002f8:	4b08      	ldr	r3, [pc, #32]	; (800031c <Motors_Init+0x154>)
 80002fa:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 80002fe:	859a      	strh	r2, [r3, #44]	; 0x2c
	hVNH2.CS_Rez_Val=12000;
 8000300:	4b08      	ldr	r3, [pc, #32]	; (8000324 <Motors_Init+0x15c>)
 8000302:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8000306:	859a      	strh	r2, [r3, #44]	; 0x2c

	VNH_Init(&hVNH1);
 8000308:	4804      	ldr	r0, [pc, #16]	; (800031c <Motors_Init+0x154>)
 800030a:	f000 f817 	bl	800033c <VNH_Init>
	VNH_Init(&hVNH2);
 800030e:	4805      	ldr	r0, [pc, #20]	; (8000324 <Motors_Init+0x15c>)
 8000310:	f000 f814 	bl	800033c <VNH_Init>


}
 8000314:	bf00      	nop
 8000316:	3710      	adds	r7, #16
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}
 800031c:	20000058 	.word	0x20000058
 8000320:	48000400 	.word	0x48000400
 8000324:	20000028 	.word	0x20000028
 8000328:	200001dc 	.word	0x200001dc
 800032c:	20000274 	.word	0x20000274
 8000330:	20000090 	.word	0x20000090
 8000334:	20000088 	.word	0x20000088
 8000338:	2000008c 	.word	0x2000008c

0800033c <VNH_Init>:
 *
 *
 *
 */

void VNH_Init(VNH_HANDLE* hVNH){
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]

	if(hVNH==NULL){
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	2b00      	cmp	r3, #0
 8000348:	d015      	beq.n	8000376 <VNH_Init+0x3a>
		return;
	}
	// Start PWM
	VNH_DisableCurSens(hVNH);
 800034a:	6878      	ldr	r0, [r7, #4]
 800034c:	f000 f8f6 	bl	800053c <VNH_DisableCurSens>
	VNH_Disable(hVNH);
 8000350:	6878      	ldr	r0, [r7, #4]
 8000352:	f000 f814 	bl	800037e <VNH_Disable>
	HAL_TIM_PWM_Start(hVNH->PWM_sig.timh,hVNH->PWM_sig.Chanel);
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	681a      	ldr	r2, [r3, #0]
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	685b      	ldr	r3, [r3, #4]
 800035e:	4619      	mov	r1, r3
 8000360:	4610      	mov	r0, r2
 8000362:	f004 ffab 	bl	80052bc <HAL_TIM_PWM_Start>
	VNH_SetPWM(hVNH,0);
 8000366:	2100      	movs	r1, #0
 8000368:	6878      	ldr	r0, [r7, #4]
 800036a:	f000 f861 	bl	8000430 <VNH_SetPWM>

	VNH_SetDirLL(hVNH);
 800036e:	6878      	ldr	r0, [r7, #4]
 8000370:	f000 f841 	bl	80003f6 <VNH_SetDirLL>
 8000374:	e000      	b.n	8000378 <VNH_Init+0x3c>
		return;
 8000376:	bf00      	nop




}
 8000378:	3708      	adds	r7, #8
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}

0800037e <VNH_Disable>:

void VNH_Disable(VNH_HANDLE* hVNH){
 800037e:	b580      	push	{r7, lr}
 8000380:	b082      	sub	sp, #8
 8000382:	af00      	add	r7, sp, #0
 8000384:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(hVNH->ENA_sig.gpioport, hVNH->ENA_sig.gpiopin, GPIO_PIN_RESET);
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	6998      	ldr	r0, [r3, #24]
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	8b9b      	ldrh	r3, [r3, #28]
 800038e:	2200      	movs	r2, #0
 8000390:	4619      	mov	r1, r3
 8000392:	f002 fda1 	bl	8002ed8 <HAL_GPIO_WritePin>
}
 8000396:	bf00      	nop
 8000398:	3708      	adds	r7, #8
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}

0800039e <VNH_Enable>:

void VNH_Enable(VNH_HANDLE* hVNH){
 800039e:	b580      	push	{r7, lr}
 80003a0:	b082      	sub	sp, #8
 80003a2:	af00      	add	r7, sp, #0
 80003a4:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(hVNH->ENA_sig.gpioport, hVNH->ENA_sig.gpiopin, GPIO_PIN_RESET);
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	6998      	ldr	r0, [r3, #24]
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	8b9b      	ldrh	r3, [r3, #28]
 80003ae:	2200      	movs	r2, #0
 80003b0:	4619      	mov	r1, r3
 80003b2:	f002 fd91 	bl	8002ed8 <HAL_GPIO_WritePin>
}
 80003b6:	bf00      	nop
 80003b8:	3708      	adds	r7, #8
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}

080003be <VNH_SetDirLH>:
	HAL_GPIO_WritePin(hVNH->MB_sig.gpioport, hVNH->MB_sig.gpiopin, GPIO_PIN_SET);
	hVNH->dir=dir_HL;

}

void VNH_SetDirLH(VNH_HANDLE*  hVNH){
 80003be:	b580      	push	{r7, lr}
 80003c0:	b082      	sub	sp, #8
 80003c2:	af00      	add	r7, sp, #0
 80003c4:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(hVNH->MA_sig.gpioport, hVNH->MA_sig.gpiopin, GPIO_PIN_SET);
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	6898      	ldr	r0, [r3, #8]
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	899b      	ldrh	r3, [r3, #12]
 80003ce:	2201      	movs	r2, #1
 80003d0:	4619      	mov	r1, r3
 80003d2:	f002 fd81 	bl	8002ed8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(hVNH->MB_sig.gpioport, hVNH->MB_sig.gpiopin, GPIO_PIN_RESET);
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	6918      	ldr	r0, [r3, #16]
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	8a9b      	ldrh	r3, [r3, #20]
 80003de:	2200      	movs	r2, #0
 80003e0:	4619      	mov	r1, r3
 80003e2:	f002 fd79 	bl	8002ed8 <HAL_GPIO_WritePin>
	hVNH->dir=dir_LH;
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	2202      	movs	r2, #2
 80003ea:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
 80003ee:	bf00      	nop
 80003f0:	3708      	adds	r7, #8
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}

080003f6 <VNH_SetDirLL>:
	HAL_GPIO_WritePin(hVNH->MA_sig.gpioport, hVNH->MA_sig.gpiopin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(hVNH->MB_sig.gpioport, hVNH->MB_sig.gpiopin, GPIO_PIN_SET);
	hVNH->dir=dir_HH;
}

void VNH_SetDirLL(VNH_HANDLE*  hVNH){
 80003f6:	b580      	push	{r7, lr}
 80003f8:	b082      	sub	sp, #8
 80003fa:	af00      	add	r7, sp, #0
 80003fc:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(hVNH->MA_sig.gpioport, hVNH->MA_sig.gpiopin, GPIO_PIN_RESET);
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	6898      	ldr	r0, [r3, #8]
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	899b      	ldrh	r3, [r3, #12]
 8000406:	2200      	movs	r2, #0
 8000408:	4619      	mov	r1, r3
 800040a:	f002 fd65 	bl	8002ed8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(hVNH->MB_sig.gpioport, hVNH->MB_sig.gpiopin, GPIO_PIN_RESET);
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	6918      	ldr	r0, [r3, #16]
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	8a9b      	ldrh	r3, [r3, #20]
 8000416:	2200      	movs	r2, #0
 8000418:	4619      	mov	r1, r3
 800041a:	f002 fd5d 	bl	8002ed8 <HAL_GPIO_WritePin>
	hVNH->dir=dir_LL;
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	2203      	movs	r2, #3
 8000422:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
 8000426:	bf00      	nop
 8000428:	3708      	adds	r7, #8
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
	...

08000430 <VNH_SetPWM>:
		VNH_SetDirLL(hVNH);
		break;
	}
}

void VNH_SetPWM(VNH_HANDLE* hVNH, uint8_t duty){
 8000430:	b480      	push	{r7}
 8000432:	b083      	sub	sp, #12
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
 8000438:	460b      	mov	r3, r1
 800043a:	70fb      	strb	r3, [r7, #3]

	hVNH->PWM_dutycicle=duty;
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	78fa      	ldrb	r2, [r7, #3]
 8000440:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	 __HAL_TIM_SET_COMPARE(hVNH->PWM_sig.timh,hVNH->PWM_sig.Chanel,__HAL_TIM_GET_AUTORELOAD(hVNH->PWM_sig.timh)*duty/0xff);
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	685b      	ldr	r3, [r3, #4]
 8000448:	2b00      	cmp	r3, #0
 800044a:	d10f      	bne.n	800046c <VNH_SetPWM+0x3c>
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000454:	78fa      	ldrb	r2, [r7, #3]
 8000456:	fb02 f203 	mul.w	r2, r2, r3
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4935      	ldr	r1, [pc, #212]	; (8000538 <VNH_SetPWM+0x108>)
 8000462:	fba1 1202 	umull	r1, r2, r1, r2
 8000466:	09d2      	lsrs	r2, r2, #7
 8000468:	635a      	str	r2, [r3, #52]	; 0x34
}
 800046a:	e05e      	b.n	800052a <VNH_SetPWM+0xfa>
	 __HAL_TIM_SET_COMPARE(hVNH->PWM_sig.timh,hVNH->PWM_sig.Chanel,__HAL_TIM_GET_AUTORELOAD(hVNH->PWM_sig.timh)*duty/0xff);
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	685b      	ldr	r3, [r3, #4]
 8000470:	2b04      	cmp	r3, #4
 8000472:	d10f      	bne.n	8000494 <VNH_SetPWM+0x64>
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800047c:	78fa      	ldrb	r2, [r7, #3]
 800047e:	fb02 f303 	mul.w	r3, r2, r3
 8000482:	687a      	ldr	r2, [r7, #4]
 8000484:	6812      	ldr	r2, [r2, #0]
 8000486:	6812      	ldr	r2, [r2, #0]
 8000488:	492b      	ldr	r1, [pc, #172]	; (8000538 <VNH_SetPWM+0x108>)
 800048a:	fba1 1303 	umull	r1, r3, r1, r3
 800048e:	09db      	lsrs	r3, r3, #7
 8000490:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000492:	e04a      	b.n	800052a <VNH_SetPWM+0xfa>
	 __HAL_TIM_SET_COMPARE(hVNH->PWM_sig.timh,hVNH->PWM_sig.Chanel,__HAL_TIM_GET_AUTORELOAD(hVNH->PWM_sig.timh)*duty/0xff);
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	685b      	ldr	r3, [r3, #4]
 8000498:	2b08      	cmp	r3, #8
 800049a:	d10f      	bne.n	80004bc <VNH_SetPWM+0x8c>
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004a4:	78fa      	ldrb	r2, [r7, #3]
 80004a6:	fb02 f303 	mul.w	r3, r2, r3
 80004aa:	687a      	ldr	r2, [r7, #4]
 80004ac:	6812      	ldr	r2, [r2, #0]
 80004ae:	6812      	ldr	r2, [r2, #0]
 80004b0:	4921      	ldr	r1, [pc, #132]	; (8000538 <VNH_SetPWM+0x108>)
 80004b2:	fba1 1303 	umull	r1, r3, r1, r3
 80004b6:	09db      	lsrs	r3, r3, #7
 80004b8:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80004ba:	e036      	b.n	800052a <VNH_SetPWM+0xfa>
	 __HAL_TIM_SET_COMPARE(hVNH->PWM_sig.timh,hVNH->PWM_sig.Chanel,__HAL_TIM_GET_AUTORELOAD(hVNH->PWM_sig.timh)*duty/0xff);
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	685b      	ldr	r3, [r3, #4]
 80004c0:	2b0c      	cmp	r3, #12
 80004c2:	d10f      	bne.n	80004e4 <VNH_SetPWM+0xb4>
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004cc:	78fa      	ldrb	r2, [r7, #3]
 80004ce:	fb02 f303 	mul.w	r3, r2, r3
 80004d2:	687a      	ldr	r2, [r7, #4]
 80004d4:	6812      	ldr	r2, [r2, #0]
 80004d6:	6812      	ldr	r2, [r2, #0]
 80004d8:	4917      	ldr	r1, [pc, #92]	; (8000538 <VNH_SetPWM+0x108>)
 80004da:	fba1 1303 	umull	r1, r3, r1, r3
 80004de:	09db      	lsrs	r3, r3, #7
 80004e0:	6413      	str	r3, [r2, #64]	; 0x40
}
 80004e2:	e022      	b.n	800052a <VNH_SetPWM+0xfa>
	 __HAL_TIM_SET_COMPARE(hVNH->PWM_sig.timh,hVNH->PWM_sig.Chanel,__HAL_TIM_GET_AUTORELOAD(hVNH->PWM_sig.timh)*duty/0xff);
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	685b      	ldr	r3, [r3, #4]
 80004e8:	2b10      	cmp	r3, #16
 80004ea:	d10f      	bne.n	800050c <VNH_SetPWM+0xdc>
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004f4:	78fa      	ldrb	r2, [r7, #3]
 80004f6:	fb02 f303 	mul.w	r3, r2, r3
 80004fa:	687a      	ldr	r2, [r7, #4]
 80004fc:	6812      	ldr	r2, [r2, #0]
 80004fe:	6812      	ldr	r2, [r2, #0]
 8000500:	490d      	ldr	r1, [pc, #52]	; (8000538 <VNH_SetPWM+0x108>)
 8000502:	fba1 1303 	umull	r1, r3, r1, r3
 8000506:	09db      	lsrs	r3, r3, #7
 8000508:	6593      	str	r3, [r2, #88]	; 0x58
}
 800050a:	e00e      	b.n	800052a <VNH_SetPWM+0xfa>
	 __HAL_TIM_SET_COMPARE(hVNH->PWM_sig.timh,hVNH->PWM_sig.Chanel,__HAL_TIM_GET_AUTORELOAD(hVNH->PWM_sig.timh)*duty/0xff);
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000514:	78fa      	ldrb	r2, [r7, #3]
 8000516:	fb02 f303 	mul.w	r3, r2, r3
 800051a:	687a      	ldr	r2, [r7, #4]
 800051c:	6812      	ldr	r2, [r2, #0]
 800051e:	6812      	ldr	r2, [r2, #0]
 8000520:	4905      	ldr	r1, [pc, #20]	; (8000538 <VNH_SetPWM+0x108>)
 8000522:	fba1 1303 	umull	r1, r3, r1, r3
 8000526:	09db      	lsrs	r3, r3, #7
 8000528:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 800052a:	bf00      	nop
 800052c:	370c      	adds	r7, #12
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	80808081 	.word	0x80808081

0800053c <VNH_DisableCurSens>:

void VNH_DisableCurSens(VNH_HANDLE* hVNH){
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(hVNH->CS_dis_sig.gpioport,hVNH->CS_dis_sig.gpiopin,GPIO_PIN_SET);
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	6a18      	ldr	r0, [r3, #32]
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800054c:	2201      	movs	r2, #1
 800054e:	4619      	mov	r1, r3
 8000550:	f002 fcc2 	bl	8002ed8 <HAL_GPIO_WritePin>
}
 8000554:	bf00      	nop
 8000556:	3708      	adds	r7, #8
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}

0800055c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b08a      	sub	sp, #40	; 0x28
 8000560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000562:	f107 031c 	add.w	r3, r7, #28
 8000566:	2200      	movs	r2, #0
 8000568:	601a      	str	r2, [r3, #0]
 800056a:	605a      	str	r2, [r3, #4]
 800056c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800056e:	1d3b      	adds	r3, r7, #4
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]
 800057c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800057e:	4b35      	ldr	r3, [pc, #212]	; (8000654 <MX_ADC1_Init+0xf8>)
 8000580:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000584:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000586:	4b33      	ldr	r3, [pc, #204]	; (8000654 <MX_ADC1_Init+0xf8>)
 8000588:	2200      	movs	r2, #0
 800058a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800058c:	4b31      	ldr	r3, [pc, #196]	; (8000654 <MX_ADC1_Init+0xf8>)
 800058e:	2200      	movs	r2, #0
 8000590:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000592:	4b30      	ldr	r3, [pc, #192]	; (8000654 <MX_ADC1_Init+0xf8>)
 8000594:	2201      	movs	r2, #1
 8000596:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000598:	4b2e      	ldr	r3, [pc, #184]	; (8000654 <MX_ADC1_Init+0xf8>)
 800059a:	2201      	movs	r2, #1
 800059c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800059e:	4b2d      	ldr	r3, [pc, #180]	; (8000654 <MX_ADC1_Init+0xf8>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005a6:	4b2b      	ldr	r3, [pc, #172]	; (8000654 <MX_ADC1_Init+0xf8>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005ac:	4b29      	ldr	r3, [pc, #164]	; (8000654 <MX_ADC1_Init+0xf8>)
 80005ae:	2201      	movs	r2, #1
 80005b0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005b2:	4b28      	ldr	r3, [pc, #160]	; (8000654 <MX_ADC1_Init+0xf8>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80005b8:	4b26      	ldr	r3, [pc, #152]	; (8000654 <MX_ADC1_Init+0xf8>)
 80005ba:	2202      	movs	r2, #2
 80005bc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005be:	4b25      	ldr	r3, [pc, #148]	; (8000654 <MX_ADC1_Init+0xf8>)
 80005c0:	2201      	movs	r2, #1
 80005c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80005c6:	4b23      	ldr	r3, [pc, #140]	; (8000654 <MX_ADC1_Init+0xf8>)
 80005c8:	2208      	movs	r2, #8
 80005ca:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005cc:	4b21      	ldr	r3, [pc, #132]	; (8000654 <MX_ADC1_Init+0xf8>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80005d2:	4b20      	ldr	r3, [pc, #128]	; (8000654 <MX_ADC1_Init+0xf8>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005d8:	481e      	ldr	r0, [pc, #120]	; (8000654 <MX_ADC1_Init+0xf8>)
 80005da:	f000 ff6f 	bl	80014bc <HAL_ADC_Init>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80005e4:	f000 fb2a 	bl	8000c3c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005e8:	2300      	movs	r3, #0
 80005ea:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005ec:	f107 031c 	add.w	r3, r7, #28
 80005f0:	4619      	mov	r1, r3
 80005f2:	4818      	ldr	r0, [pc, #96]	; (8000654 <MX_ADC1_Init+0xf8>)
 80005f4:	f001 fe70 	bl	80022d8 <HAL_ADCEx_MultiModeConfigChannel>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80005fe:	f000 fb1d 	bl	8000c3c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000602:	2301      	movs	r3, #1
 8000604:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000606:	2301      	movs	r3, #1
 8000608:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800060a:	2300      	movs	r3, #0
 800060c:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800060e:	2300      	movs	r3, #0
 8000610:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000612:	2300      	movs	r3, #0
 8000614:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000616:	2300      	movs	r3, #0
 8000618:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	4619      	mov	r1, r3
 800061e:	480d      	ldr	r0, [pc, #52]	; (8000654 <MX_ADC1_Init+0xf8>)
 8000620:	f001 fb98 	bl	8001d54 <HAL_ADC_ConfigChannel>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800062a:	f000 fb07 	bl	8000c3c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800062e:	2302      	movs	r3, #2
 8000630:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000632:	2302      	movs	r3, #2
 8000634:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	4619      	mov	r1, r3
 800063a:	4806      	ldr	r0, [pc, #24]	; (8000654 <MX_ADC1_Init+0xf8>)
 800063c:	f001 fb8a 	bl	8001d54 <HAL_ADC_ConfigChannel>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 8000646:	f000 faf9 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800064a:	bf00      	nop
 800064c:	3728      	adds	r7, #40	; 0x28
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	20000090 	.word	0x20000090

08000658 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b08a      	sub	sp, #40	; 0x28
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000660:	f107 0314 	add.w	r3, r7, #20
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000678:	d154      	bne.n	8000724 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800067a:	4b2c      	ldr	r3, [pc, #176]	; (800072c <HAL_ADC_MspInit+0xd4>)
 800067c:	695b      	ldr	r3, [r3, #20]
 800067e:	4a2b      	ldr	r2, [pc, #172]	; (800072c <HAL_ADC_MspInit+0xd4>)
 8000680:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000684:	6153      	str	r3, [r2, #20]
 8000686:	4b29      	ldr	r3, [pc, #164]	; (800072c <HAL_ADC_MspInit+0xd4>)
 8000688:	695b      	ldr	r3, [r3, #20]
 800068a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068e:	613b      	str	r3, [r7, #16]
 8000690:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000692:	4b26      	ldr	r3, [pc, #152]	; (800072c <HAL_ADC_MspInit+0xd4>)
 8000694:	695b      	ldr	r3, [r3, #20]
 8000696:	4a25      	ldr	r2, [pc, #148]	; (800072c <HAL_ADC_MspInit+0xd4>)
 8000698:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800069c:	6153      	str	r3, [r2, #20]
 800069e:	4b23      	ldr	r3, [pc, #140]	; (800072c <HAL_ADC_MspInit+0xd4>)
 80006a0:	695b      	ldr	r3, [r3, #20]
 80006a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80006aa:	2303      	movs	r3, #3
 80006ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006ae:	2303      	movs	r3, #3
 80006b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	2300      	movs	r3, #0
 80006b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b6:	f107 0314 	add.w	r3, r7, #20
 80006ba:	4619      	mov	r1, r3
 80006bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c0:	f002 fa98 	bl	8002bf4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80006c4:	4b1a      	ldr	r3, [pc, #104]	; (8000730 <HAL_ADC_MspInit+0xd8>)
 80006c6:	4a1b      	ldr	r2, [pc, #108]	; (8000734 <HAL_ADC_MspInit+0xdc>)
 80006c8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006ca:	4b19      	ldr	r3, [pc, #100]	; (8000730 <HAL_ADC_MspInit+0xd8>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006d0:	4b17      	ldr	r3, [pc, #92]	; (8000730 <HAL_ADC_MspInit+0xd8>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006d6:	4b16      	ldr	r3, [pc, #88]	; (8000730 <HAL_ADC_MspInit+0xd8>)
 80006d8:	2280      	movs	r2, #128	; 0x80
 80006da:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006dc:	4b14      	ldr	r3, [pc, #80]	; (8000730 <HAL_ADC_MspInit+0xd8>)
 80006de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006e2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80006e4:	4b12      	ldr	r3, [pc, #72]	; (8000730 <HAL_ADC_MspInit+0xd8>)
 80006e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006ea:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006ec:	4b10      	ldr	r3, [pc, #64]	; (8000730 <HAL_ADC_MspInit+0xd8>)
 80006ee:	2220      	movs	r2, #32
 80006f0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006f2:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <HAL_ADC_MspInit+0xd8>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006f8:	480d      	ldr	r0, [pc, #52]	; (8000730 <HAL_ADC_MspInit+0xd8>)
 80006fa:	f002 f926 	bl	800294a <HAL_DMA_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8000704:	f000 fa9a 	bl	8000c3c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	4a09      	ldr	r2, [pc, #36]	; (8000730 <HAL_ADC_MspInit+0xd8>)
 800070c:	639a      	str	r2, [r3, #56]	; 0x38
 800070e:	4a08      	ldr	r2, [pc, #32]	; (8000730 <HAL_ADC_MspInit+0xd8>)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000714:	2200      	movs	r2, #0
 8000716:	2100      	movs	r1, #0
 8000718:	2012      	movs	r0, #18
 800071a:	f002 f8e0 	bl	80028de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800071e:	2012      	movs	r0, #18
 8000720:	f002 f8f9 	bl	8002916 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000724:	bf00      	nop
 8000726:	3728      	adds	r7, #40	; 0x28
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40021000 	.word	0x40021000
 8000730:	200000e0 	.word	0x200000e0
 8000734:	40020008 	.word	0x40020008

08000738 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 800073c:	4b16      	ldr	r3, [pc, #88]	; (8000798 <MX_CAN_Init+0x60>)
 800073e:	4a17      	ldr	r2, [pc, #92]	; (800079c <MX_CAN_Init+0x64>)
 8000740:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8000742:	4b15      	ldr	r3, [pc, #84]	; (8000798 <MX_CAN_Init+0x60>)
 8000744:	2210      	movs	r2, #16
 8000746:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000748:	4b13      	ldr	r3, [pc, #76]	; (8000798 <MX_CAN_Init+0x60>)
 800074a:	2200      	movs	r2, #0
 800074c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800074e:	4b12      	ldr	r3, [pc, #72]	; (8000798 <MX_CAN_Init+0x60>)
 8000750:	2200      	movs	r2, #0
 8000752:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000754:	4b10      	ldr	r3, [pc, #64]	; (8000798 <MX_CAN_Init+0x60>)
 8000756:	2200      	movs	r2, #0
 8000758:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800075a:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <MX_CAN_Init+0x60>)
 800075c:	2200      	movs	r2, #0
 800075e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000760:	4b0d      	ldr	r3, [pc, #52]	; (8000798 <MX_CAN_Init+0x60>)
 8000762:	2200      	movs	r2, #0
 8000764:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000766:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <MX_CAN_Init+0x60>)
 8000768:	2200      	movs	r2, #0
 800076a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800076c:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <MX_CAN_Init+0x60>)
 800076e:	2200      	movs	r2, #0
 8000770:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000772:	4b09      	ldr	r3, [pc, #36]	; (8000798 <MX_CAN_Init+0x60>)
 8000774:	2200      	movs	r2, #0
 8000776:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000778:	4b07      	ldr	r3, [pc, #28]	; (8000798 <MX_CAN_Init+0x60>)
 800077a:	2200      	movs	r2, #0
 800077c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800077e:	4b06      	ldr	r3, [pc, #24]	; (8000798 <MX_CAN_Init+0x60>)
 8000780:	2200      	movs	r2, #0
 8000782:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000784:	4804      	ldr	r0, [pc, #16]	; (8000798 <MX_CAN_Init+0x60>)
 8000786:	f001 fed3 	bl	8002530 <HAL_CAN_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8000790:	f000 fa54 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000124 	.word	0x20000124
 800079c:	40006400 	.word	0x40006400

080007a0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08a      	sub	sp, #40	; 0x28
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a8:	f107 0314 	add.w	r3, r7, #20
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a18      	ldr	r2, [pc, #96]	; (8000820 <HAL_CAN_MspInit+0x80>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d129      	bne.n	8000816 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80007c2:	4b18      	ldr	r3, [pc, #96]	; (8000824 <HAL_CAN_MspInit+0x84>)
 80007c4:	69db      	ldr	r3, [r3, #28]
 80007c6:	4a17      	ldr	r2, [pc, #92]	; (8000824 <HAL_CAN_MspInit+0x84>)
 80007c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007cc:	61d3      	str	r3, [r2, #28]
 80007ce:	4b15      	ldr	r3, [pc, #84]	; (8000824 <HAL_CAN_MspInit+0x84>)
 80007d0:	69db      	ldr	r3, [r3, #28]
 80007d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007d6:	613b      	str	r3, [r7, #16]
 80007d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	4b12      	ldr	r3, [pc, #72]	; (8000824 <HAL_CAN_MspInit+0x84>)
 80007dc:	695b      	ldr	r3, [r3, #20]
 80007de:	4a11      	ldr	r2, [pc, #68]	; (8000824 <HAL_CAN_MspInit+0x84>)
 80007e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007e4:	6153      	str	r3, [r2, #20]
 80007e6:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <HAL_CAN_MspInit+0x84>)
 80007e8:	695b      	ldr	r3, [r3, #20]
 80007ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80007f2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80007f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f8:	2302      	movs	r3, #2
 80007fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000800:	2303      	movs	r3, #3
 8000802:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000804:	2309      	movs	r3, #9
 8000806:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000808:	f107 0314 	add.w	r3, r7, #20
 800080c:	4619      	mov	r1, r3
 800080e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000812:	f002 f9ef 	bl	8002bf4 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 8000816:	bf00      	nop
 8000818:	3728      	adds	r7, #40	; 0x28
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40006400 	.word	0x40006400
 8000824:	40021000 	.word	0x40021000

08000828 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800082e:	4b14      	ldr	r3, [pc, #80]	; (8000880 <MX_DMA_Init+0x58>)
 8000830:	695b      	ldr	r3, [r3, #20]
 8000832:	4a13      	ldr	r2, [pc, #76]	; (8000880 <MX_DMA_Init+0x58>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	6153      	str	r3, [r2, #20]
 800083a:	4b11      	ldr	r3, [pc, #68]	; (8000880 <MX_DMA_Init+0x58>)
 800083c:	695b      	ldr	r3, [r3, #20]
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000846:	2200      	movs	r2, #0
 8000848:	2100      	movs	r1, #0
 800084a:	200b      	movs	r0, #11
 800084c:	f002 f847 	bl	80028de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000850:	200b      	movs	r0, #11
 8000852:	f002 f860 	bl	8002916 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000856:	2200      	movs	r2, #0
 8000858:	2100      	movs	r1, #0
 800085a:	200e      	movs	r0, #14
 800085c:	f002 f83f 	bl	80028de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000860:	200e      	movs	r0, #14
 8000862:	f002 f858 	bl	8002916 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000866:	2200      	movs	r2, #0
 8000868:	2100      	movs	r1, #0
 800086a:	2011      	movs	r0, #17
 800086c:	f002 f837 	bl	80028de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000870:	2011      	movs	r0, #17
 8000872:	f002 f850 	bl	8002916 <HAL_NVIC_EnableIRQ>

}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40021000 	.word	0x40021000

08000884 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b088      	sub	sp, #32
 8000888:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088a:	f107 030c 	add.w	r3, r7, #12
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	60da      	str	r2, [r3, #12]
 8000898:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800089a:	4b3f      	ldr	r3, [pc, #252]	; (8000998 <MX_GPIO_Init+0x114>)
 800089c:	695b      	ldr	r3, [r3, #20]
 800089e:	4a3e      	ldr	r2, [pc, #248]	; (8000998 <MX_GPIO_Init+0x114>)
 80008a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008a4:	6153      	str	r3, [r2, #20]
 80008a6:	4b3c      	ldr	r3, [pc, #240]	; (8000998 <MX_GPIO_Init+0x114>)
 80008a8:	695b      	ldr	r3, [r3, #20]
 80008aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008ae:	60bb      	str	r3, [r7, #8]
 80008b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b2:	4b39      	ldr	r3, [pc, #228]	; (8000998 <MX_GPIO_Init+0x114>)
 80008b4:	695b      	ldr	r3, [r3, #20]
 80008b6:	4a38      	ldr	r2, [pc, #224]	; (8000998 <MX_GPIO_Init+0x114>)
 80008b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008bc:	6153      	str	r3, [r2, #20]
 80008be:	4b36      	ldr	r3, [pc, #216]	; (8000998 <MX_GPIO_Init+0x114>)
 80008c0:	695b      	ldr	r3, [r3, #20]
 80008c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ca:	4b33      	ldr	r3, [pc, #204]	; (8000998 <MX_GPIO_Init+0x114>)
 80008cc:	695b      	ldr	r3, [r3, #20]
 80008ce:	4a32      	ldr	r2, [pc, #200]	; (8000998 <MX_GPIO_Init+0x114>)
 80008d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008d4:	6153      	str	r3, [r2, #20]
 80008d6:	4b30      	ldr	r3, [pc, #192]	; (8000998 <MX_GPIO_Init+0x114>)
 80008d8:	695b      	ldr	r3, [r3, #20]
 80008da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008de:	603b      	str	r3, [r7, #0]
 80008e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HX_PD_SCK_GPIO_Port, HX_PD_SCK_Pin, GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2101      	movs	r1, #1
 80008e6:	482d      	ldr	r0, [pc, #180]	; (800099c <MX_GPIO_Init+0x118>)
 80008e8:	f002 faf6 	bl	8002ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CMES_ENA_Pin|M2_INB_Pin|M1_INB_Pin|M1_INA_Pin
 80008ec:	2200      	movs	r2, #0
 80008ee:	f240 7114 	movw	r1, #1812	; 0x714
 80008f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008f6:	f002 faef 	bl	8002ed8 <HAL_GPIO_WritePin>
                          |M1_ENA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M2_ENA_Pin|M2_INA_Pin, GPIO_PIN_RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2103      	movs	r1, #3
 80008fe:	4828      	ldr	r0, [pc, #160]	; (80009a0 <MX_GPIO_Init+0x11c>)
 8000900:	f002 faea 	bl	8002ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HX_PD_SCK_Pin;
 8000904:	2301      	movs	r3, #1
 8000906:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000908:	2301      	movs	r3, #1
 800090a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000910:	2300      	movs	r3, #0
 8000912:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HX_PD_SCK_GPIO_Port, &GPIO_InitStruct);
 8000914:	f107 030c 	add.w	r3, r7, #12
 8000918:	4619      	mov	r1, r3
 800091a:	4820      	ldr	r0, [pc, #128]	; (800099c <MX_GPIO_Init+0x118>)
 800091c:	f002 f96a 	bl	8002bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HX_DOUT_Pin;
 8000920:	2302      	movs	r3, #2
 8000922:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000924:	2300      	movs	r3, #0
 8000926:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HX_DOUT_GPIO_Port, &GPIO_InitStruct);
 800092c:	f107 030c 	add.w	r3, r7, #12
 8000930:	4619      	mov	r1, r3
 8000932:	481a      	ldr	r0, [pc, #104]	; (800099c <MX_GPIO_Init+0x118>)
 8000934:	f002 f95e 	bl	8002bf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = CMES_ENA_Pin|M2_INB_Pin|M1_INB_Pin|M1_INA_Pin
 8000938:	f240 7314 	movw	r3, #1812	; 0x714
 800093c:	60fb      	str	r3, [r7, #12]
                          |M1_ENA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093e:	2301      	movs	r3, #1
 8000940:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000946:	2300      	movs	r3, #0
 8000948:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094a:	f107 030c 	add.w	r3, r7, #12
 800094e:	4619      	mov	r1, r3
 8000950:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000954:	f002 f94e 	bl	8002bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_SW_Pin;
 8000958:	2320      	movs	r3, #32
 800095a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800095c:	2300      	movs	r3, #0
 800095e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000960:	2301      	movs	r3, #1
 8000962:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ENC_SW_GPIO_Port, &GPIO_InitStruct);
 8000964:	f107 030c 	add.w	r3, r7, #12
 8000968:	4619      	mov	r1, r3
 800096a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800096e:	f002 f941 	bl	8002bf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = M2_ENA_Pin|M2_INA_Pin;
 8000972:	2303      	movs	r3, #3
 8000974:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000976:	2301      	movs	r3, #1
 8000978:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097e:	2300      	movs	r3, #0
 8000980:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000982:	f107 030c 	add.w	r3, r7, #12
 8000986:	4619      	mov	r1, r3
 8000988:	4805      	ldr	r0, [pc, #20]	; (80009a0 <MX_GPIO_Init+0x11c>)
 800098a:	f002 f933 	bl	8002bf4 <HAL_GPIO_Init>

}
 800098e:	bf00      	nop
 8000990:	3720      	adds	r7, #32
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40021000 	.word	0x40021000
 800099c:	48001400 	.word	0x48001400
 80009a0:	48000400 	.word	0x48000400

080009a4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009a8:	4b1b      	ldr	r3, [pc, #108]	; (8000a18 <MX_I2C1_Init+0x74>)
 80009aa:	4a1c      	ldr	r2, [pc, #112]	; (8000a1c <MX_I2C1_Init+0x78>)
 80009ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 80009ae:	4b1a      	ldr	r3, [pc, #104]	; (8000a18 <MX_I2C1_Init+0x74>)
 80009b0:	f240 220b 	movw	r2, #523	; 0x20b
 80009b4:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009b6:	4b18      	ldr	r3, [pc, #96]	; (8000a18 <MX_I2C1_Init+0x74>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009bc:	4b16      	ldr	r3, [pc, #88]	; (8000a18 <MX_I2C1_Init+0x74>)
 80009be:	2201      	movs	r2, #1
 80009c0:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009c2:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <MX_I2C1_Init+0x74>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009c8:	4b13      	ldr	r3, [pc, #76]	; (8000a18 <MX_I2C1_Init+0x74>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009ce:	4b12      	ldr	r3, [pc, #72]	; (8000a18 <MX_I2C1_Init+0x74>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009d4:	4b10      	ldr	r3, [pc, #64]	; (8000a18 <MX_I2C1_Init+0x74>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009da:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <MX_I2C1_Init+0x74>)
 80009dc:	2200      	movs	r2, #0
 80009de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009e0:	480d      	ldr	r0, [pc, #52]	; (8000a18 <MX_I2C1_Init+0x74>)
 80009e2:	f002 fa91 	bl	8002f08 <HAL_I2C_Init>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009ec:	f000 f926 	bl	8000c3c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009f0:	2100      	movs	r1, #0
 80009f2:	4809      	ldr	r0, [pc, #36]	; (8000a18 <MX_I2C1_Init+0x74>)
 80009f4:	f003 f8af 	bl	8003b56 <HAL_I2CEx_ConfigAnalogFilter>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80009fe:	f000 f91d 	bl	8000c3c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a02:	2100      	movs	r1, #0
 8000a04:	4804      	ldr	r0, [pc, #16]	; (8000a18 <MX_I2C1_Init+0x74>)
 8000a06:	f003 f8f1 	bl	8003bec <HAL_I2CEx_ConfigDigitalFilter>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000a10:	f000 f914 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a14:	bf00      	nop
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	20000190 	.word	0x20000190
 8000a1c:	40005400 	.word	0x40005400

08000a20 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08a      	sub	sp, #40	; 0x28
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]
 8000a36:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a35      	ldr	r2, [pc, #212]	; (8000b14 <HAL_I2C_MspInit+0xf4>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d164      	bne.n	8000b0c <HAL_I2C_MspInit+0xec>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a42:	4b35      	ldr	r3, [pc, #212]	; (8000b18 <HAL_I2C_MspInit+0xf8>)
 8000a44:	695b      	ldr	r3, [r3, #20]
 8000a46:	4a34      	ldr	r2, [pc, #208]	; (8000b18 <HAL_I2C_MspInit+0xf8>)
 8000a48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a4c:	6153      	str	r3, [r2, #20]
 8000a4e:	4b32      	ldr	r3, [pc, #200]	; (8000b18 <HAL_I2C_MspInit+0xf8>)
 8000a50:	695b      	ldr	r3, [r3, #20]
 8000a52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a56:	613b      	str	r3, [r7, #16]
 8000a58:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 8000a5a:	23c0      	movs	r3, #192	; 0xc0
 8000a5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a5e:	2312      	movs	r3, #18
 8000a60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a62:	2301      	movs	r3, #1
 8000a64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a66:	2303      	movs	r3, #3
 8000a68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a6a:	2304      	movs	r3, #4
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a6e:	f107 0314 	add.w	r3, r7, #20
 8000a72:	4619      	mov	r1, r3
 8000a74:	4829      	ldr	r0, [pc, #164]	; (8000b1c <HAL_I2C_MspInit+0xfc>)
 8000a76:	f002 f8bd 	bl	8002bf4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a7a:	4b27      	ldr	r3, [pc, #156]	; (8000b18 <HAL_I2C_MspInit+0xf8>)
 8000a7c:	69db      	ldr	r3, [r3, #28]
 8000a7e:	4a26      	ldr	r2, [pc, #152]	; (8000b18 <HAL_I2C_MspInit+0xf8>)
 8000a80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a84:	61d3      	str	r3, [r2, #28]
 8000a86:	4b24      	ldr	r3, [pc, #144]	; (8000b18 <HAL_I2C_MspInit+0xf8>)
 8000a88:	69db      	ldr	r3, [r3, #28]
 8000a8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel4;
 8000a92:	4b23      	ldr	r3, [pc, #140]	; (8000b20 <HAL_I2C_MspInit+0x100>)
 8000a94:	4a23      	ldr	r2, [pc, #140]	; (8000b24 <HAL_I2C_MspInit+0x104>)
 8000a96:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a98:	4b21      	ldr	r3, [pc, #132]	; (8000b20 <HAL_I2C_MspInit+0x100>)
 8000a9a:	2210      	movs	r2, #16
 8000a9c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a9e:	4b20      	ldr	r3, [pc, #128]	; (8000b20 <HAL_I2C_MspInit+0x100>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000aa4:	4b1e      	ldr	r3, [pc, #120]	; (8000b20 <HAL_I2C_MspInit+0x100>)
 8000aa6:	2280      	movs	r2, #128	; 0x80
 8000aa8:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000aaa:	4b1d      	ldr	r3, [pc, #116]	; (8000b20 <HAL_I2C_MspInit+0x100>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ab0:	4b1b      	ldr	r3, [pc, #108]	; (8000b20 <HAL_I2C_MspInit+0x100>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000ab6:	4b1a      	ldr	r3, [pc, #104]	; (8000b20 <HAL_I2C_MspInit+0x100>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000abc:	4b18      	ldr	r3, [pc, #96]	; (8000b20 <HAL_I2C_MspInit+0x100>)
 8000abe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ac2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000ac4:	4816      	ldr	r0, [pc, #88]	; (8000b20 <HAL_I2C_MspInit+0x100>)
 8000ac6:	f001 ff40 	bl	800294a <HAL_DMA_Init>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <HAL_I2C_MspInit+0xb4>
    {
      Error_Handler();
 8000ad0:	f000 f8b4 	bl	8000c3c <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_I2C1_TX_DMA1_CH4);
 8000ad4:	4b14      	ldr	r3, [pc, #80]	; (8000b28 <HAL_I2C_MspInit+0x108>)
 8000ad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000ad8:	4a13      	ldr	r2, [pc, #76]	; (8000b28 <HAL_I2C_MspInit+0x108>)
 8000ada:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ade:	6513      	str	r3, [r2, #80]	; 0x50

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	4a0f      	ldr	r2, [pc, #60]	; (8000b20 <HAL_I2C_MspInit+0x100>)
 8000ae4:	639a      	str	r2, [r3, #56]	; 0x38
 8000ae6:	4a0e      	ldr	r2, [pc, #56]	; (8000b20 <HAL_I2C_MspInit+0x100>)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000aec:	2200      	movs	r2, #0
 8000aee:	2100      	movs	r1, #0
 8000af0:	201f      	movs	r0, #31
 8000af2:	f001 fef4 	bl	80028de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000af6:	201f      	movs	r0, #31
 8000af8:	f001 ff0d 	bl	8002916 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000afc:	2200      	movs	r2, #0
 8000afe:	2100      	movs	r1, #0
 8000b00:	2020      	movs	r0, #32
 8000b02:	f001 feec 	bl	80028de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000b06:	2020      	movs	r0, #32
 8000b08:	f001 ff05 	bl	8002916 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000b0c:	bf00      	nop
 8000b0e:	3728      	adds	r7, #40	; 0x28
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40005400 	.word	0x40005400
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	48000400 	.word	0x48000400
 8000b20:	2000014c 	.word	0x2000014c
 8000b24:	40020044 	.word	0x40020044
 8000b28:	40010000 	.word	0x40010000

08000b2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b30:	f000 fc10 	bl	8001354 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b34:	f000 f828 	bl	8000b88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b38:	f7ff fea4 	bl	8000884 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b3c:	f7ff fe74 	bl	8000828 <MX_DMA_Init>
  MX_I2C1_Init();
 8000b40:	f7ff ff30 	bl	80009a4 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000b44:	f000 f992 	bl	8000e6c <MX_TIM3_Init>
  MX_ADC1_Init();
 8000b48:	f7ff fd08 	bl	800055c <MX_ADC1_Init>
  MX_CAN_Init();
 8000b4c:	f7ff fdf4 	bl	8000738 <MX_CAN_Init>
  MX_USART2_UART_Init();
 8000b50:	f000 fb62 	bl	8001218 <MX_USART2_UART_Init>
  MX_TIM17_Init();
 8000b54:	f000 f9e0 	bl	8000f18 <MX_TIM17_Init>
  MX_TIM2_Init();
 8000b58:	f000 f912 	bl	8000d80 <MX_TIM2_Init>

  /* USER CODE BEGIN 2 */
  Motors_Init();
 8000b5c:	f7ff fb34 	bl	80001c8 <Motors_Init>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000b60:	213c      	movs	r1, #60	; 0x3c
 8000b62:	4807      	ldr	r0, [pc, #28]	; (8000b80 <main+0x54>)
 8000b64:	f004 fd3c 	bl	80055e0 <HAL_TIM_Encoder_Start>
  VNH_SetPWM(&hVNH2, 50);
 8000b68:	2132      	movs	r1, #50	; 0x32
 8000b6a:	4806      	ldr	r0, [pc, #24]	; (8000b84 <main+0x58>)
 8000b6c:	f7ff fc60 	bl	8000430 <VNH_SetPWM>
  VNH_SetDirLH(&hVNH2);
 8000b70:	4804      	ldr	r0, [pc, #16]	; (8000b84 <main+0x58>)
 8000b72:	f7ff fc24 	bl	80003be <VNH_SetDirLH>
  VNH_Enable(&hVNH2);
 8000b76:	4803      	ldr	r0, [pc, #12]	; (8000b84 <main+0x58>)
 8000b78:	f7ff fc11 	bl	800039e <VNH_Enable>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <main+0x50>
 8000b7e:	bf00      	nop
 8000b80:	20000228 	.word	0x20000228
 8000b84:	20000028 	.word	0x20000028

08000b88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b096      	sub	sp, #88	; 0x58
 8000b8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b92:	2228      	movs	r2, #40	; 0x28
 8000b94:	2100      	movs	r1, #0
 8000b96:	4618      	mov	r0, r3
 8000b98:	f005 ffaa 	bl	8006af0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b9c:	f107 031c 	add.w	r3, r7, #28
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bac:	1d3b      	adds	r3, r7, #4
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	609a      	str	r2, [r3, #8]
 8000bb6:	60da      	str	r2, [r3, #12]
 8000bb8:	611a      	str	r2, [r3, #16]
 8000bba:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bc4:	2310      	movs	r3, #16
 8000bc6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000bd0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000bd4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bd6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f003 f852 	bl	8003c84 <HAL_RCC_OscConfig>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000be6:	f000 f829 	bl	8000c3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bea:	230f      	movs	r3, #15
 8000bec:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bfe:	f107 031c 	add.w	r3, r7, #28
 8000c02:	2100      	movs	r1, #0
 8000c04:	4618      	mov	r0, r3
 8000c06:	f003 ff45 	bl	8004a94 <HAL_RCC_ClockConfig>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000c10:	f000 f814 	bl	8000c3c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC12;
 8000c14:	23a0      	movs	r3, #160	; 0xa0
 8000c16:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000c18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c1c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c22:	1d3b      	adds	r3, r7, #4
 8000c24:	4618      	mov	r0, r3
 8000c26:	f004 f96b 	bl	8004f00 <HAL_RCCEx_PeriphCLKConfig>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000c30:	f000 f804 	bl	8000c3c <Error_Handler>
  }
}
 8000c34:	bf00      	nop
 8000c36:	3758      	adds	r7, #88	; 0x58
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c40:	b672      	cpsid	i
}
 8000c42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <Error_Handler+0x8>
	...

08000c48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c4e:	4b0f      	ldr	r3, [pc, #60]	; (8000c8c <HAL_MspInit+0x44>)
 8000c50:	699b      	ldr	r3, [r3, #24]
 8000c52:	4a0e      	ldr	r2, [pc, #56]	; (8000c8c <HAL_MspInit+0x44>)
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	6193      	str	r3, [r2, #24]
 8000c5a:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <HAL_MspInit+0x44>)
 8000c5c:	699b      	ldr	r3, [r3, #24]
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	607b      	str	r3, [r7, #4]
 8000c64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c66:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <HAL_MspInit+0x44>)
 8000c68:	69db      	ldr	r3, [r3, #28]
 8000c6a:	4a08      	ldr	r2, [pc, #32]	; (8000c8c <HAL_MspInit+0x44>)
 8000c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c70:	61d3      	str	r3, [r2, #28]
 8000c72:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <HAL_MspInit+0x44>)
 8000c74:	69db      	ldr	r3, [r3, #28]
 8000c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c7a:	603b      	str	r3, [r7, #0]
 8000c7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	40021000 	.word	0x40021000

08000c90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <NMI_Handler+0x4>

08000c96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c9a:	e7fe      	b.n	8000c9a <HardFault_Handler+0x4>

08000c9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <MemManage_Handler+0x4>

08000ca2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca6:	e7fe      	b.n	8000ca6 <BusFault_Handler+0x4>

08000ca8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <UsageFault_Handler+0x4>

08000cae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr

08000cca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cdc:	f000 fb80 	bl	80013e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ce0:	bf00      	nop
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ce8:	4802      	ldr	r0, [pc, #8]	; (8000cf4 <DMA1_Channel1_IRQHandler+0x10>)
 8000cea:	f001 feb3 	bl	8002a54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	200000e0 	.word	0x200000e0

08000cf8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000cfc:	4802      	ldr	r0, [pc, #8]	; (8000d08 <DMA1_Channel4_IRQHandler+0x10>)
 8000cfe:	f001 fea9 	bl	8002a54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	2000014c 	.word	0x2000014c

08000d0c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim17_ch1_up);
 8000d10:	4802      	ldr	r0, [pc, #8]	; (8000d1c <DMA1_Channel7_IRQHandler+0x10>)
 8000d12:	f001 fe9f 	bl	8002a54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	200002c0 	.word	0x200002c0

08000d20 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000d24:	4802      	ldr	r0, [pc, #8]	; (8000d30 <ADC1_2_IRQHandler+0x10>)
 8000d26:	f000 fd5b 	bl	80017e0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20000090 	.word	0x20000090

08000d34 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXT line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000d38:	4802      	ldr	r0, [pc, #8]	; (8000d44 <I2C1_EV_IRQHandler+0x10>)
 8000d3a:	f002 f974 	bl	8003026 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20000190 	.word	0x20000190

08000d48 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000d4c:	4802      	ldr	r0, [pc, #8]	; (8000d58 <I2C1_ER_IRQHandler+0x10>)
 8000d4e:	f002 f984 	bl	800305a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000190 	.word	0x20000190

08000d5c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <SystemInit+0x20>)
 8000d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d66:	4a05      	ldr	r2, [pc, #20]	; (8000d7c <SystemInit+0x20>)
 8000d68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <MX_TIM2_Init>:
TIM_HandleTypeDef htim17;
DMA_HandleTypeDef hdma_tim17_ch1_up;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08e      	sub	sp, #56	; 0x38
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
 8000d8e:	605a      	str	r2, [r3, #4]
 8000d90:	609a      	str	r2, [r3, #8]
 8000d92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d94:	f107 031c 	add.w	r3, r7, #28
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000da0:	463b      	mov	r3, r7
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
 8000da8:	609a      	str	r2, [r3, #8]
 8000daa:	60da      	str	r2, [r3, #12]
 8000dac:	611a      	str	r2, [r3, #16]
 8000dae:	615a      	str	r2, [r3, #20]
 8000db0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000db2:	4b2d      	ldr	r3, [pc, #180]	; (8000e68 <MX_TIM2_Init+0xe8>)
 8000db4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000db8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000dba:	4b2b      	ldr	r3, [pc, #172]	; (8000e68 <MX_TIM2_Init+0xe8>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc0:	4b29      	ldr	r3, [pc, #164]	; (8000e68 <MX_TIM2_Init+0xe8>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xff;
 8000dc6:	4b28      	ldr	r3, [pc, #160]	; (8000e68 <MX_TIM2_Init+0xe8>)
 8000dc8:	22ff      	movs	r2, #255	; 0xff
 8000dca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dcc:	4b26      	ldr	r3, [pc, #152]	; (8000e68 <MX_TIM2_Init+0xe8>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd2:	4b25      	ldr	r3, [pc, #148]	; (8000e68 <MX_TIM2_Init+0xe8>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000dd8:	4823      	ldr	r0, [pc, #140]	; (8000e68 <MX_TIM2_Init+0xe8>)
 8000dda:	f004 f9b7 	bl	800514c <HAL_TIM_Base_Init>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000de4:	f7ff ff2a 	bl	8000c3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000de8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dec:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000dee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000df2:	4619      	mov	r1, r3
 8000df4:	481c      	ldr	r0, [pc, #112]	; (8000e68 <MX_TIM2_Init+0xe8>)
 8000df6:	f004 fd95 	bl	8005924 <HAL_TIM_ConfigClockSource>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000e00:	f7ff ff1c 	bl	8000c3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e04:	4818      	ldr	r0, [pc, #96]	; (8000e68 <MX_TIM2_Init+0xe8>)
 8000e06:	f004 f9f8 	bl	80051fa <HAL_TIM_PWM_Init>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000e10:	f7ff ff14 	bl	8000c3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e14:	2300      	movs	r3, #0
 8000e16:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e1c:	f107 031c 	add.w	r3, r7, #28
 8000e20:	4619      	mov	r1, r3
 8000e22:	4811      	ldr	r0, [pc, #68]	; (8000e68 <MX_TIM2_Init+0xe8>)
 8000e24:	f005 fa26 	bl	8006274 <HAL_TIMEx_MasterConfigSynchronization>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000e2e:	f7ff ff05 	bl	8000c3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e32:	2360      	movs	r3, #96	; 0x60
 8000e34:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 32767;
 8000e36:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8000e3a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e40:	2300      	movs	r3, #0
 8000e42:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e44:	463b      	mov	r3, r7
 8000e46:	220c      	movs	r2, #12
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4807      	ldr	r0, [pc, #28]	; (8000e68 <MX_TIM2_Init+0xe8>)
 8000e4c:	f004 fc56 	bl	80056fc <HAL_TIM_PWM_ConfigChannel>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000e56:	f7ff fef1 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e5a:	4803      	ldr	r0, [pc, #12]	; (8000e68 <MX_TIM2_Init+0xe8>)
 8000e5c:	f000 f982 	bl	8001164 <HAL_TIM_MspPostInit>

}
 8000e60:	bf00      	nop
 8000e62:	3738      	adds	r7, #56	; 0x38
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20000274 	.word	0x20000274

08000e6c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b08c      	sub	sp, #48	; 0x30
 8000e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e72:	f107 030c 	add.w	r3, r7, #12
 8000e76:	2224      	movs	r2, #36	; 0x24
 8000e78:	2100      	movs	r1, #0
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f005 fe38 	bl	8006af0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e80:	463b      	mov	r3, r7
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	605a      	str	r2, [r3, #4]
 8000e88:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e8a:	4b21      	ldr	r3, [pc, #132]	; (8000f10 <MX_TIM3_Init+0xa4>)
 8000e8c:	4a21      	ldr	r2, [pc, #132]	; (8000f14 <MX_TIM3_Init+0xa8>)
 8000e8e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4;
 8000e90:	4b1f      	ldr	r3, [pc, #124]	; (8000f10 <MX_TIM3_Init+0xa4>)
 8000e92:	2204      	movs	r2, #4
 8000e94:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e96:	4b1e      	ldr	r3, [pc, #120]	; (8000f10 <MX_TIM3_Init+0xa4>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000e9c:	4b1c      	ldr	r3, [pc, #112]	; (8000f10 <MX_TIM3_Init+0xa4>)
 8000e9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ea2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000ea4:	4b1a      	ldr	r3, [pc, #104]	; (8000f10 <MX_TIM3_Init+0xa4>)
 8000ea6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eaa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eac:	4b18      	ldr	r3, [pc, #96]	; (8000f10 <MX_TIM3_Init+0xa4>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV4;
 8000ebe:	2308      	movs	r3, #8
 8000ec0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8000ec2:	230f      	movs	r3, #15
 8000ec4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
 8000ece:	2308      	movs	r3, #8
 8000ed0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8000ed2:	230f      	movs	r3, #15
 8000ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000ed6:	f107 030c 	add.w	r3, r7, #12
 8000eda:	4619      	mov	r1, r3
 8000edc:	480c      	ldr	r0, [pc, #48]	; (8000f10 <MX_TIM3_Init+0xa4>)
 8000ede:	f004 fad9 	bl	8005494 <HAL_TIM_Encoder_Init>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000ee8:	f7ff fea8 	bl	8000c3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eec:	2300      	movs	r3, #0
 8000eee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ef4:	463b      	mov	r3, r7
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4805      	ldr	r0, [pc, #20]	; (8000f10 <MX_TIM3_Init+0xa4>)
 8000efa:	f005 f9bb 	bl	8006274 <HAL_TIMEx_MasterConfigSynchronization>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000f04:	f7ff fe9a 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f08:	bf00      	nop
 8000f0a:	3730      	adds	r7, #48	; 0x30
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20000228 	.word	0x20000228
 8000f14:	40000400 	.word	0x40000400

08000f18 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b092      	sub	sp, #72	; 0x48
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	605a      	str	r2, [r3, #4]
 8000f28:	609a      	str	r2, [r3, #8]
 8000f2a:	60da      	str	r2, [r3, #12]
 8000f2c:	611a      	str	r2, [r3, #16]
 8000f2e:	615a      	str	r2, [r3, #20]
 8000f30:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f32:	463b      	mov	r3, r7
 8000f34:	222c      	movs	r2, #44	; 0x2c
 8000f36:	2100      	movs	r1, #0
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f005 fdd9 	bl	8006af0 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000f3e:	4b31      	ldr	r3, [pc, #196]	; (8001004 <MX_TIM17_Init+0xec>)
 8000f40:	4a31      	ldr	r2, [pc, #196]	; (8001008 <MX_TIM17_Init+0xf0>)
 8000f42:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000f44:	4b2f      	ldr	r3, [pc, #188]	; (8001004 <MX_TIM17_Init+0xec>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f4a:	4b2e      	ldr	r3, [pc, #184]	; (8001004 <MX_TIM17_Init+0xec>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 255;
 8000f50:	4b2c      	ldr	r3, [pc, #176]	; (8001004 <MX_TIM17_Init+0xec>)
 8000f52:	22ff      	movs	r2, #255	; 0xff
 8000f54:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f56:	4b2b      	ldr	r3, [pc, #172]	; (8001004 <MX_TIM17_Init+0xec>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000f5c:	4b29      	ldr	r3, [pc, #164]	; (8001004 <MX_TIM17_Init+0xec>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f62:	4b28      	ldr	r3, [pc, #160]	; (8001004 <MX_TIM17_Init+0xec>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000f68:	4826      	ldr	r0, [pc, #152]	; (8001004 <MX_TIM17_Init+0xec>)
 8000f6a:	f004 f8ef 	bl	800514c <HAL_TIM_Base_Init>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 8000f74:	f7ff fe62 	bl	8000c3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000f78:	4822      	ldr	r0, [pc, #136]	; (8001004 <MX_TIM17_Init+0xec>)
 8000f7a:	f004 f93e 	bl	80051fa <HAL_TIM_PWM_Init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_TIM17_Init+0x70>
  {
    Error_Handler();
 8000f84:	f7ff fe5a 	bl	8000c3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f88:	2360      	movs	r3, #96	; 0x60
 8000f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 32767;
 8000f8c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8000f90:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f92:	2300      	movs	r3, #0
 8000f94:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f96:	2300      	movs	r3, #0
 8000f98:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8000f9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fa2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fa8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fac:	2200      	movs	r2, #0
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4814      	ldr	r0, [pc, #80]	; (8001004 <MX_TIM17_Init+0xec>)
 8000fb2:	f004 fba3 	bl	80056fc <HAL_TIM_PWM_ConfigChannel>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_TIM17_Init+0xa8>
  {
    Error_Handler();
 8000fbc:	f7ff fe3e 	bl	8000c3c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000fd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fd8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000fe2:	463b      	mov	r3, r7
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4807      	ldr	r0, [pc, #28]	; (8001004 <MX_TIM17_Init+0xec>)
 8000fe8:	f005 f9b2 	bl	8006350 <HAL_TIMEx_ConfigBreakDeadTime>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_TIM17_Init+0xde>
  {
    Error_Handler();
 8000ff2:	f7ff fe23 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000ff6:	4803      	ldr	r0, [pc, #12]	; (8001004 <MX_TIM17_Init+0xec>)
 8000ff8:	f000 f8b4 	bl	8001164 <HAL_TIM_MspPostInit>

}
 8000ffc:	bf00      	nop
 8000ffe:	3748      	adds	r7, #72	; 0x48
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	200001dc 	.word	0x200001dc
 8001008:	40014800 	.word	0x40014800

0800100c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800101c:	d10c      	bne.n	8001038 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800101e:	4b2b      	ldr	r3, [pc, #172]	; (80010cc <HAL_TIM_Base_MspInit+0xc0>)
 8001020:	69db      	ldr	r3, [r3, #28]
 8001022:	4a2a      	ldr	r2, [pc, #168]	; (80010cc <HAL_TIM_Base_MspInit+0xc0>)
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	61d3      	str	r3, [r2, #28]
 800102a:	4b28      	ldr	r3, [pc, #160]	; (80010cc <HAL_TIM_Base_MspInit+0xc0>)
 800102c:	69db      	ldr	r3, [r3, #28]
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8001036:	e044      	b.n	80010c2 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM17)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a24      	ldr	r2, [pc, #144]	; (80010d0 <HAL_TIM_Base_MspInit+0xc4>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d13f      	bne.n	80010c2 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001042:	4b22      	ldr	r3, [pc, #136]	; (80010cc <HAL_TIM_Base_MspInit+0xc0>)
 8001044:	699b      	ldr	r3, [r3, #24]
 8001046:	4a21      	ldr	r2, [pc, #132]	; (80010cc <HAL_TIM_Base_MspInit+0xc0>)
 8001048:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800104c:	6193      	str	r3, [r2, #24]
 800104e:	4b1f      	ldr	r3, [pc, #124]	; (80010cc <HAL_TIM_Base_MspInit+0xc0>)
 8001050:	699b      	ldr	r3, [r3, #24]
 8001052:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001056:	60bb      	str	r3, [r7, #8]
 8001058:	68bb      	ldr	r3, [r7, #8]
    hdma_tim17_ch1_up.Instance = DMA1_Channel7;
 800105a:	4b1e      	ldr	r3, [pc, #120]	; (80010d4 <HAL_TIM_Base_MspInit+0xc8>)
 800105c:	4a1e      	ldr	r2, [pc, #120]	; (80010d8 <HAL_TIM_Base_MspInit+0xcc>)
 800105e:	601a      	str	r2, [r3, #0]
    hdma_tim17_ch1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001060:	4b1c      	ldr	r3, [pc, #112]	; (80010d4 <HAL_TIM_Base_MspInit+0xc8>)
 8001062:	2210      	movs	r2, #16
 8001064:	605a      	str	r2, [r3, #4]
    hdma_tim17_ch1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001066:	4b1b      	ldr	r3, [pc, #108]	; (80010d4 <HAL_TIM_Base_MspInit+0xc8>)
 8001068:	2200      	movs	r2, #0
 800106a:	609a      	str	r2, [r3, #8]
    hdma_tim17_ch1_up.Init.MemInc = DMA_MINC_ENABLE;
 800106c:	4b19      	ldr	r3, [pc, #100]	; (80010d4 <HAL_TIM_Base_MspInit+0xc8>)
 800106e:	2280      	movs	r2, #128	; 0x80
 8001070:	60da      	str	r2, [r3, #12]
    hdma_tim17_ch1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001072:	4b18      	ldr	r3, [pc, #96]	; (80010d4 <HAL_TIM_Base_MspInit+0xc8>)
 8001074:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001078:	611a      	str	r2, [r3, #16]
    hdma_tim17_ch1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800107a:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <HAL_TIM_Base_MspInit+0xc8>)
 800107c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001080:	615a      	str	r2, [r3, #20]
    hdma_tim17_ch1_up.Init.Mode = DMA_NORMAL;
 8001082:	4b14      	ldr	r3, [pc, #80]	; (80010d4 <HAL_TIM_Base_MspInit+0xc8>)
 8001084:	2200      	movs	r2, #0
 8001086:	619a      	str	r2, [r3, #24]
    hdma_tim17_ch1_up.Init.Priority = DMA_PRIORITY_LOW;
 8001088:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <HAL_TIM_Base_MspInit+0xc8>)
 800108a:	2200      	movs	r2, #0
 800108c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim17_ch1_up) != HAL_OK)
 800108e:	4811      	ldr	r0, [pc, #68]	; (80010d4 <HAL_TIM_Base_MspInit+0xc8>)
 8001090:	f001 fc5b 	bl	800294a <HAL_DMA_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <HAL_TIM_Base_MspInit+0x92>
      Error_Handler();
 800109a:	f7ff fdcf 	bl	8000c3c <Error_Handler>
    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM17_DMA1_CH7);
 800109e:	4b0f      	ldr	r3, [pc, #60]	; (80010dc <HAL_TIM_Base_MspInit+0xd0>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a0e      	ldr	r2, [pc, #56]	; (80010dc <HAL_TIM_Base_MspInit+0xd0>)
 80010a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010a8:	6013      	str	r3, [r2, #0]
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim17_ch1_up);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a09      	ldr	r2, [pc, #36]	; (80010d4 <HAL_TIM_Base_MspInit+0xc8>)
 80010ae:	625a      	str	r2, [r3, #36]	; 0x24
 80010b0:	4a08      	ldr	r2, [pc, #32]	; (80010d4 <HAL_TIM_Base_MspInit+0xc8>)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim17_ch1_up);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a06      	ldr	r2, [pc, #24]	; (80010d4 <HAL_TIM_Base_MspInit+0xc8>)
 80010ba:	621a      	str	r2, [r3, #32]
 80010bc:	4a05      	ldr	r2, [pc, #20]	; (80010d4 <HAL_TIM_Base_MspInit+0xc8>)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6253      	str	r3, [r2, #36]	; 0x24
}
 80010c2:	bf00      	nop
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40021000 	.word	0x40021000
 80010d0:	40014800 	.word	0x40014800
 80010d4:	200002c0 	.word	0x200002c0
 80010d8:	40020080 	.word	0x40020080
 80010dc:	40010000 	.word	0x40010000

080010e0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08a      	sub	sp, #40	; 0x28
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e8:	f107 0314 	add.w	r3, r7, #20
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a17      	ldr	r2, [pc, #92]	; (800115c <HAL_TIM_Encoder_MspInit+0x7c>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d128      	bne.n	8001154 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001102:	4b17      	ldr	r3, [pc, #92]	; (8001160 <HAL_TIM_Encoder_MspInit+0x80>)
 8001104:	69db      	ldr	r3, [r3, #28]
 8001106:	4a16      	ldr	r2, [pc, #88]	; (8001160 <HAL_TIM_Encoder_MspInit+0x80>)
 8001108:	f043 0302 	orr.w	r3, r3, #2
 800110c:	61d3      	str	r3, [r2, #28]
 800110e:	4b14      	ldr	r3, [pc, #80]	; (8001160 <HAL_TIM_Encoder_MspInit+0x80>)
 8001110:	69db      	ldr	r3, [r3, #28]
 8001112:	f003 0302 	and.w	r3, r3, #2
 8001116:	613b      	str	r3, [r7, #16]
 8001118:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800111a:	4b11      	ldr	r3, [pc, #68]	; (8001160 <HAL_TIM_Encoder_MspInit+0x80>)
 800111c:	695b      	ldr	r3, [r3, #20]
 800111e:	4a10      	ldr	r2, [pc, #64]	; (8001160 <HAL_TIM_Encoder_MspInit+0x80>)
 8001120:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001124:	6153      	str	r3, [r2, #20]
 8001126:	4b0e      	ldr	r3, [pc, #56]	; (8001160 <HAL_TIM_Encoder_MspInit+0x80>)
 8001128:	695b      	ldr	r3, [r3, #20]
 800112a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_B_Pin|ENC_A_Pin;
 8001132:	23c0      	movs	r3, #192	; 0xc0
 8001134:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001136:	2302      	movs	r3, #2
 8001138:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113e:	2300      	movs	r3, #0
 8001140:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001142:	2302      	movs	r3, #2
 8001144:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001146:	f107 0314 	add.w	r3, r7, #20
 800114a:	4619      	mov	r1, r3
 800114c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001150:	f001 fd50 	bl	8002bf4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001154:	bf00      	nop
 8001156:	3728      	adds	r7, #40	; 0x28
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40000400 	.word	0x40000400
 8001160:	40021000 	.word	0x40021000

08001164 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08a      	sub	sp, #40	; 0x28
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116c:	f107 0314 	add.w	r3, r7, #20
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]
 800117a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001184:	d11d      	bne.n	80011c2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001186:	4b21      	ldr	r3, [pc, #132]	; (800120c <HAL_TIM_MspPostInit+0xa8>)
 8001188:	695b      	ldr	r3, [r3, #20]
 800118a:	4a20      	ldr	r2, [pc, #128]	; (800120c <HAL_TIM_MspPostInit+0xa8>)
 800118c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001190:	6153      	str	r3, [r2, #20]
 8001192:	4b1e      	ldr	r3, [pc, #120]	; (800120c <HAL_TIM_MspPostInit+0xa8>)
 8001194:	695b      	ldr	r3, [r3, #20]
 8001196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119a:	613b      	str	r3, [r7, #16]
 800119c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = M2_PWM_Pin;
 800119e:	2308      	movs	r3, #8
 80011a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a2:	2302      	movs	r3, #2
 80011a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011aa:	2300      	movs	r3, #0
 80011ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011ae:	2301      	movs	r3, #1
 80011b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(M2_PWM_GPIO_Port, &GPIO_InitStruct);
 80011b2:	f107 0314 	add.w	r3, r7, #20
 80011b6:	4619      	mov	r1, r3
 80011b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011bc:	f001 fd1a 	bl	8002bf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80011c0:	e020      	b.n	8001204 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM17)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a12      	ldr	r2, [pc, #72]	; (8001210 <HAL_TIM_MspPostInit+0xac>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d11b      	bne.n	8001204 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011cc:	4b0f      	ldr	r3, [pc, #60]	; (800120c <HAL_TIM_MspPostInit+0xa8>)
 80011ce:	695b      	ldr	r3, [r3, #20]
 80011d0:	4a0e      	ldr	r2, [pc, #56]	; (800120c <HAL_TIM_MspPostInit+0xa8>)
 80011d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011d6:	6153      	str	r3, [r2, #20]
 80011d8:	4b0c      	ldr	r3, [pc, #48]	; (800120c <HAL_TIM_MspPostInit+0xa8>)
 80011da:	695b      	ldr	r3, [r3, #20]
 80011dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M1_PWM_Pin;
 80011e4:	2320      	movs	r3, #32
 80011e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e8:	2302      	movs	r3, #2
 80011ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f0:	2300      	movs	r3, #0
 80011f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 80011f4:	230a      	movs	r3, #10
 80011f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(M1_PWM_GPIO_Port, &GPIO_InitStruct);
 80011f8:	f107 0314 	add.w	r3, r7, #20
 80011fc:	4619      	mov	r1, r3
 80011fe:	4805      	ldr	r0, [pc, #20]	; (8001214 <HAL_TIM_MspPostInit+0xb0>)
 8001200:	f001 fcf8 	bl	8002bf4 <HAL_GPIO_Init>
}
 8001204:	bf00      	nop
 8001206:	3728      	adds	r7, #40	; 0x28
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40021000 	.word	0x40021000
 8001210:	40014800 	.word	0x40014800
 8001214:	48000400 	.word	0x48000400

08001218 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800121c:	4b14      	ldr	r3, [pc, #80]	; (8001270 <MX_USART2_UART_Init+0x58>)
 800121e:	4a15      	ldr	r2, [pc, #84]	; (8001274 <MX_USART2_UART_Init+0x5c>)
 8001220:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001222:	4b13      	ldr	r3, [pc, #76]	; (8001270 <MX_USART2_UART_Init+0x58>)
 8001224:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001228:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800122a:	4b11      	ldr	r3, [pc, #68]	; (8001270 <MX_USART2_UART_Init+0x58>)
 800122c:	2200      	movs	r2, #0
 800122e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001230:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <MX_USART2_UART_Init+0x58>)
 8001232:	2200      	movs	r2, #0
 8001234:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001236:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <MX_USART2_UART_Init+0x58>)
 8001238:	2200      	movs	r2, #0
 800123a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800123c:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <MX_USART2_UART_Init+0x58>)
 800123e:	220c      	movs	r2, #12
 8001240:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001242:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <MX_USART2_UART_Init+0x58>)
 8001244:	2200      	movs	r2, #0
 8001246:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001248:	4b09      	ldr	r3, [pc, #36]	; (8001270 <MX_USART2_UART_Init+0x58>)
 800124a:	2200      	movs	r2, #0
 800124c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800124e:	4b08      	ldr	r3, [pc, #32]	; (8001270 <MX_USART2_UART_Init+0x58>)
 8001250:	2200      	movs	r2, #0
 8001252:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001254:	4b06      	ldr	r3, [pc, #24]	; (8001270 <MX_USART2_UART_Init+0x58>)
 8001256:	2200      	movs	r2, #0
 8001258:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800125a:	4805      	ldr	r0, [pc, #20]	; (8001270 <MX_USART2_UART_Init+0x58>)
 800125c:	f005 f8f0 	bl	8006440 <HAL_UART_Init>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001266:	f7ff fce9 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000304 	.word	0x20000304
 8001274:	40004400 	.word	0x40004400

08001278 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b08a      	sub	sp, #40	; 0x28
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001280:	f107 0314 	add.w	r3, r7, #20
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]
 800128e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a17      	ldr	r2, [pc, #92]	; (80012f4 <HAL_UART_MspInit+0x7c>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d127      	bne.n	80012ea <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800129a:	4b17      	ldr	r3, [pc, #92]	; (80012f8 <HAL_UART_MspInit+0x80>)
 800129c:	69db      	ldr	r3, [r3, #28]
 800129e:	4a16      	ldr	r2, [pc, #88]	; (80012f8 <HAL_UART_MspInit+0x80>)
 80012a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012a4:	61d3      	str	r3, [r2, #28]
 80012a6:	4b14      	ldr	r3, [pc, #80]	; (80012f8 <HAL_UART_MspInit+0x80>)
 80012a8:	69db      	ldr	r3, [r3, #28]
 80012aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ae:	613b      	str	r3, [r7, #16]
 80012b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b2:	4b11      	ldr	r3, [pc, #68]	; (80012f8 <HAL_UART_MspInit+0x80>)
 80012b4:	695b      	ldr	r3, [r3, #20]
 80012b6:	4a10      	ldr	r2, [pc, #64]	; (80012f8 <HAL_UART_MspInit+0x80>)
 80012b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012bc:	6153      	str	r3, [r2, #20]
 80012be:	4b0e      	ldr	r3, [pc, #56]	; (80012f8 <HAL_UART_MspInit+0x80>)
 80012c0:	695b      	ldr	r3, [r3, #20]
 80012c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80012ca:	2318      	movs	r3, #24
 80012cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ce:	2302      	movs	r3, #2
 80012d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012d6:	2303      	movs	r3, #3
 80012d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012da:	2307      	movs	r3, #7
 80012dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012de:	f107 0314 	add.w	r3, r7, #20
 80012e2:	4619      	mov	r1, r3
 80012e4:	4805      	ldr	r0, [pc, #20]	; (80012fc <HAL_UART_MspInit+0x84>)
 80012e6:	f001 fc85 	bl	8002bf4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80012ea:	bf00      	nop
 80012ec:	3728      	adds	r7, #40	; 0x28
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40004400 	.word	0x40004400
 80012f8:	40021000 	.word	0x40021000
 80012fc:	48000400 	.word	0x48000400

08001300 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001300:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001338 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001304:	480d      	ldr	r0, [pc, #52]	; (800133c <LoopForever+0x6>)
  ldr r1, =_edata
 8001306:	490e      	ldr	r1, [pc, #56]	; (8001340 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001308:	4a0e      	ldr	r2, [pc, #56]	; (8001344 <LoopForever+0xe>)
  movs r3, #0
 800130a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800130c:	e002      	b.n	8001314 <LoopCopyDataInit>

0800130e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800130e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001310:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001312:	3304      	adds	r3, #4

08001314 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001314:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001316:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001318:	d3f9      	bcc.n	800130e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800131a:	4a0b      	ldr	r2, [pc, #44]	; (8001348 <LoopForever+0x12>)
  ldr r4, =_ebss
 800131c:	4c0b      	ldr	r4, [pc, #44]	; (800134c <LoopForever+0x16>)
  movs r3, #0
 800131e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001320:	e001      	b.n	8001326 <LoopFillZerobss>

08001322 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001322:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001324:	3204      	adds	r2, #4

08001326 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001326:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001328:	d3fb      	bcc.n	8001322 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800132a:	f7ff fd17 	bl	8000d5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800132e:	f005 fbbb 	bl	8006aa8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001332:	f7ff fbfb 	bl	8000b2c <main>

08001336 <LoopForever>:

LoopForever:
    b LoopForever
 8001336:	e7fe      	b.n	8001336 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001338:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800133c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001340:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001344:	08006b58 	.word	0x08006b58
  ldr r2, =_sbss
 8001348:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800134c:	2000038c 	.word	0x2000038c

08001350 <CAN_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001350:	e7fe      	b.n	8001350 <CAN_RX0_IRQHandler>
	...

08001354 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001358:	4b08      	ldr	r3, [pc, #32]	; (800137c <HAL_Init+0x28>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a07      	ldr	r2, [pc, #28]	; (800137c <HAL_Init+0x28>)
 800135e:	f043 0310 	orr.w	r3, r3, #16
 8001362:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001364:	2003      	movs	r0, #3
 8001366:	f001 faaf 	bl	80028c8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800136a:	2000      	movs	r0, #0
 800136c:	f000 f808 	bl	8001380 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001370:	f7ff fc6a 	bl	8000c48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40022000 	.word	0x40022000

08001380 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001388:	4b12      	ldr	r3, [pc, #72]	; (80013d4 <HAL_InitTick+0x54>)
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <HAL_InitTick+0x58>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	4619      	mov	r1, r3
 8001392:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001396:	fbb3 f3f1 	udiv	r3, r3, r1
 800139a:	fbb2 f3f3 	udiv	r3, r2, r3
 800139e:	4618      	mov	r0, r3
 80013a0:	f001 fac7 	bl	8002932 <HAL_SYSTICK_Config>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e00e      	b.n	80013cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2b0f      	cmp	r3, #15
 80013b2:	d80a      	bhi.n	80013ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013b4:	2200      	movs	r2, #0
 80013b6:	6879      	ldr	r1, [r7, #4]
 80013b8:	f04f 30ff 	mov.w	r0, #4294967295
 80013bc:	f001 fa8f 	bl	80028de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013c0:	4a06      	ldr	r2, [pc, #24]	; (80013dc <HAL_InitTick+0x5c>)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80013c6:	2300      	movs	r3, #0
 80013c8:	e000      	b.n	80013cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	20000000 	.word	0x20000000
 80013d8:	20000008 	.word	0x20000008
 80013dc:	20000004 	.word	0x20000004

080013e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013e4:	4b06      	ldr	r3, [pc, #24]	; (8001400 <HAL_IncTick+0x20>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	461a      	mov	r2, r3
 80013ea:	4b06      	ldr	r3, [pc, #24]	; (8001404 <HAL_IncTick+0x24>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4413      	add	r3, r2
 80013f0:	4a04      	ldr	r2, [pc, #16]	; (8001404 <HAL_IncTick+0x24>)
 80013f2:	6013      	str	r3, [r2, #0]
}
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	20000008 	.word	0x20000008
 8001404:	20000388 	.word	0x20000388

08001408 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  return uwTick;  
 800140c:	4b03      	ldr	r3, [pc, #12]	; (800141c <HAL_GetTick+0x14>)
 800140e:	681b      	ldr	r3, [r3, #0]
}
 8001410:	4618      	mov	r0, r3
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	20000388 	.word	0x20000388

08001420 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001428:	f7ff ffee 	bl	8001408 <HAL_GetTick>
 800142c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001438:	d005      	beq.n	8001446 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800143a:	4b0a      	ldr	r3, [pc, #40]	; (8001464 <HAL_Delay+0x44>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	461a      	mov	r2, r3
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	4413      	add	r3, r2
 8001444:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001446:	bf00      	nop
 8001448:	f7ff ffde 	bl	8001408 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	429a      	cmp	r2, r3
 8001456:	d8f7      	bhi.n	8001448 <HAL_Delay+0x28>
  {
  }
}
 8001458:	bf00      	nop
 800145a:	bf00      	nop
 800145c:	3710      	adds	r7, #16
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20000008 	.word	0x20000008

08001468 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001498:	bf00      	nop
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <HAL_ADC_GetState>:
  *           " if (HAL_IS_BIT_SET(HAL_ADC_GetState(hadc1), HAL_ADC_STATE_AWD1)    ) "
  * @param  hadc ADC handle
  * @retval HAL state
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Return ADC state */
  return hadc->State;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b09a      	sub	sp, #104	; 0x68
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014c4:	2300      	movs	r3, #0
 80014c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80014ca:	2300      	movs	r3, #0
 80014cc:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80014ce:	2300      	movs	r3, #0
 80014d0:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d101      	bne.n	80014dc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e172      	b.n	80017c2 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	691b      	ldr	r3, [r3, #16]
 80014e0:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e6:	f003 0310 	and.w	r3, r3, #16
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d176      	bne.n	80015dc <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d152      	bne.n	800159c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2200      	movs	r2, #0
 8001500:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2200      	movs	r2, #0
 8001506:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f7ff f8a1 	bl	8000658 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d13b      	bne.n	800159c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f000 ff9d 	bl	8002464 <ADC_Disable>
 800152a:	4603      	mov	r3, r0
 800152c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001534:	f003 0310 	and.w	r3, r3, #16
 8001538:	2b00      	cmp	r3, #0
 800153a:	d12f      	bne.n	800159c <HAL_ADC_Init+0xe0>
 800153c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001540:	2b00      	cmp	r3, #0
 8001542:	d12b      	bne.n	800159c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001548:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800154c:	f023 0302 	bic.w	r3, r3, #2
 8001550:	f043 0202 	orr.w	r2, r3, #2
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	689a      	ldr	r2, [r3, #8]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001566:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	689a      	ldr	r2, [r3, #8]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001576:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001578:	4b94      	ldr	r3, [pc, #592]	; (80017cc <HAL_ADC_Init+0x310>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a94      	ldr	r2, [pc, #592]	; (80017d0 <HAL_ADC_Init+0x314>)
 800157e:	fba2 2303 	umull	r2, r3, r2, r3
 8001582:	0c9a      	lsrs	r2, r3, #18
 8001584:	4613      	mov	r3, r2
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	4413      	add	r3, r2
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800158e:	e002      	b.n	8001596 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	3b01      	subs	r3, #1
 8001594:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d1f9      	bne.n	8001590 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d007      	beq.n	80015ba <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80015b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80015b8:	d110      	bne.n	80015dc <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	f023 0312 	bic.w	r3, r3, #18
 80015c2:	f043 0210 	orr.w	r2, r3, #16
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ce:	f043 0201 	orr.w	r2, r3, #1
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e0:	f003 0310 	and.w	r3, r3, #16
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	f040 80df 	bne.w	80017a8 <HAL_ADC_Init+0x2ec>
 80015ea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	f040 80da 	bne.w	80017a8 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80015fe:	2b00      	cmp	r3, #0
 8001600:	f040 80d2 	bne.w	80017a8 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001608:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800160c:	f043 0202 	orr.w	r2, r3, #2
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001614:	4b6f      	ldr	r3, [pc, #444]	; (80017d4 <HAL_ADC_Init+0x318>)
 8001616:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001620:	d102      	bne.n	8001628 <HAL_ADC_Init+0x16c>
 8001622:	4b6d      	ldr	r3, [pc, #436]	; (80017d8 <HAL_ADC_Init+0x31c>)
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	e002      	b.n	800162e <HAL_ADC_Init+0x172>
 8001628:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800162c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	f003 0303 	and.w	r3, r3, #3
 8001638:	2b01      	cmp	r3, #1
 800163a:	d108      	bne.n	800164e <HAL_ADC_Init+0x192>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	2b01      	cmp	r3, #1
 8001648:	d101      	bne.n	800164e <HAL_ADC_Init+0x192>
 800164a:	2301      	movs	r3, #1
 800164c:	e000      	b.n	8001650 <HAL_ADC_Init+0x194>
 800164e:	2300      	movs	r3, #0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d11c      	bne.n	800168e <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001654:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001656:	2b00      	cmp	r3, #0
 8001658:	d010      	beq.n	800167c <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	f003 0303 	and.w	r3, r3, #3
 8001662:	2b01      	cmp	r3, #1
 8001664:	d107      	bne.n	8001676 <HAL_ADC_Init+0x1ba>
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	2b01      	cmp	r3, #1
 8001670:	d101      	bne.n	8001676 <HAL_ADC_Init+0x1ba>
 8001672:	2301      	movs	r3, #1
 8001674:	e000      	b.n	8001678 <HAL_ADC_Init+0x1bc>
 8001676:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001678:	2b00      	cmp	r3, #0
 800167a:	d108      	bne.n	800168e <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800167c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	431a      	orrs	r2, r3
 800168a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800168c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	7e5b      	ldrb	r3, [r3, #25]
 8001692:	035b      	lsls	r3, r3, #13
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001698:	2a01      	cmp	r2, #1
 800169a:	d002      	beq.n	80016a2 <HAL_ADC_Init+0x1e6>
 800169c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016a0:	e000      	b.n	80016a4 <HAL_ADC_Init+0x1e8>
 80016a2:	2200      	movs	r2, #0
 80016a4:	431a      	orrs	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	431a      	orrs	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80016b4:	4313      	orrs	r3, r2
 80016b6:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d11b      	bne.n	80016fa <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	7e5b      	ldrb	r3, [r3, #25]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d109      	bne.n	80016de <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ce:	3b01      	subs	r3, #1
 80016d0:	045a      	lsls	r2, r3, #17
 80016d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80016d4:	4313      	orrs	r3, r2
 80016d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016da:	663b      	str	r3, [r7, #96]	; 0x60
 80016dc:	e00d      	b.n	80016fa <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80016e6:	f043 0220 	orr.w	r2, r3, #32
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f2:	f043 0201 	orr.w	r2, r3, #1
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d007      	beq.n	8001712 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170a:	4313      	orrs	r3, r2
 800170c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800170e:	4313      	orrs	r3, r2
 8001710:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	f003 030c 	and.w	r3, r3, #12
 800171c:	2b00      	cmp	r3, #0
 800171e:	d114      	bne.n	800174a <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	6812      	ldr	r2, [r2, #0]
 800172a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800172e:	f023 0302 	bic.w	r3, r3, #2
 8001732:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	7e1b      	ldrb	r3, [r3, #24]
 8001738:	039a      	lsls	r2, r3, #14
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	4313      	orrs	r3, r2
 8001744:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001746:	4313      	orrs	r3, r2
 8001748:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	68da      	ldr	r2, [r3, #12]
 8001750:	4b22      	ldr	r3, [pc, #136]	; (80017dc <HAL_ADC_Init+0x320>)
 8001752:	4013      	ands	r3, r2
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	6812      	ldr	r2, [r2, #0]
 8001758:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800175a:	430b      	orrs	r3, r1
 800175c:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	691b      	ldr	r3, [r3, #16]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d10c      	bne.n	8001780 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176c:	f023 010f 	bic.w	r1, r3, #15
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	69db      	ldr	r3, [r3, #28]
 8001774:	1e5a      	subs	r2, r3, #1
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	430a      	orrs	r2, r1
 800177c:	631a      	str	r2, [r3, #48]	; 0x30
 800177e:	e007      	b.n	8001790 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f022 020f 	bic.w	r2, r2, #15
 800178e:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	f023 0303 	bic.w	r3, r3, #3
 800179e:	f043 0201 	orr.w	r2, r3, #1
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	641a      	str	r2, [r3, #64]	; 0x40
 80017a6:	e00a      	b.n	80017be <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ac:	f023 0312 	bic.w	r3, r3, #18
 80017b0:	f043 0210 	orr.w	r2, r3, #16
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80017b8:	2301      	movs	r3, #1
 80017ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80017be:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3768      	adds	r7, #104	; 0x68
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	20000000 	.word	0x20000000
 80017d0:	431bde83 	.word	0x431bde83
 80017d4:	50000300 	.word	0x50000300
 80017d8:	50000100 	.word	0x50000100
 80017dc:	fff0c007 	.word	0xfff0c007

080017e0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 80017e8:	2300      	movs	r3, #0
 80017ea:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80017ec:	2300      	movs	r3, #0
 80017ee:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 80017f0:	2300      	movs	r3, #0
 80017f2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0304 	and.w	r3, r3, #4
 80017fe:	2b04      	cmp	r3, #4
 8001800:	d106      	bne.n	8001810 <HAL_ADC_IRQHandler+0x30>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f003 0304 	and.w	r3, r3, #4
 800180c:	2b04      	cmp	r3, #4
 800180e:	d00d      	beq.n	800182c <HAL_ADC_IRQHandler+0x4c>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800181a:	2b08      	cmp	r3, #8
 800181c:	d17a      	bne.n	8001914 <HAL_ADC_IRQHandler+0x134>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f003 0308 	and.w	r3, r3, #8
 8001828:	2b08      	cmp	r3, #8
 800182a:	d173      	bne.n	8001914 <HAL_ADC_IRQHandler+0x134>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001830:	f003 0310 	and.w	r3, r3, #16
 8001834:	2b00      	cmp	r3, #0
 8001836:	d105      	bne.n	8001844 <HAL_ADC_IRQHandler+0x64>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001844:	4b88      	ldr	r3, [pc, #544]	; (8001a68 <HAL_ADC_IRQHandler+0x288>)
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	f003 031f 	and.w	r3, r3, #31
 800184c:	2b00      	cmp	r3, #0
 800184e:	d010      	beq.n	8001872 <HAL_ADC_IRQHandler+0x92>
 8001850:	4b85      	ldr	r3, [pc, #532]	; (8001a68 <HAL_ADC_IRQHandler+0x288>)
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f003 031f 	and.w	r3, r3, #31
 8001858:	2b05      	cmp	r3, #5
 800185a:	d00a      	beq.n	8001872 <HAL_ADC_IRQHandler+0x92>
 800185c:	4b82      	ldr	r3, [pc, #520]	; (8001a68 <HAL_ADC_IRQHandler+0x288>)
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	f003 031f 	and.w	r3, r3, #31
 8001864:	2b09      	cmp	r3, #9
 8001866:	d004      	beq.n	8001872 <HAL_ADC_IRQHandler+0x92>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001870:	d104      	bne.n	800187c <HAL_ADC_IRQHandler+0x9c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	613b      	str	r3, [r7, #16]
 800187a:	e003      	b.n	8001884 <HAL_ADC_IRQHandler+0xa4>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800187c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800188e:	2b00      	cmp	r3, #0
 8001890:	d139      	bne.n	8001906 <HAL_ADC_IRQHandler+0x126>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001898:	2b00      	cmp	r3, #0
 800189a:	d134      	bne.n	8001906 <HAL_ADC_IRQHandler+0x126>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0308 	and.w	r3, r3, #8
 80018a6:	2b08      	cmp	r3, #8
 80018a8:	d12d      	bne.n	8001906 <HAL_ADC_IRQHandler+0x126>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f003 0304 	and.w	r3, r3, #4
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d11a      	bne.n	80018ee <HAL_ADC_IRQHandler+0x10e>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	685a      	ldr	r2, [r3, #4]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f022 020c 	bic.w	r2, r2, #12
 80018c6:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d112      	bne.n	8001906 <HAL_ADC_IRQHandler+0x126>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e4:	f043 0201 	orr.w	r2, r3, #1
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	641a      	str	r2, [r3, #64]	; 0x40
 80018ec:	e00b      	b.n	8001906 <HAL_ADC_IRQHandler+0x126>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	f043 0210 	orr.w	r2, r3, #16
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fe:	f043 0201 	orr.w	r2, r3, #1
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f7ff fdae 	bl	8001468 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	220c      	movs	r2, #12
 8001912:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0320 	and.w	r3, r3, #32
 800191e:	2b20      	cmp	r3, #32
 8001920:	d106      	bne.n	8001930 <HAL_ADC_IRQHandler+0x150>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f003 0320 	and.w	r3, r3, #32
 800192c:	2b20      	cmp	r3, #32
 800192e:	d00f      	beq.n	8001950 <HAL_ADC_IRQHandler+0x170>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 800193a:	2b40      	cmp	r3, #64	; 0x40
 800193c:	f040 80a9 	bne.w	8001a92 <HAL_ADC_IRQHandler+0x2b2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800194a:	2b40      	cmp	r3, #64	; 0x40
 800194c:	f040 80a1 	bne.w	8001a92 <HAL_ADC_IRQHandler+0x2b2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001954:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800195c:	4b42      	ldr	r3, [pc, #264]	; (8001a68 <HAL_ADC_IRQHandler+0x288>)
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f003 031f 	and.w	r3, r3, #31
 8001964:	2b00      	cmp	r3, #0
 8001966:	d010      	beq.n	800198a <HAL_ADC_IRQHandler+0x1aa>
 8001968:	4b3f      	ldr	r3, [pc, #252]	; (8001a68 <HAL_ADC_IRQHandler+0x288>)
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f003 031f 	and.w	r3, r3, #31
 8001970:	2b05      	cmp	r3, #5
 8001972:	d00a      	beq.n	800198a <HAL_ADC_IRQHandler+0x1aa>
 8001974:	4b3c      	ldr	r3, [pc, #240]	; (8001a68 <HAL_ADC_IRQHandler+0x288>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f003 031f 	and.w	r3, r3, #31
 800197c:	2b09      	cmp	r3, #9
 800197e:	d004      	beq.n	800198a <HAL_ADC_IRQHandler+0x1aa>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001988:	d104      	bne.n	8001994 <HAL_ADC_IRQHandler+0x1b4>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	613b      	str	r3, [r7, #16]
 8001992:	e003      	b.n	800199c <HAL_ADC_IRQHandler+0x1bc>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001994:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019a2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d16c      	bne.n	8001a84 <HAL_ADC_IRQHandler+0x2a4>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d00b      	beq.n	80019cc <HAL_ADC_IRQHandler+0x1ec>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d160      	bne.n	8001a84 <HAL_ADC_IRQHandler+0x2a4>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d15b      	bne.n	8001a84 <HAL_ADC_IRQHandler+0x2a4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019d6:	2b40      	cmp	r3, #64	; 0x40
 80019d8:	d154      	bne.n	8001a84 <HAL_ADC_IRQHandler+0x2a4>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 80019da:	4b23      	ldr	r3, [pc, #140]	; (8001a68 <HAL_ADC_IRQHandler+0x288>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f003 031f 	and.w	r3, r3, #31
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d010      	beq.n	8001a08 <HAL_ADC_IRQHandler+0x228>
 80019e6:	4b20      	ldr	r3, [pc, #128]	; (8001a68 <HAL_ADC_IRQHandler+0x288>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f003 031f 	and.w	r3, r3, #31
 80019ee:	2b06      	cmp	r3, #6
 80019f0:	d00a      	beq.n	8001a08 <HAL_ADC_IRQHandler+0x228>
 80019f2:	4b1d      	ldr	r3, [pc, #116]	; (8001a68 <HAL_ADC_IRQHandler+0x288>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	f003 031f 	and.w	r3, r3, #31
 80019fa:	2b07      	cmp	r3, #7
 80019fc:	d004      	beq.n	8001a08 <HAL_ADC_IRQHandler+0x228>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a06:	d104      	bne.n	8001a12 <HAL_ADC_IRQHandler+0x232>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	e003      	b.n	8001a1a <HAL_ADC_IRQHandler+0x23a>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001a12:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	60fb      	str	r3, [r7, #12]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d12f      	bne.n	8001a84 <HAL_ADC_IRQHandler+0x2a4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f003 0308 	and.w	r3, r3, #8
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d11c      	bne.n	8001a6c <HAL_ADC_IRQHandler+0x28c>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	685a      	ldr	r2, [r3, #4]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001a40:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d114      	bne.n	8001a84 <HAL_ADC_IRQHandler+0x2a4>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5e:	f043 0201 	orr.w	r2, r3, #1
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	641a      	str	r2, [r3, #64]	; 0x40
 8001a66:	e00d      	b.n	8001a84 <HAL_ADC_IRQHandler+0x2a4>
 8001a68:	50000300 	.word	0x50000300
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a70:	f043 0210 	orr.w	r2, r3, #16
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7c:	f043 0201 	orr.w	r2, r3, #1
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f000 f93d 	bl	8001d04 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2260      	movs	r2, #96	; 0x60
 8001a90:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a9c:	2b80      	cmp	r3, #128	; 0x80
 8001a9e:	d113      	bne.n	8001ac8 <HAL_ADC_IRQHandler+0x2e8>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aaa:	2b80      	cmp	r3, #128	; 0x80
 8001aac:	d10c      	bne.n	8001ac8 <HAL_ADC_IRQHandler+0x2e8>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f7ff fcde 	bl	800147c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2280      	movs	r2, #128	; 0x80
 8001ac6:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ad2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ad6:	d115      	bne.n	8001b04 <HAL_ADC_IRQHandler+0x324>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ae6:	d10d      	bne.n	8001b04 <HAL_ADC_IRQHandler+0x324>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aec:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f000 f919 	bl	8001d2c <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b02:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b12:	d115      	bne.n	8001b40 <HAL_ADC_IRQHandler+0x360>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b22:	d10d      	bne.n	8001b40 <HAL_ADC_IRQHandler+0x360>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b28:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f000 f905 	bl	8001d40 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b3e:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0310 	and.w	r3, r3, #16
 8001b4a:	2b10      	cmp	r3, #16
 8001b4c:	d13d      	bne.n	8001bca <HAL_ADC_IRQHandler+0x3ea>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f003 0310 	and.w	r3, r3, #16
 8001b58:	2b10      	cmp	r3, #16
 8001b5a:	d136      	bne.n	8001bca <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d102      	bne.n	8001b6a <HAL_ADC_IRQHandler+0x38a>
    {
      overrun_error = 1U;
 8001b64:	2301      	movs	r3, #1
 8001b66:	617b      	str	r3, [r7, #20]
 8001b68:	e019      	b.n	8001b9e <HAL_ADC_IRQHandler+0x3be>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b6a:	4b2c      	ldr	r3, [pc, #176]	; (8001c1c <HAL_ADC_IRQHandler+0x43c>)
 8001b6c:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f003 031f 	and.w	r3, r3, #31
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d109      	bne.n	8001b8e <HAL_ADC_IRQHandler+0x3ae>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	f003 0301 	and.w	r3, r3, #1
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d10a      	bne.n	8001b9e <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1U;  
 8001b88:	2301      	movs	r3, #1
 8001b8a:	617b      	str	r3, [r7, #20]
 8001b8c:	e007      	b.n	8001b9e <HAL_ADC_IRQHandler+0x3be>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1U;  
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d10e      	bne.n	8001bc2 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb4:	f043 0202 	orr.w	r2, r3, #2
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f7ff fc67 	bl	8001490 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2210      	movs	r2, #16
 8001bc8:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bd8:	d11b      	bne.n	8001c12 <HAL_ADC_IRQHandler+0x432>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001be4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001be8:	d113      	bne.n	8001c12 <HAL_ADC_IRQHandler+0x432>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfa:	f043 0208 	orr.w	r2, r3, #8
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c0a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f000 f883 	bl	8001d18 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8001c12:	bf00      	nop
 8001c14:	3718      	adds	r7, #24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	50000300 	.word	0x50000300

08001c20 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d101      	bne.n	8001c3c <HAL_ADCEx_Calibration_Start+0x1c>
 8001c38:	2302      	movs	r3, #2
 8001c3a:	e05f      	b.n	8001cfc <HAL_ADCEx_Calibration_Start+0xdc>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f000 fc0d 	bl	8002464 <ADC_Disable>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001c4e:	7bfb      	ldrb	r3, [r7, #15]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d14e      	bne.n	8001cf2 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	689a      	ldr	r2, [r3, #8]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8001c68:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d107      	bne.n	8001c80 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	689a      	ldr	r2, [r3, #8]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c7e:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	689a      	ldr	r2, [r3, #8]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001c8e:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8001c90:	f7ff fbba 	bl	8001408 <HAL_GetTick>
 8001c94:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001c96:	e01c      	b.n	8001cd2 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001c98:	f7ff fbb6 	bl	8001408 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b0a      	cmp	r3, #10
 8001ca4:	d915      	bls.n	8001cd2 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001cb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001cb4:	d10d      	bne.n	8001cd2 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cba:	f023 0312 	bic.w	r3, r3, #18
 8001cbe:	f043 0210 	orr.w	r2, r3, #16
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e014      	b.n	8001cfc <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001cdc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001ce0:	d0da      	beq.n	8001c98 <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	f023 0303 	bic.w	r3, r3, #3
 8001cea:	f043 0201 	orr.w	r2, r3, #1
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3710      	adds	r7, #16
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8001d48:	bf00      	nop
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b09b      	sub	sp, #108	; 0x6c
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001d64:	2300      	movs	r3, #0
 8001d66:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d101      	bne.n	8001d76 <HAL_ADC_ConfigChannel+0x22>
 8001d72:	2302      	movs	r3, #2
 8001d74:	e2a5      	b.n	80022c2 <HAL_ADC_ConfigChannel+0x56e>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2201      	movs	r2, #1
 8001d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f003 0304 	and.w	r3, r3, #4
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	f040 8289 	bne.w	80022a0 <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	2b04      	cmp	r3, #4
 8001d94:	d81c      	bhi.n	8001dd0 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685a      	ldr	r2, [r3, #4]
 8001da0:	4613      	mov	r3, r2
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	4413      	add	r3, r2
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	461a      	mov	r2, r3
 8001daa:	231f      	movs	r3, #31
 8001dac:	4093      	lsls	r3, r2
 8001dae:	43db      	mvns	r3, r3
 8001db0:	4019      	ands	r1, r3
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	6818      	ldr	r0, [r3, #0]
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685a      	ldr	r2, [r3, #4]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	4413      	add	r3, r2
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	fa00 f203 	lsl.w	r2, r0, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	631a      	str	r2, [r3, #48]	; 0x30
 8001dce:	e063      	b.n	8001e98 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	2b09      	cmp	r3, #9
 8001dd6:	d81e      	bhi.n	8001e16 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685a      	ldr	r2, [r3, #4]
 8001de2:	4613      	mov	r3, r2
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	4413      	add	r3, r2
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	3b1e      	subs	r3, #30
 8001dec:	221f      	movs	r2, #31
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	43db      	mvns	r3, r3
 8001df4:	4019      	ands	r1, r3
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	6818      	ldr	r0, [r3, #0]
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685a      	ldr	r2, [r3, #4]
 8001dfe:	4613      	mov	r3, r2
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	4413      	add	r3, r2
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	3b1e      	subs	r3, #30
 8001e08:	fa00 f203 	lsl.w	r2, r0, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	430a      	orrs	r2, r1
 8001e12:	635a      	str	r2, [r3, #52]	; 0x34
 8001e14:	e040      	b.n	8001e98 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	2b0e      	cmp	r3, #14
 8001e1c:	d81e      	bhi.n	8001e5c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685a      	ldr	r2, [r3, #4]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	4413      	add	r3, r2
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	3b3c      	subs	r3, #60	; 0x3c
 8001e32:	221f      	movs	r2, #31
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	4019      	ands	r1, r3
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	6818      	ldr	r0, [r3, #0]
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685a      	ldr	r2, [r3, #4]
 8001e44:	4613      	mov	r3, r2
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	4413      	add	r3, r2
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	3b3c      	subs	r3, #60	; 0x3c
 8001e4e:	fa00 f203 	lsl.w	r2, r0, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	430a      	orrs	r2, r1
 8001e58:	639a      	str	r2, [r3, #56]	; 0x38
 8001e5a:	e01d      	b.n	8001e98 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685a      	ldr	r2, [r3, #4]
 8001e66:	4613      	mov	r3, r2
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	4413      	add	r3, r2
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	3b5a      	subs	r3, #90	; 0x5a
 8001e70:	221f      	movs	r2, #31
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	43db      	mvns	r3, r3
 8001e78:	4019      	ands	r1, r3
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	6818      	ldr	r0, [r3, #0]
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685a      	ldr	r2, [r3, #4]
 8001e82:	4613      	mov	r3, r2
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	4413      	add	r3, r2
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	3b5a      	subs	r3, #90	; 0x5a
 8001e8c:	fa00 f203 	lsl.w	r2, r0, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	430a      	orrs	r2, r1
 8001e96:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f003 030c 	and.w	r3, r3, #12
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	f040 80e5 	bne.w	8002072 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2b09      	cmp	r3, #9
 8001eae:	d91c      	bls.n	8001eea <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6999      	ldr	r1, [r3, #24]
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	4613      	mov	r3, r2
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	4413      	add	r3, r2
 8001ec0:	3b1e      	subs	r3, #30
 8001ec2:	2207      	movs	r2, #7
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	4019      	ands	r1, r3
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	6898      	ldr	r0, [r3, #8]
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	4413      	add	r3, r2
 8001eda:	3b1e      	subs	r3, #30
 8001edc:	fa00 f203 	lsl.w	r2, r0, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	619a      	str	r2, [r3, #24]
 8001ee8:	e019      	b.n	8001f1e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	6959      	ldr	r1, [r3, #20]
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	4413      	add	r3, r2
 8001efa:	2207      	movs	r2, #7
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	43db      	mvns	r3, r3
 8001f02:	4019      	ands	r1, r3
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	6898      	ldr	r0, [r3, #8]
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	4413      	add	r3, r2
 8001f12:	fa00 f203 	lsl.w	r2, r0, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	695a      	ldr	r2, [r3, #20]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	08db      	lsrs	r3, r3, #3
 8001f2a:	f003 0303 	and.w	r3, r3, #3
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	2b03      	cmp	r3, #3
 8001f3e:	d84f      	bhi.n	8001fe0 <HAL_ADC_ConfigChannel+0x28c>
 8001f40:	a201      	add	r2, pc, #4	; (adr r2, 8001f48 <HAL_ADC_ConfigChannel+0x1f4>)
 8001f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f46:	bf00      	nop
 8001f48:	08001f59 	.word	0x08001f59
 8001f4c:	08001f7b 	.word	0x08001f7b
 8001f50:	08001f9d 	.word	0x08001f9d
 8001f54:	08001fbf 	.word	0x08001fbf
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f5e:	4b9e      	ldr	r3, [pc, #632]	; (80021d8 <HAL_ADC_ConfigChannel+0x484>)
 8001f60:	4013      	ands	r3, r2
 8001f62:	683a      	ldr	r2, [r7, #0]
 8001f64:	6812      	ldr	r2, [r2, #0]
 8001f66:	0691      	lsls	r1, r2, #26
 8001f68:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	431a      	orrs	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001f76:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001f78:	e07e      	b.n	8002078 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001f80:	4b95      	ldr	r3, [pc, #596]	; (80021d8 <HAL_ADC_ConfigChannel+0x484>)
 8001f82:	4013      	ands	r3, r2
 8001f84:	683a      	ldr	r2, [r7, #0]
 8001f86:	6812      	ldr	r2, [r2, #0]
 8001f88:	0691      	lsls	r1, r2, #26
 8001f8a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001f98:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001f9a:	e06d      	b.n	8002078 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001fa2:	4b8d      	ldr	r3, [pc, #564]	; (80021d8 <HAL_ADC_ConfigChannel+0x484>)
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	683a      	ldr	r2, [r7, #0]
 8001fa8:	6812      	ldr	r2, [r2, #0]
 8001faa:	0691      	lsls	r1, r2, #26
 8001fac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	431a      	orrs	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001fba:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001fbc:	e05c      	b.n	8002078 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001fc4:	4b84      	ldr	r3, [pc, #528]	; (80021d8 <HAL_ADC_ConfigChannel+0x484>)
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	683a      	ldr	r2, [r7, #0]
 8001fca:	6812      	ldr	r2, [r2, #0]
 8001fcc:	0691      	lsls	r1, r2, #26
 8001fce:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	431a      	orrs	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001fdc:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001fde:	e04b      	b.n	8002078 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fe6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	069b      	lsls	r3, r3, #26
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d107      	bne.n	8002004 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002002:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800200a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	069b      	lsls	r3, r3, #26
 8002014:	429a      	cmp	r2, r3
 8002016:	d107      	bne.n	8002028 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002026:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800202e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	069b      	lsls	r3, r3, #26
 8002038:	429a      	cmp	r2, r3
 800203a:	d107      	bne.n	800204c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800204a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002052:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	069b      	lsls	r3, r3, #26
 800205c:	429a      	cmp	r2, r3
 800205e:	d10a      	bne.n	8002076 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800206e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002070:	e001      	b.n	8002076 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002072:	bf00      	nop
 8002074:	e000      	b.n	8002078 <HAL_ADC_ConfigChannel+0x324>
      break;
 8002076:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f003 0303 	and.w	r3, r3, #3
 8002082:	2b01      	cmp	r3, #1
 8002084:	d108      	bne.n	8002098 <HAL_ADC_ConfigChannel+0x344>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0301 	and.w	r3, r3, #1
 8002090:	2b01      	cmp	r3, #1
 8002092:	d101      	bne.n	8002098 <HAL_ADC_ConfigChannel+0x344>
 8002094:	2301      	movs	r3, #1
 8002096:	e000      	b.n	800209a <HAL_ADC_ConfigChannel+0x346>
 8002098:	2300      	movs	r3, #0
 800209a:	2b00      	cmp	r3, #0
 800209c:	f040 810b 	bne.w	80022b6 <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d00f      	beq.n	80020c8 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2201      	movs	r2, #1
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	43da      	mvns	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	400a      	ands	r2, r1
 80020c2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80020c6:	e049      	b.n	800215c <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2201      	movs	r2, #1
 80020d6:	409a      	lsls	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	430a      	orrs	r2, r1
 80020de:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2b09      	cmp	r3, #9
 80020e8:	d91c      	bls.n	8002124 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	6999      	ldr	r1, [r3, #24]
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	4613      	mov	r3, r2
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	4413      	add	r3, r2
 80020fa:	3b1b      	subs	r3, #27
 80020fc:	2207      	movs	r2, #7
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	43db      	mvns	r3, r3
 8002104:	4019      	ands	r1, r3
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	6898      	ldr	r0, [r3, #8]
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	4613      	mov	r3, r2
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	4413      	add	r3, r2
 8002114:	3b1b      	subs	r3, #27
 8002116:	fa00 f203 	lsl.w	r2, r0, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	430a      	orrs	r2, r1
 8002120:	619a      	str	r2, [r3, #24]
 8002122:	e01b      	b.n	800215c <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	6959      	ldr	r1, [r3, #20]
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	1c5a      	adds	r2, r3, #1
 8002130:	4613      	mov	r3, r2
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	4413      	add	r3, r2
 8002136:	2207      	movs	r2, #7
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	43db      	mvns	r3, r3
 800213e:	4019      	ands	r1, r3
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	6898      	ldr	r0, [r3, #8]
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	1c5a      	adds	r2, r3, #1
 800214a:	4613      	mov	r3, r2
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	4413      	add	r3, r2
 8002150:	fa00 f203 	lsl.w	r2, r0, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	430a      	orrs	r2, r1
 800215a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800215c:	4b1f      	ldr	r3, [pc, #124]	; (80021dc <HAL_ADC_ConfigChannel+0x488>)
 800215e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2b10      	cmp	r3, #16
 8002166:	d105      	bne.n	8002174 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002168:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002170:	2b00      	cmp	r3, #0
 8002172:	d015      	beq.n	80021a0 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002178:	2b11      	cmp	r3, #17
 800217a:	d105      	bne.n	8002188 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800217c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002184:	2b00      	cmp	r3, #0
 8002186:	d00b      	beq.n	80021a0 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800218c:	2b12      	cmp	r3, #18
 800218e:	f040 8092 	bne.w	80022b6 <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002192:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800219a:	2b00      	cmp	r3, #0
 800219c:	f040 808b 	bne.w	80022b6 <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021a8:	d102      	bne.n	80021b0 <HAL_ADC_ConfigChannel+0x45c>
 80021aa:	4b0d      	ldr	r3, [pc, #52]	; (80021e0 <HAL_ADC_ConfigChannel+0x48c>)
 80021ac:	60fb      	str	r3, [r7, #12]
 80021ae:	e002      	b.n	80021b6 <HAL_ADC_ConfigChannel+0x462>
 80021b0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80021b4:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f003 0303 	and.w	r3, r3, #3
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d10f      	bne.n	80021e4 <HAL_ADC_ConfigChannel+0x490>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d108      	bne.n	80021e4 <HAL_ADC_ConfigChannel+0x490>
 80021d2:	2301      	movs	r3, #1
 80021d4:	e007      	b.n	80021e6 <HAL_ADC_ConfigChannel+0x492>
 80021d6:	bf00      	nop
 80021d8:	83fff000 	.word	0x83fff000
 80021dc:	50000300 	.word	0x50000300
 80021e0:	50000100 	.word	0x50000100
 80021e4:	2300      	movs	r3, #0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d150      	bne.n	800228c <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80021ea:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d010      	beq.n	8002212 <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f003 0303 	and.w	r3, r3, #3
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d107      	bne.n	800220c <HAL_ADC_ConfigChannel+0x4b8>
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0301 	and.w	r3, r3, #1
 8002204:	2b01      	cmp	r3, #1
 8002206:	d101      	bne.n	800220c <HAL_ADC_ConfigChannel+0x4b8>
 8002208:	2301      	movs	r3, #1
 800220a:	e000      	b.n	800220e <HAL_ADC_ConfigChannel+0x4ba>
 800220c:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800220e:	2b00      	cmp	r3, #0
 8002210:	d13c      	bne.n	800228c <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2b10      	cmp	r3, #16
 8002218:	d11d      	bne.n	8002256 <HAL_ADC_ConfigChannel+0x502>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002222:	d118      	bne.n	8002256 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002224:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800222c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800222e:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002230:	4b27      	ldr	r3, [pc, #156]	; (80022d0 <HAL_ADC_ConfigChannel+0x57c>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a27      	ldr	r2, [pc, #156]	; (80022d4 <HAL_ADC_ConfigChannel+0x580>)
 8002236:	fba2 2303 	umull	r2, r3, r2, r3
 800223a:	0c9a      	lsrs	r2, r3, #18
 800223c:	4613      	mov	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	4413      	add	r3, r2
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002246:	e002      	b.n	800224e <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	3b01      	subs	r3, #1
 800224c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d1f9      	bne.n	8002248 <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002254:	e02e      	b.n	80022b4 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2b11      	cmp	r3, #17
 800225c:	d10b      	bne.n	8002276 <HAL_ADC_ConfigChannel+0x522>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002266:	d106      	bne.n	8002276 <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002268:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002270:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002272:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002274:	e01e      	b.n	80022b4 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2b12      	cmp	r3, #18
 800227c:	d11a      	bne.n	80022b4 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800227e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002286:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002288:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800228a:	e013      	b.n	80022b4 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002290:	f043 0220 	orr.w	r2, r3, #32
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800229e:	e00a      	b.n	80022b6 <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a4:	f043 0220 	orr.w	r2, r3, #32
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80022b2:	e000      	b.n	80022b6 <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80022b4:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80022be:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	376c      	adds	r7, #108	; 0x6c
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	20000000 	.word	0x20000000
 80022d4:	431bde83 	.word	0x431bde83

080022d8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80022d8:	b480      	push	{r7}
 80022da:	b099      	sub	sp, #100	; 0x64
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022e2:	2300      	movs	r3, #0
 80022e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022f0:	d102      	bne.n	80022f8 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80022f2:	4b5a      	ldr	r3, [pc, #360]	; (800245c <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 80022f4:	60bb      	str	r3, [r7, #8]
 80022f6:	e002      	b.n	80022fe <HAL_ADCEx_MultiModeConfigChannel+0x26>
 80022f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80022fc:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d101      	bne.n	8002308 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e0a2      	b.n	800244e <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800230e:	2b01      	cmp	r3, #1
 8002310:	d101      	bne.n	8002316 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002312:	2302      	movs	r3, #2
 8002314:	e09b      	b.n	800244e <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2201      	movs	r2, #1
 800231a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f003 0304 	and.w	r3, r3, #4
 8002328:	2b00      	cmp	r3, #0
 800232a:	d17f      	bne.n	800242c <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f003 0304 	and.w	r3, r3, #4
 8002334:	2b00      	cmp	r3, #0
 8002336:	d179      	bne.n	800242c <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002338:	4b49      	ldr	r3, [pc, #292]	; (8002460 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 800233a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d040      	beq.n	80023c6 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002344:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	6859      	ldr	r1, [r3, #4]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002356:	035b      	lsls	r3, r3, #13
 8002358:	430b      	orrs	r3, r1
 800235a:	431a      	orrs	r2, r3
 800235c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800235e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f003 0303 	and.w	r3, r3, #3
 800236a:	2b01      	cmp	r3, #1
 800236c:	d108      	bne.n	8002380 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0301 	and.w	r3, r3, #1
 8002378:	2b01      	cmp	r3, #1
 800237a:	d101      	bne.n	8002380 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800237c:	2301      	movs	r3, #1
 800237e:	e000      	b.n	8002382 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8002380:	2300      	movs	r3, #0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d15c      	bne.n	8002440 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f003 0303 	and.w	r3, r3, #3
 800238e:	2b01      	cmp	r3, #1
 8002390:	d107      	bne.n	80023a2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	2b01      	cmp	r3, #1
 800239c:	d101      	bne.n	80023a2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800239e:	2301      	movs	r3, #1
 80023a0:	e000      	b.n	80023a4 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 80023a2:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d14b      	bne.n	8002440 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80023a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80023b0:	f023 030f 	bic.w	r3, r3, #15
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	6811      	ldr	r1, [r2, #0]
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	6892      	ldr	r2, [r2, #8]
 80023bc:	430a      	orrs	r2, r1
 80023be:	431a      	orrs	r2, r3
 80023c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023c2:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80023c4:	e03c      	b.n	8002440 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80023c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023d0:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f003 0303 	and.w	r3, r3, #3
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d108      	bne.n	80023f2 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d101      	bne.n	80023f2 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80023ee:	2301      	movs	r3, #1
 80023f0:	e000      	b.n	80023f4 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 80023f2:	2300      	movs	r3, #0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d123      	bne.n	8002440 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f003 0303 	and.w	r3, r3, #3
 8002400:	2b01      	cmp	r3, #1
 8002402:	d107      	bne.n	8002414 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	2b01      	cmp	r3, #1
 800240e:	d101      	bne.n	8002414 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002410:	2301      	movs	r3, #1
 8002412:	e000      	b.n	8002416 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002414:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002416:	2b00      	cmp	r3, #0
 8002418:	d112      	bne.n	8002440 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800241a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002422:	f023 030f 	bic.w	r3, r3, #15
 8002426:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002428:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800242a:	e009      	b.n	8002440 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002430:	f043 0220 	orr.w	r2, r3, #32
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800243e:	e000      	b.n	8002442 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002440:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800244a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800244e:	4618      	mov	r0, r3
 8002450:	3764      	adds	r7, #100	; 0x64
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	50000100 	.word	0x50000100
 8002460:	50000300 	.word	0x50000300

08002464 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800246c:	2300      	movs	r3, #0
 800246e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f003 0303 	and.w	r3, r3, #3
 800247a:	2b01      	cmp	r3, #1
 800247c:	d108      	bne.n	8002490 <ADC_Disable+0x2c>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0301 	and.w	r3, r3, #1
 8002488:	2b01      	cmp	r3, #1
 800248a:	d101      	bne.n	8002490 <ADC_Disable+0x2c>
 800248c:	2301      	movs	r3, #1
 800248e:	e000      	b.n	8002492 <ADC_Disable+0x2e>
 8002490:	2300      	movs	r3, #0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d047      	beq.n	8002526 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f003 030d 	and.w	r3, r3, #13
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d10f      	bne.n	80024c4 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	689a      	ldr	r2, [r3, #8]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f042 0202 	orr.w	r2, r2, #2
 80024b2:	609a      	str	r2, [r3, #8]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2203      	movs	r2, #3
 80024ba:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80024bc:	f7fe ffa4 	bl	8001408 <HAL_GetTick>
 80024c0:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80024c2:	e029      	b.n	8002518 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c8:	f043 0210 	orr.w	r2, r3, #16
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d4:	f043 0201 	orr.w	r2, r3, #1
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e023      	b.n	8002528 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80024e0:	f7fe ff92 	bl	8001408 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d914      	bls.n	8002518 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d10d      	bne.n	8002518 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002500:	f043 0210 	orr.w	r2, r3, #16
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250c:	f043 0201 	orr.w	r2, r3, #1
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e007      	b.n	8002528 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	2b01      	cmp	r3, #1
 8002524:	d0dc      	beq.n	80024e0 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002526:	2300      	movs	r3, #0
}
 8002528:	4618      	mov	r0, r3
 800252a:	3710      	adds	r7, #16
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d101      	bne.n	8002542 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e0ed      	b.n	800271e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2b00      	cmp	r3, #0
 800254c:	d102      	bne.n	8002554 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f7fe f926 	bl	80007a0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f042 0201 	orr.w	r2, r2, #1
 8002562:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002564:	f7fe ff50 	bl	8001408 <HAL_GetTick>
 8002568:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800256a:	e012      	b.n	8002592 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800256c:	f7fe ff4c 	bl	8001408 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b0a      	cmp	r3, #10
 8002578:	d90b      	bls.n	8002592 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2205      	movs	r2, #5
 800258a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e0c5      	b.n	800271e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f003 0301 	and.w	r3, r3, #1
 800259c:	2b00      	cmp	r3, #0
 800259e:	d0e5      	beq.n	800256c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f022 0202 	bic.w	r2, r2, #2
 80025ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025b0:	f7fe ff2a 	bl	8001408 <HAL_GetTick>
 80025b4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80025b6:	e012      	b.n	80025de <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80025b8:	f7fe ff26 	bl	8001408 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b0a      	cmp	r3, #10
 80025c4:	d90b      	bls.n	80025de <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2205      	movs	r2, #5
 80025d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e09f      	b.n	800271e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f003 0302 	and.w	r3, r3, #2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d1e5      	bne.n	80025b8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	7e1b      	ldrb	r3, [r3, #24]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d108      	bne.n	8002606 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	e007      	b.n	8002616 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002614:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	7e5b      	ldrb	r3, [r3, #25]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d108      	bne.n	8002630 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800262c:	601a      	str	r2, [r3, #0]
 800262e:	e007      	b.n	8002640 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800263e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	7e9b      	ldrb	r3, [r3, #26]
 8002644:	2b01      	cmp	r3, #1
 8002646:	d108      	bne.n	800265a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f042 0220 	orr.w	r2, r2, #32
 8002656:	601a      	str	r2, [r3, #0]
 8002658:	e007      	b.n	800266a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f022 0220 	bic.w	r2, r2, #32
 8002668:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	7edb      	ldrb	r3, [r3, #27]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d108      	bne.n	8002684 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f022 0210 	bic.w	r2, r2, #16
 8002680:	601a      	str	r2, [r3, #0]
 8002682:	e007      	b.n	8002694 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f042 0210 	orr.w	r2, r2, #16
 8002692:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	7f1b      	ldrb	r3, [r3, #28]
 8002698:	2b01      	cmp	r3, #1
 800269a:	d108      	bne.n	80026ae <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f042 0208 	orr.w	r2, r2, #8
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	e007      	b.n	80026be <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f022 0208 	bic.w	r2, r2, #8
 80026bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	7f5b      	ldrb	r3, [r3, #29]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d108      	bne.n	80026d8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f042 0204 	orr.w	r2, r2, #4
 80026d4:	601a      	str	r2, [r3, #0]
 80026d6:	e007      	b.n	80026e8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f022 0204 	bic.w	r2, r2, #4
 80026e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689a      	ldr	r2, [r3, #8]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	431a      	orrs	r2, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	431a      	orrs	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	695b      	ldr	r3, [r3, #20]
 80026fc:	ea42 0103 	orr.w	r1, r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	1e5a      	subs	r2, r3, #1
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	430a      	orrs	r2, r1
 800270c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
	...

08002728 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f003 0307 	and.w	r3, r3, #7
 8002736:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002738:	4b0c      	ldr	r3, [pc, #48]	; (800276c <__NVIC_SetPriorityGrouping+0x44>)
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800273e:	68ba      	ldr	r2, [r7, #8]
 8002740:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002744:	4013      	ands	r3, r2
 8002746:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002750:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002754:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002758:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800275a:	4a04      	ldr	r2, [pc, #16]	; (800276c <__NVIC_SetPriorityGrouping+0x44>)
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	60d3      	str	r3, [r2, #12]
}
 8002760:	bf00      	nop
 8002762:	3714      	adds	r7, #20
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr
 800276c:	e000ed00 	.word	0xe000ed00

08002770 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002774:	4b04      	ldr	r3, [pc, #16]	; (8002788 <__NVIC_GetPriorityGrouping+0x18>)
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	0a1b      	lsrs	r3, r3, #8
 800277a:	f003 0307 	and.w	r3, r3, #7
}
 800277e:	4618      	mov	r0, r3
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr
 8002788:	e000ed00 	.word	0xe000ed00

0800278c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	4603      	mov	r3, r0
 8002794:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279a:	2b00      	cmp	r3, #0
 800279c:	db0b      	blt.n	80027b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800279e:	79fb      	ldrb	r3, [r7, #7]
 80027a0:	f003 021f 	and.w	r2, r3, #31
 80027a4:	4907      	ldr	r1, [pc, #28]	; (80027c4 <__NVIC_EnableIRQ+0x38>)
 80027a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027aa:	095b      	lsrs	r3, r3, #5
 80027ac:	2001      	movs	r0, #1
 80027ae:	fa00 f202 	lsl.w	r2, r0, r2
 80027b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027b6:	bf00      	nop
 80027b8:	370c      	adds	r7, #12
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	e000e100 	.word	0xe000e100

080027c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	4603      	mov	r3, r0
 80027d0:	6039      	str	r1, [r7, #0]
 80027d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	db0a      	blt.n	80027f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	b2da      	uxtb	r2, r3
 80027e0:	490c      	ldr	r1, [pc, #48]	; (8002814 <__NVIC_SetPriority+0x4c>)
 80027e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e6:	0112      	lsls	r2, r2, #4
 80027e8:	b2d2      	uxtb	r2, r2
 80027ea:	440b      	add	r3, r1
 80027ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027f0:	e00a      	b.n	8002808 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	b2da      	uxtb	r2, r3
 80027f6:	4908      	ldr	r1, [pc, #32]	; (8002818 <__NVIC_SetPriority+0x50>)
 80027f8:	79fb      	ldrb	r3, [r7, #7]
 80027fa:	f003 030f 	and.w	r3, r3, #15
 80027fe:	3b04      	subs	r3, #4
 8002800:	0112      	lsls	r2, r2, #4
 8002802:	b2d2      	uxtb	r2, r2
 8002804:	440b      	add	r3, r1
 8002806:	761a      	strb	r2, [r3, #24]
}
 8002808:	bf00      	nop
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr
 8002814:	e000e100 	.word	0xe000e100
 8002818:	e000ed00 	.word	0xe000ed00

0800281c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800281c:	b480      	push	{r7}
 800281e:	b089      	sub	sp, #36	; 0x24
 8002820:	af00      	add	r7, sp, #0
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f003 0307 	and.w	r3, r3, #7
 800282e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	f1c3 0307 	rsb	r3, r3, #7
 8002836:	2b04      	cmp	r3, #4
 8002838:	bf28      	it	cs
 800283a:	2304      	movcs	r3, #4
 800283c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	3304      	adds	r3, #4
 8002842:	2b06      	cmp	r3, #6
 8002844:	d902      	bls.n	800284c <NVIC_EncodePriority+0x30>
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	3b03      	subs	r3, #3
 800284a:	e000      	b.n	800284e <NVIC_EncodePriority+0x32>
 800284c:	2300      	movs	r3, #0
 800284e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002850:	f04f 32ff 	mov.w	r2, #4294967295
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	fa02 f303 	lsl.w	r3, r2, r3
 800285a:	43da      	mvns	r2, r3
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	401a      	ands	r2, r3
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002864:	f04f 31ff 	mov.w	r1, #4294967295
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	fa01 f303 	lsl.w	r3, r1, r3
 800286e:	43d9      	mvns	r1, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002874:	4313      	orrs	r3, r2
         );
}
 8002876:	4618      	mov	r0, r3
 8002878:	3724      	adds	r7, #36	; 0x24
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
	...

08002884 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	3b01      	subs	r3, #1
 8002890:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002894:	d301      	bcc.n	800289a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002896:	2301      	movs	r3, #1
 8002898:	e00f      	b.n	80028ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800289a:	4a0a      	ldr	r2, [pc, #40]	; (80028c4 <SysTick_Config+0x40>)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	3b01      	subs	r3, #1
 80028a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028a2:	210f      	movs	r1, #15
 80028a4:	f04f 30ff 	mov.w	r0, #4294967295
 80028a8:	f7ff ff8e 	bl	80027c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028ac:	4b05      	ldr	r3, [pc, #20]	; (80028c4 <SysTick_Config+0x40>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028b2:	4b04      	ldr	r3, [pc, #16]	; (80028c4 <SysTick_Config+0x40>)
 80028b4:	2207      	movs	r2, #7
 80028b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	e000e010 	.word	0xe000e010

080028c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f7ff ff29 	bl	8002728 <__NVIC_SetPriorityGrouping>
}
 80028d6:	bf00      	nop
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b086      	sub	sp, #24
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	4603      	mov	r3, r0
 80028e6:	60b9      	str	r1, [r7, #8]
 80028e8:	607a      	str	r2, [r7, #4]
 80028ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028ec:	2300      	movs	r3, #0
 80028ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028f0:	f7ff ff3e 	bl	8002770 <__NVIC_GetPriorityGrouping>
 80028f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	68b9      	ldr	r1, [r7, #8]
 80028fa:	6978      	ldr	r0, [r7, #20]
 80028fc:	f7ff ff8e 	bl	800281c <NVIC_EncodePriority>
 8002900:	4602      	mov	r2, r0
 8002902:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002906:	4611      	mov	r1, r2
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff ff5d 	bl	80027c8 <__NVIC_SetPriority>
}
 800290e:	bf00      	nop
 8002910:	3718      	adds	r7, #24
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b082      	sub	sp, #8
 800291a:	af00      	add	r7, sp, #0
 800291c:	4603      	mov	r3, r0
 800291e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002924:	4618      	mov	r0, r3
 8002926:	f7ff ff31 	bl	800278c <__NVIC_EnableIRQ>
}
 800292a:	bf00      	nop
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002932:	b580      	push	{r7, lr}
 8002934:	b082      	sub	sp, #8
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f7ff ffa2 	bl	8002884 <SysTick_Config>
 8002940:	4603      	mov	r3, r0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800294a:	b580      	push	{r7, lr}
 800294c:	b084      	sub	sp, #16
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002952:	2300      	movs	r3, #0
 8002954:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d101      	bne.n	8002960 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e037      	b.n	80029d0 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2202      	movs	r2, #2
 8002964:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002976:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800297a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002984:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002990:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800299c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68fa      	ldr	r2, [r7, #12]
 80029b0:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 f8fe 	bl	8002bb4 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2201      	movs	r2, #1
 80029c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}  
 80029d0:	4618      	mov	r0, r3
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029e0:	2300      	movs	r3, #0
 80029e2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d005      	beq.n	80029fa <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2204      	movs	r2, #4
 80029f2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	73fb      	strb	r3, [r7, #15]
 80029f8:	e027      	b.n	8002a4a <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f022 020e 	bic.w	r2, r2, #14
 8002a08:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f022 0201 	bic.w	r2, r2, #1
 8002a18:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a22:	2101      	movs	r1, #1
 8002a24:	fa01 f202 	lsl.w	r2, r1, r2
 8002a28:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d003      	beq.n	8002a4a <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	4798      	blx	r3
    } 
  }
  return status;
 8002a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3710      	adds	r7, #16
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a70:	2204      	movs	r2, #4
 8002a72:	409a      	lsls	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	4013      	ands	r3, r2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d024      	beq.n	8002ac6 <HAL_DMA_IRQHandler+0x72>
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	f003 0304 	and.w	r3, r3, #4
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d01f      	beq.n	8002ac6 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0320 	and.w	r3, r3, #32
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d107      	bne.n	8002aa4 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f022 0204 	bic.w	r2, r2, #4
 8002aa2:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aac:	2104      	movs	r1, #4
 8002aae:	fa01 f202 	lsl.w	r2, r1, r2
 8002ab2:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d06a      	beq.n	8002b92 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002ac4:	e065      	b.n	8002b92 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aca:	2202      	movs	r2, #2
 8002acc:	409a      	lsls	r2, r3
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d02c      	beq.n	8002b30 <HAL_DMA_IRQHandler+0xdc>
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	f003 0302 	and.w	r3, r3, #2
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d027      	beq.n	8002b30 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0320 	and.w	r3, r3, #32
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d10b      	bne.n	8002b06 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f022 020a 	bic.w	r2, r2, #10
 8002afc:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b0e:	2102      	movs	r1, #2
 8002b10:	fa01 f202 	lsl.w	r2, r1, r2
 8002b14:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d035      	beq.n	8002b92 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002b2e:	e030      	b.n	8002b92 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b34:	2208      	movs	r2, #8
 8002b36:	409a      	lsls	r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d028      	beq.n	8002b92 <HAL_DMA_IRQHandler+0x13e>
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	f003 0308 	and.w	r3, r3, #8
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d023      	beq.n	8002b92 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f022 020e 	bic.w	r2, r2, #14
 8002b58:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b62:	2101      	movs	r1, #1
 8002b64:	fa01 f202 	lsl.w	r2, r1, r2
 8002b68:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d004      	beq.n	8002b92 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	4798      	blx	r3
    }
  }
}  
 8002b90:	e7ff      	b.n	8002b92 <HAL_DMA_IRQHandler+0x13e>
 8002b92:	bf00      	nop
 8002b94:	3710      	adds	r7, #16
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b083      	sub	sp, #12
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	4b09      	ldr	r3, [pc, #36]	; (8002be8 <DMA_CalcBaseAndBitshift+0x34>)
 8002bc4:	4413      	add	r3, r2
 8002bc6:	4a09      	ldr	r2, [pc, #36]	; (8002bec <DMA_CalcBaseAndBitshift+0x38>)
 8002bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bcc:	091b      	lsrs	r3, r3, #4
 8002bce:	009a      	lsls	r2, r3, #2
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4a06      	ldr	r2, [pc, #24]	; (8002bf0 <DMA_CalcBaseAndBitshift+0x3c>)
 8002bd8:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	bffdfff8 	.word	0xbffdfff8
 8002bec:	cccccccd 	.word	0xcccccccd
 8002bf0:	40020000 	.word	0x40020000

08002bf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b087      	sub	sp, #28
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c02:	e14e      	b.n	8002ea2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	2101      	movs	r1, #1
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c10:	4013      	ands	r3, r2
 8002c12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	f000 8140 	beq.w	8002e9c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f003 0303 	and.w	r3, r3, #3
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d005      	beq.n	8002c34 <HAL_GPIO_Init+0x40>
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f003 0303 	and.w	r3, r3, #3
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d130      	bne.n	8002c96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	2203      	movs	r2, #3
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	43db      	mvns	r3, r3
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	68da      	ldr	r2, [r3, #12]
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	fa02 f303 	lsl.w	r3, r2, r3
 8002c58:	693a      	ldr	r2, [r7, #16]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c72:	43db      	mvns	r3, r3
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	4013      	ands	r3, r2
 8002c78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	091b      	lsrs	r3, r3, #4
 8002c80:	f003 0201 	and.w	r2, r3, #1
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f003 0303 	and.w	r3, r3, #3
 8002c9e:	2b03      	cmp	r3, #3
 8002ca0:	d017      	beq.n	8002cd2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	2203      	movs	r2, #3
 8002cae:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb2:	43db      	mvns	r3, r3
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	689a      	ldr	r2, [r3, #8]
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f003 0303 	and.w	r3, r3, #3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d123      	bne.n	8002d26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	08da      	lsrs	r2, r3, #3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	3208      	adds	r2, #8
 8002ce6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	f003 0307 	and.w	r3, r3, #7
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	220f      	movs	r2, #15
 8002cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfa:	43db      	mvns	r3, r3
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	4013      	ands	r3, r2
 8002d00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	691a      	ldr	r2, [r3, #16]
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	f003 0307 	and.w	r3, r3, #7
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	08da      	lsrs	r2, r3, #3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	3208      	adds	r2, #8
 8002d20:	6939      	ldr	r1, [r7, #16]
 8002d22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	2203      	movs	r2, #3
 8002d32:	fa02 f303 	lsl.w	r3, r2, r3
 8002d36:	43db      	mvns	r3, r3
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f003 0203 	and.w	r2, r3, #3
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	f000 809a 	beq.w	8002e9c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d68:	4b55      	ldr	r3, [pc, #340]	; (8002ec0 <HAL_GPIO_Init+0x2cc>)
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	4a54      	ldr	r2, [pc, #336]	; (8002ec0 <HAL_GPIO_Init+0x2cc>)
 8002d6e:	f043 0301 	orr.w	r3, r3, #1
 8002d72:	6193      	str	r3, [r2, #24]
 8002d74:	4b52      	ldr	r3, [pc, #328]	; (8002ec0 <HAL_GPIO_Init+0x2cc>)
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	f003 0301 	and.w	r3, r3, #1
 8002d7c:	60bb      	str	r3, [r7, #8]
 8002d7e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002d80:	4a50      	ldr	r2, [pc, #320]	; (8002ec4 <HAL_GPIO_Init+0x2d0>)
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	089b      	lsrs	r3, r3, #2
 8002d86:	3302      	adds	r3, #2
 8002d88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	f003 0303 	and.w	r3, r3, #3
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	220f      	movs	r2, #15
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	4013      	ands	r3, r2
 8002da2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002daa:	d013      	beq.n	8002dd4 <HAL_GPIO_Init+0x1e0>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4a46      	ldr	r2, [pc, #280]	; (8002ec8 <HAL_GPIO_Init+0x2d4>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d00d      	beq.n	8002dd0 <HAL_GPIO_Init+0x1dc>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4a45      	ldr	r2, [pc, #276]	; (8002ecc <HAL_GPIO_Init+0x2d8>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d007      	beq.n	8002dcc <HAL_GPIO_Init+0x1d8>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a44      	ldr	r2, [pc, #272]	; (8002ed0 <HAL_GPIO_Init+0x2dc>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d101      	bne.n	8002dc8 <HAL_GPIO_Init+0x1d4>
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e006      	b.n	8002dd6 <HAL_GPIO_Init+0x1e2>
 8002dc8:	2305      	movs	r3, #5
 8002dca:	e004      	b.n	8002dd6 <HAL_GPIO_Init+0x1e2>
 8002dcc:	2302      	movs	r3, #2
 8002dce:	e002      	b.n	8002dd6 <HAL_GPIO_Init+0x1e2>
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e000      	b.n	8002dd6 <HAL_GPIO_Init+0x1e2>
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	f002 0203 	and.w	r2, r2, #3
 8002ddc:	0092      	lsls	r2, r2, #2
 8002dde:	4093      	lsls	r3, r2
 8002de0:	693a      	ldr	r2, [r7, #16]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002de6:	4937      	ldr	r1, [pc, #220]	; (8002ec4 <HAL_GPIO_Init+0x2d0>)
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	089b      	lsrs	r3, r3, #2
 8002dec:	3302      	adds	r3, #2
 8002dee:	693a      	ldr	r2, [r7, #16]
 8002df0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002df4:	4b37      	ldr	r3, [pc, #220]	; (8002ed4 <HAL_GPIO_Init+0x2e0>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	43db      	mvns	r3, r3
 8002dfe:	693a      	ldr	r2, [r7, #16]
 8002e00:	4013      	ands	r3, r2
 8002e02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d003      	beq.n	8002e18 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002e10:	693a      	ldr	r2, [r7, #16]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002e18:	4a2e      	ldr	r2, [pc, #184]	; (8002ed4 <HAL_GPIO_Init+0x2e0>)
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002e1e:	4b2d      	ldr	r3, [pc, #180]	; (8002ed4 <HAL_GPIO_Init+0x2e0>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	43db      	mvns	r3, r3
 8002e28:	693a      	ldr	r2, [r7, #16]
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d003      	beq.n	8002e42 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002e3a:	693a      	ldr	r2, [r7, #16]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002e42:	4a24      	ldr	r2, [pc, #144]	; (8002ed4 <HAL_GPIO_Init+0x2e0>)
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e48:	4b22      	ldr	r3, [pc, #136]	; (8002ed4 <HAL_GPIO_Init+0x2e0>)
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	43db      	mvns	r3, r3
 8002e52:	693a      	ldr	r2, [r7, #16]
 8002e54:	4013      	ands	r3, r2
 8002e56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d003      	beq.n	8002e6c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002e64:	693a      	ldr	r2, [r7, #16]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002e6c:	4a19      	ldr	r2, [pc, #100]	; (8002ed4 <HAL_GPIO_Init+0x2e0>)
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e72:	4b18      	ldr	r3, [pc, #96]	; (8002ed4 <HAL_GPIO_Init+0x2e0>)
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	43db      	mvns	r3, r3
 8002e7c:	693a      	ldr	r2, [r7, #16]
 8002e7e:	4013      	ands	r3, r2
 8002e80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d003      	beq.n	8002e96 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002e8e:	693a      	ldr	r2, [r7, #16]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002e96:	4a0f      	ldr	r2, [pc, #60]	; (8002ed4 <HAL_GPIO_Init+0x2e0>)
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	f47f aea9 	bne.w	8002c04 <HAL_GPIO_Init+0x10>
  }
}
 8002eb2:	bf00      	nop
 8002eb4:	bf00      	nop
 8002eb6:	371c      	adds	r7, #28
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr
 8002ec0:	40021000 	.word	0x40021000
 8002ec4:	40010000 	.word	0x40010000
 8002ec8:	48000400 	.word	0x48000400
 8002ecc:	48000800 	.word	0x48000800
 8002ed0:	48000c00 	.word	0x48000c00
 8002ed4:	40010400 	.word	0x40010400

08002ed8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	807b      	strh	r3, [r7, #2]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ee8:	787b      	ldrb	r3, [r7, #1]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d003      	beq.n	8002ef6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002eee:	887a      	ldrh	r2, [r7, #2]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ef4:	e002      	b.n	8002efc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ef6:	887a      	ldrh	r2, [r7, #2]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002efc:	bf00      	nop
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e081      	b.n	800301e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d106      	bne.n	8002f34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f7fd fd76 	bl	8000a20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2224      	movs	r2, #36	; 0x24
 8002f38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f022 0201 	bic.w	r2, r2, #1
 8002f4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685a      	ldr	r2, [r3, #4]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f58:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	689a      	ldr	r2, [r3, #8]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f68:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d107      	bne.n	8002f82 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	689a      	ldr	r2, [r3, #8]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f7e:	609a      	str	r2, [r3, #8]
 8002f80:	e006      	b.n	8002f90 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	689a      	ldr	r2, [r3, #8]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002f8e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d104      	bne.n	8002fa2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002fa0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	6812      	ldr	r2, [r2, #0]
 8002fac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002fb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fb4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68da      	ldr	r2, [r3, #12]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fc4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	691a      	ldr	r2, [r3, #16]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	69d9      	ldr	r1, [r3, #28]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a1a      	ldr	r2, [r3, #32]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	430a      	orrs	r2, r1
 8002fee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f042 0201 	orr.w	r2, r2, #1
 8002ffe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2220      	movs	r2, #32
 800300a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}

08003026 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003026:	b580      	push	{r7, lr}
 8003028:	b084      	sub	sp, #16
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003042:	2b00      	cmp	r3, #0
 8003044:	d005      	beq.n	8003052 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800304a:	68ba      	ldr	r2, [r7, #8]
 800304c:	68f9      	ldr	r1, [r7, #12]
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	4798      	blx	r3
  }
}
 8003052:	bf00      	nop
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b086      	sub	sp, #24
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	0a1b      	lsrs	r3, r3, #8
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b00      	cmp	r3, #0
 800307c:	d010      	beq.n	80030a0 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	09db      	lsrs	r3, r3, #7
 8003082:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00a      	beq.n	80030a0 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308e:	f043 0201 	orr.w	r2, r3, #1
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800309e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	0a9b      	lsrs	r3, r3, #10
 80030a4:	f003 0301 	and.w	r3, r3, #1
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d010      	beq.n	80030ce <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	09db      	lsrs	r3, r3, #7
 80030b0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00a      	beq.n	80030ce <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030bc:	f043 0208 	orr.w	r2, r3, #8
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030cc:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	0a5b      	lsrs	r3, r3, #9
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d010      	beq.n	80030fc <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	09db      	lsrs	r3, r3, #7
 80030de:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00a      	beq.n	80030fc <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ea:	f043 0202 	orr.w	r2, r3, #2
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030fa:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003100:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f003 030b 	and.w	r3, r3, #11
 8003108:	2b00      	cmp	r3, #0
 800310a:	d003      	beq.n	8003114 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800310c:	68f9      	ldr	r1, [r7, #12]
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 fb8a 	bl	8003828 <I2C_ITError>
  }
}
 8003114:	bf00      	nop
 8003116:	3718      	adds	r7, #24
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003124:	bf00      	nop
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003138:	bf00      	nop
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	460b      	mov	r3, r1
 800314e:	70fb      	strb	r3, [r7, #3]
 8003150:	4613      	mov	r3, r2
 8003152:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ac:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d101      	bne.n	80031c0 <I2C_Slave_ISR_IT+0x24>
 80031bc:	2302      	movs	r3, #2
 80031be:	e0ec      	b.n	800339a <I2C_Slave_ISR_IT+0x1fe>
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	095b      	lsrs	r3, r3, #5
 80031cc:	f003 0301 	and.w	r3, r3, #1
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d009      	beq.n	80031e8 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	095b      	lsrs	r3, r3, #5
 80031d8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d003      	beq.n	80031e8 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80031e0:	6939      	ldr	r1, [r7, #16]
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	f000 f9c0 	bl	8003568 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	091b      	lsrs	r3, r3, #4
 80031ec:	f003 0301 	and.w	r3, r3, #1
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d04d      	beq.n	8003290 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	091b      	lsrs	r3, r3, #4
 80031f8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d047      	beq.n	8003290 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003204:	b29b      	uxth	r3, r3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d128      	bne.n	800325c <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b28      	cmp	r3, #40	; 0x28
 8003214:	d108      	bne.n	8003228 <I2C_Slave_ISR_IT+0x8c>
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800321c:	d104      	bne.n	8003228 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800321e:	6939      	ldr	r1, [r7, #16]
 8003220:	68f8      	ldr	r0, [r7, #12]
 8003222:	f000 faab 	bl	800377c <I2C_ITListenCplt>
 8003226:	e032      	b.n	800328e <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800322e:	b2db      	uxtb	r3, r3
 8003230:	2b29      	cmp	r3, #41	; 0x29
 8003232:	d10e      	bne.n	8003252 <I2C_Slave_ISR_IT+0xb6>
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800323a:	d00a      	beq.n	8003252 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2210      	movs	r2, #16
 8003242:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003244:	68f8      	ldr	r0, [r7, #12]
 8003246:	f000 fbe6 	bl	8003a16 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	f000 f92d 	bl	80034aa <I2C_ITSlaveSeqCplt>
 8003250:	e01d      	b.n	800328e <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2210      	movs	r2, #16
 8003258:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800325a:	e096      	b.n	800338a <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2210      	movs	r2, #16
 8003262:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003268:	f043 0204 	orr.w	r2, r3, #4
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d004      	beq.n	8003280 <I2C_Slave_ISR_IT+0xe4>
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800327c:	f040 8085 	bne.w	800338a <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003284:	4619      	mov	r1, r3
 8003286:	68f8      	ldr	r0, [r7, #12]
 8003288:	f000 face 	bl	8003828 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800328c:	e07d      	b.n	800338a <I2C_Slave_ISR_IT+0x1ee>
 800328e:	e07c      	b.n	800338a <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	089b      	lsrs	r3, r3, #2
 8003294:	f003 0301 	and.w	r3, r3, #1
 8003298:	2b00      	cmp	r3, #0
 800329a:	d030      	beq.n	80032fe <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	089b      	lsrs	r3, r3, #2
 80032a0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d02a      	beq.n	80032fe <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d018      	beq.n	80032e4 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032bc:	b2d2      	uxtb	r2, r2
 80032be:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c4:	1c5a      	adds	r2, r3, #1
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ce:	3b01      	subs	r3, #1
 80032d0:	b29a      	uxth	r2, r3
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032da:	b29b      	uxth	r3, r3
 80032dc:	3b01      	subs	r3, #1
 80032de:	b29a      	uxth	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d14f      	bne.n	800338e <I2C_Slave_ISR_IT+0x1f2>
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80032f4:	d04b      	beq.n	800338e <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80032f6:	68f8      	ldr	r0, [r7, #12]
 80032f8:	f000 f8d7 	bl	80034aa <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80032fc:	e047      	b.n	800338e <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	08db      	lsrs	r3, r3, #3
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00a      	beq.n	8003320 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	08db      	lsrs	r3, r3, #3
 800330e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003312:	2b00      	cmp	r3, #0
 8003314:	d004      	beq.n	8003320 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003316:	6939      	ldr	r1, [r7, #16]
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f000 f842 	bl	80033a2 <I2C_ITAddrCplt>
 800331e:	e037      	b.n	8003390 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	085b      	lsrs	r3, r3, #1
 8003324:	f003 0301 	and.w	r3, r3, #1
 8003328:	2b00      	cmp	r3, #0
 800332a:	d031      	beq.n	8003390 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	085b      	lsrs	r3, r3, #1
 8003330:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003334:	2b00      	cmp	r3, #0
 8003336:	d02b      	beq.n	8003390 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800333c:	b29b      	uxth	r3, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	d018      	beq.n	8003374 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003346:	781a      	ldrb	r2, [r3, #0]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003352:	1c5a      	adds	r2, r3, #1
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800335c:	b29b      	uxth	r3, r3
 800335e:	3b01      	subs	r3, #1
 8003360:	b29a      	uxth	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800336a:	3b01      	subs	r3, #1
 800336c:	b29a      	uxth	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	851a      	strh	r2, [r3, #40]	; 0x28
 8003372:	e00d      	b.n	8003390 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800337a:	d002      	beq.n	8003382 <I2C_Slave_ISR_IT+0x1e6>
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d106      	bne.n	8003390 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003382:	68f8      	ldr	r0, [r7, #12]
 8003384:	f000 f891 	bl	80034aa <I2C_ITSlaveSeqCplt>
 8003388:	e002      	b.n	8003390 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800338a:	bf00      	nop
 800338c:	e000      	b.n	8003390 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800338e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3718      	adds	r7, #24
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b084      	sub	sp, #16
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
 80033aa:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80033b8:	2b28      	cmp	r3, #40	; 0x28
 80033ba:	d16a      	bne.n	8003492 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	0c1b      	lsrs	r3, r3, #16
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	0c1b      	lsrs	r3, r3, #16
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80033da:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033e8:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80033f6:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d138      	bne.n	8003472 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003400:	897b      	ldrh	r3, [r7, #10]
 8003402:	09db      	lsrs	r3, r3, #7
 8003404:	b29a      	uxth	r2, r3
 8003406:	89bb      	ldrh	r3, [r7, #12]
 8003408:	4053      	eors	r3, r2
 800340a:	b29b      	uxth	r3, r3
 800340c:	f003 0306 	and.w	r3, r3, #6
 8003410:	2b00      	cmp	r3, #0
 8003412:	d11c      	bne.n	800344e <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003414:	897b      	ldrh	r3, [r7, #10]
 8003416:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800341c:	1c5a      	adds	r2, r3, #1
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003426:	2b02      	cmp	r3, #2
 8003428:	d13b      	bne.n	80034a2 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2208      	movs	r2, #8
 8003436:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003440:	89ba      	ldrh	r2, [r7, #12]
 8003442:	7bfb      	ldrb	r3, [r7, #15]
 8003444:	4619      	mov	r1, r3
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f7ff fe7c 	bl	8003144 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800344c:	e029      	b.n	80034a2 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800344e:	893b      	ldrh	r3, [r7, #8]
 8003450:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003452:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 fb1f 	bl	8003a9a <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003464:	89ba      	ldrh	r2, [r7, #12]
 8003466:	7bfb      	ldrb	r3, [r7, #15]
 8003468:	4619      	mov	r1, r3
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f7ff fe6a 	bl	8003144 <HAL_I2C_AddrCallback>
}
 8003470:	e017      	b.n	80034a2 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003472:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 fb0f 	bl	8003a9a <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003484:	89ba      	ldrh	r2, [r7, #12]
 8003486:	7bfb      	ldrb	r3, [r7, #15]
 8003488:	4619      	mov	r1, r3
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f7ff fe5a 	bl	8003144 <HAL_I2C_AddrCallback>
}
 8003490:	e007      	b.n	80034a2 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2208      	movs	r2, #8
 8003498:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80034a2:	bf00      	nop
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b084      	sub	sp, #16
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	0b9b      	lsrs	r3, r3, #14
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d008      	beq.n	80034e0 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80034dc:	601a      	str	r2, [r3, #0]
 80034de:	e00d      	b.n	80034fc <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	0bdb      	lsrs	r3, r3, #15
 80034e4:	f003 0301 	and.w	r3, r3, #1
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d007      	beq.n	80034fc <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034fa:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b29      	cmp	r3, #41	; 0x29
 8003506:	d112      	bne.n	800352e <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2228      	movs	r2, #40	; 0x28
 800350c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2221      	movs	r2, #33	; 0x21
 8003514:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003516:	2101      	movs	r1, #1
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f000 fabe 	bl	8003a9a <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f7ff fdf8 	bl	800311c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800352c:	e017      	b.n	800355e <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b2a      	cmp	r3, #42	; 0x2a
 8003538:	d111      	bne.n	800355e <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2228      	movs	r2, #40	; 0x28
 800353e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2222      	movs	r2, #34	; 0x22
 8003546:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003548:	2102      	movs	r1, #2
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 faa5 	bl	8003a9a <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f7ff fde9 	bl	8003130 <HAL_I2C_SlaveRxCpltCallback>
}
 800355e:	bf00      	nop
 8003560:	3710      	adds	r7, #16
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
	...

08003568 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b086      	sub	sp, #24
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003584:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2220      	movs	r2, #32
 800358c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800358e:	7bfb      	ldrb	r3, [r7, #15]
 8003590:	2b21      	cmp	r3, #33	; 0x21
 8003592:	d002      	beq.n	800359a <I2C_ITSlaveCplt+0x32>
 8003594:	7bfb      	ldrb	r3, [r7, #15]
 8003596:	2b29      	cmp	r3, #41	; 0x29
 8003598:	d108      	bne.n	80035ac <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800359a:	f248 0101 	movw	r1, #32769	; 0x8001
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 fa7b 	bl	8003a9a <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2221      	movs	r2, #33	; 0x21
 80035a8:	631a      	str	r2, [r3, #48]	; 0x30
 80035aa:	e00d      	b.n	80035c8 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80035ac:	7bfb      	ldrb	r3, [r7, #15]
 80035ae:	2b22      	cmp	r3, #34	; 0x22
 80035b0:	d002      	beq.n	80035b8 <I2C_ITSlaveCplt+0x50>
 80035b2:	7bfb      	ldrb	r3, [r7, #15]
 80035b4:	2b2a      	cmp	r3, #42	; 0x2a
 80035b6:	d107      	bne.n	80035c8 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80035b8:	f248 0102 	movw	r1, #32770	; 0x8002
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f000 fa6c 	bl	8003a9a <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2222      	movs	r2, #34	; 0x22
 80035c6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	685a      	ldr	r2, [r3, #4]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035d6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6859      	ldr	r1, [r3, #4]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	4b64      	ldr	r3, [pc, #400]	; (8003774 <I2C_ITSlaveCplt+0x20c>)
 80035e4:	400b      	ands	r3, r1
 80035e6:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f000 fa14 	bl	8003a16 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	0b9b      	lsrs	r3, r3, #14
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d013      	beq.n	8003622 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003608:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800360e:	2b00      	cmp	r3, #0
 8003610:	d020      	beq.n	8003654 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	b29a      	uxth	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003620:	e018      	b.n	8003654 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	0bdb      	lsrs	r3, r3, #15
 8003626:	f003 0301 	and.w	r3, r3, #1
 800362a:	2b00      	cmp	r3, #0
 800362c:	d012      	beq.n	8003654 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800363c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003642:	2b00      	cmp	r3, #0
 8003644:	d006      	beq.n	8003654 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	b29a      	uxth	r2, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	089b      	lsrs	r3, r3, #2
 8003658:	f003 0301 	and.w	r3, r3, #1
 800365c:	2b00      	cmp	r3, #0
 800365e:	d020      	beq.n	80036a2 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	f023 0304 	bic.w	r3, r3, #4
 8003666:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003672:	b2d2      	uxtb	r2, r2
 8003674:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367a:	1c5a      	adds	r2, r3, #1
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003684:	2b00      	cmp	r3, #0
 8003686:	d00c      	beq.n	80036a2 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800368c:	3b01      	subs	r3, #1
 800368e:	b29a      	uxth	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003698:	b29b      	uxth	r3, r3
 800369a:	3b01      	subs	r3, #1
 800369c:	b29a      	uxth	r2, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d005      	beq.n	80036b8 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b0:	f043 0204 	orr.w	r2, r3, #4
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d010      	beq.n	80036f0 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d2:	4619      	mov	r1, r3
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 f8a7 	bl	8003828 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b28      	cmp	r3, #40	; 0x28
 80036e4:	d141      	bne.n	800376a <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80036e6:	6979      	ldr	r1, [r7, #20]
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 f847 	bl	800377c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80036ee:	e03c      	b.n	800376a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80036f8:	d014      	beq.n	8003724 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f7ff fed5 	bl	80034aa <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4a1d      	ldr	r2, [pc, #116]	; (8003778 <I2C_ITSlaveCplt+0x210>)
 8003704:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2220      	movs	r2, #32
 800370a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f7ff fd1f 	bl	8003160 <HAL_I2C_ListenCpltCallback>
}
 8003722:	e022      	b.n	800376a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800372a:	b2db      	uxtb	r3, r3
 800372c:	2b22      	cmp	r3, #34	; 0x22
 800372e:	d10e      	bne.n	800374e <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2220      	movs	r2, #32
 8003734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f7ff fcf2 	bl	8003130 <HAL_I2C_SlaveRxCpltCallback>
}
 800374c:	e00d      	b.n	800376a <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2220      	movs	r2, #32
 8003752:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f7ff fcd9 	bl	800311c <HAL_I2C_SlaveTxCpltCallback>
}
 800376a:	bf00      	nop
 800376c:	3718      	adds	r7, #24
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	fe00e800 	.word	0xfe00e800
 8003778:	ffff0000 	.word	0xffff0000

0800377c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a26      	ldr	r2, [pc, #152]	; (8003824 <I2C_ITListenCplt+0xa8>)
 800378a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2220      	movs	r2, #32
 8003796:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	089b      	lsrs	r3, r3, #2
 80037ac:	f003 0301 	and.w	r3, r3, #1
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d022      	beq.n	80037fa <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037be:	b2d2      	uxtb	r2, r2
 80037c0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c6:	1c5a      	adds	r2, r3, #1
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d012      	beq.n	80037fa <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d8:	3b01      	subs	r3, #1
 80037da:	b29a      	uxth	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	3b01      	subs	r3, #1
 80037e8:	b29a      	uxth	r2, r3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f2:	f043 0204 	orr.w	r2, r3, #4
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80037fa:	f248 0103 	movw	r1, #32771	; 0x8003
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f94b 	bl	8003a9a <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2210      	movs	r2, #16
 800380a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f7ff fca3 	bl	8003160 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800381a:	bf00      	nop
 800381c:	3708      	adds	r7, #8
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	ffff0000 	.word	0xffff0000

08003828 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003838:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a5d      	ldr	r2, [pc, #372]	; (80039bc <I2C_ITError+0x194>)
 8003846:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	431a      	orrs	r2, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800385a:	7bfb      	ldrb	r3, [r7, #15]
 800385c:	2b28      	cmp	r3, #40	; 0x28
 800385e:	d005      	beq.n	800386c <I2C_ITError+0x44>
 8003860:	7bfb      	ldrb	r3, [r7, #15]
 8003862:	2b29      	cmp	r3, #41	; 0x29
 8003864:	d002      	beq.n	800386c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003866:	7bfb      	ldrb	r3, [r7, #15]
 8003868:	2b2a      	cmp	r3, #42	; 0x2a
 800386a:	d10b      	bne.n	8003884 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800386c:	2103      	movs	r1, #3
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 f913 	bl	8003a9a <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2228      	movs	r2, #40	; 0x28
 8003878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a50      	ldr	r2, [pc, #320]	; (80039c0 <I2C_ITError+0x198>)
 8003880:	635a      	str	r2, [r3, #52]	; 0x34
 8003882:	e011      	b.n	80038a8 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003884:	f248 0103 	movw	r1, #32771	; 0x8003
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f000 f906 	bl	8003a9a <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003894:	b2db      	uxtb	r3, r3
 8003896:	2b60      	cmp	r3, #96	; 0x60
 8003898:	d003      	beq.n	80038a2 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2220      	movs	r2, #32
 800389e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ac:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d039      	beq.n	800392a <I2C_ITError+0x102>
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	2b11      	cmp	r3, #17
 80038ba:	d002      	beq.n	80038c2 <I2C_ITError+0x9a>
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	2b21      	cmp	r3, #33	; 0x21
 80038c0:	d133      	bne.n	800392a <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038d0:	d107      	bne.n	80038e2 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80038e0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7ff f957 	bl	8002b9a <HAL_DMA_GetState>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d017      	beq.n	8003922 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f6:	4a33      	ldr	r2, [pc, #204]	; (80039c4 <I2C_ITError+0x19c>)
 80038f8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003906:	4618      	mov	r0, r3
 8003908:	f7ff f866 	bl	80029d8 <HAL_DMA_Abort_IT>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d04d      	beq.n	80039ae <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800391c:	4610      	mov	r0, r2
 800391e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003920:	e045      	b.n	80039ae <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 f850 	bl	80039c8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003928:	e041      	b.n	80039ae <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800392e:	2b00      	cmp	r3, #0
 8003930:	d039      	beq.n	80039a6 <I2C_ITError+0x17e>
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	2b12      	cmp	r3, #18
 8003936:	d002      	beq.n	800393e <I2C_ITError+0x116>
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	2b22      	cmp	r3, #34	; 0x22
 800393c:	d133      	bne.n	80039a6 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003948:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800394c:	d107      	bne.n	800395e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800395c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003962:	4618      	mov	r0, r3
 8003964:	f7ff f919 	bl	8002b9a <HAL_DMA_GetState>
 8003968:	4603      	mov	r3, r0
 800396a:	2b01      	cmp	r3, #1
 800396c:	d017      	beq.n	800399e <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003972:	4a14      	ldr	r2, [pc, #80]	; (80039c4 <I2C_ITError+0x19c>)
 8003974:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003982:	4618      	mov	r0, r3
 8003984:	f7ff f828 	bl	80029d8 <HAL_DMA_Abort_IT>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d011      	beq.n	80039b2 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003998:	4610      	mov	r0, r2
 800399a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800399c:	e009      	b.n	80039b2 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f000 f812 	bl	80039c8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80039a4:	e005      	b.n	80039b2 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 f80e 	bl	80039c8 <I2C_TreatErrorCallback>
  }
}
 80039ac:	e002      	b.n	80039b4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80039ae:	bf00      	nop
 80039b0:	e000      	b.n	80039b4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80039b2:	bf00      	nop
}
 80039b4:	bf00      	nop
 80039b6:	3710      	adds	r7, #16
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	ffff0000 	.word	0xffff0000
 80039c0:	0800319d 	.word	0x0800319d
 80039c4:	08003a5f 	.word	0x08003a5f

080039c8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	2b60      	cmp	r3, #96	; 0x60
 80039da:	d10e      	bne.n	80039fa <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2220      	movs	r2, #32
 80039e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f7ff fbc8 	bl	8003188 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80039f8:	e009      	b.n	8003a0e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f7ff fbb3 	bl	8003174 <HAL_I2C_ErrorCallback>
}
 8003a0e:	bf00      	nop
 8003a10:	3708      	adds	r7, #8
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003a16:	b480      	push	{r7}
 8003a18:	b083      	sub	sp, #12
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	699b      	ldr	r3, [r3, #24]
 8003a24:	f003 0302 	and.w	r3, r3, #2
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d103      	bne.n	8003a34 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2200      	movs	r2, #0
 8003a32:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	699b      	ldr	r3, [r3, #24]
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d007      	beq.n	8003a52 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	699a      	ldr	r2, [r3, #24]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f042 0201 	orr.w	r2, r2, #1
 8003a50:	619a      	str	r2, [r3, #24]
  }
}
 8003a52:	bf00      	nop
 8003a54:	370c      	adds	r7, #12
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr

08003a5e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b084      	sub	sp, #16
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d003      	beq.n	8003a7c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a78:	2200      	movs	r2, #0
 8003a7a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d003      	beq.n	8003a8c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a88:	2200      	movs	r2, #0
 8003a8a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 8003a8c:	68f8      	ldr	r0, [r7, #12]
 8003a8e:	f7ff ff9b 	bl	80039c8 <I2C_TreatErrorCallback>
}
 8003a92:	bf00      	nop
 8003a94:	3710      	adds	r7, #16
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	b085      	sub	sp, #20
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003aaa:	887b      	ldrh	r3, [r7, #2]
 8003aac:	f003 0301 	and.w	r3, r3, #1
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00f      	beq.n	8003ad4 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003aba:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ac8:	2b28      	cmp	r3, #40	; 0x28
 8003aca:	d003      	beq.n	8003ad4 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003ad2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003ad4:	887b      	ldrh	r3, [r7, #2]
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00f      	beq.n	8003afe <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003ae4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003af2:	2b28      	cmp	r3, #40	; 0x28
 8003af4:	d003      	beq.n	8003afe <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003afc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003afe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	da03      	bge.n	8003b0e <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003b0c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003b0e:	887b      	ldrh	r3, [r7, #2]
 8003b10:	2b10      	cmp	r3, #16
 8003b12:	d103      	bne.n	8003b1c <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003b1a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003b1c:	887b      	ldrh	r3, [r7, #2]
 8003b1e:	2b20      	cmp	r3, #32
 8003b20:	d103      	bne.n	8003b2a <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f043 0320 	orr.w	r3, r3, #32
 8003b28:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003b2a:	887b      	ldrh	r3, [r7, #2]
 8003b2c:	2b40      	cmp	r3, #64	; 0x40
 8003b2e:	d103      	bne.n	8003b38 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b36:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	6819      	ldr	r1, [r3, #0]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	43da      	mvns	r2, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	400a      	ands	r2, r1
 8003b48:	601a      	str	r2, [r3, #0]
}
 8003b4a:	bf00      	nop
 8003b4c:	3714      	adds	r7, #20
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr

08003b56 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b56:	b480      	push	{r7}
 8003b58:	b083      	sub	sp, #12
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
 8003b5e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	2b20      	cmp	r3, #32
 8003b6a:	d138      	bne.n	8003bde <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d101      	bne.n	8003b7a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003b76:	2302      	movs	r3, #2
 8003b78:	e032      	b.n	8003be0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2224      	movs	r2, #36	; 0x24
 8003b86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f022 0201 	bic.w	r2, r2, #1
 8003b98:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003ba8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	6819      	ldr	r1, [r3, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	683a      	ldr	r2, [r7, #0]
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f042 0201 	orr.w	r2, r2, #1
 8003bc8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2220      	movs	r2, #32
 8003bce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	e000      	b.n	8003be0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003bde:	2302      	movs	r3, #2
  }
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b20      	cmp	r3, #32
 8003c00:	d139      	bne.n	8003c76 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d101      	bne.n	8003c10 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	e033      	b.n	8003c78 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2224      	movs	r2, #36	; 0x24
 8003c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f022 0201 	bic.w	r2, r2, #1
 8003c2e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003c3e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	021b      	lsls	r3, r3, #8
 8003c44:	68fa      	ldr	r2, [r7, #12]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f042 0201 	orr.w	r2, r2, #1
 8003c60:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2220      	movs	r2, #32
 8003c66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c72:	2300      	movs	r3, #0
 8003c74:	e000      	b.n	8003c78 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003c76:	2302      	movs	r3, #2
  }
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3714      	adds	r7, #20
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	1d3b      	adds	r3, r7, #4
 8003c8e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c90:	1d3b      	adds	r3, r7, #4
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d102      	bne.n	8003c9e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	f000 bef4 	b.w	8004a86 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c9e:	1d3b      	adds	r3, r7, #4
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0301 	and.w	r3, r3, #1
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	f000 816a 	beq.w	8003f82 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003cae:	4bb3      	ldr	r3, [pc, #716]	; (8003f7c <HAL_RCC_OscConfig+0x2f8>)
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f003 030c 	and.w	r3, r3, #12
 8003cb6:	2b04      	cmp	r3, #4
 8003cb8:	d00c      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003cba:	4bb0      	ldr	r3, [pc, #704]	; (8003f7c <HAL_RCC_OscConfig+0x2f8>)
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f003 030c 	and.w	r3, r3, #12
 8003cc2:	2b08      	cmp	r3, #8
 8003cc4:	d159      	bne.n	8003d7a <HAL_RCC_OscConfig+0xf6>
 8003cc6:	4bad      	ldr	r3, [pc, #692]	; (8003f7c <HAL_RCC_OscConfig+0x2f8>)
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cd2:	d152      	bne.n	8003d7a <HAL_RCC_OscConfig+0xf6>
 8003cd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003cd8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cdc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003ce0:	fa93 f3a3 	rbit	r3, r3
 8003ce4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003ce8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cec:	fab3 f383 	clz	r3, r3
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	095b      	lsrs	r3, r3, #5
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	f043 0301 	orr.w	r3, r3, #1
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d102      	bne.n	8003d06 <HAL_RCC_OscConfig+0x82>
 8003d00:	4b9e      	ldr	r3, [pc, #632]	; (8003f7c <HAL_RCC_OscConfig+0x2f8>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	e015      	b.n	8003d32 <HAL_RCC_OscConfig+0xae>
 8003d06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d0a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d0e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003d12:	fa93 f3a3 	rbit	r3, r3
 8003d16:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003d1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d1e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003d22:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003d26:	fa93 f3a3 	rbit	r3, r3
 8003d2a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003d2e:	4b93      	ldr	r3, [pc, #588]	; (8003f7c <HAL_RCC_OscConfig+0x2f8>)
 8003d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003d36:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003d3a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003d3e:	fa92 f2a2 	rbit	r2, r2
 8003d42:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003d46:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003d4a:	fab2 f282 	clz	r2, r2
 8003d4e:	b2d2      	uxtb	r2, r2
 8003d50:	f042 0220 	orr.w	r2, r2, #32
 8003d54:	b2d2      	uxtb	r2, r2
 8003d56:	f002 021f 	and.w	r2, r2, #31
 8003d5a:	2101      	movs	r1, #1
 8003d5c:	fa01 f202 	lsl.w	r2, r1, r2
 8003d60:	4013      	ands	r3, r2
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	f000 810c 	beq.w	8003f80 <HAL_RCC_OscConfig+0x2fc>
 8003d68:	1d3b      	adds	r3, r7, #4
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	f040 8106 	bne.w	8003f80 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	f000 be86 	b.w	8004a86 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d7a:	1d3b      	adds	r3, r7, #4
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d84:	d106      	bne.n	8003d94 <HAL_RCC_OscConfig+0x110>
 8003d86:	4b7d      	ldr	r3, [pc, #500]	; (8003f7c <HAL_RCC_OscConfig+0x2f8>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a7c      	ldr	r2, [pc, #496]	; (8003f7c <HAL_RCC_OscConfig+0x2f8>)
 8003d8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d90:	6013      	str	r3, [r2, #0]
 8003d92:	e030      	b.n	8003df6 <HAL_RCC_OscConfig+0x172>
 8003d94:	1d3b      	adds	r3, r7, #4
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d10c      	bne.n	8003db8 <HAL_RCC_OscConfig+0x134>
 8003d9e:	4b77      	ldr	r3, [pc, #476]	; (8003f7c <HAL_RCC_OscConfig+0x2f8>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a76      	ldr	r2, [pc, #472]	; (8003f7c <HAL_RCC_OscConfig+0x2f8>)
 8003da4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003da8:	6013      	str	r3, [r2, #0]
 8003daa:	4b74      	ldr	r3, [pc, #464]	; (8003f7c <HAL_RCC_OscConfig+0x2f8>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a73      	ldr	r2, [pc, #460]	; (8003f7c <HAL_RCC_OscConfig+0x2f8>)
 8003db0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003db4:	6013      	str	r3, [r2, #0]
 8003db6:	e01e      	b.n	8003df6 <HAL_RCC_OscConfig+0x172>
 8003db8:	1d3b      	adds	r3, r7, #4
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003dc2:	d10c      	bne.n	8003dde <HAL_RCC_OscConfig+0x15a>
 8003dc4:	4b6d      	ldr	r3, [pc, #436]	; (8003f7c <HAL_RCC_OscConfig+0x2f8>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a6c      	ldr	r2, [pc, #432]	; (8003f7c <HAL_RCC_OscConfig+0x2f8>)
 8003dca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dce:	6013      	str	r3, [r2, #0]
 8003dd0:	4b6a      	ldr	r3, [pc, #424]	; (8003f7c <HAL_RCC_OscConfig+0x2f8>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a69      	ldr	r2, [pc, #420]	; (8003f7c <HAL_RCC_OscConfig+0x2f8>)
 8003dd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dda:	6013      	str	r3, [r2, #0]
 8003ddc:	e00b      	b.n	8003df6 <HAL_RCC_OscConfig+0x172>
 8003dde:	4b67      	ldr	r3, [pc, #412]	; (8003f7c <HAL_RCC_OscConfig+0x2f8>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a66      	ldr	r2, [pc, #408]	; (8003f7c <HAL_RCC_OscConfig+0x2f8>)
 8003de4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003de8:	6013      	str	r3, [r2, #0]
 8003dea:	4b64      	ldr	r3, [pc, #400]	; (8003f7c <HAL_RCC_OscConfig+0x2f8>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a63      	ldr	r2, [pc, #396]	; (8003f7c <HAL_RCC_OscConfig+0x2f8>)
 8003df0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003df4:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003df6:	4b61      	ldr	r3, [pc, #388]	; (8003f7c <HAL_RCC_OscConfig+0x2f8>)
 8003df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfa:	f023 020f 	bic.w	r2, r3, #15
 8003dfe:	1d3b      	adds	r3, r7, #4
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	495d      	ldr	r1, [pc, #372]	; (8003f7c <HAL_RCC_OscConfig+0x2f8>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e0a:	1d3b      	adds	r3, r7, #4
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d059      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e14:	f7fd faf8 	bl	8001408 <HAL_GetTick>
 8003e18:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e1c:	e00a      	b.n	8003e34 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e1e:	f7fd faf3 	bl	8001408 <HAL_GetTick>
 8003e22:	4602      	mov	r2, r0
 8003e24:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	2b64      	cmp	r3, #100	; 0x64
 8003e2c:	d902      	bls.n	8003e34 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	f000 be29 	b.w	8004a86 <HAL_RCC_OscConfig+0xe02>
 8003e34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e38:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e3c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003e40:	fa93 f3a3 	rbit	r3, r3
 8003e44:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003e48:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e4c:	fab3 f383 	clz	r3, r3
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	095b      	lsrs	r3, r3, #5
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	f043 0301 	orr.w	r3, r3, #1
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d102      	bne.n	8003e66 <HAL_RCC_OscConfig+0x1e2>
 8003e60:	4b46      	ldr	r3, [pc, #280]	; (8003f7c <HAL_RCC_OscConfig+0x2f8>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	e015      	b.n	8003e92 <HAL_RCC_OscConfig+0x20e>
 8003e66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e6a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e6e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003e72:	fa93 f3a3 	rbit	r3, r3
 8003e76:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003e7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e7e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003e82:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003e86:	fa93 f3a3 	rbit	r3, r3
 8003e8a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003e8e:	4b3b      	ldr	r3, [pc, #236]	; (8003f7c <HAL_RCC_OscConfig+0x2f8>)
 8003e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e92:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003e96:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003e9a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003e9e:	fa92 f2a2 	rbit	r2, r2
 8003ea2:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003ea6:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003eaa:	fab2 f282 	clz	r2, r2
 8003eae:	b2d2      	uxtb	r2, r2
 8003eb0:	f042 0220 	orr.w	r2, r2, #32
 8003eb4:	b2d2      	uxtb	r2, r2
 8003eb6:	f002 021f 	and.w	r2, r2, #31
 8003eba:	2101      	movs	r1, #1
 8003ebc:	fa01 f202 	lsl.w	r2, r1, r2
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d0ab      	beq.n	8003e1e <HAL_RCC_OscConfig+0x19a>
 8003ec6:	e05c      	b.n	8003f82 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec8:	f7fd fa9e 	bl	8001408 <HAL_GetTick>
 8003ecc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ed0:	e00a      	b.n	8003ee8 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ed2:	f7fd fa99 	bl	8001408 <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	2b64      	cmp	r3, #100	; 0x64
 8003ee0:	d902      	bls.n	8003ee8 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	f000 bdcf 	b.w	8004a86 <HAL_RCC_OscConfig+0xe02>
 8003ee8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003eec:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003ef4:	fa93 f3a3 	rbit	r3, r3
 8003ef8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003efc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f00:	fab3 f383 	clz	r3, r3
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	095b      	lsrs	r3, r3, #5
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	f043 0301 	orr.w	r3, r3, #1
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d102      	bne.n	8003f1a <HAL_RCC_OscConfig+0x296>
 8003f14:	4b19      	ldr	r3, [pc, #100]	; (8003f7c <HAL_RCC_OscConfig+0x2f8>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	e015      	b.n	8003f46 <HAL_RCC_OscConfig+0x2c2>
 8003f1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f1e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f22:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003f26:	fa93 f3a3 	rbit	r3, r3
 8003f2a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003f2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f32:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003f36:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003f3a:	fa93 f3a3 	rbit	r3, r3
 8003f3e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003f42:	4b0e      	ldr	r3, [pc, #56]	; (8003f7c <HAL_RCC_OscConfig+0x2f8>)
 8003f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f46:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003f4a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003f4e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003f52:	fa92 f2a2 	rbit	r2, r2
 8003f56:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003f5a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003f5e:	fab2 f282 	clz	r2, r2
 8003f62:	b2d2      	uxtb	r2, r2
 8003f64:	f042 0220 	orr.w	r2, r2, #32
 8003f68:	b2d2      	uxtb	r2, r2
 8003f6a:	f002 021f 	and.w	r2, r2, #31
 8003f6e:	2101      	movs	r1, #1
 8003f70:	fa01 f202 	lsl.w	r2, r1, r2
 8003f74:	4013      	ands	r3, r2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d1ab      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x24e>
 8003f7a:	e002      	b.n	8003f82 <HAL_RCC_OscConfig+0x2fe>
 8003f7c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f82:	1d3b      	adds	r3, r7, #4
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0302 	and.w	r3, r3, #2
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	f000 816f 	beq.w	8004270 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003f92:	4bd0      	ldr	r3, [pc, #832]	; (80042d4 <HAL_RCC_OscConfig+0x650>)
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f003 030c 	and.w	r3, r3, #12
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00b      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003f9e:	4bcd      	ldr	r3, [pc, #820]	; (80042d4 <HAL_RCC_OscConfig+0x650>)
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f003 030c 	and.w	r3, r3, #12
 8003fa6:	2b08      	cmp	r3, #8
 8003fa8:	d16c      	bne.n	8004084 <HAL_RCC_OscConfig+0x400>
 8003faa:	4bca      	ldr	r3, [pc, #808]	; (80042d4 <HAL_RCC_OscConfig+0x650>)
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d166      	bne.n	8004084 <HAL_RCC_OscConfig+0x400>
 8003fb6:	2302      	movs	r3, #2
 8003fb8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fbc:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003fc0:	fa93 f3a3 	rbit	r3, r3
 8003fc4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003fc8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fcc:	fab3 f383 	clz	r3, r3
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	095b      	lsrs	r3, r3, #5
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	f043 0301 	orr.w	r3, r3, #1
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d102      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x362>
 8003fe0:	4bbc      	ldr	r3, [pc, #752]	; (80042d4 <HAL_RCC_OscConfig+0x650>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	e013      	b.n	800400e <HAL_RCC_OscConfig+0x38a>
 8003fe6:	2302      	movs	r3, #2
 8003fe8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fec:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003ff0:	fa93 f3a3 	rbit	r3, r3
 8003ff4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003ff8:	2302      	movs	r3, #2
 8003ffa:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003ffe:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004002:	fa93 f3a3 	rbit	r3, r3
 8004006:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800400a:	4bb2      	ldr	r3, [pc, #712]	; (80042d4 <HAL_RCC_OscConfig+0x650>)
 800400c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400e:	2202      	movs	r2, #2
 8004010:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004014:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004018:	fa92 f2a2 	rbit	r2, r2
 800401c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004020:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004024:	fab2 f282 	clz	r2, r2
 8004028:	b2d2      	uxtb	r2, r2
 800402a:	f042 0220 	orr.w	r2, r2, #32
 800402e:	b2d2      	uxtb	r2, r2
 8004030:	f002 021f 	and.w	r2, r2, #31
 8004034:	2101      	movs	r1, #1
 8004036:	fa01 f202 	lsl.w	r2, r1, r2
 800403a:	4013      	ands	r3, r2
 800403c:	2b00      	cmp	r3, #0
 800403e:	d007      	beq.n	8004050 <HAL_RCC_OscConfig+0x3cc>
 8004040:	1d3b      	adds	r3, r7, #4
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d002      	beq.n	8004050 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	f000 bd1b 	b.w	8004a86 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004050:	4ba0      	ldr	r3, [pc, #640]	; (80042d4 <HAL_RCC_OscConfig+0x650>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004058:	1d3b      	adds	r3, r7, #4
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	21f8      	movs	r1, #248	; 0xf8
 8004060:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004064:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004068:	fa91 f1a1 	rbit	r1, r1
 800406c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004070:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004074:	fab1 f181 	clz	r1, r1
 8004078:	b2c9      	uxtb	r1, r1
 800407a:	408b      	lsls	r3, r1
 800407c:	4995      	ldr	r1, [pc, #596]	; (80042d4 <HAL_RCC_OscConfig+0x650>)
 800407e:	4313      	orrs	r3, r2
 8004080:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004082:	e0f5      	b.n	8004270 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004084:	1d3b      	adds	r3, r7, #4
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	2b00      	cmp	r3, #0
 800408c:	f000 8085 	beq.w	800419a <HAL_RCC_OscConfig+0x516>
 8004090:	2301      	movs	r3, #1
 8004092:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004096:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800409a:	fa93 f3a3 	rbit	r3, r3
 800409e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80040a2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040a6:	fab3 f383 	clz	r3, r3
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80040b0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	461a      	mov	r2, r3
 80040b8:	2301      	movs	r3, #1
 80040ba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040bc:	f7fd f9a4 	bl	8001408 <HAL_GetTick>
 80040c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040c4:	e00a      	b.n	80040dc <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040c6:	f7fd f99f 	bl	8001408 <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d902      	bls.n	80040dc <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	f000 bcd5 	b.w	8004a86 <HAL_RCC_OscConfig+0xe02>
 80040dc:	2302      	movs	r3, #2
 80040de:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040e2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80040e6:	fa93 f3a3 	rbit	r3, r3
 80040ea:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80040ee:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040f2:	fab3 f383 	clz	r3, r3
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	095b      	lsrs	r3, r3, #5
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	f043 0301 	orr.w	r3, r3, #1
 8004100:	b2db      	uxtb	r3, r3
 8004102:	2b01      	cmp	r3, #1
 8004104:	d102      	bne.n	800410c <HAL_RCC_OscConfig+0x488>
 8004106:	4b73      	ldr	r3, [pc, #460]	; (80042d4 <HAL_RCC_OscConfig+0x650>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	e013      	b.n	8004134 <HAL_RCC_OscConfig+0x4b0>
 800410c:	2302      	movs	r3, #2
 800410e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004112:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004116:	fa93 f3a3 	rbit	r3, r3
 800411a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800411e:	2302      	movs	r3, #2
 8004120:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004124:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004128:	fa93 f3a3 	rbit	r3, r3
 800412c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004130:	4b68      	ldr	r3, [pc, #416]	; (80042d4 <HAL_RCC_OscConfig+0x650>)
 8004132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004134:	2202      	movs	r2, #2
 8004136:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800413a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800413e:	fa92 f2a2 	rbit	r2, r2
 8004142:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004146:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800414a:	fab2 f282 	clz	r2, r2
 800414e:	b2d2      	uxtb	r2, r2
 8004150:	f042 0220 	orr.w	r2, r2, #32
 8004154:	b2d2      	uxtb	r2, r2
 8004156:	f002 021f 	and.w	r2, r2, #31
 800415a:	2101      	movs	r1, #1
 800415c:	fa01 f202 	lsl.w	r2, r1, r2
 8004160:	4013      	ands	r3, r2
 8004162:	2b00      	cmp	r3, #0
 8004164:	d0af      	beq.n	80040c6 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004166:	4b5b      	ldr	r3, [pc, #364]	; (80042d4 <HAL_RCC_OscConfig+0x650>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800416e:	1d3b      	adds	r3, r7, #4
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	695b      	ldr	r3, [r3, #20]
 8004174:	21f8      	movs	r1, #248	; 0xf8
 8004176:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800417a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800417e:	fa91 f1a1 	rbit	r1, r1
 8004182:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004186:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800418a:	fab1 f181 	clz	r1, r1
 800418e:	b2c9      	uxtb	r1, r1
 8004190:	408b      	lsls	r3, r1
 8004192:	4950      	ldr	r1, [pc, #320]	; (80042d4 <HAL_RCC_OscConfig+0x650>)
 8004194:	4313      	orrs	r3, r2
 8004196:	600b      	str	r3, [r1, #0]
 8004198:	e06a      	b.n	8004270 <HAL_RCC_OscConfig+0x5ec>
 800419a:	2301      	movs	r3, #1
 800419c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80041a4:	fa93 f3a3 	rbit	r3, r3
 80041a8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80041ac:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041b0:	fab3 f383 	clz	r3, r3
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80041ba:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	461a      	mov	r2, r3
 80041c2:	2300      	movs	r3, #0
 80041c4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041c6:	f7fd f91f 	bl	8001408 <HAL_GetTick>
 80041ca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041ce:	e00a      	b.n	80041e6 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041d0:	f7fd f91a 	bl	8001408 <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d902      	bls.n	80041e6 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	f000 bc50 	b.w	8004a86 <HAL_RCC_OscConfig+0xe02>
 80041e6:	2302      	movs	r3, #2
 80041e8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ec:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80041f0:	fa93 f3a3 	rbit	r3, r3
 80041f4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80041f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041fc:	fab3 f383 	clz	r3, r3
 8004200:	b2db      	uxtb	r3, r3
 8004202:	095b      	lsrs	r3, r3, #5
 8004204:	b2db      	uxtb	r3, r3
 8004206:	f043 0301 	orr.w	r3, r3, #1
 800420a:	b2db      	uxtb	r3, r3
 800420c:	2b01      	cmp	r3, #1
 800420e:	d102      	bne.n	8004216 <HAL_RCC_OscConfig+0x592>
 8004210:	4b30      	ldr	r3, [pc, #192]	; (80042d4 <HAL_RCC_OscConfig+0x650>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	e013      	b.n	800423e <HAL_RCC_OscConfig+0x5ba>
 8004216:	2302      	movs	r3, #2
 8004218:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800421c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004220:	fa93 f3a3 	rbit	r3, r3
 8004224:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004228:	2302      	movs	r3, #2
 800422a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800422e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004232:	fa93 f3a3 	rbit	r3, r3
 8004236:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800423a:	4b26      	ldr	r3, [pc, #152]	; (80042d4 <HAL_RCC_OscConfig+0x650>)
 800423c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423e:	2202      	movs	r2, #2
 8004240:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004244:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004248:	fa92 f2a2 	rbit	r2, r2
 800424c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004250:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004254:	fab2 f282 	clz	r2, r2
 8004258:	b2d2      	uxtb	r2, r2
 800425a:	f042 0220 	orr.w	r2, r2, #32
 800425e:	b2d2      	uxtb	r2, r2
 8004260:	f002 021f 	and.w	r2, r2, #31
 8004264:	2101      	movs	r1, #1
 8004266:	fa01 f202 	lsl.w	r2, r1, r2
 800426a:	4013      	ands	r3, r2
 800426c:	2b00      	cmp	r3, #0
 800426e:	d1af      	bne.n	80041d0 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004270:	1d3b      	adds	r3, r7, #4
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0308 	and.w	r3, r3, #8
 800427a:	2b00      	cmp	r3, #0
 800427c:	f000 80da 	beq.w	8004434 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004280:	1d3b      	adds	r3, r7, #4
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d069      	beq.n	800435e <HAL_RCC_OscConfig+0x6da>
 800428a:	2301      	movs	r3, #1
 800428c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004290:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004294:	fa93 f3a3 	rbit	r3, r3
 8004298:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800429c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042a0:	fab3 f383 	clz	r3, r3
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	461a      	mov	r2, r3
 80042a8:	4b0b      	ldr	r3, [pc, #44]	; (80042d8 <HAL_RCC_OscConfig+0x654>)
 80042aa:	4413      	add	r3, r2
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	461a      	mov	r2, r3
 80042b0:	2301      	movs	r3, #1
 80042b2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042b4:	f7fd f8a8 	bl	8001408 <HAL_GetTick>
 80042b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042bc:	e00e      	b.n	80042dc <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042be:	f7fd f8a3 	bl	8001408 <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d906      	bls.n	80042dc <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e3d9      	b.n	8004a86 <HAL_RCC_OscConfig+0xe02>
 80042d2:	bf00      	nop
 80042d4:	40021000 	.word	0x40021000
 80042d8:	10908120 	.word	0x10908120
 80042dc:	2302      	movs	r3, #2
 80042de:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042e2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80042e6:	fa93 f3a3 	rbit	r3, r3
 80042ea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80042ee:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80042f2:	2202      	movs	r2, #2
 80042f4:	601a      	str	r2, [r3, #0]
 80042f6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	fa93 f2a3 	rbit	r2, r3
 8004300:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004304:	601a      	str	r2, [r3, #0]
 8004306:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800430a:	2202      	movs	r2, #2
 800430c:	601a      	str	r2, [r3, #0]
 800430e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	fa93 f2a3 	rbit	r2, r3
 8004318:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800431c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800431e:	4ba5      	ldr	r3, [pc, #660]	; (80045b4 <HAL_RCC_OscConfig+0x930>)
 8004320:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004322:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004326:	2102      	movs	r1, #2
 8004328:	6019      	str	r1, [r3, #0]
 800432a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	fa93 f1a3 	rbit	r1, r3
 8004334:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004338:	6019      	str	r1, [r3, #0]
  return result;
 800433a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	fab3 f383 	clz	r3, r3
 8004344:	b2db      	uxtb	r3, r3
 8004346:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800434a:	b2db      	uxtb	r3, r3
 800434c:	f003 031f 	and.w	r3, r3, #31
 8004350:	2101      	movs	r1, #1
 8004352:	fa01 f303 	lsl.w	r3, r1, r3
 8004356:	4013      	ands	r3, r2
 8004358:	2b00      	cmp	r3, #0
 800435a:	d0b0      	beq.n	80042be <HAL_RCC_OscConfig+0x63a>
 800435c:	e06a      	b.n	8004434 <HAL_RCC_OscConfig+0x7b0>
 800435e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004362:	2201      	movs	r2, #1
 8004364:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004366:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	fa93 f2a3 	rbit	r2, r3
 8004370:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004374:	601a      	str	r2, [r3, #0]
  return result;
 8004376:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800437a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800437c:	fab3 f383 	clz	r3, r3
 8004380:	b2db      	uxtb	r3, r3
 8004382:	461a      	mov	r2, r3
 8004384:	4b8c      	ldr	r3, [pc, #560]	; (80045b8 <HAL_RCC_OscConfig+0x934>)
 8004386:	4413      	add	r3, r2
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	461a      	mov	r2, r3
 800438c:	2300      	movs	r3, #0
 800438e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004390:	f7fd f83a 	bl	8001408 <HAL_GetTick>
 8004394:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004398:	e009      	b.n	80043ae <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800439a:	f7fd f835 	bl	8001408 <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d901      	bls.n	80043ae <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e36b      	b.n	8004a86 <HAL_RCC_OscConfig+0xe02>
 80043ae:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80043b2:	2202      	movs	r2, #2
 80043b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043b6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	fa93 f2a3 	rbit	r2, r3
 80043c0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80043c4:	601a      	str	r2, [r3, #0]
 80043c6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80043ca:	2202      	movs	r2, #2
 80043cc:	601a      	str	r2, [r3, #0]
 80043ce:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	fa93 f2a3 	rbit	r2, r3
 80043d8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80043dc:	601a      	str	r2, [r3, #0]
 80043de:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80043e2:	2202      	movs	r2, #2
 80043e4:	601a      	str	r2, [r3, #0]
 80043e6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	fa93 f2a3 	rbit	r2, r3
 80043f0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80043f4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043f6:	4b6f      	ldr	r3, [pc, #444]	; (80045b4 <HAL_RCC_OscConfig+0x930>)
 80043f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043fa:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80043fe:	2102      	movs	r1, #2
 8004400:	6019      	str	r1, [r3, #0]
 8004402:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	fa93 f1a3 	rbit	r1, r3
 800440c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004410:	6019      	str	r1, [r3, #0]
  return result;
 8004412:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	fab3 f383 	clz	r3, r3
 800441c:	b2db      	uxtb	r3, r3
 800441e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004422:	b2db      	uxtb	r3, r3
 8004424:	f003 031f 	and.w	r3, r3, #31
 8004428:	2101      	movs	r1, #1
 800442a:	fa01 f303 	lsl.w	r3, r1, r3
 800442e:	4013      	ands	r3, r2
 8004430:	2b00      	cmp	r3, #0
 8004432:	d1b2      	bne.n	800439a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004434:	1d3b      	adds	r3, r7, #4
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0304 	and.w	r3, r3, #4
 800443e:	2b00      	cmp	r3, #0
 8004440:	f000 8158 	beq.w	80046f4 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004444:	2300      	movs	r3, #0
 8004446:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800444a:	4b5a      	ldr	r3, [pc, #360]	; (80045b4 <HAL_RCC_OscConfig+0x930>)
 800444c:	69db      	ldr	r3, [r3, #28]
 800444e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d112      	bne.n	800447c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004456:	4b57      	ldr	r3, [pc, #348]	; (80045b4 <HAL_RCC_OscConfig+0x930>)
 8004458:	69db      	ldr	r3, [r3, #28]
 800445a:	4a56      	ldr	r2, [pc, #344]	; (80045b4 <HAL_RCC_OscConfig+0x930>)
 800445c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004460:	61d3      	str	r3, [r2, #28]
 8004462:	4b54      	ldr	r3, [pc, #336]	; (80045b4 <HAL_RCC_OscConfig+0x930>)
 8004464:	69db      	ldr	r3, [r3, #28]
 8004466:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800446a:	f107 0308 	add.w	r3, r7, #8
 800446e:	601a      	str	r2, [r3, #0]
 8004470:	f107 0308 	add.w	r3, r7, #8
 8004474:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004476:	2301      	movs	r3, #1
 8004478:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800447c:	4b4f      	ldr	r3, [pc, #316]	; (80045bc <HAL_RCC_OscConfig+0x938>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004484:	2b00      	cmp	r3, #0
 8004486:	d11a      	bne.n	80044be <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004488:	4b4c      	ldr	r3, [pc, #304]	; (80045bc <HAL_RCC_OscConfig+0x938>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a4b      	ldr	r2, [pc, #300]	; (80045bc <HAL_RCC_OscConfig+0x938>)
 800448e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004492:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004494:	f7fc ffb8 	bl	8001408 <HAL_GetTick>
 8004498:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800449c:	e009      	b.n	80044b2 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800449e:	f7fc ffb3 	bl	8001408 <HAL_GetTick>
 80044a2:	4602      	mov	r2, r0
 80044a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	2b64      	cmp	r3, #100	; 0x64
 80044ac:	d901      	bls.n	80044b2 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e2e9      	b.n	8004a86 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044b2:	4b42      	ldr	r3, [pc, #264]	; (80045bc <HAL_RCC_OscConfig+0x938>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d0ef      	beq.n	800449e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044be:	1d3b      	adds	r3, r7, #4
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d106      	bne.n	80044d6 <HAL_RCC_OscConfig+0x852>
 80044c8:	4b3a      	ldr	r3, [pc, #232]	; (80045b4 <HAL_RCC_OscConfig+0x930>)
 80044ca:	6a1b      	ldr	r3, [r3, #32]
 80044cc:	4a39      	ldr	r2, [pc, #228]	; (80045b4 <HAL_RCC_OscConfig+0x930>)
 80044ce:	f043 0301 	orr.w	r3, r3, #1
 80044d2:	6213      	str	r3, [r2, #32]
 80044d4:	e02f      	b.n	8004536 <HAL_RCC_OscConfig+0x8b2>
 80044d6:	1d3b      	adds	r3, r7, #4
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d10c      	bne.n	80044fa <HAL_RCC_OscConfig+0x876>
 80044e0:	4b34      	ldr	r3, [pc, #208]	; (80045b4 <HAL_RCC_OscConfig+0x930>)
 80044e2:	6a1b      	ldr	r3, [r3, #32]
 80044e4:	4a33      	ldr	r2, [pc, #204]	; (80045b4 <HAL_RCC_OscConfig+0x930>)
 80044e6:	f023 0301 	bic.w	r3, r3, #1
 80044ea:	6213      	str	r3, [r2, #32]
 80044ec:	4b31      	ldr	r3, [pc, #196]	; (80045b4 <HAL_RCC_OscConfig+0x930>)
 80044ee:	6a1b      	ldr	r3, [r3, #32]
 80044f0:	4a30      	ldr	r2, [pc, #192]	; (80045b4 <HAL_RCC_OscConfig+0x930>)
 80044f2:	f023 0304 	bic.w	r3, r3, #4
 80044f6:	6213      	str	r3, [r2, #32]
 80044f8:	e01d      	b.n	8004536 <HAL_RCC_OscConfig+0x8b2>
 80044fa:	1d3b      	adds	r3, r7, #4
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	2b05      	cmp	r3, #5
 8004502:	d10c      	bne.n	800451e <HAL_RCC_OscConfig+0x89a>
 8004504:	4b2b      	ldr	r3, [pc, #172]	; (80045b4 <HAL_RCC_OscConfig+0x930>)
 8004506:	6a1b      	ldr	r3, [r3, #32]
 8004508:	4a2a      	ldr	r2, [pc, #168]	; (80045b4 <HAL_RCC_OscConfig+0x930>)
 800450a:	f043 0304 	orr.w	r3, r3, #4
 800450e:	6213      	str	r3, [r2, #32]
 8004510:	4b28      	ldr	r3, [pc, #160]	; (80045b4 <HAL_RCC_OscConfig+0x930>)
 8004512:	6a1b      	ldr	r3, [r3, #32]
 8004514:	4a27      	ldr	r2, [pc, #156]	; (80045b4 <HAL_RCC_OscConfig+0x930>)
 8004516:	f043 0301 	orr.w	r3, r3, #1
 800451a:	6213      	str	r3, [r2, #32]
 800451c:	e00b      	b.n	8004536 <HAL_RCC_OscConfig+0x8b2>
 800451e:	4b25      	ldr	r3, [pc, #148]	; (80045b4 <HAL_RCC_OscConfig+0x930>)
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	4a24      	ldr	r2, [pc, #144]	; (80045b4 <HAL_RCC_OscConfig+0x930>)
 8004524:	f023 0301 	bic.w	r3, r3, #1
 8004528:	6213      	str	r3, [r2, #32]
 800452a:	4b22      	ldr	r3, [pc, #136]	; (80045b4 <HAL_RCC_OscConfig+0x930>)
 800452c:	6a1b      	ldr	r3, [r3, #32]
 800452e:	4a21      	ldr	r2, [pc, #132]	; (80045b4 <HAL_RCC_OscConfig+0x930>)
 8004530:	f023 0304 	bic.w	r3, r3, #4
 8004534:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004536:	1d3b      	adds	r3, r7, #4
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d06b      	beq.n	8004618 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004540:	f7fc ff62 	bl	8001408 <HAL_GetTick>
 8004544:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004548:	e00b      	b.n	8004562 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800454a:	f7fc ff5d 	bl	8001408 <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	f241 3288 	movw	r2, #5000	; 0x1388
 800455a:	4293      	cmp	r3, r2
 800455c:	d901      	bls.n	8004562 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e291      	b.n	8004a86 <HAL_RCC_OscConfig+0xe02>
 8004562:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004566:	2202      	movs	r2, #2
 8004568:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800456a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	fa93 f2a3 	rbit	r2, r3
 8004574:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004578:	601a      	str	r2, [r3, #0]
 800457a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800457e:	2202      	movs	r2, #2
 8004580:	601a      	str	r2, [r3, #0]
 8004582:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	fa93 f2a3 	rbit	r2, r3
 800458c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004590:	601a      	str	r2, [r3, #0]
  return result;
 8004592:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004596:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004598:	fab3 f383 	clz	r3, r3
 800459c:	b2db      	uxtb	r3, r3
 800459e:	095b      	lsrs	r3, r3, #5
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	f043 0302 	orr.w	r3, r3, #2
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d109      	bne.n	80045c0 <HAL_RCC_OscConfig+0x93c>
 80045ac:	4b01      	ldr	r3, [pc, #4]	; (80045b4 <HAL_RCC_OscConfig+0x930>)
 80045ae:	6a1b      	ldr	r3, [r3, #32]
 80045b0:	e014      	b.n	80045dc <HAL_RCC_OscConfig+0x958>
 80045b2:	bf00      	nop
 80045b4:	40021000 	.word	0x40021000
 80045b8:	10908120 	.word	0x10908120
 80045bc:	40007000 	.word	0x40007000
 80045c0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80045c4:	2202      	movs	r2, #2
 80045c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	fa93 f2a3 	rbit	r2, r3
 80045d2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80045d6:	601a      	str	r2, [r3, #0]
 80045d8:	4bbb      	ldr	r3, [pc, #748]	; (80048c8 <HAL_RCC_OscConfig+0xc44>)
 80045da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045dc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80045e0:	2102      	movs	r1, #2
 80045e2:	6011      	str	r1, [r2, #0]
 80045e4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80045e8:	6812      	ldr	r2, [r2, #0]
 80045ea:	fa92 f1a2 	rbit	r1, r2
 80045ee:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80045f2:	6011      	str	r1, [r2, #0]
  return result;
 80045f4:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80045f8:	6812      	ldr	r2, [r2, #0]
 80045fa:	fab2 f282 	clz	r2, r2
 80045fe:	b2d2      	uxtb	r2, r2
 8004600:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004604:	b2d2      	uxtb	r2, r2
 8004606:	f002 021f 	and.w	r2, r2, #31
 800460a:	2101      	movs	r1, #1
 800460c:	fa01 f202 	lsl.w	r2, r1, r2
 8004610:	4013      	ands	r3, r2
 8004612:	2b00      	cmp	r3, #0
 8004614:	d099      	beq.n	800454a <HAL_RCC_OscConfig+0x8c6>
 8004616:	e063      	b.n	80046e0 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004618:	f7fc fef6 	bl	8001408 <HAL_GetTick>
 800461c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004620:	e00b      	b.n	800463a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004622:	f7fc fef1 	bl	8001408 <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004632:	4293      	cmp	r3, r2
 8004634:	d901      	bls.n	800463a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e225      	b.n	8004a86 <HAL_RCC_OscConfig+0xe02>
 800463a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800463e:	2202      	movs	r2, #2
 8004640:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004642:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	fa93 f2a3 	rbit	r2, r3
 800464c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004650:	601a      	str	r2, [r3, #0]
 8004652:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004656:	2202      	movs	r2, #2
 8004658:	601a      	str	r2, [r3, #0]
 800465a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	fa93 f2a3 	rbit	r2, r3
 8004664:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004668:	601a      	str	r2, [r3, #0]
  return result;
 800466a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800466e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004670:	fab3 f383 	clz	r3, r3
 8004674:	b2db      	uxtb	r3, r3
 8004676:	095b      	lsrs	r3, r3, #5
 8004678:	b2db      	uxtb	r3, r3
 800467a:	f043 0302 	orr.w	r3, r3, #2
 800467e:	b2db      	uxtb	r3, r3
 8004680:	2b02      	cmp	r3, #2
 8004682:	d102      	bne.n	800468a <HAL_RCC_OscConfig+0xa06>
 8004684:	4b90      	ldr	r3, [pc, #576]	; (80048c8 <HAL_RCC_OscConfig+0xc44>)
 8004686:	6a1b      	ldr	r3, [r3, #32]
 8004688:	e00d      	b.n	80046a6 <HAL_RCC_OscConfig+0xa22>
 800468a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800468e:	2202      	movs	r2, #2
 8004690:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004692:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	fa93 f2a3 	rbit	r2, r3
 800469c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80046a0:	601a      	str	r2, [r3, #0]
 80046a2:	4b89      	ldr	r3, [pc, #548]	; (80048c8 <HAL_RCC_OscConfig+0xc44>)
 80046a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80046aa:	2102      	movs	r1, #2
 80046ac:	6011      	str	r1, [r2, #0]
 80046ae:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80046b2:	6812      	ldr	r2, [r2, #0]
 80046b4:	fa92 f1a2 	rbit	r1, r2
 80046b8:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80046bc:	6011      	str	r1, [r2, #0]
  return result;
 80046be:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80046c2:	6812      	ldr	r2, [r2, #0]
 80046c4:	fab2 f282 	clz	r2, r2
 80046c8:	b2d2      	uxtb	r2, r2
 80046ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046ce:	b2d2      	uxtb	r2, r2
 80046d0:	f002 021f 	and.w	r2, r2, #31
 80046d4:	2101      	movs	r1, #1
 80046d6:	fa01 f202 	lsl.w	r2, r1, r2
 80046da:	4013      	ands	r3, r2
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d1a0      	bne.n	8004622 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80046e0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d105      	bne.n	80046f4 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046e8:	4b77      	ldr	r3, [pc, #476]	; (80048c8 <HAL_RCC_OscConfig+0xc44>)
 80046ea:	69db      	ldr	r3, [r3, #28]
 80046ec:	4a76      	ldr	r2, [pc, #472]	; (80048c8 <HAL_RCC_OscConfig+0xc44>)
 80046ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046f2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046f4:	1d3b      	adds	r3, r7, #4
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	69db      	ldr	r3, [r3, #28]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	f000 81c2 	beq.w	8004a84 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004700:	4b71      	ldr	r3, [pc, #452]	; (80048c8 <HAL_RCC_OscConfig+0xc44>)
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f003 030c 	and.w	r3, r3, #12
 8004708:	2b08      	cmp	r3, #8
 800470a:	f000 819c 	beq.w	8004a46 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800470e:	1d3b      	adds	r3, r7, #4
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	69db      	ldr	r3, [r3, #28]
 8004714:	2b02      	cmp	r3, #2
 8004716:	f040 8114 	bne.w	8004942 <HAL_RCC_OscConfig+0xcbe>
 800471a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800471e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004722:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004724:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	fa93 f2a3 	rbit	r2, r3
 800472e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004732:	601a      	str	r2, [r3, #0]
  return result;
 8004734:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004738:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800473a:	fab3 f383 	clz	r3, r3
 800473e:	b2db      	uxtb	r3, r3
 8004740:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004744:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	461a      	mov	r2, r3
 800474c:	2300      	movs	r3, #0
 800474e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004750:	f7fc fe5a 	bl	8001408 <HAL_GetTick>
 8004754:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004758:	e009      	b.n	800476e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800475a:	f7fc fe55 	bl	8001408 <HAL_GetTick>
 800475e:	4602      	mov	r2, r0
 8004760:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	2b02      	cmp	r3, #2
 8004768:	d901      	bls.n	800476e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e18b      	b.n	8004a86 <HAL_RCC_OscConfig+0xe02>
 800476e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004772:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004776:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004778:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	fa93 f2a3 	rbit	r2, r3
 8004782:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004786:	601a      	str	r2, [r3, #0]
  return result;
 8004788:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800478c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800478e:	fab3 f383 	clz	r3, r3
 8004792:	b2db      	uxtb	r3, r3
 8004794:	095b      	lsrs	r3, r3, #5
 8004796:	b2db      	uxtb	r3, r3
 8004798:	f043 0301 	orr.w	r3, r3, #1
 800479c:	b2db      	uxtb	r3, r3
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d102      	bne.n	80047a8 <HAL_RCC_OscConfig+0xb24>
 80047a2:	4b49      	ldr	r3, [pc, #292]	; (80048c8 <HAL_RCC_OscConfig+0xc44>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	e01b      	b.n	80047e0 <HAL_RCC_OscConfig+0xb5c>
 80047a8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80047ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80047b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	fa93 f2a3 	rbit	r2, r3
 80047bc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80047c0:	601a      	str	r2, [r3, #0]
 80047c2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80047c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80047ca:	601a      	str	r2, [r3, #0]
 80047cc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	fa93 f2a3 	rbit	r2, r3
 80047d6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80047da:	601a      	str	r2, [r3, #0]
 80047dc:	4b3a      	ldr	r3, [pc, #232]	; (80048c8 <HAL_RCC_OscConfig+0xc44>)
 80047de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80047e4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80047e8:	6011      	str	r1, [r2, #0]
 80047ea:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80047ee:	6812      	ldr	r2, [r2, #0]
 80047f0:	fa92 f1a2 	rbit	r1, r2
 80047f4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80047f8:	6011      	str	r1, [r2, #0]
  return result;
 80047fa:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80047fe:	6812      	ldr	r2, [r2, #0]
 8004800:	fab2 f282 	clz	r2, r2
 8004804:	b2d2      	uxtb	r2, r2
 8004806:	f042 0220 	orr.w	r2, r2, #32
 800480a:	b2d2      	uxtb	r2, r2
 800480c:	f002 021f 	and.w	r2, r2, #31
 8004810:	2101      	movs	r1, #1
 8004812:	fa01 f202 	lsl.w	r2, r1, r2
 8004816:	4013      	ands	r3, r2
 8004818:	2b00      	cmp	r3, #0
 800481a:	d19e      	bne.n	800475a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800481c:	4b2a      	ldr	r3, [pc, #168]	; (80048c8 <HAL_RCC_OscConfig+0xc44>)
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004824:	1d3b      	adds	r3, r7, #4
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800482a:	1d3b      	adds	r3, r7, #4
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	6a1b      	ldr	r3, [r3, #32]
 8004830:	430b      	orrs	r3, r1
 8004832:	4925      	ldr	r1, [pc, #148]	; (80048c8 <HAL_RCC_OscConfig+0xc44>)
 8004834:	4313      	orrs	r3, r2
 8004836:	604b      	str	r3, [r1, #4]
 8004838:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800483c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004840:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004842:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	fa93 f2a3 	rbit	r2, r3
 800484c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004850:	601a      	str	r2, [r3, #0]
  return result;
 8004852:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004856:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004858:	fab3 f383 	clz	r3, r3
 800485c:	b2db      	uxtb	r3, r3
 800485e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004862:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	461a      	mov	r2, r3
 800486a:	2301      	movs	r3, #1
 800486c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800486e:	f7fc fdcb 	bl	8001408 <HAL_GetTick>
 8004872:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004876:	e009      	b.n	800488c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004878:	f7fc fdc6 	bl	8001408 <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	2b02      	cmp	r3, #2
 8004886:	d901      	bls.n	800488c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e0fc      	b.n	8004a86 <HAL_RCC_OscConfig+0xe02>
 800488c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004890:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004894:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004896:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	fa93 f2a3 	rbit	r2, r3
 80048a0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80048a4:	601a      	str	r2, [r3, #0]
  return result;
 80048a6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80048aa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048ac:	fab3 f383 	clz	r3, r3
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	095b      	lsrs	r3, r3, #5
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	f043 0301 	orr.w	r3, r3, #1
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d105      	bne.n	80048cc <HAL_RCC_OscConfig+0xc48>
 80048c0:	4b01      	ldr	r3, [pc, #4]	; (80048c8 <HAL_RCC_OscConfig+0xc44>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	e01e      	b.n	8004904 <HAL_RCC_OscConfig+0xc80>
 80048c6:	bf00      	nop
 80048c8:	40021000 	.word	0x40021000
 80048cc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80048d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80048d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	fa93 f2a3 	rbit	r2, r3
 80048e0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80048e4:	601a      	str	r2, [r3, #0]
 80048e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80048ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80048ee:	601a      	str	r2, [r3, #0]
 80048f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	fa93 f2a3 	rbit	r2, r3
 80048fa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80048fe:	601a      	str	r2, [r3, #0]
 8004900:	4b63      	ldr	r3, [pc, #396]	; (8004a90 <HAL_RCC_OscConfig+0xe0c>)
 8004902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004904:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004908:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800490c:	6011      	str	r1, [r2, #0]
 800490e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004912:	6812      	ldr	r2, [r2, #0]
 8004914:	fa92 f1a2 	rbit	r1, r2
 8004918:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800491c:	6011      	str	r1, [r2, #0]
  return result;
 800491e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004922:	6812      	ldr	r2, [r2, #0]
 8004924:	fab2 f282 	clz	r2, r2
 8004928:	b2d2      	uxtb	r2, r2
 800492a:	f042 0220 	orr.w	r2, r2, #32
 800492e:	b2d2      	uxtb	r2, r2
 8004930:	f002 021f 	and.w	r2, r2, #31
 8004934:	2101      	movs	r1, #1
 8004936:	fa01 f202 	lsl.w	r2, r1, r2
 800493a:	4013      	ands	r3, r2
 800493c:	2b00      	cmp	r3, #0
 800493e:	d09b      	beq.n	8004878 <HAL_RCC_OscConfig+0xbf4>
 8004940:	e0a0      	b.n	8004a84 <HAL_RCC_OscConfig+0xe00>
 8004942:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004946:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800494a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800494c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	fa93 f2a3 	rbit	r2, r3
 8004956:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800495a:	601a      	str	r2, [r3, #0]
  return result;
 800495c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004960:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004962:	fab3 f383 	clz	r3, r3
 8004966:	b2db      	uxtb	r3, r3
 8004968:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800496c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	461a      	mov	r2, r3
 8004974:	2300      	movs	r3, #0
 8004976:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004978:	f7fc fd46 	bl	8001408 <HAL_GetTick>
 800497c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004980:	e009      	b.n	8004996 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004982:	f7fc fd41 	bl	8001408 <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	2b02      	cmp	r3, #2
 8004990:	d901      	bls.n	8004996 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e077      	b.n	8004a86 <HAL_RCC_OscConfig+0xe02>
 8004996:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800499a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800499e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	fa93 f2a3 	rbit	r2, r3
 80049aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049ae:	601a      	str	r2, [r3, #0]
  return result;
 80049b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049b4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049b6:	fab3 f383 	clz	r3, r3
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	095b      	lsrs	r3, r3, #5
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	f043 0301 	orr.w	r3, r3, #1
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d102      	bne.n	80049d0 <HAL_RCC_OscConfig+0xd4c>
 80049ca:	4b31      	ldr	r3, [pc, #196]	; (8004a90 <HAL_RCC_OscConfig+0xe0c>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	e01b      	b.n	8004a08 <HAL_RCC_OscConfig+0xd84>
 80049d0:	f107 0320 	add.w	r3, r7, #32
 80049d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80049d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049da:	f107 0320 	add.w	r3, r7, #32
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	fa93 f2a3 	rbit	r2, r3
 80049e4:	f107 031c 	add.w	r3, r7, #28
 80049e8:	601a      	str	r2, [r3, #0]
 80049ea:	f107 0318 	add.w	r3, r7, #24
 80049ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80049f2:	601a      	str	r2, [r3, #0]
 80049f4:	f107 0318 	add.w	r3, r7, #24
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	fa93 f2a3 	rbit	r2, r3
 80049fe:	f107 0314 	add.w	r3, r7, #20
 8004a02:	601a      	str	r2, [r3, #0]
 8004a04:	4b22      	ldr	r3, [pc, #136]	; (8004a90 <HAL_RCC_OscConfig+0xe0c>)
 8004a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a08:	f107 0210 	add.w	r2, r7, #16
 8004a0c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004a10:	6011      	str	r1, [r2, #0]
 8004a12:	f107 0210 	add.w	r2, r7, #16
 8004a16:	6812      	ldr	r2, [r2, #0]
 8004a18:	fa92 f1a2 	rbit	r1, r2
 8004a1c:	f107 020c 	add.w	r2, r7, #12
 8004a20:	6011      	str	r1, [r2, #0]
  return result;
 8004a22:	f107 020c 	add.w	r2, r7, #12
 8004a26:	6812      	ldr	r2, [r2, #0]
 8004a28:	fab2 f282 	clz	r2, r2
 8004a2c:	b2d2      	uxtb	r2, r2
 8004a2e:	f042 0220 	orr.w	r2, r2, #32
 8004a32:	b2d2      	uxtb	r2, r2
 8004a34:	f002 021f 	and.w	r2, r2, #31
 8004a38:	2101      	movs	r1, #1
 8004a3a:	fa01 f202 	lsl.w	r2, r1, r2
 8004a3e:	4013      	ands	r3, r2
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d19e      	bne.n	8004982 <HAL_RCC_OscConfig+0xcfe>
 8004a44:	e01e      	b.n	8004a84 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a46:	1d3b      	adds	r3, r7, #4
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	69db      	ldr	r3, [r3, #28]
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d101      	bne.n	8004a54 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e018      	b.n	8004a86 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004a54:	4b0e      	ldr	r3, [pc, #56]	; (8004a90 <HAL_RCC_OscConfig+0xe0c>)
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004a5c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004a60:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004a64:	1d3b      	adds	r3, r7, #4
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	6a1b      	ldr	r3, [r3, #32]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d108      	bne.n	8004a80 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004a6e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004a72:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004a76:	1d3b      	adds	r3, r7, #4
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d001      	beq.n	8004a84 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e000      	b.n	8004a86 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	40021000 	.word	0x40021000

08004a94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b09e      	sub	sp, #120	; 0x78
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d101      	bne.n	8004aac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e162      	b.n	8004d72 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004aac:	4b90      	ldr	r3, [pc, #576]	; (8004cf0 <HAL_RCC_ClockConfig+0x25c>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 0307 	and.w	r3, r3, #7
 8004ab4:	683a      	ldr	r2, [r7, #0]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d910      	bls.n	8004adc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aba:	4b8d      	ldr	r3, [pc, #564]	; (8004cf0 <HAL_RCC_ClockConfig+0x25c>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f023 0207 	bic.w	r2, r3, #7
 8004ac2:	498b      	ldr	r1, [pc, #556]	; (8004cf0 <HAL_RCC_ClockConfig+0x25c>)
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aca:	4b89      	ldr	r3, [pc, #548]	; (8004cf0 <HAL_RCC_ClockConfig+0x25c>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0307 	and.w	r3, r3, #7
 8004ad2:	683a      	ldr	r2, [r7, #0]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d001      	beq.n	8004adc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e14a      	b.n	8004d72 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0302 	and.w	r3, r3, #2
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d008      	beq.n	8004afa <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ae8:	4b82      	ldr	r3, [pc, #520]	; (8004cf4 <HAL_RCC_ClockConfig+0x260>)
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	497f      	ldr	r1, [pc, #508]	; (8004cf4 <HAL_RCC_ClockConfig+0x260>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0301 	and.w	r3, r3, #1
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	f000 80dc 	beq.w	8004cc0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d13c      	bne.n	8004b8a <HAL_RCC_ClockConfig+0xf6>
 8004b10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b14:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b18:	fa93 f3a3 	rbit	r3, r3
 8004b1c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004b1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b20:	fab3 f383 	clz	r3, r3
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	095b      	lsrs	r3, r3, #5
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	f043 0301 	orr.w	r3, r3, #1
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d102      	bne.n	8004b3a <HAL_RCC_ClockConfig+0xa6>
 8004b34:	4b6f      	ldr	r3, [pc, #444]	; (8004cf4 <HAL_RCC_ClockConfig+0x260>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	e00f      	b.n	8004b5a <HAL_RCC_ClockConfig+0xc6>
 8004b3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b3e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b42:	fa93 f3a3 	rbit	r3, r3
 8004b46:	667b      	str	r3, [r7, #100]	; 0x64
 8004b48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b4c:	663b      	str	r3, [r7, #96]	; 0x60
 8004b4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b50:	fa93 f3a3 	rbit	r3, r3
 8004b54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b56:	4b67      	ldr	r3, [pc, #412]	; (8004cf4 <HAL_RCC_ClockConfig+0x260>)
 8004b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004b5e:	65ba      	str	r2, [r7, #88]	; 0x58
 8004b60:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b62:	fa92 f2a2 	rbit	r2, r2
 8004b66:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004b68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004b6a:	fab2 f282 	clz	r2, r2
 8004b6e:	b2d2      	uxtb	r2, r2
 8004b70:	f042 0220 	orr.w	r2, r2, #32
 8004b74:	b2d2      	uxtb	r2, r2
 8004b76:	f002 021f 	and.w	r2, r2, #31
 8004b7a:	2101      	movs	r1, #1
 8004b7c:	fa01 f202 	lsl.w	r2, r1, r2
 8004b80:	4013      	ands	r3, r2
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d17b      	bne.n	8004c7e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e0f3      	b.n	8004d72 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	2b02      	cmp	r3, #2
 8004b90:	d13c      	bne.n	8004c0c <HAL_RCC_ClockConfig+0x178>
 8004b92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b96:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b9a:	fa93 f3a3 	rbit	r3, r3
 8004b9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004ba0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ba2:	fab3 f383 	clz	r3, r3
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	095b      	lsrs	r3, r3, #5
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	f043 0301 	orr.w	r3, r3, #1
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d102      	bne.n	8004bbc <HAL_RCC_ClockConfig+0x128>
 8004bb6:	4b4f      	ldr	r3, [pc, #316]	; (8004cf4 <HAL_RCC_ClockConfig+0x260>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	e00f      	b.n	8004bdc <HAL_RCC_ClockConfig+0x148>
 8004bbc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004bc0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bc4:	fa93 f3a3 	rbit	r3, r3
 8004bc8:	647b      	str	r3, [r7, #68]	; 0x44
 8004bca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004bce:	643b      	str	r3, [r7, #64]	; 0x40
 8004bd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bd2:	fa93 f3a3 	rbit	r3, r3
 8004bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bd8:	4b46      	ldr	r3, [pc, #280]	; (8004cf4 <HAL_RCC_ClockConfig+0x260>)
 8004bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bdc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004be0:	63ba      	str	r2, [r7, #56]	; 0x38
 8004be2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004be4:	fa92 f2a2 	rbit	r2, r2
 8004be8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004bea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bec:	fab2 f282 	clz	r2, r2
 8004bf0:	b2d2      	uxtb	r2, r2
 8004bf2:	f042 0220 	orr.w	r2, r2, #32
 8004bf6:	b2d2      	uxtb	r2, r2
 8004bf8:	f002 021f 	and.w	r2, r2, #31
 8004bfc:	2101      	movs	r1, #1
 8004bfe:	fa01 f202 	lsl.w	r2, r1, r2
 8004c02:	4013      	ands	r3, r2
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d13a      	bne.n	8004c7e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e0b2      	b.n	8004d72 <HAL_RCC_ClockConfig+0x2de>
 8004c0c:	2302      	movs	r3, #2
 8004c0e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c12:	fa93 f3a3 	rbit	r3, r3
 8004c16:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c1a:	fab3 f383 	clz	r3, r3
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	095b      	lsrs	r3, r3, #5
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	f043 0301 	orr.w	r3, r3, #1
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d102      	bne.n	8004c34 <HAL_RCC_ClockConfig+0x1a0>
 8004c2e:	4b31      	ldr	r3, [pc, #196]	; (8004cf4 <HAL_RCC_ClockConfig+0x260>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	e00d      	b.n	8004c50 <HAL_RCC_ClockConfig+0x1bc>
 8004c34:	2302      	movs	r3, #2
 8004c36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c3a:	fa93 f3a3 	rbit	r3, r3
 8004c3e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c40:	2302      	movs	r3, #2
 8004c42:	623b      	str	r3, [r7, #32]
 8004c44:	6a3b      	ldr	r3, [r7, #32]
 8004c46:	fa93 f3a3 	rbit	r3, r3
 8004c4a:	61fb      	str	r3, [r7, #28]
 8004c4c:	4b29      	ldr	r3, [pc, #164]	; (8004cf4 <HAL_RCC_ClockConfig+0x260>)
 8004c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c50:	2202      	movs	r2, #2
 8004c52:	61ba      	str	r2, [r7, #24]
 8004c54:	69ba      	ldr	r2, [r7, #24]
 8004c56:	fa92 f2a2 	rbit	r2, r2
 8004c5a:	617a      	str	r2, [r7, #20]
  return result;
 8004c5c:	697a      	ldr	r2, [r7, #20]
 8004c5e:	fab2 f282 	clz	r2, r2
 8004c62:	b2d2      	uxtb	r2, r2
 8004c64:	f042 0220 	orr.w	r2, r2, #32
 8004c68:	b2d2      	uxtb	r2, r2
 8004c6a:	f002 021f 	and.w	r2, r2, #31
 8004c6e:	2101      	movs	r1, #1
 8004c70:	fa01 f202 	lsl.w	r2, r1, r2
 8004c74:	4013      	ands	r3, r2
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d101      	bne.n	8004c7e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e079      	b.n	8004d72 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c7e:	4b1d      	ldr	r3, [pc, #116]	; (8004cf4 <HAL_RCC_ClockConfig+0x260>)
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	f023 0203 	bic.w	r2, r3, #3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	491a      	ldr	r1, [pc, #104]	; (8004cf4 <HAL_RCC_ClockConfig+0x260>)
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c90:	f7fc fbba 	bl	8001408 <HAL_GetTick>
 8004c94:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c96:	e00a      	b.n	8004cae <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c98:	f7fc fbb6 	bl	8001408 <HAL_GetTick>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d901      	bls.n	8004cae <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e061      	b.n	8004d72 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cae:	4b11      	ldr	r3, [pc, #68]	; (8004cf4 <HAL_RCC_ClockConfig+0x260>)
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	f003 020c 	and.w	r2, r3, #12
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d1eb      	bne.n	8004c98 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cc0:	4b0b      	ldr	r3, [pc, #44]	; (8004cf0 <HAL_RCC_ClockConfig+0x25c>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0307 	and.w	r3, r3, #7
 8004cc8:	683a      	ldr	r2, [r7, #0]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d214      	bcs.n	8004cf8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cce:	4b08      	ldr	r3, [pc, #32]	; (8004cf0 <HAL_RCC_ClockConfig+0x25c>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f023 0207 	bic.w	r2, r3, #7
 8004cd6:	4906      	ldr	r1, [pc, #24]	; (8004cf0 <HAL_RCC_ClockConfig+0x25c>)
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cde:	4b04      	ldr	r3, [pc, #16]	; (8004cf0 <HAL_RCC_ClockConfig+0x25c>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0307 	and.w	r3, r3, #7
 8004ce6:	683a      	ldr	r2, [r7, #0]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d005      	beq.n	8004cf8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e040      	b.n	8004d72 <HAL_RCC_ClockConfig+0x2de>
 8004cf0:	40022000 	.word	0x40022000
 8004cf4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0304 	and.w	r3, r3, #4
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d008      	beq.n	8004d16 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d04:	4b1d      	ldr	r3, [pc, #116]	; (8004d7c <HAL_RCC_ClockConfig+0x2e8>)
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	491a      	ldr	r1, [pc, #104]	; (8004d7c <HAL_RCC_ClockConfig+0x2e8>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0308 	and.w	r3, r3, #8
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d009      	beq.n	8004d36 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d22:	4b16      	ldr	r3, [pc, #88]	; (8004d7c <HAL_RCC_ClockConfig+0x2e8>)
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	00db      	lsls	r3, r3, #3
 8004d30:	4912      	ldr	r1, [pc, #72]	; (8004d7c <HAL_RCC_ClockConfig+0x2e8>)
 8004d32:	4313      	orrs	r3, r2
 8004d34:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004d36:	f000 f829 	bl	8004d8c <HAL_RCC_GetSysClockFreq>
 8004d3a:	4601      	mov	r1, r0
 8004d3c:	4b0f      	ldr	r3, [pc, #60]	; (8004d7c <HAL_RCC_ClockConfig+0x2e8>)
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d44:	22f0      	movs	r2, #240	; 0xf0
 8004d46:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d48:	693a      	ldr	r2, [r7, #16]
 8004d4a:	fa92 f2a2 	rbit	r2, r2
 8004d4e:	60fa      	str	r2, [r7, #12]
  return result;
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	fab2 f282 	clz	r2, r2
 8004d56:	b2d2      	uxtb	r2, r2
 8004d58:	40d3      	lsrs	r3, r2
 8004d5a:	4a09      	ldr	r2, [pc, #36]	; (8004d80 <HAL_RCC_ClockConfig+0x2ec>)
 8004d5c:	5cd3      	ldrb	r3, [r2, r3]
 8004d5e:	fa21 f303 	lsr.w	r3, r1, r3
 8004d62:	4a08      	ldr	r2, [pc, #32]	; (8004d84 <HAL_RCC_ClockConfig+0x2f0>)
 8004d64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004d66:	4b08      	ldr	r3, [pc, #32]	; (8004d88 <HAL_RCC_ClockConfig+0x2f4>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7fc fb08 	bl	8001380 <HAL_InitTick>
  
  return HAL_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3778      	adds	r7, #120	; 0x78
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	40021000 	.word	0x40021000
 8004d80:	08006b18 	.word	0x08006b18
 8004d84:	20000000 	.word	0x20000000
 8004d88:	20000004 	.word	0x20000004

08004d8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b08b      	sub	sp, #44	; 0x2c
 8004d90:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004d92:	2300      	movs	r3, #0
 8004d94:	61fb      	str	r3, [r7, #28]
 8004d96:	2300      	movs	r3, #0
 8004d98:	61bb      	str	r3, [r7, #24]
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d9e:	2300      	movs	r3, #0
 8004da0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004da2:	2300      	movs	r3, #0
 8004da4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004da6:	4b29      	ldr	r3, [pc, #164]	; (8004e4c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	f003 030c 	and.w	r3, r3, #12
 8004db2:	2b04      	cmp	r3, #4
 8004db4:	d002      	beq.n	8004dbc <HAL_RCC_GetSysClockFreq+0x30>
 8004db6:	2b08      	cmp	r3, #8
 8004db8:	d003      	beq.n	8004dc2 <HAL_RCC_GetSysClockFreq+0x36>
 8004dba:	e03c      	b.n	8004e36 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004dbc:	4b24      	ldr	r3, [pc, #144]	; (8004e50 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004dbe:	623b      	str	r3, [r7, #32]
      break;
 8004dc0:	e03c      	b.n	8004e3c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004dc8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004dcc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dce:	68ba      	ldr	r2, [r7, #8]
 8004dd0:	fa92 f2a2 	rbit	r2, r2
 8004dd4:	607a      	str	r2, [r7, #4]
  return result;
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	fab2 f282 	clz	r2, r2
 8004ddc:	b2d2      	uxtb	r2, r2
 8004dde:	40d3      	lsrs	r3, r2
 8004de0:	4a1c      	ldr	r2, [pc, #112]	; (8004e54 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004de2:	5cd3      	ldrb	r3, [r2, r3]
 8004de4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004de6:	4b19      	ldr	r3, [pc, #100]	; (8004e4c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dea:	f003 030f 	and.w	r3, r3, #15
 8004dee:	220f      	movs	r2, #15
 8004df0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004df2:	693a      	ldr	r2, [r7, #16]
 8004df4:	fa92 f2a2 	rbit	r2, r2
 8004df8:	60fa      	str	r2, [r7, #12]
  return result;
 8004dfa:	68fa      	ldr	r2, [r7, #12]
 8004dfc:	fab2 f282 	clz	r2, r2
 8004e00:	b2d2      	uxtb	r2, r2
 8004e02:	40d3      	lsrs	r3, r2
 8004e04:	4a14      	ldr	r2, [pc, #80]	; (8004e58 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004e06:	5cd3      	ldrb	r3, [r2, r3]
 8004e08:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d008      	beq.n	8004e26 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004e14:	4a0e      	ldr	r2, [pc, #56]	; (8004e50 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	fb02 f303 	mul.w	r3, r2, r3
 8004e22:	627b      	str	r3, [r7, #36]	; 0x24
 8004e24:	e004      	b.n	8004e30 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	4a0c      	ldr	r2, [pc, #48]	; (8004e5c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004e2a:	fb02 f303 	mul.w	r3, r2, r3
 8004e2e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e32:	623b      	str	r3, [r7, #32]
      break;
 8004e34:	e002      	b.n	8004e3c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004e36:	4b06      	ldr	r3, [pc, #24]	; (8004e50 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004e38:	623b      	str	r3, [r7, #32]
      break;
 8004e3a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e3c:	6a3b      	ldr	r3, [r7, #32]
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	372c      	adds	r7, #44	; 0x2c
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	40021000 	.word	0x40021000
 8004e50:	007a1200 	.word	0x007a1200
 8004e54:	08006b30 	.word	0x08006b30
 8004e58:	08006b40 	.word	0x08006b40
 8004e5c:	003d0900 	.word	0x003d0900

08004e60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e60:	b480      	push	{r7}
 8004e62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e64:	4b03      	ldr	r3, [pc, #12]	; (8004e74 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e66:	681b      	ldr	r3, [r3, #0]
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	20000000 	.word	0x20000000

08004e78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004e7e:	f7ff ffef 	bl	8004e60 <HAL_RCC_GetHCLKFreq>
 8004e82:	4601      	mov	r1, r0
 8004e84:	4b0b      	ldr	r3, [pc, #44]	; (8004eb4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e8c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004e90:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	fa92 f2a2 	rbit	r2, r2
 8004e98:	603a      	str	r2, [r7, #0]
  return result;
 8004e9a:	683a      	ldr	r2, [r7, #0]
 8004e9c:	fab2 f282 	clz	r2, r2
 8004ea0:	b2d2      	uxtb	r2, r2
 8004ea2:	40d3      	lsrs	r3, r2
 8004ea4:	4a04      	ldr	r2, [pc, #16]	; (8004eb8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004ea6:	5cd3      	ldrb	r3, [r2, r3]
 8004ea8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004eac:	4618      	mov	r0, r3
 8004eae:	3708      	adds	r7, #8
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	40021000 	.word	0x40021000
 8004eb8:	08006b28 	.word	0x08006b28

08004ebc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b082      	sub	sp, #8
 8004ec0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004ec2:	f7ff ffcd 	bl	8004e60 <HAL_RCC_GetHCLKFreq>
 8004ec6:	4601      	mov	r1, r0
 8004ec8:	4b0b      	ldr	r3, [pc, #44]	; (8004ef8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004ed0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004ed4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	fa92 f2a2 	rbit	r2, r2
 8004edc:	603a      	str	r2, [r7, #0]
  return result;
 8004ede:	683a      	ldr	r2, [r7, #0]
 8004ee0:	fab2 f282 	clz	r2, r2
 8004ee4:	b2d2      	uxtb	r2, r2
 8004ee6:	40d3      	lsrs	r3, r2
 8004ee8:	4a04      	ldr	r2, [pc, #16]	; (8004efc <HAL_RCC_GetPCLK2Freq+0x40>)
 8004eea:	5cd3      	ldrb	r3, [r2, r3]
 8004eec:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3708      	adds	r7, #8
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	40021000 	.word	0x40021000
 8004efc:	08006b28 	.word	0x08006b28

08004f00 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b092      	sub	sp, #72	; 0x48
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004f10:	2300      	movs	r3, #0
 8004f12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	f000 80cd 	beq.w	80050be <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f24:	4b86      	ldr	r3, [pc, #536]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004f26:	69db      	ldr	r3, [r3, #28]
 8004f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d10e      	bne.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f30:	4b83      	ldr	r3, [pc, #524]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004f32:	69db      	ldr	r3, [r3, #28]
 8004f34:	4a82      	ldr	r2, [pc, #520]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004f36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f3a:	61d3      	str	r3, [r2, #28]
 8004f3c:	4b80      	ldr	r3, [pc, #512]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004f3e:	69db      	ldr	r3, [r3, #28]
 8004f40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f44:	60bb      	str	r3, [r7, #8]
 8004f46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f4e:	4b7d      	ldr	r3, [pc, #500]	; (8005144 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d118      	bne.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f5a:	4b7a      	ldr	r3, [pc, #488]	; (8005144 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a79      	ldr	r2, [pc, #484]	; (8005144 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004f60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f64:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f66:	f7fc fa4f 	bl	8001408 <HAL_GetTick>
 8004f6a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f6c:	e008      	b.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f6e:	f7fc fa4b 	bl	8001408 <HAL_GetTick>
 8004f72:	4602      	mov	r2, r0
 8004f74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	2b64      	cmp	r3, #100	; 0x64
 8004f7a:	d901      	bls.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e0db      	b.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f80:	4b70      	ldr	r3, [pc, #448]	; (8005144 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d0f0      	beq.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f8c:	4b6c      	ldr	r3, [pc, #432]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004f8e:	6a1b      	ldr	r3, [r3, #32]
 8004f90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f94:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d07d      	beq.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fa4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d076      	beq.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004faa:	4b65      	ldr	r3, [pc, #404]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004fac:	6a1b      	ldr	r3, [r3, #32]
 8004fae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fb4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004fb8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fbc:	fa93 f3a3 	rbit	r3, r3
 8004fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004fc4:	fab3 f383 	clz	r3, r3
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	461a      	mov	r2, r3
 8004fcc:	4b5e      	ldr	r3, [pc, #376]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004fce:	4413      	add	r3, r2
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	6013      	str	r3, [r2, #0]
 8004fd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004fdc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fe0:	fa93 f3a3 	rbit	r3, r3
 8004fe4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004fe8:	fab3 f383 	clz	r3, r3
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	461a      	mov	r2, r3
 8004ff0:	4b55      	ldr	r3, [pc, #340]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004ff2:	4413      	add	r3, r2
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004ffc:	4a50      	ldr	r2, [pc, #320]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004ffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005000:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005004:	f003 0301 	and.w	r3, r3, #1
 8005008:	2b00      	cmp	r3, #0
 800500a:	d045      	beq.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800500c:	f7fc f9fc 	bl	8001408 <HAL_GetTick>
 8005010:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005012:	e00a      	b.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005014:	f7fc f9f8 	bl	8001408 <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005022:	4293      	cmp	r3, r2
 8005024:	d901      	bls.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e086      	b.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x238>
 800502a:	2302      	movs	r3, #2
 800502c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800502e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005030:	fa93 f3a3 	rbit	r3, r3
 8005034:	627b      	str	r3, [r7, #36]	; 0x24
 8005036:	2302      	movs	r3, #2
 8005038:	623b      	str	r3, [r7, #32]
 800503a:	6a3b      	ldr	r3, [r7, #32]
 800503c:	fa93 f3a3 	rbit	r3, r3
 8005040:	61fb      	str	r3, [r7, #28]
  return result;
 8005042:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005044:	fab3 f383 	clz	r3, r3
 8005048:	b2db      	uxtb	r3, r3
 800504a:	095b      	lsrs	r3, r3, #5
 800504c:	b2db      	uxtb	r3, r3
 800504e:	f043 0302 	orr.w	r3, r3, #2
 8005052:	b2db      	uxtb	r3, r3
 8005054:	2b02      	cmp	r3, #2
 8005056:	d102      	bne.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005058:	4b39      	ldr	r3, [pc, #228]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800505a:	6a1b      	ldr	r3, [r3, #32]
 800505c:	e007      	b.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800505e:	2302      	movs	r3, #2
 8005060:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	fa93 f3a3 	rbit	r3, r3
 8005068:	617b      	str	r3, [r7, #20]
 800506a:	4b35      	ldr	r3, [pc, #212]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800506c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506e:	2202      	movs	r2, #2
 8005070:	613a      	str	r2, [r7, #16]
 8005072:	693a      	ldr	r2, [r7, #16]
 8005074:	fa92 f2a2 	rbit	r2, r2
 8005078:	60fa      	str	r2, [r7, #12]
  return result;
 800507a:	68fa      	ldr	r2, [r7, #12]
 800507c:	fab2 f282 	clz	r2, r2
 8005080:	b2d2      	uxtb	r2, r2
 8005082:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005086:	b2d2      	uxtb	r2, r2
 8005088:	f002 021f 	and.w	r2, r2, #31
 800508c:	2101      	movs	r1, #1
 800508e:	fa01 f202 	lsl.w	r2, r1, r2
 8005092:	4013      	ands	r3, r2
 8005094:	2b00      	cmp	r3, #0
 8005096:	d0bd      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005098:	4b29      	ldr	r3, [pc, #164]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800509a:	6a1b      	ldr	r3, [r3, #32]
 800509c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	4926      	ldr	r1, [pc, #152]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80050a6:	4313      	orrs	r3, r2
 80050a8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80050aa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d105      	bne.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050b2:	4b23      	ldr	r3, [pc, #140]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80050b4:	69db      	ldr	r3, [r3, #28]
 80050b6:	4a22      	ldr	r2, [pc, #136]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80050b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050bc:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0301 	and.w	r3, r3, #1
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d008      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050ca:	4b1d      	ldr	r3, [pc, #116]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80050cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ce:	f023 0203 	bic.w	r2, r3, #3
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	491a      	ldr	r1, [pc, #104]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80050d8:	4313      	orrs	r3, r2
 80050da:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 0320 	and.w	r3, r3, #32
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d008      	beq.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80050e8:	4b15      	ldr	r3, [pc, #84]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80050ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ec:	f023 0210 	bic.w	r2, r3, #16
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	4912      	ldr	r1, [pc, #72]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80050f6:	4313      	orrs	r3, r2
 80050f8:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005102:	2b00      	cmp	r3, #0
 8005104:	d008      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005106:	4b0e      	ldr	r3, [pc, #56]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800510a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	490b      	ldr	r1, [pc, #44]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005114:	4313      	orrs	r3, r2
 8005116:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005120:	2b00      	cmp	r3, #0
 8005122:	d008      	beq.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005124:	4b06      	ldr	r3, [pc, #24]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005128:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	695b      	ldr	r3, [r3, #20]
 8005130:	4903      	ldr	r1, [pc, #12]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005132:	4313      	orrs	r3, r2
 8005134:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005136:	2300      	movs	r3, #0
}
 8005138:	4618      	mov	r0, r3
 800513a:	3748      	adds	r7, #72	; 0x48
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}
 8005140:	40021000 	.word	0x40021000
 8005144:	40007000 	.word	0x40007000
 8005148:	10908100 	.word	0x10908100

0800514c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d101      	bne.n	800515e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e049      	b.n	80051f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b00      	cmp	r3, #0
 8005168:	d106      	bne.n	8005178 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f7fb ff4a 	bl	800100c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2202      	movs	r2, #2
 800517c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	3304      	adds	r3, #4
 8005188:	4619      	mov	r1, r3
 800518a:	4610      	mov	r0, r2
 800518c:	f000 fc94 	bl	8005ab8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3708      	adds	r7, #8
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}

080051fa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80051fa:	b580      	push	{r7, lr}
 80051fc:	b082      	sub	sp, #8
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d101      	bne.n	800520c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e049      	b.n	80052a0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005212:	b2db      	uxtb	r3, r3
 8005214:	2b00      	cmp	r3, #0
 8005216:	d106      	bne.n	8005226 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f000 f841 	bl	80052a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2202      	movs	r2, #2
 800522a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	3304      	adds	r3, #4
 8005236:	4619      	mov	r1, r3
 8005238:	4610      	mov	r0, r2
 800523a:	f000 fc3d 	bl	8005ab8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2201      	movs	r2, #1
 8005242:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2201      	movs	r2, #1
 800524a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2201      	movs	r2, #1
 8005252:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2201      	movs	r2, #1
 800525a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2201      	movs	r2, #1
 8005262:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2201      	movs	r2, #1
 800526a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2201      	movs	r2, #1
 8005272:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2201      	movs	r2, #1
 800527a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2201      	movs	r2, #1
 8005282:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2201      	movs	r2, #1
 800528a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2201      	movs	r2, #1
 8005292:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2201      	movs	r2, #1
 800529a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800529e:	2300      	movs	r3, #0
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3708      	adds	r7, #8
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80052b0:	bf00      	nop
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d109      	bne.n	80052e0 <HAL_TIM_PWM_Start+0x24>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	bf14      	ite	ne
 80052d8:	2301      	movne	r3, #1
 80052da:	2300      	moveq	r3, #0
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	e03c      	b.n	800535a <HAL_TIM_PWM_Start+0x9e>
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	2b04      	cmp	r3, #4
 80052e4:	d109      	bne.n	80052fa <HAL_TIM_PWM_Start+0x3e>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	bf14      	ite	ne
 80052f2:	2301      	movne	r3, #1
 80052f4:	2300      	moveq	r3, #0
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	e02f      	b.n	800535a <HAL_TIM_PWM_Start+0x9e>
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	2b08      	cmp	r3, #8
 80052fe:	d109      	bne.n	8005314 <HAL_TIM_PWM_Start+0x58>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005306:	b2db      	uxtb	r3, r3
 8005308:	2b01      	cmp	r3, #1
 800530a:	bf14      	ite	ne
 800530c:	2301      	movne	r3, #1
 800530e:	2300      	moveq	r3, #0
 8005310:	b2db      	uxtb	r3, r3
 8005312:	e022      	b.n	800535a <HAL_TIM_PWM_Start+0x9e>
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	2b0c      	cmp	r3, #12
 8005318:	d109      	bne.n	800532e <HAL_TIM_PWM_Start+0x72>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005320:	b2db      	uxtb	r3, r3
 8005322:	2b01      	cmp	r3, #1
 8005324:	bf14      	ite	ne
 8005326:	2301      	movne	r3, #1
 8005328:	2300      	moveq	r3, #0
 800532a:	b2db      	uxtb	r3, r3
 800532c:	e015      	b.n	800535a <HAL_TIM_PWM_Start+0x9e>
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	2b10      	cmp	r3, #16
 8005332:	d109      	bne.n	8005348 <HAL_TIM_PWM_Start+0x8c>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800533a:	b2db      	uxtb	r3, r3
 800533c:	2b01      	cmp	r3, #1
 800533e:	bf14      	ite	ne
 8005340:	2301      	movne	r3, #1
 8005342:	2300      	moveq	r3, #0
 8005344:	b2db      	uxtb	r3, r3
 8005346:	e008      	b.n	800535a <HAL_TIM_PWM_Start+0x9e>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800534e:	b2db      	uxtb	r3, r3
 8005350:	2b01      	cmp	r3, #1
 8005352:	bf14      	ite	ne
 8005354:	2301      	movne	r3, #1
 8005356:	2300      	moveq	r3, #0
 8005358:	b2db      	uxtb	r3, r3
 800535a:	2b00      	cmp	r3, #0
 800535c:	d001      	beq.n	8005362 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e088      	b.n	8005474 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d104      	bne.n	8005372 <HAL_TIM_PWM_Start+0xb6>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2202      	movs	r2, #2
 800536c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005370:	e023      	b.n	80053ba <HAL_TIM_PWM_Start+0xfe>
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	2b04      	cmp	r3, #4
 8005376:	d104      	bne.n	8005382 <HAL_TIM_PWM_Start+0xc6>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2202      	movs	r2, #2
 800537c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005380:	e01b      	b.n	80053ba <HAL_TIM_PWM_Start+0xfe>
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	2b08      	cmp	r3, #8
 8005386:	d104      	bne.n	8005392 <HAL_TIM_PWM_Start+0xd6>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2202      	movs	r2, #2
 800538c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005390:	e013      	b.n	80053ba <HAL_TIM_PWM_Start+0xfe>
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	2b0c      	cmp	r3, #12
 8005396:	d104      	bne.n	80053a2 <HAL_TIM_PWM_Start+0xe6>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2202      	movs	r2, #2
 800539c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053a0:	e00b      	b.n	80053ba <HAL_TIM_PWM_Start+0xfe>
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	2b10      	cmp	r3, #16
 80053a6:	d104      	bne.n	80053b2 <HAL_TIM_PWM_Start+0xf6>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2202      	movs	r2, #2
 80053ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053b0:	e003      	b.n	80053ba <HAL_TIM_PWM_Start+0xfe>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2202      	movs	r2, #2
 80053b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	2201      	movs	r2, #1
 80053c0:	6839      	ldr	r1, [r7, #0]
 80053c2:	4618      	mov	r0, r3
 80053c4:	f000 ff30 	bl	8006228 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a2b      	ldr	r2, [pc, #172]	; (800547c <HAL_TIM_PWM_Start+0x1c0>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d00e      	beq.n	80053f0 <HAL_TIM_PWM_Start+0x134>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a2a      	ldr	r2, [pc, #168]	; (8005480 <HAL_TIM_PWM_Start+0x1c4>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d009      	beq.n	80053f0 <HAL_TIM_PWM_Start+0x134>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a28      	ldr	r2, [pc, #160]	; (8005484 <HAL_TIM_PWM_Start+0x1c8>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d004      	beq.n	80053f0 <HAL_TIM_PWM_Start+0x134>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a27      	ldr	r2, [pc, #156]	; (8005488 <HAL_TIM_PWM_Start+0x1cc>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d101      	bne.n	80053f4 <HAL_TIM_PWM_Start+0x138>
 80053f0:	2301      	movs	r3, #1
 80053f2:	e000      	b.n	80053f6 <HAL_TIM_PWM_Start+0x13a>
 80053f4:	2300      	movs	r3, #0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d007      	beq.n	800540a <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005408:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a1b      	ldr	r2, [pc, #108]	; (800547c <HAL_TIM_PWM_Start+0x1c0>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d00e      	beq.n	8005432 <HAL_TIM_PWM_Start+0x176>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800541c:	d009      	beq.n	8005432 <HAL_TIM_PWM_Start+0x176>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a1a      	ldr	r2, [pc, #104]	; (800548c <HAL_TIM_PWM_Start+0x1d0>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d004      	beq.n	8005432 <HAL_TIM_PWM_Start+0x176>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a14      	ldr	r2, [pc, #80]	; (8005480 <HAL_TIM_PWM_Start+0x1c4>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d115      	bne.n	800545e <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	689a      	ldr	r2, [r3, #8]
 8005438:	4b15      	ldr	r3, [pc, #84]	; (8005490 <HAL_TIM_PWM_Start+0x1d4>)
 800543a:	4013      	ands	r3, r2
 800543c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2b06      	cmp	r3, #6
 8005442:	d015      	beq.n	8005470 <HAL_TIM_PWM_Start+0x1b4>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800544a:	d011      	beq.n	8005470 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f042 0201 	orr.w	r2, r2, #1
 800545a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800545c:	e008      	b.n	8005470 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f042 0201 	orr.w	r2, r2, #1
 800546c:	601a      	str	r2, [r3, #0]
 800546e:	e000      	b.n	8005472 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005470:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005472:	2300      	movs	r3, #0
}
 8005474:	4618      	mov	r0, r3
 8005476:	3710      	adds	r7, #16
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}
 800547c:	40012c00 	.word	0x40012c00
 8005480:	40014000 	.word	0x40014000
 8005484:	40014400 	.word	0x40014400
 8005488:	40014800 	.word	0x40014800
 800548c:	40000400 	.word	0x40000400
 8005490:	00010007 	.word	0x00010007

08005494 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b086      	sub	sp, #24
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d101      	bne.n	80054a8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e097      	b.n	80055d8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d106      	bne.n	80054c2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f7fb fe0f 	bl	80010e0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2202      	movs	r2, #2
 80054c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	6812      	ldr	r2, [r2, #0]
 80054d4:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80054d8:	f023 0307 	bic.w	r3, r3, #7
 80054dc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	3304      	adds	r3, #4
 80054e6:	4619      	mov	r1, r3
 80054e8:	4610      	mov	r0, r2
 80054ea:	f000 fae5 	bl	8005ab8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	699b      	ldr	r3, [r3, #24]
 80054fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	6a1b      	ldr	r3, [r3, #32]
 8005504:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	697a      	ldr	r2, [r7, #20]
 800550c:	4313      	orrs	r3, r2
 800550e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005516:	f023 0303 	bic.w	r3, r3, #3
 800551a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	689a      	ldr	r2, [r3, #8]
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	699b      	ldr	r3, [r3, #24]
 8005524:	021b      	lsls	r3, r3, #8
 8005526:	4313      	orrs	r3, r2
 8005528:	693a      	ldr	r2, [r7, #16]
 800552a:	4313      	orrs	r3, r2
 800552c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005534:	f023 030c 	bic.w	r3, r3, #12
 8005538:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005540:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005544:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	68da      	ldr	r2, [r3, #12]
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	69db      	ldr	r3, [r3, #28]
 800554e:	021b      	lsls	r3, r3, #8
 8005550:	4313      	orrs	r3, r2
 8005552:	693a      	ldr	r2, [r7, #16]
 8005554:	4313      	orrs	r3, r2
 8005556:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	691b      	ldr	r3, [r3, #16]
 800555c:	011a      	lsls	r2, r3, #4
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	6a1b      	ldr	r3, [r3, #32]
 8005562:	031b      	lsls	r3, r3, #12
 8005564:	4313      	orrs	r3, r2
 8005566:	693a      	ldr	r2, [r7, #16]
 8005568:	4313      	orrs	r3, r2
 800556a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005572:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800557a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	685a      	ldr	r2, [r3, #4]
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	695b      	ldr	r3, [r3, #20]
 8005584:	011b      	lsls	r3, r3, #4
 8005586:	4313      	orrs	r3, r2
 8005588:	68fa      	ldr	r2, [r7, #12]
 800558a:	4313      	orrs	r3, r2
 800558c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	697a      	ldr	r2, [r7, #20]
 8005594:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	693a      	ldr	r2, [r7, #16]
 800559c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2201      	movs	r2, #1
 80055aa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2201      	movs	r2, #1
 80055b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2201      	movs	r2, #1
 80055ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2201      	movs	r2, #1
 80055c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2201      	movs	r2, #1
 80055ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2201      	movs	r2, #1
 80055d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055d6:	2300      	movs	r3, #0
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3718      	adds	r7, #24
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055f0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80055f8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005600:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005608:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d110      	bne.n	8005632 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005610:	7bfb      	ldrb	r3, [r7, #15]
 8005612:	2b01      	cmp	r3, #1
 8005614:	d102      	bne.n	800561c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005616:	7b7b      	ldrb	r3, [r7, #13]
 8005618:	2b01      	cmp	r3, #1
 800561a:	d001      	beq.n	8005620 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	e069      	b.n	80056f4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2202      	movs	r2, #2
 8005624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2202      	movs	r2, #2
 800562c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005630:	e031      	b.n	8005696 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	2b04      	cmp	r3, #4
 8005636:	d110      	bne.n	800565a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005638:	7bbb      	ldrb	r3, [r7, #14]
 800563a:	2b01      	cmp	r3, #1
 800563c:	d102      	bne.n	8005644 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800563e:	7b3b      	ldrb	r3, [r7, #12]
 8005640:	2b01      	cmp	r3, #1
 8005642:	d001      	beq.n	8005648 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	e055      	b.n	80056f4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2202      	movs	r2, #2
 800564c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2202      	movs	r2, #2
 8005654:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005658:	e01d      	b.n	8005696 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800565a:	7bfb      	ldrb	r3, [r7, #15]
 800565c:	2b01      	cmp	r3, #1
 800565e:	d108      	bne.n	8005672 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005660:	7bbb      	ldrb	r3, [r7, #14]
 8005662:	2b01      	cmp	r3, #1
 8005664:	d105      	bne.n	8005672 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005666:	7b7b      	ldrb	r3, [r7, #13]
 8005668:	2b01      	cmp	r3, #1
 800566a:	d102      	bne.n	8005672 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800566c:	7b3b      	ldrb	r3, [r7, #12]
 800566e:	2b01      	cmp	r3, #1
 8005670:	d001      	beq.n	8005676 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e03e      	b.n	80056f4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2202      	movs	r2, #2
 800567a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2202      	movs	r2, #2
 8005682:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2202      	movs	r2, #2
 800568a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2202      	movs	r2, #2
 8005692:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d003      	beq.n	80056a4 <HAL_TIM_Encoder_Start+0xc4>
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	2b04      	cmp	r3, #4
 80056a0:	d008      	beq.n	80056b4 <HAL_TIM_Encoder_Start+0xd4>
 80056a2:	e00f      	b.n	80056c4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	2201      	movs	r2, #1
 80056aa:	2100      	movs	r1, #0
 80056ac:	4618      	mov	r0, r3
 80056ae:	f000 fdbb 	bl	8006228 <TIM_CCxChannelCmd>
      break;
 80056b2:	e016      	b.n	80056e2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2201      	movs	r2, #1
 80056ba:	2104      	movs	r1, #4
 80056bc:	4618      	mov	r0, r3
 80056be:	f000 fdb3 	bl	8006228 <TIM_CCxChannelCmd>
      break;
 80056c2:	e00e      	b.n	80056e2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2201      	movs	r2, #1
 80056ca:	2100      	movs	r1, #0
 80056cc:	4618      	mov	r0, r3
 80056ce:	f000 fdab 	bl	8006228 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2201      	movs	r2, #1
 80056d8:	2104      	movs	r1, #4
 80056da:	4618      	mov	r0, r3
 80056dc:	f000 fda4 	bl	8006228 <TIM_CCxChannelCmd>
      break;
 80056e0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f042 0201 	orr.w	r2, r2, #1
 80056f0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80056f2:	2300      	movs	r3, #0
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3710      	adds	r7, #16
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b086      	sub	sp, #24
 8005700:	af00      	add	r7, sp, #0
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005708:	2300      	movs	r3, #0
 800570a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005712:	2b01      	cmp	r3, #1
 8005714:	d101      	bne.n	800571a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005716:	2302      	movs	r3, #2
 8005718:	e0ff      	b.n	800591a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2201      	movs	r2, #1
 800571e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2b14      	cmp	r3, #20
 8005726:	f200 80f0 	bhi.w	800590a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800572a:	a201      	add	r2, pc, #4	; (adr r2, 8005730 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800572c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005730:	08005785 	.word	0x08005785
 8005734:	0800590b 	.word	0x0800590b
 8005738:	0800590b 	.word	0x0800590b
 800573c:	0800590b 	.word	0x0800590b
 8005740:	080057c5 	.word	0x080057c5
 8005744:	0800590b 	.word	0x0800590b
 8005748:	0800590b 	.word	0x0800590b
 800574c:	0800590b 	.word	0x0800590b
 8005750:	08005807 	.word	0x08005807
 8005754:	0800590b 	.word	0x0800590b
 8005758:	0800590b 	.word	0x0800590b
 800575c:	0800590b 	.word	0x0800590b
 8005760:	08005847 	.word	0x08005847
 8005764:	0800590b 	.word	0x0800590b
 8005768:	0800590b 	.word	0x0800590b
 800576c:	0800590b 	.word	0x0800590b
 8005770:	08005889 	.word	0x08005889
 8005774:	0800590b 	.word	0x0800590b
 8005778:	0800590b 	.word	0x0800590b
 800577c:	0800590b 	.word	0x0800590b
 8005780:	080058c9 	.word	0x080058c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	68b9      	ldr	r1, [r7, #8]
 800578a:	4618      	mov	r0, r3
 800578c:	f000 fa0c 	bl	8005ba8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	699a      	ldr	r2, [r3, #24]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f042 0208 	orr.w	r2, r2, #8
 800579e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	699a      	ldr	r2, [r3, #24]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f022 0204 	bic.w	r2, r2, #4
 80057ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	6999      	ldr	r1, [r3, #24]
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	691a      	ldr	r2, [r3, #16]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	430a      	orrs	r2, r1
 80057c0:	619a      	str	r2, [r3, #24]
      break;
 80057c2:	e0a5      	b.n	8005910 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	68b9      	ldr	r1, [r7, #8]
 80057ca:	4618      	mov	r0, r3
 80057cc:	f000 fa72 	bl	8005cb4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	699a      	ldr	r2, [r3, #24]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	699a      	ldr	r2, [r3, #24]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	6999      	ldr	r1, [r3, #24]
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	021a      	lsls	r2, r3, #8
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	430a      	orrs	r2, r1
 8005802:	619a      	str	r2, [r3, #24]
      break;
 8005804:	e084      	b.n	8005910 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68b9      	ldr	r1, [r7, #8]
 800580c:	4618      	mov	r0, r3
 800580e:	f000 fad1 	bl	8005db4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	69da      	ldr	r2, [r3, #28]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f042 0208 	orr.w	r2, r2, #8
 8005820:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	69da      	ldr	r2, [r3, #28]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f022 0204 	bic.w	r2, r2, #4
 8005830:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	69d9      	ldr	r1, [r3, #28]
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	691a      	ldr	r2, [r3, #16]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	430a      	orrs	r2, r1
 8005842:	61da      	str	r2, [r3, #28]
      break;
 8005844:	e064      	b.n	8005910 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68b9      	ldr	r1, [r7, #8]
 800584c:	4618      	mov	r0, r3
 800584e:	f000 fb2f 	bl	8005eb0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	69da      	ldr	r2, [r3, #28]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005860:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	69da      	ldr	r2, [r3, #28]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005870:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	69d9      	ldr	r1, [r3, #28]
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	691b      	ldr	r3, [r3, #16]
 800587c:	021a      	lsls	r2, r3, #8
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	430a      	orrs	r2, r1
 8005884:	61da      	str	r2, [r3, #28]
      break;
 8005886:	e043      	b.n	8005910 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	68b9      	ldr	r1, [r7, #8]
 800588e:	4618      	mov	r0, r3
 8005890:	f000 fb72 	bl	8005f78 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f042 0208 	orr.w	r2, r2, #8
 80058a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f022 0204 	bic.w	r2, r2, #4
 80058b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	691a      	ldr	r2, [r3, #16]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	430a      	orrs	r2, r1
 80058c4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80058c6:	e023      	b.n	8005910 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	68b9      	ldr	r1, [r7, #8]
 80058ce:	4618      	mov	r0, r3
 80058d0:	f000 fbb0 	bl	8006034 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	021a      	lsls	r2, r3, #8
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	430a      	orrs	r2, r1
 8005906:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005908:	e002      	b.n	8005910 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	75fb      	strb	r3, [r7, #23]
      break;
 800590e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2200      	movs	r2, #0
 8005914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005918:	7dfb      	ldrb	r3, [r7, #23]
}
 800591a:	4618      	mov	r0, r3
 800591c:	3718      	adds	r7, #24
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
 8005922:	bf00      	nop

08005924 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800592e:	2300      	movs	r3, #0
 8005930:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005938:	2b01      	cmp	r3, #1
 800593a:	d101      	bne.n	8005940 <HAL_TIM_ConfigClockSource+0x1c>
 800593c:	2302      	movs	r3, #2
 800593e:	e0b6      	b.n	8005aae <HAL_TIM_ConfigClockSource+0x18a>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2202      	movs	r2, #2
 800594c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800595e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005962:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800596a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	68ba      	ldr	r2, [r7, #8]
 8005972:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800597c:	d03e      	beq.n	80059fc <HAL_TIM_ConfigClockSource+0xd8>
 800597e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005982:	f200 8087 	bhi.w	8005a94 <HAL_TIM_ConfigClockSource+0x170>
 8005986:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800598a:	f000 8086 	beq.w	8005a9a <HAL_TIM_ConfigClockSource+0x176>
 800598e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005992:	d87f      	bhi.n	8005a94 <HAL_TIM_ConfigClockSource+0x170>
 8005994:	2b70      	cmp	r3, #112	; 0x70
 8005996:	d01a      	beq.n	80059ce <HAL_TIM_ConfigClockSource+0xaa>
 8005998:	2b70      	cmp	r3, #112	; 0x70
 800599a:	d87b      	bhi.n	8005a94 <HAL_TIM_ConfigClockSource+0x170>
 800599c:	2b60      	cmp	r3, #96	; 0x60
 800599e:	d050      	beq.n	8005a42 <HAL_TIM_ConfigClockSource+0x11e>
 80059a0:	2b60      	cmp	r3, #96	; 0x60
 80059a2:	d877      	bhi.n	8005a94 <HAL_TIM_ConfigClockSource+0x170>
 80059a4:	2b50      	cmp	r3, #80	; 0x50
 80059a6:	d03c      	beq.n	8005a22 <HAL_TIM_ConfigClockSource+0xfe>
 80059a8:	2b50      	cmp	r3, #80	; 0x50
 80059aa:	d873      	bhi.n	8005a94 <HAL_TIM_ConfigClockSource+0x170>
 80059ac:	2b40      	cmp	r3, #64	; 0x40
 80059ae:	d058      	beq.n	8005a62 <HAL_TIM_ConfigClockSource+0x13e>
 80059b0:	2b40      	cmp	r3, #64	; 0x40
 80059b2:	d86f      	bhi.n	8005a94 <HAL_TIM_ConfigClockSource+0x170>
 80059b4:	2b30      	cmp	r3, #48	; 0x30
 80059b6:	d064      	beq.n	8005a82 <HAL_TIM_ConfigClockSource+0x15e>
 80059b8:	2b30      	cmp	r3, #48	; 0x30
 80059ba:	d86b      	bhi.n	8005a94 <HAL_TIM_ConfigClockSource+0x170>
 80059bc:	2b20      	cmp	r3, #32
 80059be:	d060      	beq.n	8005a82 <HAL_TIM_ConfigClockSource+0x15e>
 80059c0:	2b20      	cmp	r3, #32
 80059c2:	d867      	bhi.n	8005a94 <HAL_TIM_ConfigClockSource+0x170>
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d05c      	beq.n	8005a82 <HAL_TIM_ConfigClockSource+0x15e>
 80059c8:	2b10      	cmp	r3, #16
 80059ca:	d05a      	beq.n	8005a82 <HAL_TIM_ConfigClockSource+0x15e>
 80059cc:	e062      	b.n	8005a94 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6818      	ldr	r0, [r3, #0]
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	6899      	ldr	r1, [r3, #8]
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	685a      	ldr	r2, [r3, #4]
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	f000 fc03 	bl	80061e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80059f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	68ba      	ldr	r2, [r7, #8]
 80059f8:	609a      	str	r2, [r3, #8]
      break;
 80059fa:	e04f      	b.n	8005a9c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6818      	ldr	r0, [r3, #0]
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	6899      	ldr	r1, [r3, #8]
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	685a      	ldr	r2, [r3, #4]
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	f000 fbec 	bl	80061e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	689a      	ldr	r2, [r3, #8]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a1e:	609a      	str	r2, [r3, #8]
      break;
 8005a20:	e03c      	b.n	8005a9c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6818      	ldr	r0, [r3, #0]
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	6859      	ldr	r1, [r3, #4]
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	461a      	mov	r2, r3
 8005a30:	f000 fb60 	bl	80060f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	2150      	movs	r1, #80	; 0x50
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f000 fbb9 	bl	80061b2 <TIM_ITRx_SetConfig>
      break;
 8005a40:	e02c      	b.n	8005a9c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6818      	ldr	r0, [r3, #0]
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	6859      	ldr	r1, [r3, #4]
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	461a      	mov	r2, r3
 8005a50:	f000 fb7f 	bl	8006152 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	2160      	movs	r1, #96	; 0x60
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f000 fba9 	bl	80061b2 <TIM_ITRx_SetConfig>
      break;
 8005a60:	e01c      	b.n	8005a9c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6818      	ldr	r0, [r3, #0]
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	6859      	ldr	r1, [r3, #4]
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	461a      	mov	r2, r3
 8005a70:	f000 fb40 	bl	80060f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2140      	movs	r1, #64	; 0x40
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f000 fb99 	bl	80061b2 <TIM_ITRx_SetConfig>
      break;
 8005a80:	e00c      	b.n	8005a9c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	4610      	mov	r0, r2
 8005a8e:	f000 fb90 	bl	80061b2 <TIM_ITRx_SetConfig>
      break;
 8005a92:	e003      	b.n	8005a9c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	73fb      	strb	r3, [r7, #15]
      break;
 8005a98:	e000      	b.n	8005a9c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005a9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3710      	adds	r7, #16
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
	...

08005ab8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b085      	sub	sp, #20
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a32      	ldr	r2, [pc, #200]	; (8005b94 <TIM_Base_SetConfig+0xdc>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d007      	beq.n	8005ae0 <TIM_Base_SetConfig+0x28>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ad6:	d003      	beq.n	8005ae0 <TIM_Base_SetConfig+0x28>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a2f      	ldr	r2, [pc, #188]	; (8005b98 <TIM_Base_SetConfig+0xe0>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d108      	bne.n	8005af2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ae6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	68fa      	ldr	r2, [r7, #12]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4a27      	ldr	r2, [pc, #156]	; (8005b94 <TIM_Base_SetConfig+0xdc>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d013      	beq.n	8005b22 <TIM_Base_SetConfig+0x6a>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b00:	d00f      	beq.n	8005b22 <TIM_Base_SetConfig+0x6a>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a24      	ldr	r2, [pc, #144]	; (8005b98 <TIM_Base_SetConfig+0xe0>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d00b      	beq.n	8005b22 <TIM_Base_SetConfig+0x6a>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4a23      	ldr	r2, [pc, #140]	; (8005b9c <TIM_Base_SetConfig+0xe4>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d007      	beq.n	8005b22 <TIM_Base_SetConfig+0x6a>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4a22      	ldr	r2, [pc, #136]	; (8005ba0 <TIM_Base_SetConfig+0xe8>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d003      	beq.n	8005b22 <TIM_Base_SetConfig+0x6a>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a21      	ldr	r2, [pc, #132]	; (8005ba4 <TIM_Base_SetConfig+0xec>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d108      	bne.n	8005b34 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	695b      	ldr	r3, [r3, #20]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	68fa      	ldr	r2, [r7, #12]
 8005b46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	689a      	ldr	r2, [r3, #8]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a0e      	ldr	r2, [pc, #56]	; (8005b94 <TIM_Base_SetConfig+0xdc>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d00b      	beq.n	8005b78 <TIM_Base_SetConfig+0xc0>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a0e      	ldr	r2, [pc, #56]	; (8005b9c <TIM_Base_SetConfig+0xe4>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d007      	beq.n	8005b78 <TIM_Base_SetConfig+0xc0>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a0d      	ldr	r2, [pc, #52]	; (8005ba0 <TIM_Base_SetConfig+0xe8>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d003      	beq.n	8005b78 <TIM_Base_SetConfig+0xc0>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a0c      	ldr	r2, [pc, #48]	; (8005ba4 <TIM_Base_SetConfig+0xec>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d103      	bne.n	8005b80 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	691a      	ldr	r2, [r3, #16]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2201      	movs	r2, #1
 8005b84:	615a      	str	r2, [r3, #20]
}
 8005b86:	bf00      	nop
 8005b88:	3714      	adds	r7, #20
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr
 8005b92:	bf00      	nop
 8005b94:	40012c00 	.word	0x40012c00
 8005b98:	40000400 	.word	0x40000400
 8005b9c:	40014000 	.word	0x40014000
 8005ba0:	40014400 	.word	0x40014400
 8005ba4:	40014800 	.word	0x40014800

08005ba8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b087      	sub	sp, #28
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6a1b      	ldr	r3, [r3, #32]
 8005bb6:	f023 0201 	bic.w	r2, r3, #1
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a1b      	ldr	r3, [r3, #32]
 8005bc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	699b      	ldr	r3, [r3, #24]
 8005bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f023 0303 	bic.w	r3, r3, #3
 8005be2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	68fa      	ldr	r2, [r7, #12]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	f023 0302 	bic.w	r3, r3, #2
 8005bf4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	697a      	ldr	r2, [r7, #20]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4a28      	ldr	r2, [pc, #160]	; (8005ca4 <TIM_OC1_SetConfig+0xfc>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d00b      	beq.n	8005c20 <TIM_OC1_SetConfig+0x78>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	4a27      	ldr	r2, [pc, #156]	; (8005ca8 <TIM_OC1_SetConfig+0x100>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d007      	beq.n	8005c20 <TIM_OC1_SetConfig+0x78>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4a26      	ldr	r2, [pc, #152]	; (8005cac <TIM_OC1_SetConfig+0x104>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d003      	beq.n	8005c20 <TIM_OC1_SetConfig+0x78>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4a25      	ldr	r2, [pc, #148]	; (8005cb0 <TIM_OC1_SetConfig+0x108>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d10c      	bne.n	8005c3a <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	f023 0308 	bic.w	r3, r3, #8
 8005c26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	697a      	ldr	r2, [r7, #20]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	f023 0304 	bic.w	r3, r3, #4
 8005c38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a19      	ldr	r2, [pc, #100]	; (8005ca4 <TIM_OC1_SetConfig+0xfc>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d00b      	beq.n	8005c5a <TIM_OC1_SetConfig+0xb2>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a18      	ldr	r2, [pc, #96]	; (8005ca8 <TIM_OC1_SetConfig+0x100>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d007      	beq.n	8005c5a <TIM_OC1_SetConfig+0xb2>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a17      	ldr	r2, [pc, #92]	; (8005cac <TIM_OC1_SetConfig+0x104>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d003      	beq.n	8005c5a <TIM_OC1_SetConfig+0xb2>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a16      	ldr	r2, [pc, #88]	; (8005cb0 <TIM_OC1_SetConfig+0x108>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d111      	bne.n	8005c7e <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	695b      	ldr	r3, [r3, #20]
 8005c6e:	693a      	ldr	r2, [r7, #16]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	699b      	ldr	r3, [r3, #24]
 8005c78:	693a      	ldr	r2, [r7, #16]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	693a      	ldr	r2, [r7, #16]
 8005c82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	68fa      	ldr	r2, [r7, #12]
 8005c88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	685a      	ldr	r2, [r3, #4]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	697a      	ldr	r2, [r7, #20]
 8005c96:	621a      	str	r2, [r3, #32]
}
 8005c98:	bf00      	nop
 8005c9a:	371c      	adds	r7, #28
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr
 8005ca4:	40012c00 	.word	0x40012c00
 8005ca8:	40014000 	.word	0x40014000
 8005cac:	40014400 	.word	0x40014400
 8005cb0:	40014800 	.word	0x40014800

08005cb4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b087      	sub	sp, #28
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a1b      	ldr	r3, [r3, #32]
 8005cc2:	f023 0210 	bic.w	r2, r3, #16
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a1b      	ldr	r3, [r3, #32]
 8005cce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	699b      	ldr	r3, [r3, #24]
 8005cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ce2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ce6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	021b      	lsls	r3, r3, #8
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	f023 0320 	bic.w	r3, r3, #32
 8005d02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	011b      	lsls	r3, r3, #4
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a24      	ldr	r2, [pc, #144]	; (8005da4 <TIM_OC2_SetConfig+0xf0>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d10d      	bne.n	8005d34 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	011b      	lsls	r3, r3, #4
 8005d26:	697a      	ldr	r2, [r7, #20]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d32:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4a1b      	ldr	r2, [pc, #108]	; (8005da4 <TIM_OC2_SetConfig+0xf0>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d00b      	beq.n	8005d54 <TIM_OC2_SetConfig+0xa0>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	4a1a      	ldr	r2, [pc, #104]	; (8005da8 <TIM_OC2_SetConfig+0xf4>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d007      	beq.n	8005d54 <TIM_OC2_SetConfig+0xa0>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4a19      	ldr	r2, [pc, #100]	; (8005dac <TIM_OC2_SetConfig+0xf8>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d003      	beq.n	8005d54 <TIM_OC2_SetConfig+0xa0>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	4a18      	ldr	r2, [pc, #96]	; (8005db0 <TIM_OC2_SetConfig+0xfc>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d113      	bne.n	8005d7c <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d5a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d62:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	695b      	ldr	r3, [r3, #20]
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	693a      	ldr	r2, [r7, #16]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	699b      	ldr	r3, [r3, #24]
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	693a      	ldr	r2, [r7, #16]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	693a      	ldr	r2, [r7, #16]
 8005d80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	68fa      	ldr	r2, [r7, #12]
 8005d86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	685a      	ldr	r2, [r3, #4]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	697a      	ldr	r2, [r7, #20]
 8005d94:	621a      	str	r2, [r3, #32]
}
 8005d96:	bf00      	nop
 8005d98:	371c      	adds	r7, #28
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr
 8005da2:	bf00      	nop
 8005da4:	40012c00 	.word	0x40012c00
 8005da8:	40014000 	.word	0x40014000
 8005dac:	40014400 	.word	0x40014400
 8005db0:	40014800 	.word	0x40014800

08005db4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b087      	sub	sp, #28
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a1b      	ldr	r3, [r3, #32]
 8005dc2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6a1b      	ldr	r3, [r3, #32]
 8005dce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	69db      	ldr	r3, [r3, #28]
 8005dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005de6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f023 0303 	bic.w	r3, r3, #3
 8005dee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	68fa      	ldr	r2, [r7, #12]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	021b      	lsls	r3, r3, #8
 8005e08:	697a      	ldr	r2, [r7, #20]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a23      	ldr	r2, [pc, #140]	; (8005ea0 <TIM_OC3_SetConfig+0xec>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d10d      	bne.n	8005e32 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	021b      	lsls	r3, r3, #8
 8005e24:	697a      	ldr	r2, [r7, #20]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e30:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4a1a      	ldr	r2, [pc, #104]	; (8005ea0 <TIM_OC3_SetConfig+0xec>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d00b      	beq.n	8005e52 <TIM_OC3_SetConfig+0x9e>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4a19      	ldr	r2, [pc, #100]	; (8005ea4 <TIM_OC3_SetConfig+0xf0>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d007      	beq.n	8005e52 <TIM_OC3_SetConfig+0x9e>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4a18      	ldr	r2, [pc, #96]	; (8005ea8 <TIM_OC3_SetConfig+0xf4>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d003      	beq.n	8005e52 <TIM_OC3_SetConfig+0x9e>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4a17      	ldr	r2, [pc, #92]	; (8005eac <TIM_OC3_SetConfig+0xf8>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d113      	bne.n	8005e7a <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	695b      	ldr	r3, [r3, #20]
 8005e66:	011b      	lsls	r3, r3, #4
 8005e68:	693a      	ldr	r2, [r7, #16]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	699b      	ldr	r3, [r3, #24]
 8005e72:	011b      	lsls	r3, r3, #4
 8005e74:	693a      	ldr	r2, [r7, #16]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	693a      	ldr	r2, [r7, #16]
 8005e7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	685a      	ldr	r2, [r3, #4]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	697a      	ldr	r2, [r7, #20]
 8005e92:	621a      	str	r2, [r3, #32]
}
 8005e94:	bf00      	nop
 8005e96:	371c      	adds	r7, #28
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr
 8005ea0:	40012c00 	.word	0x40012c00
 8005ea4:	40014000 	.word	0x40014000
 8005ea8:	40014400 	.word	0x40014400
 8005eac:	40014800 	.word	0x40014800

08005eb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b087      	sub	sp, #28
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6a1b      	ldr	r3, [r3, #32]
 8005ebe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6a1b      	ldr	r3, [r3, #32]
 8005eca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	69db      	ldr	r3, [r3, #28]
 8005ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ede:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ee2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005eea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	021b      	lsls	r3, r3, #8
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005efe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	031b      	lsls	r3, r3, #12
 8005f06:	693a      	ldr	r2, [r7, #16]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	4a16      	ldr	r2, [pc, #88]	; (8005f68 <TIM_OC4_SetConfig+0xb8>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d00b      	beq.n	8005f2c <TIM_OC4_SetConfig+0x7c>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	4a15      	ldr	r2, [pc, #84]	; (8005f6c <TIM_OC4_SetConfig+0xbc>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d007      	beq.n	8005f2c <TIM_OC4_SetConfig+0x7c>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	4a14      	ldr	r2, [pc, #80]	; (8005f70 <TIM_OC4_SetConfig+0xc0>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d003      	beq.n	8005f2c <TIM_OC4_SetConfig+0x7c>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4a13      	ldr	r2, [pc, #76]	; (8005f74 <TIM_OC4_SetConfig+0xc4>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d109      	bne.n	8005f40 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	695b      	ldr	r3, [r3, #20]
 8005f38:	019b      	lsls	r3, r3, #6
 8005f3a:	697a      	ldr	r2, [r7, #20]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	697a      	ldr	r2, [r7, #20]
 8005f44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	68fa      	ldr	r2, [r7, #12]
 8005f4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	685a      	ldr	r2, [r3, #4]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	693a      	ldr	r2, [r7, #16]
 8005f58:	621a      	str	r2, [r3, #32]
}
 8005f5a:	bf00      	nop
 8005f5c:	371c      	adds	r7, #28
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr
 8005f66:	bf00      	nop
 8005f68:	40012c00 	.word	0x40012c00
 8005f6c:	40014000 	.word	0x40014000
 8005f70:	40014400 	.word	0x40014400
 8005f74:	40014800 	.word	0x40014800

08005f78 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b087      	sub	sp, #28
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a1b      	ldr	r3, [r3, #32]
 8005f86:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6a1b      	ldr	r3, [r3, #32]
 8005f92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005faa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68fa      	ldr	r2, [r7, #12]
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005fbc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	041b      	lsls	r3, r3, #16
 8005fc4:	693a      	ldr	r2, [r7, #16]
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4a15      	ldr	r2, [pc, #84]	; (8006024 <TIM_OC5_SetConfig+0xac>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d00b      	beq.n	8005fea <TIM_OC5_SetConfig+0x72>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a14      	ldr	r2, [pc, #80]	; (8006028 <TIM_OC5_SetConfig+0xb0>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d007      	beq.n	8005fea <TIM_OC5_SetConfig+0x72>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a13      	ldr	r2, [pc, #76]	; (800602c <TIM_OC5_SetConfig+0xb4>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d003      	beq.n	8005fea <TIM_OC5_SetConfig+0x72>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a12      	ldr	r2, [pc, #72]	; (8006030 <TIM_OC5_SetConfig+0xb8>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d109      	bne.n	8005ffe <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ff0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	695b      	ldr	r3, [r3, #20]
 8005ff6:	021b      	lsls	r3, r3, #8
 8005ff8:	697a      	ldr	r2, [r7, #20]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	697a      	ldr	r2, [r7, #20]
 8006002:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	68fa      	ldr	r2, [r7, #12]
 8006008:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	685a      	ldr	r2, [r3, #4]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	693a      	ldr	r2, [r7, #16]
 8006016:	621a      	str	r2, [r3, #32]
}
 8006018:	bf00      	nop
 800601a:	371c      	adds	r7, #28
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr
 8006024:	40012c00 	.word	0x40012c00
 8006028:	40014000 	.word	0x40014000
 800602c:	40014400 	.word	0x40014400
 8006030:	40014800 	.word	0x40014800

08006034 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006034:	b480      	push	{r7}
 8006036:	b087      	sub	sp, #28
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6a1b      	ldr	r3, [r3, #32]
 8006042:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a1b      	ldr	r3, [r3, #32]
 800604e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800605a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006062:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006066:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	021b      	lsls	r3, r3, #8
 800606e:	68fa      	ldr	r2, [r7, #12]
 8006070:	4313      	orrs	r3, r2
 8006072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800607a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	051b      	lsls	r3, r3, #20
 8006082:	693a      	ldr	r2, [r7, #16]
 8006084:	4313      	orrs	r3, r2
 8006086:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4a16      	ldr	r2, [pc, #88]	; (80060e4 <TIM_OC6_SetConfig+0xb0>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d00b      	beq.n	80060a8 <TIM_OC6_SetConfig+0x74>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	4a15      	ldr	r2, [pc, #84]	; (80060e8 <TIM_OC6_SetConfig+0xb4>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d007      	beq.n	80060a8 <TIM_OC6_SetConfig+0x74>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	4a14      	ldr	r2, [pc, #80]	; (80060ec <TIM_OC6_SetConfig+0xb8>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d003      	beq.n	80060a8 <TIM_OC6_SetConfig+0x74>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	4a13      	ldr	r2, [pc, #76]	; (80060f0 <TIM_OC6_SetConfig+0xbc>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d109      	bne.n	80060bc <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80060ae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	695b      	ldr	r3, [r3, #20]
 80060b4:	029b      	lsls	r3, r3, #10
 80060b6:	697a      	ldr	r2, [r7, #20]
 80060b8:	4313      	orrs	r3, r2
 80060ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	697a      	ldr	r2, [r7, #20]
 80060c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	685a      	ldr	r2, [r3, #4]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	693a      	ldr	r2, [r7, #16]
 80060d4:	621a      	str	r2, [r3, #32]
}
 80060d6:	bf00      	nop
 80060d8:	371c      	adds	r7, #28
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr
 80060e2:	bf00      	nop
 80060e4:	40012c00 	.word	0x40012c00
 80060e8:	40014000 	.word	0x40014000
 80060ec:	40014400 	.word	0x40014400
 80060f0:	40014800 	.word	0x40014800

080060f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b087      	sub	sp, #28
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6a1b      	ldr	r3, [r3, #32]
 8006104:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6a1b      	ldr	r3, [r3, #32]
 800610a:	f023 0201 	bic.w	r2, r3, #1
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	699b      	ldr	r3, [r3, #24]
 8006116:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800611e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	011b      	lsls	r3, r3, #4
 8006124:	693a      	ldr	r2, [r7, #16]
 8006126:	4313      	orrs	r3, r2
 8006128:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	f023 030a 	bic.w	r3, r3, #10
 8006130:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006132:	697a      	ldr	r2, [r7, #20]
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	4313      	orrs	r3, r2
 8006138:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	693a      	ldr	r2, [r7, #16]
 800613e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	697a      	ldr	r2, [r7, #20]
 8006144:	621a      	str	r2, [r3, #32]
}
 8006146:	bf00      	nop
 8006148:	371c      	adds	r7, #28
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr

08006152 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006152:	b480      	push	{r7}
 8006154:	b087      	sub	sp, #28
 8006156:	af00      	add	r7, sp, #0
 8006158:	60f8      	str	r0, [r7, #12]
 800615a:	60b9      	str	r1, [r7, #8]
 800615c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6a1b      	ldr	r3, [r3, #32]
 8006162:	f023 0210 	bic.w	r2, r3, #16
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	699b      	ldr	r3, [r3, #24]
 800616e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6a1b      	ldr	r3, [r3, #32]
 8006174:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800617c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	031b      	lsls	r3, r3, #12
 8006182:	697a      	ldr	r2, [r7, #20]
 8006184:	4313      	orrs	r3, r2
 8006186:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800618e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	011b      	lsls	r3, r3, #4
 8006194:	693a      	ldr	r2, [r7, #16]
 8006196:	4313      	orrs	r3, r2
 8006198:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	697a      	ldr	r2, [r7, #20]
 800619e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	693a      	ldr	r2, [r7, #16]
 80061a4:	621a      	str	r2, [r3, #32]
}
 80061a6:	bf00      	nop
 80061a8:	371c      	adds	r7, #28
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr

080061b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061b2:	b480      	push	{r7}
 80061b4:	b085      	sub	sp, #20
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	6078      	str	r0, [r7, #4]
 80061ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061ca:	683a      	ldr	r2, [r7, #0]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	4313      	orrs	r3, r2
 80061d0:	f043 0307 	orr.w	r3, r3, #7
 80061d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	68fa      	ldr	r2, [r7, #12]
 80061da:	609a      	str	r2, [r3, #8]
}
 80061dc:	bf00      	nop
 80061de:	3714      	adds	r7, #20
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr

080061e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b087      	sub	sp, #28
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	60f8      	str	r0, [r7, #12]
 80061f0:	60b9      	str	r1, [r7, #8]
 80061f2:	607a      	str	r2, [r7, #4]
 80061f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006202:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	021a      	lsls	r2, r3, #8
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	431a      	orrs	r2, r3
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	4313      	orrs	r3, r2
 8006210:	697a      	ldr	r2, [r7, #20]
 8006212:	4313      	orrs	r3, r2
 8006214:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	697a      	ldr	r2, [r7, #20]
 800621a:	609a      	str	r2, [r3, #8]
}
 800621c:	bf00      	nop
 800621e:	371c      	adds	r7, #28
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006228:	b480      	push	{r7}
 800622a:	b087      	sub	sp, #28
 800622c:	af00      	add	r7, sp, #0
 800622e:	60f8      	str	r0, [r7, #12]
 8006230:	60b9      	str	r1, [r7, #8]
 8006232:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	f003 031f 	and.w	r3, r3, #31
 800623a:	2201      	movs	r2, #1
 800623c:	fa02 f303 	lsl.w	r3, r2, r3
 8006240:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	6a1a      	ldr	r2, [r3, #32]
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	43db      	mvns	r3, r3
 800624a:	401a      	ands	r2, r3
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6a1a      	ldr	r2, [r3, #32]
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	f003 031f 	and.w	r3, r3, #31
 800625a:	6879      	ldr	r1, [r7, #4]
 800625c:	fa01 f303 	lsl.w	r3, r1, r3
 8006260:	431a      	orrs	r2, r3
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	621a      	str	r2, [r3, #32]
}
 8006266:	bf00      	nop
 8006268:	371c      	adds	r7, #28
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr
	...

08006274 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006274:	b480      	push	{r7}
 8006276:	b085      	sub	sp, #20
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006284:	2b01      	cmp	r3, #1
 8006286:	d101      	bne.n	800628c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006288:	2302      	movs	r3, #2
 800628a:	e054      	b.n	8006336 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2202      	movs	r2, #2
 8006298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a24      	ldr	r2, [pc, #144]	; (8006344 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d108      	bne.n	80062c8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80062bc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	68fa      	ldr	r2, [r7, #12]
 80062c4:	4313      	orrs	r3, r2
 80062c6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	68fa      	ldr	r2, [r7, #12]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	68fa      	ldr	r2, [r7, #12]
 80062e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a17      	ldr	r2, [pc, #92]	; (8006344 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d00e      	beq.n	800630a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062f4:	d009      	beq.n	800630a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a13      	ldr	r2, [pc, #76]	; (8006348 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d004      	beq.n	800630a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a11      	ldr	r2, [pc, #68]	; (800634c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d10c      	bne.n	8006324 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006310:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	68ba      	ldr	r2, [r7, #8]
 8006318:	4313      	orrs	r3, r2
 800631a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	68ba      	ldr	r2, [r7, #8]
 8006322:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2201      	movs	r2, #1
 8006328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2200      	movs	r2, #0
 8006330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006334:	2300      	movs	r3, #0
}
 8006336:	4618      	mov	r0, r3
 8006338:	3714      	adds	r7, #20
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr
 8006342:	bf00      	nop
 8006344:	40012c00 	.word	0x40012c00
 8006348:	40000400 	.word	0x40000400
 800634c:	40014000 	.word	0x40014000

08006350 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006350:	b480      	push	{r7}
 8006352:	b085      	sub	sp, #20
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800635a:	2300      	movs	r3, #0
 800635c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006364:	2b01      	cmp	r3, #1
 8006366:	d101      	bne.n	800636c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006368:	2302      	movs	r3, #2
 800636a:	e060      	b.n	800642e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2201      	movs	r2, #1
 8006370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	4313      	orrs	r3, r2
 8006380:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	4313      	orrs	r3, r2
 800638e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	4313      	orrs	r3, r2
 800639c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4313      	orrs	r3, r2
 80063aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	695b      	ldr	r3, [r3, #20]
 80063c4:	4313      	orrs	r3, r2
 80063c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063d2:	4313      	orrs	r3, r2
 80063d4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	699b      	ldr	r3, [r3, #24]
 80063e0:	041b      	lsls	r3, r3, #16
 80063e2:	4313      	orrs	r3, r2
 80063e4:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a14      	ldr	r2, [pc, #80]	; (800643c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d115      	bne.n	800641c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063fa:	051b      	lsls	r3, r3, #20
 80063fc:	4313      	orrs	r3, r2
 80063fe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	69db      	ldr	r3, [r3, #28]
 800640a:	4313      	orrs	r3, r2
 800640c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	6a1b      	ldr	r3, [r3, #32]
 8006418:	4313      	orrs	r3, r2
 800641a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	68fa      	ldr	r2, [r7, #12]
 8006422:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800642c:	2300      	movs	r3, #0
}
 800642e:	4618      	mov	r0, r3
 8006430:	3714      	adds	r7, #20
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr
 800643a:	bf00      	nop
 800643c:	40012c00 	.word	0x40012c00

08006440 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b082      	sub	sp, #8
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d101      	bne.n	8006452 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	e040      	b.n	80064d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006456:	2b00      	cmp	r3, #0
 8006458:	d106      	bne.n	8006468 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f7fa ff08 	bl	8001278 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2224      	movs	r2, #36	; 0x24
 800646c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f022 0201 	bic.w	r2, r2, #1
 800647c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 f82c 	bl	80064dc <UART_SetConfig>
 8006484:	4603      	mov	r3, r0
 8006486:	2b01      	cmp	r3, #1
 8006488:	d101      	bne.n	800648e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	e022      	b.n	80064d4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006492:	2b00      	cmp	r3, #0
 8006494:	d002      	beq.n	800649c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 f956 	bl	8006748 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	685a      	ldr	r2, [r3, #4]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80064aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	689a      	ldr	r2, [r3, #8]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80064ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f042 0201 	orr.w	r2, r2, #1
 80064ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f000 f9dd 	bl	800688c <UART_CheckIdleState>
 80064d2:	4603      	mov	r3, r0
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3708      	adds	r7, #8
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b088      	sub	sp, #32
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80064e4:	2300      	movs	r3, #0
 80064e6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	689a      	ldr	r2, [r3, #8]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	691b      	ldr	r3, [r3, #16]
 80064f0:	431a      	orrs	r2, r3
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	695b      	ldr	r3, [r3, #20]
 80064f6:	431a      	orrs	r2, r3
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	69db      	ldr	r3, [r3, #28]
 80064fc:	4313      	orrs	r3, r2
 80064fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	681a      	ldr	r2, [r3, #0]
 8006506:	4b8a      	ldr	r3, [pc, #552]	; (8006730 <UART_SetConfig+0x254>)
 8006508:	4013      	ands	r3, r2
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	6812      	ldr	r2, [r2, #0]
 800650e:	6979      	ldr	r1, [r7, #20]
 8006510:	430b      	orrs	r3, r1
 8006512:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	68da      	ldr	r2, [r3, #12]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	430a      	orrs	r2, r1
 8006528:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	699b      	ldr	r3, [r3, #24]
 800652e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6a1b      	ldr	r3, [r3, #32]
 8006534:	697a      	ldr	r2, [r7, #20]
 8006536:	4313      	orrs	r3, r2
 8006538:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	697a      	ldr	r2, [r7, #20]
 800654a:	430a      	orrs	r2, r1
 800654c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a78      	ldr	r2, [pc, #480]	; (8006734 <UART_SetConfig+0x258>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d120      	bne.n	800659a <UART_SetConfig+0xbe>
 8006558:	4b77      	ldr	r3, [pc, #476]	; (8006738 <UART_SetConfig+0x25c>)
 800655a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800655c:	f003 0303 	and.w	r3, r3, #3
 8006560:	2b03      	cmp	r3, #3
 8006562:	d817      	bhi.n	8006594 <UART_SetConfig+0xb8>
 8006564:	a201      	add	r2, pc, #4	; (adr r2, 800656c <UART_SetConfig+0x90>)
 8006566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800656a:	bf00      	nop
 800656c:	0800657d 	.word	0x0800657d
 8006570:	08006589 	.word	0x08006589
 8006574:	0800658f 	.word	0x0800658f
 8006578:	08006583 	.word	0x08006583
 800657c:	2300      	movs	r3, #0
 800657e:	77fb      	strb	r3, [r7, #31]
 8006580:	e01d      	b.n	80065be <UART_SetConfig+0xe2>
 8006582:	2302      	movs	r3, #2
 8006584:	77fb      	strb	r3, [r7, #31]
 8006586:	e01a      	b.n	80065be <UART_SetConfig+0xe2>
 8006588:	2304      	movs	r3, #4
 800658a:	77fb      	strb	r3, [r7, #31]
 800658c:	e017      	b.n	80065be <UART_SetConfig+0xe2>
 800658e:	2308      	movs	r3, #8
 8006590:	77fb      	strb	r3, [r7, #31]
 8006592:	e014      	b.n	80065be <UART_SetConfig+0xe2>
 8006594:	2310      	movs	r3, #16
 8006596:	77fb      	strb	r3, [r7, #31]
 8006598:	e011      	b.n	80065be <UART_SetConfig+0xe2>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a67      	ldr	r2, [pc, #412]	; (800673c <UART_SetConfig+0x260>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d102      	bne.n	80065aa <UART_SetConfig+0xce>
 80065a4:	2300      	movs	r3, #0
 80065a6:	77fb      	strb	r3, [r7, #31]
 80065a8:	e009      	b.n	80065be <UART_SetConfig+0xe2>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a64      	ldr	r2, [pc, #400]	; (8006740 <UART_SetConfig+0x264>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d102      	bne.n	80065ba <UART_SetConfig+0xde>
 80065b4:	2300      	movs	r3, #0
 80065b6:	77fb      	strb	r3, [r7, #31]
 80065b8:	e001      	b.n	80065be <UART_SetConfig+0xe2>
 80065ba:	2310      	movs	r3, #16
 80065bc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	69db      	ldr	r3, [r3, #28]
 80065c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065c6:	d15b      	bne.n	8006680 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 80065c8:	7ffb      	ldrb	r3, [r7, #31]
 80065ca:	2b08      	cmp	r3, #8
 80065cc:	d827      	bhi.n	800661e <UART_SetConfig+0x142>
 80065ce:	a201      	add	r2, pc, #4	; (adr r2, 80065d4 <UART_SetConfig+0xf8>)
 80065d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d4:	080065f9 	.word	0x080065f9
 80065d8:	08006601 	.word	0x08006601
 80065dc:	08006609 	.word	0x08006609
 80065e0:	0800661f 	.word	0x0800661f
 80065e4:	0800660f 	.word	0x0800660f
 80065e8:	0800661f 	.word	0x0800661f
 80065ec:	0800661f 	.word	0x0800661f
 80065f0:	0800661f 	.word	0x0800661f
 80065f4:	08006617 	.word	0x08006617
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065f8:	f7fe fc3e 	bl	8004e78 <HAL_RCC_GetPCLK1Freq>
 80065fc:	61b8      	str	r0, [r7, #24]
        break;
 80065fe:	e013      	b.n	8006628 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006600:	f7fe fc5c 	bl	8004ebc <HAL_RCC_GetPCLK2Freq>
 8006604:	61b8      	str	r0, [r7, #24]
        break;
 8006606:	e00f      	b.n	8006628 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006608:	4b4e      	ldr	r3, [pc, #312]	; (8006744 <UART_SetConfig+0x268>)
 800660a:	61bb      	str	r3, [r7, #24]
        break;
 800660c:	e00c      	b.n	8006628 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800660e:	f7fe fbbd 	bl	8004d8c <HAL_RCC_GetSysClockFreq>
 8006612:	61b8      	str	r0, [r7, #24]
        break;
 8006614:	e008      	b.n	8006628 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006616:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800661a:	61bb      	str	r3, [r7, #24]
        break;
 800661c:	e004      	b.n	8006628 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800661e:	2300      	movs	r3, #0
 8006620:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	77bb      	strb	r3, [r7, #30]
        break;
 8006626:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006628:	69bb      	ldr	r3, [r7, #24]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d074      	beq.n	8006718 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800662e:	69bb      	ldr	r3, [r7, #24]
 8006630:	005a      	lsls	r2, r3, #1
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	085b      	lsrs	r3, r3, #1
 8006638:	441a      	add	r2, r3
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006642:	b29b      	uxth	r3, r3
 8006644:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	2b0f      	cmp	r3, #15
 800664a:	d916      	bls.n	800667a <UART_SetConfig+0x19e>
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006652:	d212      	bcs.n	800667a <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	b29b      	uxth	r3, r3
 8006658:	f023 030f 	bic.w	r3, r3, #15
 800665c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	085b      	lsrs	r3, r3, #1
 8006662:	b29b      	uxth	r3, r3
 8006664:	f003 0307 	and.w	r3, r3, #7
 8006668:	b29a      	uxth	r2, r3
 800666a:	89fb      	ldrh	r3, [r7, #14]
 800666c:	4313      	orrs	r3, r2
 800666e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	89fa      	ldrh	r2, [r7, #14]
 8006676:	60da      	str	r2, [r3, #12]
 8006678:	e04e      	b.n	8006718 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	77bb      	strb	r3, [r7, #30]
 800667e:	e04b      	b.n	8006718 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006680:	7ffb      	ldrb	r3, [r7, #31]
 8006682:	2b08      	cmp	r3, #8
 8006684:	d827      	bhi.n	80066d6 <UART_SetConfig+0x1fa>
 8006686:	a201      	add	r2, pc, #4	; (adr r2, 800668c <UART_SetConfig+0x1b0>)
 8006688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800668c:	080066b1 	.word	0x080066b1
 8006690:	080066b9 	.word	0x080066b9
 8006694:	080066c1 	.word	0x080066c1
 8006698:	080066d7 	.word	0x080066d7
 800669c:	080066c7 	.word	0x080066c7
 80066a0:	080066d7 	.word	0x080066d7
 80066a4:	080066d7 	.word	0x080066d7
 80066a8:	080066d7 	.word	0x080066d7
 80066ac:	080066cf 	.word	0x080066cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066b0:	f7fe fbe2 	bl	8004e78 <HAL_RCC_GetPCLK1Freq>
 80066b4:	61b8      	str	r0, [r7, #24]
        break;
 80066b6:	e013      	b.n	80066e0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066b8:	f7fe fc00 	bl	8004ebc <HAL_RCC_GetPCLK2Freq>
 80066bc:	61b8      	str	r0, [r7, #24]
        break;
 80066be:	e00f      	b.n	80066e0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066c0:	4b20      	ldr	r3, [pc, #128]	; (8006744 <UART_SetConfig+0x268>)
 80066c2:	61bb      	str	r3, [r7, #24]
        break;
 80066c4:	e00c      	b.n	80066e0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066c6:	f7fe fb61 	bl	8004d8c <HAL_RCC_GetSysClockFreq>
 80066ca:	61b8      	str	r0, [r7, #24]
        break;
 80066cc:	e008      	b.n	80066e0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066d2:	61bb      	str	r3, [r7, #24]
        break;
 80066d4:	e004      	b.n	80066e0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80066d6:	2300      	movs	r3, #0
 80066d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	77bb      	strb	r3, [r7, #30]
        break;
 80066de:	bf00      	nop
    }

    if (pclk != 0U)
 80066e0:	69bb      	ldr	r3, [r7, #24]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d018      	beq.n	8006718 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	085a      	lsrs	r2, r3, #1
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	441a      	add	r2, r3
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	2b0f      	cmp	r3, #15
 8006700:	d908      	bls.n	8006714 <UART_SetConfig+0x238>
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006708:	d204      	bcs.n	8006714 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	693a      	ldr	r2, [r7, #16]
 8006710:	60da      	str	r2, [r3, #12]
 8006712:	e001      	b.n	8006718 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2200      	movs	r2, #0
 800671c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006724:	7fbb      	ldrb	r3, [r7, #30]
}
 8006726:	4618      	mov	r0, r3
 8006728:	3720      	adds	r7, #32
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
 800672e:	bf00      	nop
 8006730:	efff69f3 	.word	0xefff69f3
 8006734:	40013800 	.word	0x40013800
 8006738:	40021000 	.word	0x40021000
 800673c:	40004400 	.word	0x40004400
 8006740:	40004800 	.word	0x40004800
 8006744:	007a1200 	.word	0x007a1200

08006748 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006748:	b480      	push	{r7}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006754:	f003 0301 	and.w	r3, r3, #1
 8006758:	2b00      	cmp	r3, #0
 800675a:	d00a      	beq.n	8006772 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	430a      	orrs	r2, r1
 8006770:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006776:	f003 0302 	and.w	r3, r3, #2
 800677a:	2b00      	cmp	r3, #0
 800677c:	d00a      	beq.n	8006794 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	430a      	orrs	r2, r1
 8006792:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006798:	f003 0304 	and.w	r3, r3, #4
 800679c:	2b00      	cmp	r3, #0
 800679e:	d00a      	beq.n	80067b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	430a      	orrs	r2, r1
 80067b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ba:	f003 0308 	and.w	r3, r3, #8
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d00a      	beq.n	80067d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	430a      	orrs	r2, r1
 80067d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067dc:	f003 0310 	and.w	r3, r3, #16
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d00a      	beq.n	80067fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	430a      	orrs	r2, r1
 80067f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fe:	f003 0320 	and.w	r3, r3, #32
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00a      	beq.n	800681c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	430a      	orrs	r2, r1
 800681a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006824:	2b00      	cmp	r3, #0
 8006826:	d01a      	beq.n	800685e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	430a      	orrs	r2, r1
 800683c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006842:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006846:	d10a      	bne.n	800685e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	430a      	orrs	r2, r1
 800685c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006866:	2b00      	cmp	r3, #0
 8006868:	d00a      	beq.n	8006880 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	430a      	orrs	r2, r1
 800687e:	605a      	str	r2, [r3, #4]
  }
}
 8006880:	bf00      	nop
 8006882:	370c      	adds	r7, #12
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr

0800688c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b086      	sub	sp, #24
 8006890:	af02      	add	r7, sp, #8
 8006892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800689c:	f7fa fdb4 	bl	8001408 <HAL_GetTick>
 80068a0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f003 0308 	and.w	r3, r3, #8
 80068ac:	2b08      	cmp	r3, #8
 80068ae:	d10e      	bne.n	80068ce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80068b4:	9300      	str	r3, [sp, #0]
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 f82d 	bl	800691e <UART_WaitOnFlagUntilTimeout>
 80068c4:	4603      	mov	r3, r0
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d001      	beq.n	80068ce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068ca:	2303      	movs	r3, #3
 80068cc:	e023      	b.n	8006916 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f003 0304 	and.w	r3, r3, #4
 80068d8:	2b04      	cmp	r3, #4
 80068da:	d10e      	bne.n	80068fa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80068e0:	9300      	str	r3, [sp, #0]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2200      	movs	r2, #0
 80068e6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 f817 	bl	800691e <UART_WaitOnFlagUntilTimeout>
 80068f0:	4603      	mov	r3, r0
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d001      	beq.n	80068fa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068f6:	2303      	movs	r3, #3
 80068f8:	e00d      	b.n	8006916 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2220      	movs	r2, #32
 80068fe:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2220      	movs	r2, #32
 8006904:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006914:	2300      	movs	r3, #0
}
 8006916:	4618      	mov	r0, r3
 8006918:	3710      	adds	r7, #16
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}

0800691e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800691e:	b580      	push	{r7, lr}
 8006920:	b09c      	sub	sp, #112	; 0x70
 8006922:	af00      	add	r7, sp, #0
 8006924:	60f8      	str	r0, [r7, #12]
 8006926:	60b9      	str	r1, [r7, #8]
 8006928:	603b      	str	r3, [r7, #0]
 800692a:	4613      	mov	r3, r2
 800692c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800692e:	e0a5      	b.n	8006a7c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006930:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006936:	f000 80a1 	beq.w	8006a7c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800693a:	f7fa fd65 	bl	8001408 <HAL_GetTick>
 800693e:	4602      	mov	r2, r0
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	1ad3      	subs	r3, r2, r3
 8006944:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006946:	429a      	cmp	r2, r3
 8006948:	d302      	bcc.n	8006950 <UART_WaitOnFlagUntilTimeout+0x32>
 800694a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800694c:	2b00      	cmp	r3, #0
 800694e:	d13e      	bne.n	80069ce <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006956:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006958:	e853 3f00 	ldrex	r3, [r3]
 800695c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800695e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006960:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006964:	667b      	str	r3, [r7, #100]	; 0x64
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	461a      	mov	r2, r3
 800696c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800696e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006970:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006972:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006974:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006976:	e841 2300 	strex	r3, r2, [r1]
 800697a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800697c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800697e:	2b00      	cmp	r3, #0
 8006980:	d1e6      	bne.n	8006950 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	3308      	adds	r3, #8
 8006988:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800698a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800698c:	e853 3f00 	ldrex	r3, [r3]
 8006990:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006994:	f023 0301 	bic.w	r3, r3, #1
 8006998:	663b      	str	r3, [r7, #96]	; 0x60
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	3308      	adds	r3, #8
 80069a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80069a2:	64ba      	str	r2, [r7, #72]	; 0x48
 80069a4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80069a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069aa:	e841 2300 	strex	r3, r2, [r1]
 80069ae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80069b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d1e5      	bne.n	8006982 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2220      	movs	r2, #32
 80069ba:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2220      	movs	r2, #32
 80069c0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2200      	movs	r2, #0
 80069c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80069ca:	2303      	movs	r3, #3
 80069cc:	e067      	b.n	8006a9e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f003 0304 	and.w	r3, r3, #4
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d04f      	beq.n	8006a7c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	69db      	ldr	r3, [r3, #28]
 80069e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069ea:	d147      	bne.n	8006a7c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80069f4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069fe:	e853 3f00 	ldrex	r3, [r3]
 8006a02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a06:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006a0a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	461a      	mov	r2, r3
 8006a12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a14:	637b      	str	r3, [r7, #52]	; 0x34
 8006a16:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a18:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a1c:	e841 2300 	strex	r3, r2, [r1]
 8006a20:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d1e6      	bne.n	80069f6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	3308      	adds	r3, #8
 8006a2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	e853 3f00 	ldrex	r3, [r3]
 8006a36:	613b      	str	r3, [r7, #16]
   return(result);
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	f023 0301 	bic.w	r3, r3, #1
 8006a3e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	3308      	adds	r3, #8
 8006a46:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006a48:	623a      	str	r2, [r7, #32]
 8006a4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a4c:	69f9      	ldr	r1, [r7, #28]
 8006a4e:	6a3a      	ldr	r2, [r7, #32]
 8006a50:	e841 2300 	strex	r3, r2, [r1]
 8006a54:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a56:	69bb      	ldr	r3, [r7, #24]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d1e5      	bne.n	8006a28 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2220      	movs	r2, #32
 8006a60:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2220      	movs	r2, #32
 8006a66:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2220      	movs	r2, #32
 8006a6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006a78:	2303      	movs	r3, #3
 8006a7a:	e010      	b.n	8006a9e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	69da      	ldr	r2, [r3, #28]
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	4013      	ands	r3, r2
 8006a86:	68ba      	ldr	r2, [r7, #8]
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	bf0c      	ite	eq
 8006a8c:	2301      	moveq	r3, #1
 8006a8e:	2300      	movne	r3, #0
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	461a      	mov	r2, r3
 8006a94:	79fb      	ldrb	r3, [r7, #7]
 8006a96:	429a      	cmp	r2, r3
 8006a98:	f43f af4a 	beq.w	8006930 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a9c:	2300      	movs	r3, #0
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3770      	adds	r7, #112	; 0x70
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
	...

08006aa8 <__libc_init_array>:
 8006aa8:	b570      	push	{r4, r5, r6, lr}
 8006aaa:	4d0d      	ldr	r5, [pc, #52]	; (8006ae0 <__libc_init_array+0x38>)
 8006aac:	4c0d      	ldr	r4, [pc, #52]	; (8006ae4 <__libc_init_array+0x3c>)
 8006aae:	1b64      	subs	r4, r4, r5
 8006ab0:	10a4      	asrs	r4, r4, #2
 8006ab2:	2600      	movs	r6, #0
 8006ab4:	42a6      	cmp	r6, r4
 8006ab6:	d109      	bne.n	8006acc <__libc_init_array+0x24>
 8006ab8:	4d0b      	ldr	r5, [pc, #44]	; (8006ae8 <__libc_init_array+0x40>)
 8006aba:	4c0c      	ldr	r4, [pc, #48]	; (8006aec <__libc_init_array+0x44>)
 8006abc:	f000 f820 	bl	8006b00 <_init>
 8006ac0:	1b64      	subs	r4, r4, r5
 8006ac2:	10a4      	asrs	r4, r4, #2
 8006ac4:	2600      	movs	r6, #0
 8006ac6:	42a6      	cmp	r6, r4
 8006ac8:	d105      	bne.n	8006ad6 <__libc_init_array+0x2e>
 8006aca:	bd70      	pop	{r4, r5, r6, pc}
 8006acc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ad0:	4798      	blx	r3
 8006ad2:	3601      	adds	r6, #1
 8006ad4:	e7ee      	b.n	8006ab4 <__libc_init_array+0xc>
 8006ad6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ada:	4798      	blx	r3
 8006adc:	3601      	adds	r6, #1
 8006ade:	e7f2      	b.n	8006ac6 <__libc_init_array+0x1e>
 8006ae0:	08006b50 	.word	0x08006b50
 8006ae4:	08006b50 	.word	0x08006b50
 8006ae8:	08006b50 	.word	0x08006b50
 8006aec:	08006b54 	.word	0x08006b54

08006af0 <memset>:
 8006af0:	4402      	add	r2, r0
 8006af2:	4603      	mov	r3, r0
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d100      	bne.n	8006afa <memset+0xa>
 8006af8:	4770      	bx	lr
 8006afa:	f803 1b01 	strb.w	r1, [r3], #1
 8006afe:	e7f9      	b.n	8006af4 <memset+0x4>

08006b00 <_init>:
 8006b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b02:	bf00      	nop
 8006b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b06:	bc08      	pop	{r3}
 8006b08:	469e      	mov	lr, r3
 8006b0a:	4770      	bx	lr

08006b0c <_fini>:
 8006b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b0e:	bf00      	nop
 8006b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b12:	bc08      	pop	{r3}
 8006b14:	469e      	mov	lr, r3
 8006b16:	4770      	bx	lr
