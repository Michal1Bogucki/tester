
tester.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007570  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080076f8  080076f8  000176f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007740  08007740  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08007740  08007740  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007740  08007740  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007740  08007740  00017740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007744  08007744  00017744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007748  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000344  20000070  080077b8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003b4  080077b8  000203b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a184  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035d0  00000000  00000000  0003a224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f0  00000000  00000000  0003d7f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001278  00000000  00000000  0003ebe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003dba  00000000  00000000  0003fe60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ad14  00000000  00000000  00043c1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000afb9b  00000000  00000000  0005e92e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010e4c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054c4  00000000  00000000  0010e51c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080076e0 	.word	0x080076e0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	080076e0 	.word	0x080076e0

080001c8 <platform_write>:

static uint8_t * buffer;
static uint8_t rotation;

static uint8_t platform_write(uint8_t reg, uint8_t *bufp, uint16_t len)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b086      	sub	sp, #24
 80001cc:	af04      	add	r7, sp, #16
 80001ce:	4603      	mov	r3, r0
 80001d0:	6039      	str	r1, [r7, #0]
 80001d2:	71fb      	strb	r3, [r7, #7]
 80001d4:	4613      	mov	r3, r2
 80001d6:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write(&SSD1306_I2C_BUS, SSD1306_I2C_ADDRESS, reg, 1, bufp, len, 100);
 80001d8:	79fb      	ldrb	r3, [r7, #7]
 80001da:	b29a      	uxth	r2, r3
 80001dc:	2364      	movs	r3, #100	; 0x64
 80001de:	9302      	str	r3, [sp, #8]
 80001e0:	88bb      	ldrh	r3, [r7, #4]
 80001e2:	9301      	str	r3, [sp, #4]
 80001e4:	683b      	ldr	r3, [r7, #0]
 80001e6:	9300      	str	r3, [sp, #0]
 80001e8:	2301      	movs	r3, #1
 80001ea:	2178      	movs	r1, #120	; 0x78
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <platform_write+0x34>)
 80001ee:	f002 fe69 	bl	8002ec4 <HAL_I2C_Mem_Write>
	return 0;
 80001f2:	2300      	movs	r3, #0
}
 80001f4:	4618      	mov	r0, r3
 80001f6:	3708      	adds	r7, #8
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bd80      	pop	{r7, pc}
 80001fc:	200001a0 	.word	0x200001a0

08000200 <platform_write_dma>:

static uint8_t platform_write_dma(uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b084      	sub	sp, #16
 8000204:	af02      	add	r7, sp, #8
 8000206:	4603      	mov	r3, r0
 8000208:	6039      	str	r1, [r7, #0]
 800020a:	71fb      	strb	r3, [r7, #7]
 800020c:	4613      	mov	r3, r2
 800020e:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_BUS, SSD1306_I2C_ADDRESS, reg, 1, bufp, len);
 8000210:	79fb      	ldrb	r3, [r7, #7]
 8000212:	b29a      	uxth	r2, r3
 8000214:	88bb      	ldrh	r3, [r7, #4]
 8000216:	9301      	str	r3, [sp, #4]
 8000218:	683b      	ldr	r3, [r7, #0]
 800021a:	9300      	str	r3, [sp, #0]
 800021c:	2301      	movs	r3, #1
 800021e:	2178      	movs	r1, #120	; 0x78
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <platform_write_dma+0x30>)
 8000222:	f002 ff63 	bl	80030ec <HAL_I2C_Mem_Write_DMA>
	//HAL_I2C_Mem_Write(&SSD1306_I2C_BUS, SSD1306_I2C_ADDRESS, reg, 1, bufp, len,100);
	return 0;
 8000226:	2300      	movs	r3, #0
}
 8000228:	4618      	mov	r0, r3
 800022a:	3708      	adds	r7, #8
 800022c:	46bd      	mov	sp, r7
 800022e:	bd80      	pop	{r7, pc}
 8000230:	200001a0 	.word	0x200001a0

08000234 <SSD1306_send_com>:

static void SSD1306_send_com(uint8_t c)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	4603      	mov	r3, r0
 800023c:	71fb      	strb	r3, [r7, #7]
	platform_write(0x00, &c, 1);
 800023e:	1dfb      	adds	r3, r7, #7
 8000240:	2201      	movs	r2, #1
 8000242:	4619      	mov	r1, r3
 8000244:	2000      	movs	r0, #0
 8000246:	f7ff ffbf 	bl	80001c8 <platform_write>
}
 800024a:	bf00      	nop
 800024c:	3708      	adds	r7, #8
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
	...

08000254 <SSD1306_init>:

bool SSD1306_init(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b082      	sub	sp, #8
 8000258:	af00      	add	r7, sp, #0
  uint8_t comPins = 0x02, contrast = 0x8F, vccstate = SSD1306_SWITCHCAPVCC;
 800025a:	2302      	movs	r3, #2
 800025c:	71fb      	strb	r3, [r7, #7]
 800025e:	238f      	movs	r3, #143	; 0x8f
 8000260:	71bb      	strb	r3, [r7, #6]
 8000262:	2302      	movs	r3, #2
 8000264:	717b      	strb	r3, [r7, #5]
  size_t q= SSD1306_WIDTH * ((SSD1306_HEIGHT + 7) / 8);
 8000266:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800026a:	603b      	str	r3, [r7, #0]
  if ((!buffer) && !(buffer = (uint8_t *)malloc(q)))
 800026c:	4b3f      	ldr	r3, [pc, #252]	; (800036c <SSD1306_init+0x118>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	2b00      	cmp	r3, #0
 8000272:	d10c      	bne.n	800028e <SSD1306_init+0x3a>
 8000274:	6838      	ldr	r0, [r7, #0]
 8000276:	f007 f9ab 	bl	80075d0 <malloc>
 800027a:	4603      	mov	r3, r0
 800027c:	461a      	mov	r2, r3
 800027e:	4b3b      	ldr	r3, [pc, #236]	; (800036c <SSD1306_init+0x118>)
 8000280:	601a      	str	r2, [r3, #0]
 8000282:	4b3a      	ldr	r3, [pc, #232]	; (800036c <SSD1306_init+0x118>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	2b00      	cmp	r3, #0
 8000288:	d101      	bne.n	800028e <SSD1306_init+0x3a>
  {
    return false;
 800028a:	2300      	movs	r3, #0
 800028c:	e06a      	b.n	8000364 <SSD1306_init+0x110>
  }

  SSD1306_display_clear();
 800028e:	f000 f86f 	bl	8000370 <SSD1306_display_clear>

  // Init sequence
  SSD1306_send_com(SSD1306_DISPLAYOFF);
 8000292:	20ae      	movs	r0, #174	; 0xae
 8000294:	f7ff ffce 	bl	8000234 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETDISPLAYCLOCKDIV);
 8000298:	20d5      	movs	r0, #213	; 0xd5
 800029a:	f7ff ffcb 	bl	8000234 <SSD1306_send_com>
  SSD1306_send_com(0xE0);
 800029e:	20e0      	movs	r0, #224	; 0xe0
 80002a0:	f7ff ffc8 	bl	8000234 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETMULTIPLEX);
 80002a4:	20a8      	movs	r0, #168	; 0xa8
 80002a6:	f7ff ffc5 	bl	8000234 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_HEIGHT - 1);
 80002aa:	203f      	movs	r0, #63	; 0x3f
 80002ac:	f7ff ffc2 	bl	8000234 <SSD1306_send_com>

  SSD1306_send_com(SSD1306_SETDISPLAYOFFSET);
 80002b0:	20d3      	movs	r0, #211	; 0xd3
 80002b2:	f7ff ffbf 	bl	8000234 <SSD1306_send_com>
  SSD1306_send_com(0x00);
 80002b6:	2000      	movs	r0, #0
 80002b8:	f7ff ffbc 	bl	8000234 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETSTARTLINE | 0x00);
 80002bc:	2040      	movs	r0, #64	; 0x40
 80002be:	f7ff ffb9 	bl	8000234 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_CHARGEPUMP);
 80002c2:	208d      	movs	r0, #141	; 0x8d
 80002c4:	f7ff ffb6 	bl	8000234 <SSD1306_send_com>

  SSD1306_send_com((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
 80002c8:	797b      	ldrb	r3, [r7, #5]
 80002ca:	2b01      	cmp	r3, #1
 80002cc:	d101      	bne.n	80002d2 <SSD1306_init+0x7e>
 80002ce:	2310      	movs	r3, #16
 80002d0:	e000      	b.n	80002d4 <SSD1306_init+0x80>
 80002d2:	2314      	movs	r3, #20
 80002d4:	4618      	mov	r0, r3
 80002d6:	f7ff ffad 	bl	8000234 <SSD1306_send_com>

  SSD1306_send_com(SSD1306_MEMORYMODE);
 80002da:	2020      	movs	r0, #32
 80002dc:	f7ff ffaa 	bl	8000234 <SSD1306_send_com>
  SSD1306_send_com(0x00);
 80002e0:	2000      	movs	r0, #0
 80002e2:	f7ff ffa7 	bl	8000234 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SEGREMAP | 0x10);
 80002e6:	20b0      	movs	r0, #176	; 0xb0
 80002e8:	f7ff ffa4 	bl	8000234 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_COMSCANDEC);
 80002ec:	20c8      	movs	r0, #200	; 0xc8
 80002ee:	f7ff ffa1 	bl	8000234 <SSD1306_send_com>
    comPins = 0x02;
    contrast = 0x8F;
  }
  else if ((SSD1306_WIDTH == 128) && (SSD1306_HEIGHT == 64))
  {
    comPins = 0x12;
 80002f2:	2312      	movs	r3, #18
 80002f4:	71fb      	strb	r3, [r7, #7]
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF;
 80002f6:	797b      	ldrb	r3, [r7, #5]
 80002f8:	2b01      	cmp	r3, #1
 80002fa:	d101      	bne.n	8000300 <SSD1306_init+0xac>
 80002fc:	239f      	movs	r3, #159	; 0x9f
 80002fe:	e000      	b.n	8000302 <SSD1306_init+0xae>
 8000300:	23cf      	movs	r3, #207	; 0xcf
 8000302:	71bb      	strb	r3, [r7, #6]
  {
    comPins = 0x2; // ada x12
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF;
  }

  SSD1306_send_com(SSD1306_SETCOMPINS);
 8000304:	20da      	movs	r0, #218	; 0xda
 8000306:	f7ff ff95 	bl	8000234 <SSD1306_send_com>
  SSD1306_send_com(comPins);
 800030a:	79fb      	ldrb	r3, [r7, #7]
 800030c:	4618      	mov	r0, r3
 800030e:	f7ff ff91 	bl	8000234 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETCONTRAST);
 8000312:	2081      	movs	r0, #129	; 0x81
 8000314:	f7ff ff8e 	bl	8000234 <SSD1306_send_com>
  SSD1306_send_com(contrast);
 8000318:	79bb      	ldrb	r3, [r7, #6]
 800031a:	4618      	mov	r0, r3
 800031c:	f7ff ff8a 	bl	8000234 <SSD1306_send_com>

  SSD1306_send_com(SSD1306_SETPRECHARGE);
 8000320:	20d9      	movs	r0, #217	; 0xd9
 8000322:	f7ff ff87 	bl	8000234 <SSD1306_send_com>
  SSD1306_send_com((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
 8000326:	797b      	ldrb	r3, [r7, #5]
 8000328:	2b01      	cmp	r3, #1
 800032a:	d101      	bne.n	8000330 <SSD1306_init+0xdc>
 800032c:	2322      	movs	r3, #34	; 0x22
 800032e:	e000      	b.n	8000332 <SSD1306_init+0xde>
 8000330:	23f1      	movs	r3, #241	; 0xf1
 8000332:	4618      	mov	r0, r3
 8000334:	f7ff ff7e 	bl	8000234 <SSD1306_send_com>

  SSD1306_send_com(SSD1306_SETVCOMDETECT);
 8000338:	20db      	movs	r0, #219	; 0xdb
 800033a:	f7ff ff7b 	bl	8000234 <SSD1306_send_com>
  SSD1306_send_com(0x40);
 800033e:	2040      	movs	r0, #64	; 0x40
 8000340:	f7ff ff78 	bl	8000234 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_DISPLAYALLON_RESUME);
 8000344:	20a4      	movs	r0, #164	; 0xa4
 8000346:	f7ff ff75 	bl	8000234 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_NORMALDISPLAY);
 800034a:	20a6      	movs	r0, #166	; 0xa6
 800034c:	f7ff ff72 	bl	8000234 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_DEACTIVATE_SCROLL);
 8000350:	202e      	movs	r0, #46	; 0x2e
 8000352:	f7ff ff6f 	bl	8000234 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_DISPLAYON);
 8000356:	20af      	movs	r0, #175	; 0xaf
 8000358:	f7ff ff6c 	bl	8000234 <SSD1306_send_com>

  SSD1306_set_rotation(SSD1306_HORIZONTAL_MODE2);
 800035c:	2002      	movs	r0, #2
 800035e:	f000 fa3f 	bl	80007e0 <SSD1306_set_rotation>
  return true;
 8000362:	2301      	movs	r3, #1
}
 8000364:	4618      	mov	r0, r3
 8000366:	3708      	adds	r7, #8
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}
 800036c:	2000008c 	.word	0x2000008c

08000370 <SSD1306_display_clear>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void SSD1306_display_clear(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
	memset(buffer, 0, SSD1306_WIDTH * ((SSD1306_HEIGHT + 7) / 8));
 8000374:	4b04      	ldr	r3, [pc, #16]	; (8000388 <SSD1306_display_clear+0x18>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800037c:	2100      	movs	r1, #0
 800037e:	4618      	mov	r0, r3
 8000380:	f007 f92e 	bl	80075e0 <memset>
}
 8000384:	bf00      	nop
 8000386:	bd80      	pop	{r7, pc}
 8000388:	2000008c 	.word	0x2000008c

0800038c <SSD1306_draw_fast_hline>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void SSD1306_draw_fast_hline(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 800038c:	b590      	push	{r4, r7, lr}
 800038e:	b085      	sub	sp, #20
 8000390:	af00      	add	r7, sp, #0
 8000392:	4604      	mov	r4, r0
 8000394:	4608      	mov	r0, r1
 8000396:	4611      	mov	r1, r2
 8000398:	461a      	mov	r2, r3
 800039a:	4623      	mov	r3, r4
 800039c:	80fb      	strh	r3, [r7, #6]
 800039e:	4603      	mov	r3, r0
 80003a0:	80bb      	strh	r3, [r7, #4]
 80003a2:	460b      	mov	r3, r1
 80003a4:	807b      	strh	r3, [r7, #2]
 80003a6:	4613      	mov	r3, r2
 80003a8:	803b      	strh	r3, [r7, #0]
	bool bSwap = false;
 80003aa:	2300      	movs	r3, #0
 80003ac:	73fb      	strb	r3, [r7, #15]

	switch (SSD1306_get_rotation())
 80003ae:	f000 fa27 	bl	8000800 <SSD1306_get_rotation>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b03      	cmp	r3, #3
 80003b6:	d02c      	beq.n	8000412 <SSD1306_draw_fast_hline+0x86>
 80003b8:	2b03      	cmp	r3, #3
 80003ba:	dc45      	bgt.n	8000448 <SSD1306_draw_fast_hline+0xbc>
 80003bc:	2b01      	cmp	r3, #1
 80003be:	d002      	beq.n	80003c6 <SSD1306_draw_fast_hline+0x3a>
 80003c0:	2b02      	cmp	r3, #2
 80003c2:	d014      	beq.n	80003ee <SSD1306_draw_fast_hline+0x62>
 80003c4:	e040      	b.n	8000448 <SSD1306_draw_fast_hline+0xbc>
	{
		case 1:
			// 90 degree rotation, swap x & y for rotation, then invert x
			bSwap = true;
 80003c6:	2301      	movs	r3, #1
 80003c8:	73fb      	strb	r3, [r7, #15]
			ssd1306_swap(x, y);
 80003ca:	88fa      	ldrh	r2, [r7, #6]
 80003cc:	88bb      	ldrh	r3, [r7, #4]
 80003ce:	4053      	eors	r3, r2
 80003d0:	80fb      	strh	r3, [r7, #6]
 80003d2:	88ba      	ldrh	r2, [r7, #4]
 80003d4:	88fb      	ldrh	r3, [r7, #6]
 80003d6:	4053      	eors	r3, r2
 80003d8:	80bb      	strh	r3, [r7, #4]
 80003da:	88fa      	ldrh	r2, [r7, #6]
 80003dc:	88bb      	ldrh	r3, [r7, #4]
 80003de:	4053      	eors	r3, r2
 80003e0:	80fb      	strh	r3, [r7, #6]
			x = SSD1306_WIDTH - x - 1;
 80003e2:	88fb      	ldrh	r3, [r7, #6]
 80003e4:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80003e8:	b29b      	uxth	r3, r3
 80003ea:	80fb      	strh	r3, [r7, #6]
			break;
 80003ec:	e02c      	b.n	8000448 <SSD1306_draw_fast_hline+0xbc>
		case 2:
			// 180 degree rotation, invert x and y, then shift y around for height.
			x = SSD1306_WIDTH - x - 1;
 80003ee:	88fb      	ldrh	r3, [r7, #6]
 80003f0:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80003f4:	b29b      	uxth	r3, r3
 80003f6:	80fb      	strh	r3, [r7, #6]
			y = SSD1306_HEIGHT - y - 1;
 80003f8:	88bb      	ldrh	r3, [r7, #4]
 80003fa:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80003fe:	b29b      	uxth	r3, r3
 8000400:	80bb      	strh	r3, [r7, #4]
			x -= (w - 1);
 8000402:	88fa      	ldrh	r2, [r7, #6]
 8000404:	887b      	ldrh	r3, [r7, #2]
 8000406:	1ad3      	subs	r3, r2, r3
 8000408:	b29b      	uxth	r3, r3
 800040a:	3301      	adds	r3, #1
 800040c:	b29b      	uxth	r3, r3
 800040e:	80fb      	strh	r3, [r7, #6]
			break;
 8000410:	e01a      	b.n	8000448 <SSD1306_draw_fast_hline+0xbc>
		case 3:
			// 270 degree rotation, swap x & y for rotation,
			// then invert y and adjust y for w (not to become h)
			bSwap = true;
 8000412:	2301      	movs	r3, #1
 8000414:	73fb      	strb	r3, [r7, #15]
			ssd1306_swap(x, y);
 8000416:	88fa      	ldrh	r2, [r7, #6]
 8000418:	88bb      	ldrh	r3, [r7, #4]
 800041a:	4053      	eors	r3, r2
 800041c:	80fb      	strh	r3, [r7, #6]
 800041e:	88ba      	ldrh	r2, [r7, #4]
 8000420:	88fb      	ldrh	r3, [r7, #6]
 8000422:	4053      	eors	r3, r2
 8000424:	80bb      	strh	r3, [r7, #4]
 8000426:	88fa      	ldrh	r2, [r7, #6]
 8000428:	88bb      	ldrh	r3, [r7, #4]
 800042a:	4053      	eors	r3, r2
 800042c:	80fb      	strh	r3, [r7, #6]
			y = SSD1306_HEIGHT - y - 1;
 800042e:	88bb      	ldrh	r3, [r7, #4]
 8000430:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8000434:	b29b      	uxth	r3, r3
 8000436:	80bb      	strh	r3, [r7, #4]
			y -= (w - 1);
 8000438:	88ba      	ldrh	r2, [r7, #4]
 800043a:	887b      	ldrh	r3, [r7, #2]
 800043c:	1ad3      	subs	r3, r2, r3
 800043e:	b29b      	uxth	r3, r3
 8000440:	3301      	adds	r3, #1
 8000442:	b29b      	uxth	r3, r3
 8000444:	80bb      	strh	r3, [r7, #4]
			break;
 8000446:	bf00      	nop
	}

	if (bSwap)
 8000448:	7bfb      	ldrb	r3, [r7, #15]
 800044a:	2b00      	cmp	r3, #0
 800044c:	d009      	beq.n	8000462 <SSD1306_draw_fast_hline+0xd6>
	{
		SSD1306_draw_fast_vline_internal(x, y, w, color);
 800044e:	883b      	ldrh	r3, [r7, #0]
 8000450:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000454:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000458:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800045c:	f000 f8a0 	bl	80005a0 <SSD1306_draw_fast_vline_internal>
	}
	else
	{
		SSD1306_draw_fast_hline_internal(x, y, w, color);
	}
}
 8000460:	e008      	b.n	8000474 <SSD1306_draw_fast_hline+0xe8>
		SSD1306_draw_fast_hline_internal(x, y, w, color);
 8000462:	883b      	ldrh	r3, [r7, #0]
 8000464:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000468:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800046c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000470:	f000 f804 	bl	800047c <SSD1306_draw_fast_hline_internal>
}
 8000474:	bf00      	nop
 8000476:	3714      	adds	r7, #20
 8000478:	46bd      	mov	sp, r7
 800047a:	bd90      	pop	{r4, r7, pc}

0800047c <SSD1306_draw_fast_hline_internal>:

void SSD1306_draw_fast_hline_internal(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 800047c:	b490      	push	{r4, r7}
 800047e:	b084      	sub	sp, #16
 8000480:	af00      	add	r7, sp, #0
 8000482:	4604      	mov	r4, r0
 8000484:	4608      	mov	r0, r1
 8000486:	4611      	mov	r1, r2
 8000488:	461a      	mov	r2, r3
 800048a:	4623      	mov	r3, r4
 800048c:	80fb      	strh	r3, [r7, #6]
 800048e:	4603      	mov	r3, r0
 8000490:	80bb      	strh	r3, [r7, #4]
 8000492:	460b      	mov	r3, r1
 8000494:	807b      	strh	r3, [r7, #2]
 8000496:	4613      	mov	r3, r2
 8000498:	803b      	strh	r3, [r7, #0]
	if ((y >= 0) && (y < SSD1306_HEIGHT))
 800049a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800049e:	2b00      	cmp	r3, #0
 80004a0:	db75      	blt.n	800058e <SSD1306_draw_fast_hline_internal+0x112>
 80004a2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80004a6:	2b3f      	cmp	r3, #63	; 0x3f
 80004a8:	dc71      	bgt.n	800058e <SSD1306_draw_fast_hline_internal+0x112>
	{
		// Y coord in bounds?
		if (x < 0)
 80004aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	da06      	bge.n	80004c0 <SSD1306_draw_fast_hline_internal+0x44>
		{
			// Clip left
			w += x;
 80004b2:	887a      	ldrh	r2, [r7, #2]
 80004b4:	88fb      	ldrh	r3, [r7, #6]
 80004b6:	4413      	add	r3, r2
 80004b8:	b29b      	uxth	r3, r3
 80004ba:	807b      	strh	r3, [r7, #2]
			x = 0;
 80004bc:	2300      	movs	r3, #0
 80004be:	80fb      	strh	r3, [r7, #6]
		}
		if ((x + w) > SSD1306_WIDTH)
 80004c0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80004c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80004c8:	4413      	add	r3, r2
 80004ca:	2b80      	cmp	r3, #128	; 0x80
 80004cc:	dd04      	ble.n	80004d8 <SSD1306_draw_fast_hline_internal+0x5c>
		{
			// Clip right
			w = (SSD1306_WIDTH - x);
 80004ce:	88fb      	ldrh	r3, [r7, #6]
 80004d0:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80004d4:	b29b      	uxth	r3, r3
 80004d6:	807b      	strh	r3, [r7, #2]
		}
		if (w > 0)
 80004d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	dd56      	ble.n	800058e <SSD1306_draw_fast_hline_internal+0x112>
		{
			// Proceed only if width is positive
			uint8_t *pBuf = &buffer[(y / 8) * SSD1306_WIDTH + x], mask = 1 << (y & 7);
 80004e0:	4b2e      	ldr	r3, [pc, #184]	; (800059c <SSD1306_draw_fast_hline_internal+0x120>)
 80004e2:	681a      	ldr	r2, [r3, #0]
 80004e4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	da00      	bge.n	80004ee <SSD1306_draw_fast_hline_internal+0x72>
 80004ec:	3307      	adds	r3, #7
 80004ee:	10db      	asrs	r3, r3, #3
 80004f0:	b21b      	sxth	r3, r3
 80004f2:	01d9      	lsls	r1, r3, #7
 80004f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004f8:	440b      	add	r3, r1
 80004fa:	4413      	add	r3, r2
 80004fc:	60fb      	str	r3, [r7, #12]
 80004fe:	88bb      	ldrh	r3, [r7, #4]
 8000500:	f003 0307 	and.w	r3, r3, #7
 8000504:	2201      	movs	r2, #1
 8000506:	fa02 f303 	lsl.w	r3, r2, r3
 800050a:	72fb      	strb	r3, [r7, #11]
			switch (color)
 800050c:	883b      	ldrh	r3, [r7, #0]
 800050e:	2b02      	cmp	r3, #2
 8000510:	d034      	beq.n	800057c <SSD1306_draw_fast_hline_internal+0x100>
 8000512:	2b02      	cmp	r3, #2
 8000514:	dc3c      	bgt.n	8000590 <SSD1306_draw_fast_hline_internal+0x114>
 8000516:	2b00      	cmp	r3, #0
 8000518:	d013      	beq.n	8000542 <SSD1306_draw_fast_hline_internal+0xc6>
 800051a:	2b01      	cmp	r3, #1
 800051c:	d138      	bne.n	8000590 <SSD1306_draw_fast_hline_internal+0x114>
			{
				case SSD1306_WHITE:
					while (w--)
 800051e:	e007      	b.n	8000530 <SSD1306_draw_fast_hline_internal+0xb4>
					{
						*pBuf++ |= mask;
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	1c5a      	adds	r2, r3, #1
 8000524:	60fa      	str	r2, [r7, #12]
 8000526:	7819      	ldrb	r1, [r3, #0]
 8000528:	7afa      	ldrb	r2, [r7, #11]
 800052a:	430a      	orrs	r2, r1
 800052c:	b2d2      	uxtb	r2, r2
 800052e:	701a      	strb	r2, [r3, #0]
					while (w--)
 8000530:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000534:	b29a      	uxth	r2, r3
 8000536:	3a01      	subs	r2, #1
 8000538:	b292      	uxth	r2, r2
 800053a:	807a      	strh	r2, [r7, #2]
 800053c:	2b00      	cmp	r3, #0
 800053e:	d1ef      	bne.n	8000520 <SSD1306_draw_fast_hline_internal+0xa4>
					};
					break;
 8000540:	e026      	b.n	8000590 <SSD1306_draw_fast_hline_internal+0x114>
				case SSD1306_BLACK:
					mask = ~mask;
 8000542:	7afb      	ldrb	r3, [r7, #11]
 8000544:	43db      	mvns	r3, r3
 8000546:	72fb      	strb	r3, [r7, #11]
					while (w--)
 8000548:	e007      	b.n	800055a <SSD1306_draw_fast_hline_internal+0xde>
					{
						*pBuf++ &= mask;
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	1c5a      	adds	r2, r3, #1
 800054e:	60fa      	str	r2, [r7, #12]
 8000550:	7819      	ldrb	r1, [r3, #0]
 8000552:	7afa      	ldrb	r2, [r7, #11]
 8000554:	400a      	ands	r2, r1
 8000556:	b2d2      	uxtb	r2, r2
 8000558:	701a      	strb	r2, [r3, #0]
					while (w--)
 800055a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800055e:	b29a      	uxth	r2, r3
 8000560:	3a01      	subs	r2, #1
 8000562:	b292      	uxth	r2, r2
 8000564:	807a      	strh	r2, [r7, #2]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d1ef      	bne.n	800054a <SSD1306_draw_fast_hline_internal+0xce>
					};
					break;
 800056a:	e011      	b.n	8000590 <SSD1306_draw_fast_hline_internal+0x114>
				case SSD1306_INVERSE:
					while (w--)
					{
						*pBuf++ ^= mask;
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	1c5a      	adds	r2, r3, #1
 8000570:	60fa      	str	r2, [r7, #12]
 8000572:	7819      	ldrb	r1, [r3, #0]
 8000574:	7afa      	ldrb	r2, [r7, #11]
 8000576:	404a      	eors	r2, r1
 8000578:	b2d2      	uxtb	r2, r2
 800057a:	701a      	strb	r2, [r3, #0]
					while (w--)
 800057c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000580:	b29a      	uxth	r2, r3
 8000582:	3a01      	subs	r2, #1
 8000584:	b292      	uxth	r2, r2
 8000586:	807a      	strh	r2, [r7, #2]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d1ef      	bne.n	800056c <SSD1306_draw_fast_hline_internal+0xf0>
					};
					break;
 800058c:	e000      	b.n	8000590 <SSD1306_draw_fast_hline_internal+0x114>
			}
		}
 800058e:	bf00      	nop
	}
}
 8000590:	bf00      	nop
 8000592:	3710      	adds	r7, #16
 8000594:	46bd      	mov	sp, r7
 8000596:	bc90      	pop	{r4, r7}
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	2000008c 	.word	0x2000008c

080005a0 <SSD1306_draw_fast_vline_internal>:
		SSD1306_draw_fast_vline_internal(x, y, h, color);
	}
}

void SSD1306_draw_fast_vline_internal(int16_t x, int16_t __y, int16_t __h, uint16_t color)
{
 80005a0:	b490      	push	{r4, r7}
 80005a2:	b086      	sub	sp, #24
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4604      	mov	r4, r0
 80005a8:	4608      	mov	r0, r1
 80005aa:	4611      	mov	r1, r2
 80005ac:	461a      	mov	r2, r3
 80005ae:	4623      	mov	r3, r4
 80005b0:	80fb      	strh	r3, [r7, #6]
 80005b2:	4603      	mov	r3, r0
 80005b4:	80bb      	strh	r3, [r7, #4]
 80005b6:	460b      	mov	r3, r1
 80005b8:	807b      	strh	r3, [r7, #2]
 80005ba:	4613      	mov	r3, r2
 80005bc:	803b      	strh	r3, [r7, #0]
	if ((x >= 0) && (x < SSD1306_WIDTH))
 80005be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	f2c0 80da 	blt.w	800077c <SSD1306_draw_fast_vline_internal+0x1dc>
 80005c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005cc:	2b7f      	cmp	r3, #127	; 0x7f
 80005ce:	f300 80d5 	bgt.w	800077c <SSD1306_draw_fast_vline_internal+0x1dc>
	{
		// X coord in bounds?
		if (__y < 0)
 80005d2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	da06      	bge.n	80005e8 <SSD1306_draw_fast_vline_internal+0x48>
		{
			// Clip top
			__h += __y;
 80005da:	887a      	ldrh	r2, [r7, #2]
 80005dc:	88bb      	ldrh	r3, [r7, #4]
 80005de:	4413      	add	r3, r2
 80005e0:	b29b      	uxth	r3, r3
 80005e2:	807b      	strh	r3, [r7, #2]
			__y = 0;
 80005e4:	2300      	movs	r3, #0
 80005e6:	80bb      	strh	r3, [r7, #4]
		}
		if ((__y + __h) > SSD1306_HEIGHT)
 80005e8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80005ec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80005f0:	4413      	add	r3, r2
 80005f2:	2b40      	cmp	r3, #64	; 0x40
 80005f4:	dd04      	ble.n	8000600 <SSD1306_draw_fast_vline_internal+0x60>
		{
			// Clip bottom
			__h = (SSD1306_HEIGHT - __y);
 80005f6:	88bb      	ldrh	r3, [r7, #4]
 80005f8:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80005fc:	b29b      	uxth	r3, r3
 80005fe:	807b      	strh	r3, [r7, #2]
		}
		if (__h > 0)
 8000600:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000604:	2b00      	cmp	r3, #0
 8000606:	f340 80b9 	ble.w	800077c <SSD1306_draw_fast_vline_internal+0x1dc>
		{
			// Proceed only if height is now positive
			// this display doesn't need ints for coordinates,
			// use local byte registers for faster juggling
			uint8_t y = __y, h = __h;
 800060a:	88bb      	ldrh	r3, [r7, #4]
 800060c:	737b      	strb	r3, [r7, #13]
 800060e:	887b      	ldrh	r3, [r7, #2]
 8000610:	75fb      	strb	r3, [r7, #23]
			uint8_t *pBuf = &buffer[(y / 8) * SSD1306_WIDTH + x];
 8000612:	4b5d      	ldr	r3, [pc, #372]	; (8000788 <SSD1306_draw_fast_vline_internal+0x1e8>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	7b7a      	ldrb	r2, [r7, #13]
 8000618:	08d2      	lsrs	r2, r2, #3
 800061a:	b2d2      	uxtb	r2, r2
 800061c:	01d1      	lsls	r1, r2, #7
 800061e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000622:	440a      	add	r2, r1
 8000624:	4413      	add	r3, r2
 8000626:	613b      	str	r3, [r7, #16]

			// do the first partial byte, if necessary - this requires some masking
			uint8_t mod = (y & 7);
 8000628:	7b7b      	ldrb	r3, [r7, #13]
 800062a:	f003 0307 	and.w	r3, r3, #7
 800062e:	73fb      	strb	r3, [r7, #15]
			if (mod)
 8000630:	7bfb      	ldrb	r3, [r7, #15]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d040      	beq.n	80006b8 <SSD1306_draw_fast_vline_internal+0x118>
			{
				// mask off the high n bits we want to set
				mod = 8 - mod;
 8000636:	7bfb      	ldrb	r3, [r7, #15]
 8000638:	f1c3 0308 	rsb	r3, r3, #8
 800063c:	73fb      	strb	r3, [r7, #15]
				// note - lookup table results in a nearly 10% performance
				// improvement in fill* functions
				// uint8_t mask = ~(0xFF >> mod);
				static const uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE};
				uint8_t mask = (*(const unsigned char *)(&premask[mod]));
 800063e:	7bfb      	ldrb	r3, [r7, #15]
 8000640:	4a52      	ldr	r2, [pc, #328]	; (800078c <SSD1306_draw_fast_vline_internal+0x1ec>)
 8000642:	5cd3      	ldrb	r3, [r2, r3]
 8000644:	73bb      	strb	r3, [r7, #14]
				// adjust the mask if we're not going to reach the end of this byte
				if (h < mod)
 8000646:	7dfa      	ldrb	r2, [r7, #23]
 8000648:	7bfb      	ldrb	r3, [r7, #15]
 800064a:	429a      	cmp	r2, r3
 800064c:	d20b      	bcs.n	8000666 <SSD1306_draw_fast_vline_internal+0xc6>
				{
					mask &= (0XFF >> (mod - h));
 800064e:	7bfa      	ldrb	r2, [r7, #15]
 8000650:	7dfb      	ldrb	r3, [r7, #23]
 8000652:	1ad3      	subs	r3, r2, r3
 8000654:	22ff      	movs	r2, #255	; 0xff
 8000656:	fa42 f303 	asr.w	r3, r2, r3
 800065a:	b25a      	sxtb	r2, r3
 800065c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000660:	4013      	ands	r3, r2
 8000662:	b25b      	sxtb	r3, r3
 8000664:	73bb      	strb	r3, [r7, #14]
				}

				switch (color)
 8000666:	883b      	ldrh	r3, [r7, #0]
 8000668:	2b02      	cmp	r3, #2
 800066a:	d01a      	beq.n	80006a2 <SSD1306_draw_fast_vline_internal+0x102>
 800066c:	2b02      	cmp	r3, #2
 800066e:	dc20      	bgt.n	80006b2 <SSD1306_draw_fast_vline_internal+0x112>
 8000670:	2b00      	cmp	r3, #0
 8000672:	d009      	beq.n	8000688 <SSD1306_draw_fast_vline_internal+0xe8>
 8000674:	2b01      	cmp	r3, #1
 8000676:	d11c      	bne.n	80006b2 <SSD1306_draw_fast_vline_internal+0x112>
				{
					case SSD1306_WHITE:
						*pBuf |= mask;
 8000678:	693b      	ldr	r3, [r7, #16]
 800067a:	781a      	ldrb	r2, [r3, #0]
 800067c:	7bbb      	ldrb	r3, [r7, #14]
 800067e:	4313      	orrs	r3, r2
 8000680:	b2da      	uxtb	r2, r3
 8000682:	693b      	ldr	r3, [r7, #16]
 8000684:	701a      	strb	r2, [r3, #0]
						break;
 8000686:	e014      	b.n	80006b2 <SSD1306_draw_fast_vline_internal+0x112>
					case SSD1306_BLACK:
						*pBuf &= ~mask;
 8000688:	693b      	ldr	r3, [r7, #16]
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	b25a      	sxtb	r2, r3
 800068e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000692:	43db      	mvns	r3, r3
 8000694:	b25b      	sxtb	r3, r3
 8000696:	4013      	ands	r3, r2
 8000698:	b25b      	sxtb	r3, r3
 800069a:	b2da      	uxtb	r2, r3
 800069c:	693b      	ldr	r3, [r7, #16]
 800069e:	701a      	strb	r2, [r3, #0]
						break;
 80006a0:	e007      	b.n	80006b2 <SSD1306_draw_fast_vline_internal+0x112>
					case SSD1306_INVERSE:
						*pBuf ^= mask;
 80006a2:	693b      	ldr	r3, [r7, #16]
 80006a4:	781a      	ldrb	r2, [r3, #0]
 80006a6:	7bbb      	ldrb	r3, [r7, #14]
 80006a8:	4053      	eors	r3, r2
 80006aa:	b2da      	uxtb	r2, r3
 80006ac:	693b      	ldr	r3, [r7, #16]
 80006ae:	701a      	strb	r2, [r3, #0]
						break;
 80006b0:	bf00      	nop
				}
				pBuf += SSD1306_WIDTH;
 80006b2:	693b      	ldr	r3, [r7, #16]
 80006b4:	3380      	adds	r3, #128	; 0x80
 80006b6:	613b      	str	r3, [r7, #16]
			}

			if (h >= mod)
 80006b8:	7dfa      	ldrb	r2, [r7, #23]
 80006ba:	7bfb      	ldrb	r3, [r7, #15]
 80006bc:	429a      	cmp	r2, r3
 80006be:	d35d      	bcc.n	800077c <SSD1306_draw_fast_vline_internal+0x1dc>
			{
				// More to go?
				h -= mod;
 80006c0:	7dfa      	ldrb	r2, [r7, #23]
 80006c2:	7bfb      	ldrb	r3, [r7, #15]
 80006c4:	1ad3      	subs	r3, r2, r3
 80006c6:	75fb      	strb	r3, [r7, #23]
				// Write solid bytes while we can - effectively 8 rows at a time
				if (h >= 8)
 80006c8:	7dfb      	ldrb	r3, [r7, #23]
 80006ca:	2b07      	cmp	r3, #7
 80006cc:	d925      	bls.n	800071a <SSD1306_draw_fast_vline_internal+0x17a>
				{
					if (color == SSD1306_INVERSE)
 80006ce:	883b      	ldrh	r3, [r7, #0]
 80006d0:	2b02      	cmp	r3, #2
 80006d2:	d10f      	bne.n	80006f4 <SSD1306_draw_fast_vline_internal+0x154>
					{
						// separate copy of the code so we don't impact performance of
						// black/white write version with an extra comparison per loop
						do
						{
							*pBuf ^= 0xFF; // Invert byte
 80006d4:	693b      	ldr	r3, [r7, #16]
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	43db      	mvns	r3, r3
 80006da:	b2da      	uxtb	r2, r3
 80006dc:	693b      	ldr	r3, [r7, #16]
 80006de:	701a      	strb	r2, [r3, #0]
							pBuf += SSD1306_WIDTH; // Advance pointer 8 rows
 80006e0:	693b      	ldr	r3, [r7, #16]
 80006e2:	3380      	adds	r3, #128	; 0x80
 80006e4:	613b      	str	r3, [r7, #16]
							h -= 8;        // Subtract 8 rows from height
 80006e6:	7dfb      	ldrb	r3, [r7, #23]
 80006e8:	3b08      	subs	r3, #8
 80006ea:	75fb      	strb	r3, [r7, #23]
						} while (h >= 8);
 80006ec:	7dfb      	ldrb	r3, [r7, #23]
 80006ee:	2b07      	cmp	r3, #7
 80006f0:	d8f0      	bhi.n	80006d4 <SSD1306_draw_fast_vline_internal+0x134>
 80006f2:	e012      	b.n	800071a <SSD1306_draw_fast_vline_internal+0x17a>
					}
					else
					{
						// store a local value to work with
						uint8_t val = (color != SSD1306_BLACK) ? 255 : 0;
 80006f4:	883b      	ldrh	r3, [r7, #0]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SSD1306_draw_fast_vline_internal+0x15e>
 80006fa:	23ff      	movs	r3, #255	; 0xff
 80006fc:	e000      	b.n	8000700 <SSD1306_draw_fast_vline_internal+0x160>
 80006fe:	2300      	movs	r3, #0
 8000700:	733b      	strb	r3, [r7, #12]
						do
						{
							*pBuf = val;   // Set byte
 8000702:	693b      	ldr	r3, [r7, #16]
 8000704:	7b3a      	ldrb	r2, [r7, #12]
 8000706:	701a      	strb	r2, [r3, #0]
							pBuf += SSD1306_WIDTH; // Advance pointer 8 rows
 8000708:	693b      	ldr	r3, [r7, #16]
 800070a:	3380      	adds	r3, #128	; 0x80
 800070c:	613b      	str	r3, [r7, #16]
							h -= 8;        // Subtract 8 rows from height
 800070e:	7dfb      	ldrb	r3, [r7, #23]
 8000710:	3b08      	subs	r3, #8
 8000712:	75fb      	strb	r3, [r7, #23]
						} while (h >= 8);
 8000714:	7dfb      	ldrb	r3, [r7, #23]
 8000716:	2b07      	cmp	r3, #7
 8000718:	d8f3      	bhi.n	8000702 <SSD1306_draw_fast_vline_internal+0x162>
					}
				}

				if (h)
 800071a:	7dfb      	ldrb	r3, [r7, #23]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d02d      	beq.n	800077c <SSD1306_draw_fast_vline_internal+0x1dc>
				{
					// Do the final partial byte, if necessary
					mod = h & 7;
 8000720:	7dfb      	ldrb	r3, [r7, #23]
 8000722:	f003 0307 	and.w	r3, r3, #7
 8000726:	73fb      	strb	r3, [r7, #15]
					// uint8_t mask = (1 << mod) - 1;
					// note - lookup table results in a nearly 10% performance
					// improvement in fill* functions
					static const uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07,
                                                      0x0F, 0x1F, 0x3F, 0x7F};
					uint8_t mask = (*(const unsigned char *)(&postmask[mod]));
 8000728:	7bfb      	ldrb	r3, [r7, #15]
 800072a:	4a19      	ldr	r2, [pc, #100]	; (8000790 <SSD1306_draw_fast_vline_internal+0x1f0>)
 800072c:	5cd3      	ldrb	r3, [r2, r3]
 800072e:	72fb      	strb	r3, [r7, #11]
					switch (color)
 8000730:	883b      	ldrh	r3, [r7, #0]
 8000732:	2b02      	cmp	r3, #2
 8000734:	d01a      	beq.n	800076c <SSD1306_draw_fast_vline_internal+0x1cc>
 8000736:	2b02      	cmp	r3, #2
 8000738:	dc21      	bgt.n	800077e <SSD1306_draw_fast_vline_internal+0x1de>
 800073a:	2b00      	cmp	r3, #0
 800073c:	d009      	beq.n	8000752 <SSD1306_draw_fast_vline_internal+0x1b2>
 800073e:	2b01      	cmp	r3, #1
 8000740:	d11d      	bne.n	800077e <SSD1306_draw_fast_vline_internal+0x1de>
					{
						case SSD1306_WHITE:
							*pBuf |= mask;
 8000742:	693b      	ldr	r3, [r7, #16]
 8000744:	781a      	ldrb	r2, [r3, #0]
 8000746:	7afb      	ldrb	r3, [r7, #11]
 8000748:	4313      	orrs	r3, r2
 800074a:	b2da      	uxtb	r2, r3
 800074c:	693b      	ldr	r3, [r7, #16]
 800074e:	701a      	strb	r2, [r3, #0]
							break;
 8000750:	e015      	b.n	800077e <SSD1306_draw_fast_vline_internal+0x1de>
						case SSD1306_BLACK:
							*pBuf &= ~mask;
 8000752:	693b      	ldr	r3, [r7, #16]
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	b25a      	sxtb	r2, r3
 8000758:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800075c:	43db      	mvns	r3, r3
 800075e:	b25b      	sxtb	r3, r3
 8000760:	4013      	ands	r3, r2
 8000762:	b25b      	sxtb	r3, r3
 8000764:	b2da      	uxtb	r2, r3
 8000766:	693b      	ldr	r3, [r7, #16]
 8000768:	701a      	strb	r2, [r3, #0]
							break;
 800076a:	e008      	b.n	800077e <SSD1306_draw_fast_vline_internal+0x1de>
						case SSD1306_INVERSE:
							*pBuf ^= mask;
 800076c:	693b      	ldr	r3, [r7, #16]
 800076e:	781a      	ldrb	r2, [r3, #0]
 8000770:	7afb      	ldrb	r3, [r7, #11]
 8000772:	4053      	eors	r3, r2
 8000774:	b2da      	uxtb	r2, r3
 8000776:	693b      	ldr	r3, [r7, #16]
 8000778:	701a      	strb	r2, [r3, #0]
							break;
 800077a:	e000      	b.n	800077e <SSD1306_draw_fast_vline_internal+0x1de>
					}
				}
 800077c:	bf00      	nop
			}
		} // endif positive height
	}   // endif x in bounds
}
 800077e:	bf00      	nop
 8000780:	3718      	adds	r7, #24
 8000782:	46bd      	mov	sp, r7
 8000784:	bc90      	pop	{r4, r7}
 8000786:	4770      	bx	lr
 8000788:	2000008c 	.word	0x2000008c
 800078c:	080076f8 	.word	0x080076f8
 8000790:	08007700 	.word	0x08007700

08000794 <SSD1306_display_repaint>:
    @note   Drawing operations are not visible until this function is
            called. Call after each graphics command, or after a whole set
            of graphics commands, as best needed by one's own application.
*/
void SSD1306_display_repaint(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
	uint16_t buf_len = SSD1306_WIDTH * ((SSD1306_HEIGHT + 7) / 8);
 800079a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800079e:	80fb      	strh	r3, [r7, #6]

	SSD1306_send_com(SSD1306_PAGEADDR);
 80007a0:	2022      	movs	r0, #34	; 0x22
 80007a2:	f7ff fd47 	bl	8000234 <SSD1306_send_com>
	SSD1306_send_com(0x00);
 80007a6:	2000      	movs	r0, #0
 80007a8:	f7ff fd44 	bl	8000234 <SSD1306_send_com>
	SSD1306_send_com(0xFF);
 80007ac:	20ff      	movs	r0, #255	; 0xff
 80007ae:	f7ff fd41 	bl	8000234 <SSD1306_send_com>
	SSD1306_send_com(SSD1306_COLUMNADDR);
 80007b2:	2021      	movs	r0, #33	; 0x21
 80007b4:	f7ff fd3e 	bl	8000234 <SSD1306_send_com>
	SSD1306_send_com(0x00);
 80007b8:	2000      	movs	r0, #0
 80007ba:	f7ff fd3b 	bl	8000234 <SSD1306_send_com>

	SSD1306_send_com(SSD1306_WIDTH - 1); // Column end address
 80007be:	207f      	movs	r0, #127	; 0x7f
 80007c0:	f7ff fd38 	bl	8000234 <SSD1306_send_com>

	platform_write_dma(SSD1306_SETSTARTLINE, buffer, buf_len);
 80007c4:	4b05      	ldr	r3, [pc, #20]	; (80007dc <SSD1306_display_repaint+0x48>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	88fa      	ldrh	r2, [r7, #6]
 80007ca:	4619      	mov	r1, r3
 80007cc:	2040      	movs	r0, #64	; 0x40
 80007ce:	f7ff fd17 	bl	8000200 <platform_write_dma>
}
 80007d2:	bf00      	nop
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	2000008c 	.word	0x2000008c

080007e0 <SSD1306_set_rotation>:
    SSD1306_send_com(SSD1306_SETCONTRAST);
    SSD1306_send_com(contrast);
}

void SSD1306_set_rotation(uint8_t rot)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	71fb      	strb	r3, [r7, #7]
	rotation = rot;
 80007ea:	4a04      	ldr	r2, [pc, #16]	; (80007fc <SSD1306_set_rotation+0x1c>)
 80007ec:	79fb      	ldrb	r3, [r7, #7]
 80007ee:	7013      	strb	r3, [r2, #0]
}
 80007f0:	bf00      	nop
 80007f2:	370c      	adds	r7, #12
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr
 80007fc:	20000090 	.word	0x20000090

08000800 <SSD1306_get_rotation>:

uint8_t SSD1306_get_rotation(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
	return rotation;
 8000804:	4b03      	ldr	r3, [pc, #12]	; (8000814 <SSD1306_get_rotation+0x14>)
 8000806:	781b      	ldrb	r3, [r3, #0]
}
 8000808:	4618      	mov	r0, r3
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	20000090 	.word	0x20000090

08000818 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08a      	sub	sp, #40	; 0x28
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800081e:	f107 031c 	add.w	r3, r7, #28
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
 8000836:	611a      	str	r2, [r3, #16]
 8000838:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800083a:	4b2e      	ldr	r3, [pc, #184]	; (80008f4 <MX_ADC1_Init+0xdc>)
 800083c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000840:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000842:	4b2c      	ldr	r3, [pc, #176]	; (80008f4 <MX_ADC1_Init+0xdc>)
 8000844:	2200      	movs	r2, #0
 8000846:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000848:	4b2a      	ldr	r3, [pc, #168]	; (80008f4 <MX_ADC1_Init+0xdc>)
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800084e:	4b29      	ldr	r3, [pc, #164]	; (80008f4 <MX_ADC1_Init+0xdc>)
 8000850:	2200      	movs	r2, #0
 8000852:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000854:	4b27      	ldr	r3, [pc, #156]	; (80008f4 <MX_ADC1_Init+0xdc>)
 8000856:	2200      	movs	r2, #0
 8000858:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800085a:	4b26      	ldr	r3, [pc, #152]	; (80008f4 <MX_ADC1_Init+0xdc>)
 800085c:	2200      	movs	r2, #0
 800085e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000862:	4b24      	ldr	r3, [pc, #144]	; (80008f4 <MX_ADC1_Init+0xdc>)
 8000864:	2200      	movs	r2, #0
 8000866:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000868:	4b22      	ldr	r3, [pc, #136]	; (80008f4 <MX_ADC1_Init+0xdc>)
 800086a:	2201      	movs	r2, #1
 800086c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800086e:	4b21      	ldr	r3, [pc, #132]	; (80008f4 <MX_ADC1_Init+0xdc>)
 8000870:	2200      	movs	r2, #0
 8000872:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000874:	4b1f      	ldr	r3, [pc, #124]	; (80008f4 <MX_ADC1_Init+0xdc>)
 8000876:	2201      	movs	r2, #1
 8000878:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800087a:	4b1e      	ldr	r3, [pc, #120]	; (80008f4 <MX_ADC1_Init+0xdc>)
 800087c:	2200      	movs	r2, #0
 800087e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000882:	4b1c      	ldr	r3, [pc, #112]	; (80008f4 <MX_ADC1_Init+0xdc>)
 8000884:	2204      	movs	r2, #4
 8000886:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000888:	4b1a      	ldr	r3, [pc, #104]	; (80008f4 <MX_ADC1_Init+0xdc>)
 800088a:	2200      	movs	r2, #0
 800088c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800088e:	4b19      	ldr	r3, [pc, #100]	; (80008f4 <MX_ADC1_Init+0xdc>)
 8000890:	2200      	movs	r2, #0
 8000892:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000894:	4817      	ldr	r0, [pc, #92]	; (80008f4 <MX_ADC1_Init+0xdc>)
 8000896:	f000 ff8b 	bl	80017b0 <HAL_ADC_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80008a0:	f000 fb54 	bl	8000f4c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80008a8:	f107 031c 	add.w	r3, r7, #28
 80008ac:	4619      	mov	r1, r3
 80008ae:	4811      	ldr	r0, [pc, #68]	; (80008f4 <MX_ADC1_Init+0xdc>)
 80008b0:	f001 fbd2 	bl	8002058 <HAL_ADCEx_MultiModeConfigChannel>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80008ba:	f000 fb47 	bl	8000f4c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80008be:	2301      	movs	r3, #1
 80008c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008c2:	2301      	movs	r3, #1
 80008c4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008c6:	2300      	movs	r3, #0
 80008c8:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80008ca:	2300      	movs	r3, #0
 80008cc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ce:	2300      	movs	r3, #0
 80008d0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	4619      	mov	r1, r3
 80008da:	4806      	ldr	r0, [pc, #24]	; (80008f4 <MX_ADC1_Init+0xdc>)
 80008dc:	f001 f8fa 	bl	8001ad4 <HAL_ADC_ConfigChannel>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80008e6:	f000 fb31 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008ea:	bf00      	nop
 80008ec:	3728      	adds	r7, #40	; 0x28
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	200000a0 	.word	0x200000a0

080008f8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b08a      	sub	sp, #40	; 0x28
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000918:	d14c      	bne.n	80009b4 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800091a:	4b28      	ldr	r3, [pc, #160]	; (80009bc <HAL_ADC_MspInit+0xc4>)
 800091c:	695b      	ldr	r3, [r3, #20]
 800091e:	4a27      	ldr	r2, [pc, #156]	; (80009bc <HAL_ADC_MspInit+0xc4>)
 8000920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000924:	6153      	str	r3, [r2, #20]
 8000926:	4b25      	ldr	r3, [pc, #148]	; (80009bc <HAL_ADC_MspInit+0xc4>)
 8000928:	695b      	ldr	r3, [r3, #20]
 800092a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800092e:	613b      	str	r3, [r7, #16]
 8000930:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000932:	4b22      	ldr	r3, [pc, #136]	; (80009bc <HAL_ADC_MspInit+0xc4>)
 8000934:	695b      	ldr	r3, [r3, #20]
 8000936:	4a21      	ldr	r2, [pc, #132]	; (80009bc <HAL_ADC_MspInit+0xc4>)
 8000938:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800093c:	6153      	str	r3, [r2, #20]
 800093e:	4b1f      	ldr	r3, [pc, #124]	; (80009bc <HAL_ADC_MspInit+0xc4>)
 8000940:	695b      	ldr	r3, [r3, #20]
 8000942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800094a:	2303      	movs	r3, #3
 800094c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800094e:	2303      	movs	r3, #3
 8000950:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000956:	f107 0314 	add.w	r3, r7, #20
 800095a:	4619      	mov	r1, r3
 800095c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000960:	f002 f896 	bl	8002a90 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000964:	4b16      	ldr	r3, [pc, #88]	; (80009c0 <HAL_ADC_MspInit+0xc8>)
 8000966:	4a17      	ldr	r2, [pc, #92]	; (80009c4 <HAL_ADC_MspInit+0xcc>)
 8000968:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800096a:	4b15      	ldr	r3, [pc, #84]	; (80009c0 <HAL_ADC_MspInit+0xc8>)
 800096c:	2200      	movs	r2, #0
 800096e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000970:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <HAL_ADC_MspInit+0xc8>)
 8000972:	2200      	movs	r2, #0
 8000974:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000976:	4b12      	ldr	r3, [pc, #72]	; (80009c0 <HAL_ADC_MspInit+0xc8>)
 8000978:	2280      	movs	r2, #128	; 0x80
 800097a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800097c:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <HAL_ADC_MspInit+0xc8>)
 800097e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000982:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000984:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <HAL_ADC_MspInit+0xc8>)
 8000986:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800098a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800098c:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <HAL_ADC_MspInit+0xc8>)
 800098e:	2200      	movs	r2, #0
 8000990:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000992:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <HAL_ADC_MspInit+0xc8>)
 8000994:	2200      	movs	r2, #0
 8000996:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000998:	4809      	ldr	r0, [pc, #36]	; (80009c0 <HAL_ADC_MspInit+0xc8>)
 800099a:	f001 fe96 	bl	80026ca <HAL_DMA_Init>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 80009a4:	f000 fad2 	bl	8000f4c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	4a05      	ldr	r2, [pc, #20]	; (80009c0 <HAL_ADC_MspInit+0xc8>)
 80009ac:	639a      	str	r2, [r3, #56]	; 0x38
 80009ae:	4a04      	ldr	r2, [pc, #16]	; (80009c0 <HAL_ADC_MspInit+0xc8>)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80009b4:	bf00      	nop
 80009b6:	3728      	adds	r7, #40	; 0x28
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	40021000 	.word	0x40021000
 80009c0:	200000f0 	.word	0x200000f0
 80009c4:	40020008 	.word	0x40020008

080009c8 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80009cc:	4b16      	ldr	r3, [pc, #88]	; (8000a28 <MX_CAN_Init+0x60>)
 80009ce:	4a17      	ldr	r2, [pc, #92]	; (8000a2c <MX_CAN_Init+0x64>)
 80009d0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80009d2:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <MX_CAN_Init+0x60>)
 80009d4:	2210      	movs	r2, #16
 80009d6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80009d8:	4b13      	ldr	r3, [pc, #76]	; (8000a28 <MX_CAN_Init+0x60>)
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80009de:	4b12      	ldr	r3, [pc, #72]	; (8000a28 <MX_CAN_Init+0x60>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80009e4:	4b10      	ldr	r3, [pc, #64]	; (8000a28 <MX_CAN_Init+0x60>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80009ea:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <MX_CAN_Init+0x60>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80009f0:	4b0d      	ldr	r3, [pc, #52]	; (8000a28 <MX_CAN_Init+0x60>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80009f6:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <MX_CAN_Init+0x60>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80009fc:	4b0a      	ldr	r3, [pc, #40]	; (8000a28 <MX_CAN_Init+0x60>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000a02:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <MX_CAN_Init+0x60>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000a08:	4b07      	ldr	r3, [pc, #28]	; (8000a28 <MX_CAN_Init+0x60>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000a0e:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <MX_CAN_Init+0x60>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000a14:	4804      	ldr	r0, [pc, #16]	; (8000a28 <MX_CAN_Init+0x60>)
 8000a16:	f001 fc4b 	bl	80022b0 <HAL_CAN_Init>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8000a20:	f000 fa94 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20000134 	.word	0x20000134
 8000a2c:	40006400 	.word	0x40006400

08000a30 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08a      	sub	sp, #40	; 0x28
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a18      	ldr	r2, [pc, #96]	; (8000ab0 <HAL_CAN_MspInit+0x80>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d129      	bne.n	8000aa6 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000a52:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <HAL_CAN_MspInit+0x84>)
 8000a54:	69db      	ldr	r3, [r3, #28]
 8000a56:	4a17      	ldr	r2, [pc, #92]	; (8000ab4 <HAL_CAN_MspInit+0x84>)
 8000a58:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a5c:	61d3      	str	r3, [r2, #28]
 8000a5e:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <HAL_CAN_MspInit+0x84>)
 8000a60:	69db      	ldr	r3, [r3, #28]
 8000a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a66:	613b      	str	r3, [r7, #16]
 8000a68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6a:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <HAL_CAN_MspInit+0x84>)
 8000a6c:	695b      	ldr	r3, [r3, #20]
 8000a6e:	4a11      	ldr	r2, [pc, #68]	; (8000ab4 <HAL_CAN_MspInit+0x84>)
 8000a70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a74:	6153      	str	r3, [r2, #20]
 8000a76:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <HAL_CAN_MspInit+0x84>)
 8000a78:	695b      	ldr	r3, [r3, #20]
 8000a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000a82:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a90:	2303      	movs	r3, #3
 8000a92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000a94:	2309      	movs	r3, #9
 8000a96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa2:	f001 fff5 	bl	8002a90 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 8000aa6:	bf00      	nop
 8000aa8:	3728      	adds	r7, #40	; 0x28
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40006400 	.word	0x40006400
 8000ab4:	40021000 	.word	0x40021000

08000ab8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000abe:	4b14      	ldr	r3, [pc, #80]	; (8000b10 <MX_DMA_Init+0x58>)
 8000ac0:	695b      	ldr	r3, [r3, #20]
 8000ac2:	4a13      	ldr	r2, [pc, #76]	; (8000b10 <MX_DMA_Init+0x58>)
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	6153      	str	r3, [r2, #20]
 8000aca:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <MX_DMA_Init+0x58>)
 8000acc:	695b      	ldr	r3, [r3, #20]
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2100      	movs	r1, #0
 8000ada:	200b      	movs	r0, #11
 8000adc:	f001 fdbf 	bl	800265e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ae0:	200b      	movs	r0, #11
 8000ae2:	f001 fdd8 	bl	8002696 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2100      	movs	r1, #0
 8000aea:	200e      	movs	r0, #14
 8000aec:	f001 fdb7 	bl	800265e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000af0:	200e      	movs	r0, #14
 8000af2:	f001 fdd0 	bl	8002696 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2100      	movs	r1, #0
 8000afa:	2011      	movs	r0, #17
 8000afc:	f001 fdaf 	bl	800265e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000b00:	2011      	movs	r0, #17
 8000b02:	f001 fdc8 	bl	8002696 <HAL_NVIC_EnableIRQ>

}
 8000b06:	bf00      	nop
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40021000 	.word	0x40021000

08000b14 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b088      	sub	sp, #32
 8000b18:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1a:	f107 030c 	add.w	r3, r7, #12
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
 8000b26:	60da      	str	r2, [r3, #12]
 8000b28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b2a:	4b35      	ldr	r3, [pc, #212]	; (8000c00 <MX_GPIO_Init+0xec>)
 8000b2c:	695b      	ldr	r3, [r3, #20]
 8000b2e:	4a34      	ldr	r2, [pc, #208]	; (8000c00 <MX_GPIO_Init+0xec>)
 8000b30:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b34:	6153      	str	r3, [r2, #20]
 8000b36:	4b32      	ldr	r3, [pc, #200]	; (8000c00 <MX_GPIO_Init+0xec>)
 8000b38:	695b      	ldr	r3, [r3, #20]
 8000b3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b3e:	60bb      	str	r3, [r7, #8]
 8000b40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b42:	4b2f      	ldr	r3, [pc, #188]	; (8000c00 <MX_GPIO_Init+0xec>)
 8000b44:	695b      	ldr	r3, [r3, #20]
 8000b46:	4a2e      	ldr	r2, [pc, #184]	; (8000c00 <MX_GPIO_Init+0xec>)
 8000b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b4c:	6153      	str	r3, [r2, #20]
 8000b4e:	4b2c      	ldr	r3, [pc, #176]	; (8000c00 <MX_GPIO_Init+0xec>)
 8000b50:	695b      	ldr	r3, [r3, #20]
 8000b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5a:	4b29      	ldr	r3, [pc, #164]	; (8000c00 <MX_GPIO_Init+0xec>)
 8000b5c:	695b      	ldr	r3, [r3, #20]
 8000b5e:	4a28      	ldr	r2, [pc, #160]	; (8000c00 <MX_GPIO_Init+0xec>)
 8000b60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b64:	6153      	str	r3, [r2, #20]
 8000b66:	4b26      	ldr	r3, [pc, #152]	; (8000c00 <MX_GPIO_Init+0xec>)
 8000b68:	695b      	ldr	r3, [r3, #20]
 8000b6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b6e:	603b      	str	r3, [r7, #0]
 8000b70:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CMES_ENA_Pin|M2_INB_Pin|M1_INB_Pin|M1_INA_Pin
 8000b72:	2200      	movs	r2, #0
 8000b74:	f240 7114 	movw	r1, #1812	; 0x714
 8000b78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b7c:	f002 f8fa 	bl	8002d74 <HAL_GPIO_WritePin>
                          |M1_ENA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M2_ENA_Pin|M2_INA_Pin, GPIO_PIN_RESET);
 8000b80:	2200      	movs	r2, #0
 8000b82:	2103      	movs	r1, #3
 8000b84:	481f      	ldr	r0, [pc, #124]	; (8000c04 <MX_GPIO_Init+0xf0>)
 8000b86:	f002 f8f5 	bl	8002d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HX_DOUT_Pin;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HX_DOUT_GPIO_Port, &GPIO_InitStruct);
 8000b96:	f107 030c 	add.w	r3, r7, #12
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	481a      	ldr	r0, [pc, #104]	; (8000c08 <MX_GPIO_Init+0xf4>)
 8000b9e:	f001 ff77 	bl	8002a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = CMES_ENA_Pin|M2_INB_Pin|M1_INB_Pin|M1_INA_Pin
 8000ba2:	f240 7314 	movw	r3, #1812	; 0x714
 8000ba6:	60fb      	str	r3, [r7, #12]
                          |M1_ENA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb4:	f107 030c 	add.w	r3, r7, #12
 8000bb8:	4619      	mov	r1, r3
 8000bba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bbe:	f001 ff67 	bl	8002a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_SW_Pin;
 8000bc2:	2320      	movs	r3, #32
 8000bc4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ENC_SW_GPIO_Port, &GPIO_InitStruct);
 8000bce:	f107 030c 	add.w	r3, r7, #12
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bd8:	f001 ff5a 	bl	8002a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = M2_ENA_Pin|M2_INA_Pin;
 8000bdc:	2303      	movs	r3, #3
 8000bde:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be0:	2301      	movs	r3, #1
 8000be2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bec:	f107 030c 	add.w	r3, r7, #12
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4804      	ldr	r0, [pc, #16]	; (8000c04 <MX_GPIO_Init+0xf0>)
 8000bf4:	f001 ff4c 	bl	8002a90 <HAL_GPIO_Init>

}
 8000bf8:	bf00      	nop
 8000bfa:	3720      	adds	r7, #32
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40021000 	.word	0x40021000
 8000c04:	48000400 	.word	0x48000400
 8000c08:	48001400 	.word	0x48001400

08000c0c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c10:	4b1b      	ldr	r3, [pc, #108]	; (8000c80 <MX_I2C1_Init+0x74>)
 8000c12:	4a1c      	ldr	r2, [pc, #112]	; (8000c84 <MX_I2C1_Init+0x78>)
 8000c14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8000c16:	4b1a      	ldr	r3, [pc, #104]	; (8000c80 <MX_I2C1_Init+0x74>)
 8000c18:	f240 220b 	movw	r2, #523	; 0x20b
 8000c1c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c1e:	4b18      	ldr	r3, [pc, #96]	; (8000c80 <MX_I2C1_Init+0x74>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c24:	4b16      	ldr	r3, [pc, #88]	; (8000c80 <MX_I2C1_Init+0x74>)
 8000c26:	2201      	movs	r2, #1
 8000c28:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c2a:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <MX_I2C1_Init+0x74>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c30:	4b13      	ldr	r3, [pc, #76]	; (8000c80 <MX_I2C1_Init+0x74>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c36:	4b12      	ldr	r3, [pc, #72]	; (8000c80 <MX_I2C1_Init+0x74>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c3c:	4b10      	ldr	r3, [pc, #64]	; (8000c80 <MX_I2C1_Init+0x74>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c42:	4b0f      	ldr	r3, [pc, #60]	; (8000c80 <MX_I2C1_Init+0x74>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c48:	480d      	ldr	r0, [pc, #52]	; (8000c80 <MX_I2C1_Init+0x74>)
 8000c4a:	f002 f8ab 	bl	8002da4 <HAL_I2C_Init>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c54:	f000 f97a 	bl	8000f4c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c58:	2100      	movs	r1, #0
 8000c5a:	4809      	ldr	r0, [pc, #36]	; (8000c80 <MX_I2C1_Init+0x74>)
 8000c5c:	f003 fe52 	bl	8004904 <HAL_I2CEx_ConfigAnalogFilter>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000c66:	f000 f971 	bl	8000f4c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	4804      	ldr	r0, [pc, #16]	; (8000c80 <MX_I2C1_Init+0x74>)
 8000c6e:	f003 fe94 	bl	800499a <HAL_I2CEx_ConfigDigitalFilter>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000c78:	f000 f968 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c7c:	bf00      	nop
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	200001a0 	.word	0x200001a0
 8000c84:	40005400 	.word	0x40005400

08000c88 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08a      	sub	sp, #40	; 0x28
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c90:	f107 0314 	add.w	r3, r7, #20
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
 8000c9e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a35      	ldr	r2, [pc, #212]	; (8000d7c <HAL_I2C_MspInit+0xf4>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d164      	bne.n	8000d74 <HAL_I2C_MspInit+0xec>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000caa:	4b35      	ldr	r3, [pc, #212]	; (8000d80 <HAL_I2C_MspInit+0xf8>)
 8000cac:	695b      	ldr	r3, [r3, #20]
 8000cae:	4a34      	ldr	r2, [pc, #208]	; (8000d80 <HAL_I2C_MspInit+0xf8>)
 8000cb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cb4:	6153      	str	r3, [r2, #20]
 8000cb6:	4b32      	ldr	r3, [pc, #200]	; (8000d80 <HAL_I2C_MspInit+0xf8>)
 8000cb8:	695b      	ldr	r3, [r3, #20]
 8000cba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cbe:	613b      	str	r3, [r7, #16]
 8000cc0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 8000cc2:	23c0      	movs	r3, #192	; 0xc0
 8000cc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cc6:	2312      	movs	r3, #18
 8000cc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cd2:	2304      	movs	r3, #4
 8000cd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd6:	f107 0314 	add.w	r3, r7, #20
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4829      	ldr	r0, [pc, #164]	; (8000d84 <HAL_I2C_MspInit+0xfc>)
 8000cde:	f001 fed7 	bl	8002a90 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ce2:	4b27      	ldr	r3, [pc, #156]	; (8000d80 <HAL_I2C_MspInit+0xf8>)
 8000ce4:	69db      	ldr	r3, [r3, #28]
 8000ce6:	4a26      	ldr	r2, [pc, #152]	; (8000d80 <HAL_I2C_MspInit+0xf8>)
 8000ce8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cec:	61d3      	str	r3, [r2, #28]
 8000cee:	4b24      	ldr	r3, [pc, #144]	; (8000d80 <HAL_I2C_MspInit+0xf8>)
 8000cf0:	69db      	ldr	r3, [r3, #28]
 8000cf2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel4;
 8000cfa:	4b23      	ldr	r3, [pc, #140]	; (8000d88 <HAL_I2C_MspInit+0x100>)
 8000cfc:	4a23      	ldr	r2, [pc, #140]	; (8000d8c <HAL_I2C_MspInit+0x104>)
 8000cfe:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d00:	4b21      	ldr	r3, [pc, #132]	; (8000d88 <HAL_I2C_MspInit+0x100>)
 8000d02:	2210      	movs	r2, #16
 8000d04:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d06:	4b20      	ldr	r3, [pc, #128]	; (8000d88 <HAL_I2C_MspInit+0x100>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d0c:	4b1e      	ldr	r3, [pc, #120]	; (8000d88 <HAL_I2C_MspInit+0x100>)
 8000d0e:	2280      	movs	r2, #128	; 0x80
 8000d10:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d12:	4b1d      	ldr	r3, [pc, #116]	; (8000d88 <HAL_I2C_MspInit+0x100>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d18:	4b1b      	ldr	r3, [pc, #108]	; (8000d88 <HAL_I2C_MspInit+0x100>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000d1e:	4b1a      	ldr	r3, [pc, #104]	; (8000d88 <HAL_I2C_MspInit+0x100>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000d24:	4b18      	ldr	r3, [pc, #96]	; (8000d88 <HAL_I2C_MspInit+0x100>)
 8000d26:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d2a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000d2c:	4816      	ldr	r0, [pc, #88]	; (8000d88 <HAL_I2C_MspInit+0x100>)
 8000d2e:	f001 fccc 	bl	80026ca <HAL_DMA_Init>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <HAL_I2C_MspInit+0xb4>
    {
      Error_Handler();
 8000d38:	f000 f908 	bl	8000f4c <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_I2C1_TX_DMA1_CH4);
 8000d3c:	4b14      	ldr	r3, [pc, #80]	; (8000d90 <HAL_I2C_MspInit+0x108>)
 8000d3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000d40:	4a13      	ldr	r2, [pc, #76]	; (8000d90 <HAL_I2C_MspInit+0x108>)
 8000d42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d46:	6513      	str	r3, [r2, #80]	; 0x50

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	4a0f      	ldr	r2, [pc, #60]	; (8000d88 <HAL_I2C_MspInit+0x100>)
 8000d4c:	639a      	str	r2, [r3, #56]	; 0x38
 8000d4e:	4a0e      	ldr	r2, [pc, #56]	; (8000d88 <HAL_I2C_MspInit+0x100>)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000d54:	2200      	movs	r2, #0
 8000d56:	2100      	movs	r1, #0
 8000d58:	201f      	movs	r0, #31
 8000d5a:	f001 fc80 	bl	800265e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000d5e:	201f      	movs	r0, #31
 8000d60:	f001 fc99 	bl	8002696 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000d64:	2200      	movs	r2, #0
 8000d66:	2100      	movs	r1, #0
 8000d68:	2020      	movs	r0, #32
 8000d6a:	f001 fc78 	bl	800265e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000d6e:	2020      	movs	r0, #32
 8000d70:	f001 fc91 	bl	8002696 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000d74:	bf00      	nop
 8000d76:	3728      	adds	r7, #40	; 0x28
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40005400 	.word	0x40005400
 8000d80:	40021000 	.word	0x40021000
 8000d84:	48000400 	.word	0x48000400
 8000d88:	2000015c 	.word	0x2000015c
 8000d8c:	40020044 	.word	0x40020044
 8000d90:	40010000 	.word	0x40010000

08000d94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d9a:	f000 fc7f 	bl	800169c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d9e:	f000 f87b 	bl	8000e98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000da2:	f7ff feb7 	bl	8000b14 <MX_GPIO_Init>
  MX_DMA_Init();
 8000da6:	f7ff fe87 	bl	8000ab8 <MX_DMA_Init>
  MX_I2C1_Init();
 8000daa:	f7ff ff2f 	bl	8000c0c <MX_I2C1_Init>
  MX_TIM3_Init();
 8000dae:	f000 f9f5 	bl	800119c <MX_TIM3_Init>
  MX_ADC1_Init();
 8000db2:	f7ff fd31 	bl	8000818 <MX_ADC1_Init>
  MX_CAN_Init();
 8000db6:	f7ff fe07 	bl	80009c8 <MX_CAN_Init>
  MX_USART2_UART_Init();
 8000dba:	f000 fbd1 	bl	8001560 <MX_USART2_UART_Init>
  MX_TIM17_Init();
 8000dbe:	f000 fa43 	bl	8001248 <MX_TIM17_Init>
  MX_TIM2_Init();
 8000dc2:	f000 f991 	bl	80010e8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(100);
 8000dc6:	2064      	movs	r0, #100	; 0x64
 8000dc8:	f000 fcce 	bl	8001768 <HAL_Delay>
  SSD1306_init();
 8000dcc:	f7ff fa42 	bl	8000254 <SSD1306_init>
  int d=0;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	607b      	str	r3, [r7, #4]
  HAL_GPIO_WritePin( M2_INA_GPIO_Port,M2_INA_Pin, GPIO_PIN_SET);
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	2102      	movs	r1, #2
 8000dd8:	4829      	ldr	r0, [pc, #164]	; (8000e80 <main+0xec>)
 8000dda:	f001 ffcb 	bl	8002d74 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(M2_INB_GPIO_Port,M2_INB_Pin, GPIO_PIN_RESET);
 8000dde:	2200      	movs	r2, #0
 8000de0:	2110      	movs	r1, #16
 8000de2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de6:	f001 ffc5 	bl	8002d74 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin( M1_INA_GPIO_Port,M1_INA_Pin, GPIO_PIN_SET);
 8000dea:	2201      	movs	r2, #1
 8000dec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000df0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df4:	f001 ffbe 	bl	8002d74 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(M1_INB_GPIO_Port,M1_INB_Pin, GPIO_PIN_RESET);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e02:	f001 ffb7 	bl	8002d74 <HAL_GPIO_WritePin>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000e06:	210c      	movs	r1, #12
 8000e08:	481e      	ldr	r0, [pc, #120]	; (8000e84 <main+0xf0>)
 8000e0a:	f005 f925 	bl	8006058 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8000e0e:	2100      	movs	r1, #0
 8000e10:	481d      	ldr	r0, [pc, #116]	; (8000e88 <main+0xf4>)
 8000e12:	f005 f921 	bl	8006058 <HAL_TIM_PWM_Start>

  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,65534/2);
 8000e16:	4b1b      	ldr	r3, [pc, #108]	; (8000e84 <main+0xf0>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8000e1e:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_TIM_SET_COMPARE(&htim17,TIM_CHANNEL_1,65534/2);
 8000e20:	4b19      	ldr	r3, [pc, #100]	; (8000e88 <main+0xf4>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8000e28:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000e2a:	213c      	movs	r1, #60	; 0x3c
 8000e2c:	4817      	ldr	r0, [pc, #92]	; (8000e8c <main+0xf8>)
 8000e2e:	f005 faa5 	bl	800637c <HAL_TIM_Encoder_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  da=__HAL_TIM_GET_COMPARE(&htim3,TIM_CHANNEL_1);
 8000e32:	4b16      	ldr	r3, [pc, #88]	; (8000e8c <main+0xf8>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e38:	4a15      	ldr	r2, [pc, #84]	; (8000e90 <main+0xfc>)
 8000e3a:	6013      	str	r3, [r2, #0]
	  db= __HAL_TIM_GET_COUNTER(&htim3);
 8000e3c:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <main+0xf8>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e42:	4a14      	ldr	r2, [pc, #80]	; (8000e94 <main+0x100>)
 8000e44:	6013      	str	r3, [r2, #0]
	  HAL_Delay(1000);
 8000e46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e4a:	f000 fc8d 	bl	8001768 <HAL_Delay>
	  SSD1306_display_clear();
 8000e4e:	f7ff fa8f 	bl	8000370 <SSD1306_display_clear>


	  SSD1306_draw_fast_hline(1, 1, d, SSD1306_INVERSE);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	b21a      	sxth	r2, r3
 8000e56:	2302      	movs	r3, #2
 8000e58:	2101      	movs	r1, #1
 8000e5a:	2001      	movs	r0, #1
 8000e5c:	f7ff fa96 	bl	800038c <SSD1306_draw_fast_hline>
	  HAL_Delay(500);
 8000e60:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e64:	f000 fc80 	bl	8001768 <HAL_Delay>
	  d++;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	607b      	str	r3, [r7, #4]
	  if (d>(8)) d=0;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2b08      	cmp	r3, #8
 8000e72:	dd01      	ble.n	8000e78 <main+0xe4>
 8000e74:	2300      	movs	r3, #0
 8000e76:	607b      	str	r3, [r7, #4]


	  SSD1306_display_repaint();
 8000e78:	f7ff fc8c 	bl	8000794 <SSD1306_display_repaint>
	  da=__HAL_TIM_GET_COMPARE(&htim3,TIM_CHANNEL_1);
 8000e7c:	e7d9      	b.n	8000e32 <main+0x9e>
 8000e7e:	bf00      	nop
 8000e80:	48000400 	.word	0x48000400
 8000e84:	2000028c 	.word	0x2000028c
 8000e88:	200001f4 	.word	0x200001f4
 8000e8c:	20000240 	.word	0x20000240
 8000e90:	200001f0 	.word	0x200001f0
 8000e94:	200001ec 	.word	0x200001ec

08000e98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b096      	sub	sp, #88	; 0x58
 8000e9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e9e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ea2:	2228      	movs	r2, #40	; 0x28
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f006 fb9a 	bl	80075e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eac:	f107 031c 	add.w	r3, r7, #28
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ebc:	1d3b      	adds	r3, r7, #4
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	605a      	str	r2, [r3, #4]
 8000ec4:	609a      	str	r2, [r3, #8]
 8000ec6:	60da      	str	r2, [r3, #12]
 8000ec8:	611a      	str	r2, [r3, #16]
 8000eca:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ed4:	2310      	movs	r3, #16
 8000ed6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000edc:	2300      	movs	r3, #0
 8000ede:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000ee0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000ee4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ee6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000eea:	4618      	mov	r0, r3
 8000eec:	f003 fda2 	bl	8004a34 <HAL_RCC_OscConfig>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000ef6:	f000 f829 	bl	8000f4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000efa:	230f      	movs	r3, #15
 8000efc:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000efe:	2300      	movs	r3, #0
 8000f00:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f02:	2300      	movs	r3, #0
 8000f04:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f06:	2300      	movs	r3, #0
 8000f08:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f0e:	f107 031c 	add.w	r3, r7, #28
 8000f12:	2100      	movs	r1, #0
 8000f14:	4618      	mov	r0, r3
 8000f16:	f004 fc95 	bl	8005844 <HAL_RCC_ClockConfig>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000f20:	f000 f814 	bl	8000f4c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC12;
 8000f24:	23a0      	movs	r3, #160	; 0xa0
 8000f26:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000f28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f2c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f32:	1d3b      	adds	r3, r7, #4
 8000f34:	4618      	mov	r0, r3
 8000f36:	f004 febb 	bl	8005cb0 <HAL_RCCEx_PeriphCLKConfig>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000f40:	f000 f804 	bl	8000f4c <Error_Handler>
  }
}
 8000f44:	bf00      	nop
 8000f46:	3758      	adds	r7, #88	; 0x58
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f50:	b672      	cpsid	i
}
 8000f52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f54:	e7fe      	b.n	8000f54 <Error_Handler+0x8>
	...

08000f58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5e:	4b0f      	ldr	r3, [pc, #60]	; (8000f9c <HAL_MspInit+0x44>)
 8000f60:	699b      	ldr	r3, [r3, #24]
 8000f62:	4a0e      	ldr	r2, [pc, #56]	; (8000f9c <HAL_MspInit+0x44>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	6193      	str	r3, [r2, #24]
 8000f6a:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <HAL_MspInit+0x44>)
 8000f6c:	699b      	ldr	r3, [r3, #24]
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f76:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <HAL_MspInit+0x44>)
 8000f78:	69db      	ldr	r3, [r3, #28]
 8000f7a:	4a08      	ldr	r2, [pc, #32]	; (8000f9c <HAL_MspInit+0x44>)
 8000f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f80:	61d3      	str	r3, [r2, #28]
 8000f82:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <HAL_MspInit+0x44>)
 8000f84:	69db      	ldr	r3, [r3, #28]
 8000f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f8a:	603b      	str	r3, [r7, #0]
 8000f8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	40021000 	.word	0x40021000

08000fa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fa4:	e7fe      	b.n	8000fa4 <NMI_Handler+0x4>

08000fa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000faa:	e7fe      	b.n	8000faa <HardFault_Handler+0x4>

08000fac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fb0:	e7fe      	b.n	8000fb0 <MemManage_Handler+0x4>

08000fb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fb6:	e7fe      	b.n	8000fb6 <BusFault_Handler+0x4>

08000fb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <UsageFault_Handler+0x4>

08000fbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr

08000fda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fec:	f000 fb9c 	bl	8001728 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ff0:	bf00      	nop
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ff8:	4802      	ldr	r0, [pc, #8]	; (8001004 <DMA1_Channel1_IRQHandler+0x10>)
 8000ffa:	f001 fc4a 	bl	8002892 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	200000f0 	.word	0x200000f0

08001008 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800100c:	4802      	ldr	r0, [pc, #8]	; (8001018 <DMA1_Channel4_IRQHandler+0x10>)
 800100e:	f001 fc40 	bl	8002892 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	2000015c 	.word	0x2000015c

0800101c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim17_ch1_up);
 8001020:	4802      	ldr	r0, [pc, #8]	; (800102c <DMA1_Channel7_IRQHandler+0x10>)
 8001022:	f001 fc36 	bl	8002892 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	200002d8 	.word	0x200002d8

08001030 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXT line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001034:	4802      	ldr	r0, [pc, #8]	; (8001040 <I2C1_EV_IRQHandler+0x10>)
 8001036:	f002 f94f 	bl	80032d8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	200001a0 	.word	0x200001a0

08001044 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001048:	4802      	ldr	r0, [pc, #8]	; (8001054 <I2C1_ER_IRQHandler+0x10>)
 800104a:	f002 f95f 	bl	800330c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	200001a0 	.word	0x200001a0

08001058 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001060:	4a14      	ldr	r2, [pc, #80]	; (80010b4 <_sbrk+0x5c>)
 8001062:	4b15      	ldr	r3, [pc, #84]	; (80010b8 <_sbrk+0x60>)
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800106c:	4b13      	ldr	r3, [pc, #76]	; (80010bc <_sbrk+0x64>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d102      	bne.n	800107a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001074:	4b11      	ldr	r3, [pc, #68]	; (80010bc <_sbrk+0x64>)
 8001076:	4a12      	ldr	r2, [pc, #72]	; (80010c0 <_sbrk+0x68>)
 8001078:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800107a:	4b10      	ldr	r3, [pc, #64]	; (80010bc <_sbrk+0x64>)
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4413      	add	r3, r2
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	429a      	cmp	r2, r3
 8001086:	d207      	bcs.n	8001098 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001088:	f006 fa78 	bl	800757c <__errno>
 800108c:	4603      	mov	r3, r0
 800108e:	220c      	movs	r2, #12
 8001090:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001092:	f04f 33ff 	mov.w	r3, #4294967295
 8001096:	e009      	b.n	80010ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001098:	4b08      	ldr	r3, [pc, #32]	; (80010bc <_sbrk+0x64>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800109e:	4b07      	ldr	r3, [pc, #28]	; (80010bc <_sbrk+0x64>)
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4413      	add	r3, r2
 80010a6:	4a05      	ldr	r2, [pc, #20]	; (80010bc <_sbrk+0x64>)
 80010a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010aa:	68fb      	ldr	r3, [r7, #12]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3718      	adds	r7, #24
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20003000 	.word	0x20003000
 80010b8:	00000400 	.word	0x00000400
 80010bc:	20000094 	.word	0x20000094
 80010c0:	200003b8 	.word	0x200003b8

080010c4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010c8:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <SystemInit+0x20>)
 80010ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010ce:	4a05      	ldr	r2, [pc, #20]	; (80010e4 <SystemInit+0x20>)
 80010d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	e000ed00 	.word	0xe000ed00

080010e8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim17;
DMA_HandleTypeDef hdma_tim17_ch1_up;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08a      	sub	sp, #40	; 0x28
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ee:	f107 031c 	add.w	r3, r7, #28
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010fa:	463b      	mov	r3, r7
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	611a      	str	r2, [r3, #16]
 8001108:	615a      	str	r2, [r3, #20]
 800110a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800110c:	4b22      	ldr	r3, [pc, #136]	; (8001198 <MX_TIM2_Init+0xb0>)
 800110e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001112:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001114:	4b20      	ldr	r3, [pc, #128]	; (8001198 <MX_TIM2_Init+0xb0>)
 8001116:	2200      	movs	r2, #0
 8001118:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800111a:	4b1f      	ldr	r3, [pc, #124]	; (8001198 <MX_TIM2_Init+0xb0>)
 800111c:	2200      	movs	r2, #0
 800111e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001120:	4b1d      	ldr	r3, [pc, #116]	; (8001198 <MX_TIM2_Init+0xb0>)
 8001122:	f04f 32ff 	mov.w	r2, #4294967295
 8001126:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001128:	4b1b      	ldr	r3, [pc, #108]	; (8001198 <MX_TIM2_Init+0xb0>)
 800112a:	2200      	movs	r2, #0
 800112c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800112e:	4b1a      	ldr	r3, [pc, #104]	; (8001198 <MX_TIM2_Init+0xb0>)
 8001130:	2200      	movs	r2, #0
 8001132:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001134:	4818      	ldr	r0, [pc, #96]	; (8001198 <MX_TIM2_Init+0xb0>)
 8001136:	f004 ff38 	bl	8005faa <HAL_TIM_PWM_Init>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001140:	f7ff ff04 	bl	8000f4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001144:	2300      	movs	r3, #0
 8001146:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001148:	2300      	movs	r3, #0
 800114a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800114c:	f107 031c 	add.w	r3, r7, #28
 8001150:	4619      	mov	r1, r3
 8001152:	4811      	ldr	r0, [pc, #68]	; (8001198 <MX_TIM2_Init+0xb0>)
 8001154:	f005 fdf8 	bl	8006d48 <HAL_TIMEx_MasterConfigSynchronization>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800115e:	f7ff fef5 	bl	8000f4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001162:	2360      	movs	r3, #96	; 0x60
 8001164:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800116a:	2300      	movs	r3, #0
 800116c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800116e:	2300      	movs	r3, #0
 8001170:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001172:	463b      	mov	r3, r7
 8001174:	220c      	movs	r2, #12
 8001176:	4619      	mov	r1, r3
 8001178:	4807      	ldr	r0, [pc, #28]	; (8001198 <MX_TIM2_Init+0xb0>)
 800117a:	f005 f98d 	bl	8006498 <HAL_TIM_PWM_ConfigChannel>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001184:	f7ff fee2 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001188:	4803      	ldr	r0, [pc, #12]	; (8001198 <MX_TIM2_Init+0xb0>)
 800118a:	f000 f98f 	bl	80014ac <HAL_TIM_MspPostInit>

}
 800118e:	bf00      	nop
 8001190:	3728      	adds	r7, #40	; 0x28
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	2000028c 	.word	0x2000028c

0800119c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08c      	sub	sp, #48	; 0x30
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80011a2:	f107 030c 	add.w	r3, r7, #12
 80011a6:	2224      	movs	r2, #36	; 0x24
 80011a8:	2100      	movs	r1, #0
 80011aa:	4618      	mov	r0, r3
 80011ac:	f006 fa18 	bl	80075e0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b0:	463b      	mov	r3, r7
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]
 80011b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011ba:	4b21      	ldr	r3, [pc, #132]	; (8001240 <MX_TIM3_Init+0xa4>)
 80011bc:	4a21      	ldr	r2, [pc, #132]	; (8001244 <MX_TIM3_Init+0xa8>)
 80011be:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80011c0:	4b1f      	ldr	r3, [pc, #124]	; (8001240 <MX_TIM3_Init+0xa4>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c6:	4b1e      	ldr	r3, [pc, #120]	; (8001240 <MX_TIM3_Init+0xa4>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80011cc:	4b1c      	ldr	r3, [pc, #112]	; (8001240 <MX_TIM3_Init+0xa4>)
 80011ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d4:	4b1a      	ldr	r3, [pc, #104]	; (8001240 <MX_TIM3_Init+0xa4>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011da:	4b19      	ldr	r3, [pc, #100]	; (8001240 <MX_TIM3_Init+0xa4>)
 80011dc:	2200      	movs	r2, #0
 80011de:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80011e0:	2303      	movs	r3, #3
 80011e2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80011e4:	2300      	movs	r3, #0
 80011e6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80011e8:	2301      	movs	r3, #1
 80011ea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80011ec:	2300      	movs	r3, #0
 80011ee:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80011f4:	2300      	movs	r3, #0
 80011f6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80011f8:	2301      	movs	r3, #1
 80011fa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80011fc:	2300      	movs	r3, #0
 80011fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001200:	2300      	movs	r3, #0
 8001202:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001204:	f107 030c 	add.w	r3, r7, #12
 8001208:	4619      	mov	r1, r3
 800120a:	480d      	ldr	r0, [pc, #52]	; (8001240 <MX_TIM3_Init+0xa4>)
 800120c:	f005 f810 	bl	8006230 <HAL_TIM_Encoder_Init>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001216:	f7ff fe99 	bl	8000f4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800121a:	2300      	movs	r3, #0
 800121c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800121e:	2300      	movs	r3, #0
 8001220:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001222:	463b      	mov	r3, r7
 8001224:	4619      	mov	r1, r3
 8001226:	4806      	ldr	r0, [pc, #24]	; (8001240 <MX_TIM3_Init+0xa4>)
 8001228:	f005 fd8e 	bl	8006d48 <HAL_TIMEx_MasterConfigSynchronization>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001232:	f7ff fe8b 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001236:	bf00      	nop
 8001238:	3730      	adds	r7, #48	; 0x30
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	20000240 	.word	0x20000240
 8001244:	40000400 	.word	0x40000400

08001248 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b092      	sub	sp, #72	; 0x48
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800124e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	609a      	str	r2, [r3, #8]
 800125a:	60da      	str	r2, [r3, #12]
 800125c:	611a      	str	r2, [r3, #16]
 800125e:	615a      	str	r2, [r3, #20]
 8001260:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001262:	463b      	mov	r3, r7
 8001264:	222c      	movs	r2, #44	; 0x2c
 8001266:	2100      	movs	r1, #0
 8001268:	4618      	mov	r0, r3
 800126a:	f006 f9b9 	bl	80075e0 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800126e:	4b31      	ldr	r3, [pc, #196]	; (8001334 <MX_TIM17_Init+0xec>)
 8001270:	4a31      	ldr	r2, [pc, #196]	; (8001338 <MX_TIM17_Init+0xf0>)
 8001272:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8001274:	4b2f      	ldr	r3, [pc, #188]	; (8001334 <MX_TIM17_Init+0xec>)
 8001276:	2200      	movs	r2, #0
 8001278:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800127a:	4b2e      	ldr	r3, [pc, #184]	; (8001334 <MX_TIM17_Init+0xec>)
 800127c:	2200      	movs	r2, #0
 800127e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8001280:	4b2c      	ldr	r3, [pc, #176]	; (8001334 <MX_TIM17_Init+0xec>)
 8001282:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001286:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001288:	4b2a      	ldr	r3, [pc, #168]	; (8001334 <MX_TIM17_Init+0xec>)
 800128a:	2200      	movs	r2, #0
 800128c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800128e:	4b29      	ldr	r3, [pc, #164]	; (8001334 <MX_TIM17_Init+0xec>)
 8001290:	2200      	movs	r2, #0
 8001292:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001294:	4b27      	ldr	r3, [pc, #156]	; (8001334 <MX_TIM17_Init+0xec>)
 8001296:	2200      	movs	r2, #0
 8001298:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800129a:	4826      	ldr	r0, [pc, #152]	; (8001334 <MX_TIM17_Init+0xec>)
 800129c:	f004 fe2e 	bl	8005efc <HAL_TIM_Base_Init>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 80012a6:	f7ff fe51 	bl	8000f4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80012aa:	4822      	ldr	r0, [pc, #136]	; (8001334 <MX_TIM17_Init+0xec>)
 80012ac:	f004 fe7d 	bl	8005faa <HAL_TIM_PWM_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 80012b6:	f7ff fe49 	bl	8000f4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012ba:	2360      	movs	r3, #96	; 0x60
 80012bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 32767;
 80012be:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80012c2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012c4:	2300      	movs	r3, #0
 80012c6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012c8:	2300      	movs	r3, #0
 80012ca:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012cc:	2300      	movs	r3, #0
 80012ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012d0:	2300      	movs	r3, #0
 80012d2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012d4:	2300      	movs	r3, #0
 80012d6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012dc:	2200      	movs	r2, #0
 80012de:	4619      	mov	r1, r3
 80012e0:	4814      	ldr	r0, [pc, #80]	; (8001334 <MX_TIM17_Init+0xec>)
 80012e2:	f005 f8d9 	bl	8006498 <HAL_TIM_PWM_ConfigChannel>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_TIM17_Init+0xa8>
  {
    Error_Handler();
 80012ec:	f7ff fe2e 	bl	8000f4c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012f0:	2300      	movs	r3, #0
 80012f2:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012f4:	2300      	movs	r3, #0
 80012f6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012f8:	2300      	movs	r3, #0
 80012fa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012fc:	2300      	movs	r3, #0
 80012fe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001300:	2300      	movs	r3, #0
 8001302:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001304:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001308:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800130a:	2300      	movs	r3, #0
 800130c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800130e:	2300      	movs	r3, #0
 8001310:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001312:	463b      	mov	r3, r7
 8001314:	4619      	mov	r1, r3
 8001316:	4807      	ldr	r0, [pc, #28]	; (8001334 <MX_TIM17_Init+0xec>)
 8001318:	f005 fd84 	bl	8006e24 <HAL_TIMEx_ConfigBreakDeadTime>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_TIM17_Init+0xde>
  {
    Error_Handler();
 8001322:	f7ff fe13 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8001326:	4803      	ldr	r0, [pc, #12]	; (8001334 <MX_TIM17_Init+0xec>)
 8001328:	f000 f8c0 	bl	80014ac <HAL_TIM_MspPostInit>

}
 800132c:	bf00      	nop
 800132e:	3748      	adds	r7, #72	; 0x48
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	200001f4 	.word	0x200001f4
 8001338:	40014800 	.word	0x40014800

0800133c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800134c:	d10b      	bne.n	8001366 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800134e:	4b09      	ldr	r3, [pc, #36]	; (8001374 <HAL_TIM_PWM_MspInit+0x38>)
 8001350:	69db      	ldr	r3, [r3, #28]
 8001352:	4a08      	ldr	r2, [pc, #32]	; (8001374 <HAL_TIM_PWM_MspInit+0x38>)
 8001354:	f043 0301 	orr.w	r3, r3, #1
 8001358:	61d3      	str	r3, [r2, #28]
 800135a:	4b06      	ldr	r3, [pc, #24]	; (8001374 <HAL_TIM_PWM_MspInit+0x38>)
 800135c:	69db      	ldr	r3, [r3, #28]
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001366:	bf00      	nop
 8001368:	3714      	adds	r7, #20
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	40021000 	.word	0x40021000

08001378 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b08a      	sub	sp, #40	; 0x28
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001380:	f107 0314 	add.w	r3, r7, #20
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]
 800138e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a17      	ldr	r2, [pc, #92]	; (80013f4 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d128      	bne.n	80013ec <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800139a:	4b17      	ldr	r3, [pc, #92]	; (80013f8 <HAL_TIM_Encoder_MspInit+0x80>)
 800139c:	69db      	ldr	r3, [r3, #28]
 800139e:	4a16      	ldr	r2, [pc, #88]	; (80013f8 <HAL_TIM_Encoder_MspInit+0x80>)
 80013a0:	f043 0302 	orr.w	r3, r3, #2
 80013a4:	61d3      	str	r3, [r2, #28]
 80013a6:	4b14      	ldr	r3, [pc, #80]	; (80013f8 <HAL_TIM_Encoder_MspInit+0x80>)
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	613b      	str	r3, [r7, #16]
 80013b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b2:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <HAL_TIM_Encoder_MspInit+0x80>)
 80013b4:	695b      	ldr	r3, [r3, #20]
 80013b6:	4a10      	ldr	r2, [pc, #64]	; (80013f8 <HAL_TIM_Encoder_MspInit+0x80>)
 80013b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013bc:	6153      	str	r3, [r2, #20]
 80013be:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <HAL_TIM_Encoder_MspInit+0x80>)
 80013c0:	695b      	ldr	r3, [r3, #20]
 80013c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_B_Pin|ENC_A_Pin;
 80013ca:	23c0      	movs	r3, #192	; 0xc0
 80013cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ce:	2302      	movs	r3, #2
 80013d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d6:	2300      	movs	r3, #0
 80013d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80013da:	2302      	movs	r3, #2
 80013dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013de:	f107 0314 	add.w	r3, r7, #20
 80013e2:	4619      	mov	r1, r3
 80013e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013e8:	f001 fb52 	bl	8002a90 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80013ec:	bf00      	nop
 80013ee:	3728      	adds	r7, #40	; 0x28
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40000400 	.word	0x40000400
 80013f8:	40021000 	.word	0x40021000

080013fc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM17)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a23      	ldr	r2, [pc, #140]	; (8001498 <HAL_TIM_Base_MspInit+0x9c>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d13f      	bne.n	800148e <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* TIM17 clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 800140e:	4b23      	ldr	r3, [pc, #140]	; (800149c <HAL_TIM_Base_MspInit+0xa0>)
 8001410:	699b      	ldr	r3, [r3, #24]
 8001412:	4a22      	ldr	r2, [pc, #136]	; (800149c <HAL_TIM_Base_MspInit+0xa0>)
 8001414:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001418:	6193      	str	r3, [r2, #24]
 800141a:	4b20      	ldr	r3, [pc, #128]	; (800149c <HAL_TIM_Base_MspInit+0xa0>)
 800141c:	699b      	ldr	r3, [r3, #24]
 800141e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]

    /* TIM17 DMA Init */
    /* TIM17_CH1_UP Init */
    hdma_tim17_ch1_up.Instance = DMA1_Channel7;
 8001426:	4b1e      	ldr	r3, [pc, #120]	; (80014a0 <HAL_TIM_Base_MspInit+0xa4>)
 8001428:	4a1e      	ldr	r2, [pc, #120]	; (80014a4 <HAL_TIM_Base_MspInit+0xa8>)
 800142a:	601a      	str	r2, [r3, #0]
    hdma_tim17_ch1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800142c:	4b1c      	ldr	r3, [pc, #112]	; (80014a0 <HAL_TIM_Base_MspInit+0xa4>)
 800142e:	2210      	movs	r2, #16
 8001430:	605a      	str	r2, [r3, #4]
    hdma_tim17_ch1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001432:	4b1b      	ldr	r3, [pc, #108]	; (80014a0 <HAL_TIM_Base_MspInit+0xa4>)
 8001434:	2200      	movs	r2, #0
 8001436:	609a      	str	r2, [r3, #8]
    hdma_tim17_ch1_up.Init.MemInc = DMA_MINC_ENABLE;
 8001438:	4b19      	ldr	r3, [pc, #100]	; (80014a0 <HAL_TIM_Base_MspInit+0xa4>)
 800143a:	2280      	movs	r2, #128	; 0x80
 800143c:	60da      	str	r2, [r3, #12]
    hdma_tim17_ch1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800143e:	4b18      	ldr	r3, [pc, #96]	; (80014a0 <HAL_TIM_Base_MspInit+0xa4>)
 8001440:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001444:	611a      	str	r2, [r3, #16]
    hdma_tim17_ch1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001446:	4b16      	ldr	r3, [pc, #88]	; (80014a0 <HAL_TIM_Base_MspInit+0xa4>)
 8001448:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800144c:	615a      	str	r2, [r3, #20]
    hdma_tim17_ch1_up.Init.Mode = DMA_NORMAL;
 800144e:	4b14      	ldr	r3, [pc, #80]	; (80014a0 <HAL_TIM_Base_MspInit+0xa4>)
 8001450:	2200      	movs	r2, #0
 8001452:	619a      	str	r2, [r3, #24]
    hdma_tim17_ch1_up.Init.Priority = DMA_PRIORITY_LOW;
 8001454:	4b12      	ldr	r3, [pc, #72]	; (80014a0 <HAL_TIM_Base_MspInit+0xa4>)
 8001456:	2200      	movs	r2, #0
 8001458:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim17_ch1_up) != HAL_OK)
 800145a:	4811      	ldr	r0, [pc, #68]	; (80014a0 <HAL_TIM_Base_MspInit+0xa4>)
 800145c:	f001 f935 	bl	80026ca <HAL_DMA_Init>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8001466:	f7ff fd71 	bl	8000f4c <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM17_DMA1_CH7);
 800146a:	4b0f      	ldr	r3, [pc, #60]	; (80014a8 <HAL_TIM_Base_MspInit+0xac>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a0e      	ldr	r2, [pc, #56]	; (80014a8 <HAL_TIM_Base_MspInit+0xac>)
 8001470:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001474:	6013      	str	r3, [r2, #0]

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim17_ch1_up);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a09      	ldr	r2, [pc, #36]	; (80014a0 <HAL_TIM_Base_MspInit+0xa4>)
 800147a:	625a      	str	r2, [r3, #36]	; 0x24
 800147c:	4a08      	ldr	r2, [pc, #32]	; (80014a0 <HAL_TIM_Base_MspInit+0xa4>)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim17_ch1_up);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a06      	ldr	r2, [pc, #24]	; (80014a0 <HAL_TIM_Base_MspInit+0xa4>)
 8001486:	621a      	str	r2, [r3, #32]
 8001488:	4a05      	ldr	r2, [pc, #20]	; (80014a0 <HAL_TIM_Base_MspInit+0xa4>)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 800148e:	bf00      	nop
 8001490:	3710      	adds	r7, #16
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40014800 	.word	0x40014800
 800149c:	40021000 	.word	0x40021000
 80014a0:	200002d8 	.word	0x200002d8
 80014a4:	40020080 	.word	0x40020080
 80014a8:	40010000 	.word	0x40010000

080014ac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08a      	sub	sp, #40	; 0x28
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014cc:	d11d      	bne.n	800150a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ce:	4b21      	ldr	r3, [pc, #132]	; (8001554 <HAL_TIM_MspPostInit+0xa8>)
 80014d0:	695b      	ldr	r3, [r3, #20]
 80014d2:	4a20      	ldr	r2, [pc, #128]	; (8001554 <HAL_TIM_MspPostInit+0xa8>)
 80014d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014d8:	6153      	str	r3, [r2, #20]
 80014da:	4b1e      	ldr	r3, [pc, #120]	; (8001554 <HAL_TIM_MspPostInit+0xa8>)
 80014dc:	695b      	ldr	r3, [r3, #20]
 80014de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e2:	613b      	str	r3, [r7, #16]
 80014e4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = M2_PWM_Pin;
 80014e6:	2308      	movs	r3, #8
 80014e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ea:	2302      	movs	r3, #2
 80014ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f2:	2300      	movs	r3, #0
 80014f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014f6:	2301      	movs	r3, #1
 80014f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(M2_PWM_GPIO_Port, &GPIO_InitStruct);
 80014fa:	f107 0314 	add.w	r3, r7, #20
 80014fe:	4619      	mov	r1, r3
 8001500:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001504:	f001 fac4 	bl	8002a90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8001508:	e020      	b.n	800154c <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM17)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a12      	ldr	r2, [pc, #72]	; (8001558 <HAL_TIM_MspPostInit+0xac>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d11b      	bne.n	800154c <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001514:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <HAL_TIM_MspPostInit+0xa8>)
 8001516:	695b      	ldr	r3, [r3, #20]
 8001518:	4a0e      	ldr	r2, [pc, #56]	; (8001554 <HAL_TIM_MspPostInit+0xa8>)
 800151a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800151e:	6153      	str	r3, [r2, #20]
 8001520:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <HAL_TIM_MspPostInit+0xa8>)
 8001522:	695b      	ldr	r3, [r3, #20]
 8001524:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001528:	60fb      	str	r3, [r7, #12]
 800152a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M1_PWM_Pin;
 800152c:	2320      	movs	r3, #32
 800152e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001530:	2302      	movs	r3, #2
 8001532:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001538:	2300      	movs	r3, #0
 800153a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 800153c:	230a      	movs	r3, #10
 800153e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(M1_PWM_GPIO_Port, &GPIO_InitStruct);
 8001540:	f107 0314 	add.w	r3, r7, #20
 8001544:	4619      	mov	r1, r3
 8001546:	4805      	ldr	r0, [pc, #20]	; (800155c <HAL_TIM_MspPostInit+0xb0>)
 8001548:	f001 faa2 	bl	8002a90 <HAL_GPIO_Init>
}
 800154c:	bf00      	nop
 800154e:	3728      	adds	r7, #40	; 0x28
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40021000 	.word	0x40021000
 8001558:	40014800 	.word	0x40014800
 800155c:	48000400 	.word	0x48000400

08001560 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001564:	4b14      	ldr	r3, [pc, #80]	; (80015b8 <MX_USART2_UART_Init+0x58>)
 8001566:	4a15      	ldr	r2, [pc, #84]	; (80015bc <MX_USART2_UART_Init+0x5c>)
 8001568:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800156a:	4b13      	ldr	r3, [pc, #76]	; (80015b8 <MX_USART2_UART_Init+0x58>)
 800156c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001570:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001572:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <MX_USART2_UART_Init+0x58>)
 8001574:	2200      	movs	r2, #0
 8001576:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001578:	4b0f      	ldr	r3, [pc, #60]	; (80015b8 <MX_USART2_UART_Init+0x58>)
 800157a:	2200      	movs	r2, #0
 800157c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800157e:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <MX_USART2_UART_Init+0x58>)
 8001580:	2200      	movs	r2, #0
 8001582:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001584:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <MX_USART2_UART_Init+0x58>)
 8001586:	220c      	movs	r2, #12
 8001588:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800158a:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <MX_USART2_UART_Init+0x58>)
 800158c:	2200      	movs	r2, #0
 800158e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001590:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <MX_USART2_UART_Init+0x58>)
 8001592:	2200      	movs	r2, #0
 8001594:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001596:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <MX_USART2_UART_Init+0x58>)
 8001598:	2200      	movs	r2, #0
 800159a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800159c:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <MX_USART2_UART_Init+0x58>)
 800159e:	2200      	movs	r2, #0
 80015a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015a2:	4805      	ldr	r0, [pc, #20]	; (80015b8 <MX_USART2_UART_Init+0x58>)
 80015a4:	f005 fcb6 	bl	8006f14 <HAL_UART_Init>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80015ae:	f7ff fccd 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	2000031c 	.word	0x2000031c
 80015bc:	40004400 	.word	0x40004400

080015c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b08a      	sub	sp, #40	; 0x28
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c8:	f107 0314 	add.w	r3, r7, #20
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	60da      	str	r2, [r3, #12]
 80015d6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a17      	ldr	r2, [pc, #92]	; (800163c <HAL_UART_MspInit+0x7c>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d127      	bne.n	8001632 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015e2:	4b17      	ldr	r3, [pc, #92]	; (8001640 <HAL_UART_MspInit+0x80>)
 80015e4:	69db      	ldr	r3, [r3, #28]
 80015e6:	4a16      	ldr	r2, [pc, #88]	; (8001640 <HAL_UART_MspInit+0x80>)
 80015e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015ec:	61d3      	str	r3, [r2, #28]
 80015ee:	4b14      	ldr	r3, [pc, #80]	; (8001640 <HAL_UART_MspInit+0x80>)
 80015f0:	69db      	ldr	r3, [r3, #28]
 80015f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f6:	613b      	str	r3, [r7, #16]
 80015f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fa:	4b11      	ldr	r3, [pc, #68]	; (8001640 <HAL_UART_MspInit+0x80>)
 80015fc:	695b      	ldr	r3, [r3, #20]
 80015fe:	4a10      	ldr	r2, [pc, #64]	; (8001640 <HAL_UART_MspInit+0x80>)
 8001600:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001604:	6153      	str	r3, [r2, #20]
 8001606:	4b0e      	ldr	r3, [pc, #56]	; (8001640 <HAL_UART_MspInit+0x80>)
 8001608:	695b      	ldr	r3, [r3, #20]
 800160a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001612:	2318      	movs	r3, #24
 8001614:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001616:	2302      	movs	r3, #2
 8001618:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800161e:	2303      	movs	r3, #3
 8001620:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001622:	2307      	movs	r3, #7
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001626:	f107 0314 	add.w	r3, r7, #20
 800162a:	4619      	mov	r1, r3
 800162c:	4805      	ldr	r0, [pc, #20]	; (8001644 <HAL_UART_MspInit+0x84>)
 800162e:	f001 fa2f 	bl	8002a90 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001632:	bf00      	nop
 8001634:	3728      	adds	r7, #40	; 0x28
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40004400 	.word	0x40004400
 8001640:	40021000 	.word	0x40021000
 8001644:	48000400 	.word	0x48000400

08001648 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001648:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001680 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800164c:	480d      	ldr	r0, [pc, #52]	; (8001684 <LoopForever+0x6>)
  ldr r1, =_edata
 800164e:	490e      	ldr	r1, [pc, #56]	; (8001688 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001650:	4a0e      	ldr	r2, [pc, #56]	; (800168c <LoopForever+0xe>)
  movs r3, #0
 8001652:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001654:	e002      	b.n	800165c <LoopCopyDataInit>

08001656 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001656:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001658:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800165a:	3304      	adds	r3, #4

0800165c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800165c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800165e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001660:	d3f9      	bcc.n	8001656 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001662:	4a0b      	ldr	r2, [pc, #44]	; (8001690 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001664:	4c0b      	ldr	r4, [pc, #44]	; (8001694 <LoopForever+0x16>)
  movs r3, #0
 8001666:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001668:	e001      	b.n	800166e <LoopFillZerobss>

0800166a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800166a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800166c:	3204      	adds	r2, #4

0800166e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800166e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001670:	d3fb      	bcc.n	800166a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001672:	f7ff fd27 	bl	80010c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001676:	f005 ff87 	bl	8007588 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800167a:	f7ff fb8b 	bl	8000d94 <main>

0800167e <LoopForever>:

LoopForever:
    b LoopForever
 800167e:	e7fe      	b.n	800167e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001680:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001684:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001688:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800168c:	08007748 	.word	0x08007748
  ldr r2, =_sbss
 8001690:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001694:	200003b4 	.word	0x200003b4

08001698 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001698:	e7fe      	b.n	8001698 <ADC1_2_IRQHandler>
	...

0800169c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016a0:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <HAL_Init+0x28>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a07      	ldr	r2, [pc, #28]	; (80016c4 <HAL_Init+0x28>)
 80016a6:	f043 0310 	orr.w	r3, r3, #16
 80016aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016ac:	2003      	movs	r0, #3
 80016ae:	f000 ffcb 	bl	8002648 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016b2:	2000      	movs	r0, #0
 80016b4:	f000 f808 	bl	80016c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016b8:	f7ff fc4e 	bl	8000f58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40022000 	.word	0x40022000

080016c8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016d0:	4b12      	ldr	r3, [pc, #72]	; (800171c <HAL_InitTick+0x54>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	4b12      	ldr	r3, [pc, #72]	; (8001720 <HAL_InitTick+0x58>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	4619      	mov	r1, r3
 80016da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016de:	fbb3 f3f1 	udiv	r3, r3, r1
 80016e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e6:	4618      	mov	r0, r3
 80016e8:	f000 ffe3 	bl	80026b2 <HAL_SYSTICK_Config>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e00e      	b.n	8001714 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2b0f      	cmp	r3, #15
 80016fa:	d80a      	bhi.n	8001712 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016fc:	2200      	movs	r2, #0
 80016fe:	6879      	ldr	r1, [r7, #4]
 8001700:	f04f 30ff 	mov.w	r0, #4294967295
 8001704:	f000 ffab 	bl	800265e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001708:	4a06      	ldr	r2, [pc, #24]	; (8001724 <HAL_InitTick+0x5c>)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800170e:	2300      	movs	r3, #0
 8001710:	e000      	b.n	8001714 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
}
 8001714:	4618      	mov	r0, r3
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20000000 	.word	0x20000000
 8001720:	20000008 	.word	0x20000008
 8001724:	20000004 	.word	0x20000004

08001728 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800172c:	4b06      	ldr	r3, [pc, #24]	; (8001748 <HAL_IncTick+0x20>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	461a      	mov	r2, r3
 8001732:	4b06      	ldr	r3, [pc, #24]	; (800174c <HAL_IncTick+0x24>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4413      	add	r3, r2
 8001738:	4a04      	ldr	r2, [pc, #16]	; (800174c <HAL_IncTick+0x24>)
 800173a:	6013      	str	r3, [r2, #0]
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	20000008 	.word	0x20000008
 800174c:	200003a0 	.word	0x200003a0

08001750 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  return uwTick;  
 8001754:	4b03      	ldr	r3, [pc, #12]	; (8001764 <HAL_GetTick+0x14>)
 8001756:	681b      	ldr	r3, [r3, #0]
}
 8001758:	4618      	mov	r0, r3
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	200003a0 	.word	0x200003a0

08001768 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001770:	f7ff ffee 	bl	8001750 <HAL_GetTick>
 8001774:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001780:	d005      	beq.n	800178e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001782:	4b0a      	ldr	r3, [pc, #40]	; (80017ac <HAL_Delay+0x44>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	461a      	mov	r2, r3
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	4413      	add	r3, r2
 800178c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800178e:	bf00      	nop
 8001790:	f7ff ffde 	bl	8001750 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	429a      	cmp	r2, r3
 800179e:	d8f7      	bhi.n	8001790 <HAL_Delay+0x28>
  {
  }
}
 80017a0:	bf00      	nop
 80017a2:	bf00      	nop
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000008 	.word	0x20000008

080017b0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b09a      	sub	sp, #104	; 0x68
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017b8:	2300      	movs	r3, #0
 80017ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80017be:	2300      	movs	r3, #0
 80017c0:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80017c2:	2300      	movs	r3, #0
 80017c4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d101      	bne.n	80017d0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e172      	b.n	8001ab6 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	691b      	ldr	r3, [r3, #16]
 80017d4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017da:	f003 0310 	and.w	r3, r3, #16
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d176      	bne.n	80018d0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d152      	bne.n	8001890 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2200      	movs	r2, #0
 80017f4:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2200      	movs	r2, #0
 8001800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f7ff f877 	bl	80008f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001814:	2b00      	cmp	r3, #0
 8001816:	d13b      	bne.n	8001890 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f000 fce3 	bl	80021e4 <ADC_Disable>
 800181e:	4603      	mov	r3, r0
 8001820:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001828:	f003 0310 	and.w	r3, r3, #16
 800182c:	2b00      	cmp	r3, #0
 800182e:	d12f      	bne.n	8001890 <HAL_ADC_Init+0xe0>
 8001830:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001834:	2b00      	cmp	r3, #0
 8001836:	d12b      	bne.n	8001890 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001840:	f023 0302 	bic.w	r3, r3, #2
 8001844:	f043 0202 	orr.w	r2, r3, #2
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	689a      	ldr	r2, [r3, #8]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800185a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	689a      	ldr	r2, [r3, #8]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800186a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800186c:	4b94      	ldr	r3, [pc, #592]	; (8001ac0 <HAL_ADC_Init+0x310>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a94      	ldr	r2, [pc, #592]	; (8001ac4 <HAL_ADC_Init+0x314>)
 8001872:	fba2 2303 	umull	r2, r3, r2, r3
 8001876:	0c9a      	lsrs	r2, r3, #18
 8001878:	4613      	mov	r3, r2
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	4413      	add	r3, r2
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001882:	e002      	b.n	800188a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	3b01      	subs	r3, #1
 8001888:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d1f9      	bne.n	8001884 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d007      	beq.n	80018ae <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80018a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80018ac:	d110      	bne.n	80018d0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	f023 0312 	bic.w	r3, r3, #18
 80018b6:	f043 0210 	orr.w	r2, r3, #16
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c2:	f043 0201 	orr.w	r2, r3, #1
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d4:	f003 0310 	and.w	r3, r3, #16
 80018d8:	2b00      	cmp	r3, #0
 80018da:	f040 80df 	bne.w	8001a9c <HAL_ADC_Init+0x2ec>
 80018de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	f040 80da 	bne.w	8001a9c <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	f040 80d2 	bne.w	8001a9c <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001900:	f043 0202 	orr.w	r2, r3, #2
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001908:	4b6f      	ldr	r3, [pc, #444]	; (8001ac8 <HAL_ADC_Init+0x318>)
 800190a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001914:	d102      	bne.n	800191c <HAL_ADC_Init+0x16c>
 8001916:	4b6d      	ldr	r3, [pc, #436]	; (8001acc <HAL_ADC_Init+0x31c>)
 8001918:	60fb      	str	r3, [r7, #12]
 800191a:	e002      	b.n	8001922 <HAL_ADC_Init+0x172>
 800191c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001920:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f003 0303 	and.w	r3, r3, #3
 800192c:	2b01      	cmp	r3, #1
 800192e:	d108      	bne.n	8001942 <HAL_ADC_Init+0x192>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	2b01      	cmp	r3, #1
 800193c:	d101      	bne.n	8001942 <HAL_ADC_Init+0x192>
 800193e:	2301      	movs	r3, #1
 8001940:	e000      	b.n	8001944 <HAL_ADC_Init+0x194>
 8001942:	2300      	movs	r3, #0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d11c      	bne.n	8001982 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001948:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800194a:	2b00      	cmp	r3, #0
 800194c:	d010      	beq.n	8001970 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	f003 0303 	and.w	r3, r3, #3
 8001956:	2b01      	cmp	r3, #1
 8001958:	d107      	bne.n	800196a <HAL_ADC_Init+0x1ba>
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	2b01      	cmp	r3, #1
 8001964:	d101      	bne.n	800196a <HAL_ADC_Init+0x1ba>
 8001966:	2301      	movs	r3, #1
 8001968:	e000      	b.n	800196c <HAL_ADC_Init+0x1bc>
 800196a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800196c:	2b00      	cmp	r3, #0
 800196e:	d108      	bne.n	8001982 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001970:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	431a      	orrs	r2, r3
 800197e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001980:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	7e5b      	ldrb	r3, [r3, #25]
 8001986:	035b      	lsls	r3, r3, #13
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800198c:	2a01      	cmp	r2, #1
 800198e:	d002      	beq.n	8001996 <HAL_ADC_Init+0x1e6>
 8001990:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001994:	e000      	b.n	8001998 <HAL_ADC_Init+0x1e8>
 8001996:	2200      	movs	r2, #0
 8001998:	431a      	orrs	r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	431a      	orrs	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80019a8:	4313      	orrs	r3, r2
 80019aa:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d11b      	bne.n	80019ee <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	7e5b      	ldrb	r3, [r3, #25]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d109      	bne.n	80019d2 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c2:	3b01      	subs	r3, #1
 80019c4:	045a      	lsls	r2, r3, #17
 80019c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80019c8:	4313      	orrs	r3, r2
 80019ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019ce:	663b      	str	r3, [r7, #96]	; 0x60
 80019d0:	e00d      	b.n	80019ee <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80019da:	f043 0220 	orr.w	r2, r3, #32
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e6:	f043 0201 	orr.w	r2, r3, #1
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d007      	beq.n	8001a06 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fe:	4313      	orrs	r3, r2
 8001a00:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a02:	4313      	orrs	r3, r2
 8001a04:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f003 030c 	and.w	r3, r3, #12
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d114      	bne.n	8001a3e <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	6812      	ldr	r2, [r2, #0]
 8001a1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a22:	f023 0302 	bic.w	r3, r3, #2
 8001a26:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	7e1b      	ldrb	r3, [r3, #24]
 8001a2c:	039a      	lsls	r2, r3, #14
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	4313      	orrs	r3, r2
 8001a38:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	68da      	ldr	r2, [r3, #12]
 8001a44:	4b22      	ldr	r3, [pc, #136]	; (8001ad0 <HAL_ADC_Init+0x320>)
 8001a46:	4013      	ands	r3, r2
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	6812      	ldr	r2, [r2, #0]
 8001a4c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001a4e:	430b      	orrs	r3, r1
 8001a50:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	691b      	ldr	r3, [r3, #16]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d10c      	bne.n	8001a74 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a60:	f023 010f 	bic.w	r1, r3, #15
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	69db      	ldr	r3, [r3, #28]
 8001a68:	1e5a      	subs	r2, r3, #1
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	631a      	str	r2, [r3, #48]	; 0x30
 8001a72:	e007      	b.n	8001a84 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f022 020f 	bic.w	r2, r2, #15
 8001a82:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8e:	f023 0303 	bic.w	r3, r3, #3
 8001a92:	f043 0201 	orr.w	r2, r3, #1
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	641a      	str	r2, [r3, #64]	; 0x40
 8001a9a:	e00a      	b.n	8001ab2 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa0:	f023 0312 	bic.w	r3, r3, #18
 8001aa4:	f043 0210 	orr.w	r2, r3, #16
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001aac:	2301      	movs	r3, #1
 8001aae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001ab2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3768      	adds	r7, #104	; 0x68
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20000000 	.word	0x20000000
 8001ac4:	431bde83 	.word	0x431bde83
 8001ac8:	50000300 	.word	0x50000300
 8001acc:	50000100 	.word	0x50000100
 8001ad0:	fff0c007 	.word	0xfff0c007

08001ad4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b09b      	sub	sp, #108	; 0x6c
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d101      	bne.n	8001af6 <HAL_ADC_ConfigChannel+0x22>
 8001af2:	2302      	movs	r3, #2
 8001af4:	e2a5      	b.n	8002042 <HAL_ADC_ConfigChannel+0x56e>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2201      	movs	r2, #1
 8001afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f003 0304 	and.w	r3, r3, #4
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	f040 8289 	bne.w	8002020 <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2b04      	cmp	r3, #4
 8001b14:	d81c      	bhi.n	8001b50 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685a      	ldr	r2, [r3, #4]
 8001b20:	4613      	mov	r3, r2
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	4413      	add	r3, r2
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	461a      	mov	r2, r3
 8001b2a:	231f      	movs	r3, #31
 8001b2c:	4093      	lsls	r3, r2
 8001b2e:	43db      	mvns	r3, r3
 8001b30:	4019      	ands	r1, r3
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	6818      	ldr	r0, [r3, #0]
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685a      	ldr	r2, [r3, #4]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	4413      	add	r3, r2
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	fa00 f203 	lsl.w	r2, r0, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	631a      	str	r2, [r3, #48]	; 0x30
 8001b4e:	e063      	b.n	8001c18 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	2b09      	cmp	r3, #9
 8001b56:	d81e      	bhi.n	8001b96 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685a      	ldr	r2, [r3, #4]
 8001b62:	4613      	mov	r3, r2
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	4413      	add	r3, r2
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	3b1e      	subs	r3, #30
 8001b6c:	221f      	movs	r2, #31
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	43db      	mvns	r3, r3
 8001b74:	4019      	ands	r1, r3
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	6818      	ldr	r0, [r3, #0]
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685a      	ldr	r2, [r3, #4]
 8001b7e:	4613      	mov	r3, r2
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	4413      	add	r3, r2
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	3b1e      	subs	r3, #30
 8001b88:	fa00 f203 	lsl.w	r2, r0, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	430a      	orrs	r2, r1
 8001b92:	635a      	str	r2, [r3, #52]	; 0x34
 8001b94:	e040      	b.n	8001c18 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	2b0e      	cmp	r3, #14
 8001b9c:	d81e      	bhi.n	8001bdc <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685a      	ldr	r2, [r3, #4]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	4413      	add	r3, r2
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	3b3c      	subs	r3, #60	; 0x3c
 8001bb2:	221f      	movs	r2, #31
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	4019      	ands	r1, r3
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	6818      	ldr	r0, [r3, #0]
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685a      	ldr	r2, [r3, #4]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	4413      	add	r3, r2
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	3b3c      	subs	r3, #60	; 0x3c
 8001bce:	fa00 f203 	lsl.w	r2, r0, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	639a      	str	r2, [r3, #56]	; 0x38
 8001bda:	e01d      	b.n	8001c18 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685a      	ldr	r2, [r3, #4]
 8001be6:	4613      	mov	r3, r2
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	4413      	add	r3, r2
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	3b5a      	subs	r3, #90	; 0x5a
 8001bf0:	221f      	movs	r2, #31
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	4019      	ands	r1, r3
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	6818      	ldr	r0, [r3, #0]
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685a      	ldr	r2, [r3, #4]
 8001c02:	4613      	mov	r3, r2
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	4413      	add	r3, r2
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	3b5a      	subs	r3, #90	; 0x5a
 8001c0c:	fa00 f203 	lsl.w	r2, r0, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	430a      	orrs	r2, r1
 8001c16:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f003 030c 	and.w	r3, r3, #12
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	f040 80e5 	bne.w	8001df2 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2b09      	cmp	r3, #9
 8001c2e:	d91c      	bls.n	8001c6a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	6999      	ldr	r1, [r3, #24]
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	4413      	add	r3, r2
 8001c40:	3b1e      	subs	r3, #30
 8001c42:	2207      	movs	r2, #7
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	4019      	ands	r1, r3
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	6898      	ldr	r0, [r3, #8]
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	4613      	mov	r3, r2
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	4413      	add	r3, r2
 8001c5a:	3b1e      	subs	r3, #30
 8001c5c:	fa00 f203 	lsl.w	r2, r0, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	430a      	orrs	r2, r1
 8001c66:	619a      	str	r2, [r3, #24]
 8001c68:	e019      	b.n	8001c9e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	6959      	ldr	r1, [r3, #20]
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	4613      	mov	r3, r2
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	4413      	add	r3, r2
 8001c7a:	2207      	movs	r2, #7
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	43db      	mvns	r3, r3
 8001c82:	4019      	ands	r1, r3
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	6898      	ldr	r0, [r3, #8]
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	4413      	add	r3, r2
 8001c92:	fa00 f203 	lsl.w	r2, r0, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	695a      	ldr	r2, [r3, #20]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	08db      	lsrs	r3, r3, #3
 8001caa:	f003 0303 	and.w	r3, r3, #3
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	2b03      	cmp	r3, #3
 8001cbe:	d84f      	bhi.n	8001d60 <HAL_ADC_ConfigChannel+0x28c>
 8001cc0:	a201      	add	r2, pc, #4	; (adr r2, 8001cc8 <HAL_ADC_ConfigChannel+0x1f4>)
 8001cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cc6:	bf00      	nop
 8001cc8:	08001cd9 	.word	0x08001cd9
 8001ccc:	08001cfb 	.word	0x08001cfb
 8001cd0:	08001d1d 	.word	0x08001d1d
 8001cd4:	08001d3f 	.word	0x08001d3f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001cde:	4b9e      	ldr	r3, [pc, #632]	; (8001f58 <HAL_ADC_ConfigChannel+0x484>)
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	683a      	ldr	r2, [r7, #0]
 8001ce4:	6812      	ldr	r2, [r2, #0]
 8001ce6:	0691      	lsls	r1, r2, #26
 8001ce8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001cea:	430a      	orrs	r2, r1
 8001cec:	431a      	orrs	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001cf6:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001cf8:	e07e      	b.n	8001df8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001d00:	4b95      	ldr	r3, [pc, #596]	; (8001f58 <HAL_ADC_ConfigChannel+0x484>)
 8001d02:	4013      	ands	r3, r2
 8001d04:	683a      	ldr	r2, [r7, #0]
 8001d06:	6812      	ldr	r2, [r2, #0]
 8001d08:	0691      	lsls	r1, r2, #26
 8001d0a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	431a      	orrs	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001d18:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001d1a:	e06d      	b.n	8001df8 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001d22:	4b8d      	ldr	r3, [pc, #564]	; (8001f58 <HAL_ADC_ConfigChannel+0x484>)
 8001d24:	4013      	ands	r3, r2
 8001d26:	683a      	ldr	r2, [r7, #0]
 8001d28:	6812      	ldr	r2, [r2, #0]
 8001d2a:	0691      	lsls	r1, r2, #26
 8001d2c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	431a      	orrs	r2, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001d3a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001d3c:	e05c      	b.n	8001df8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001d44:	4b84      	ldr	r3, [pc, #528]	; (8001f58 <HAL_ADC_ConfigChannel+0x484>)
 8001d46:	4013      	ands	r3, r2
 8001d48:	683a      	ldr	r2, [r7, #0]
 8001d4a:	6812      	ldr	r2, [r2, #0]
 8001d4c:	0691      	lsls	r1, r2, #26
 8001d4e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d50:	430a      	orrs	r2, r1
 8001d52:	431a      	orrs	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001d5c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001d5e:	e04b      	b.n	8001df8 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d66:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	069b      	lsls	r3, r3, #26
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d107      	bne.n	8001d84 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d82:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d8a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	069b      	lsls	r3, r3, #26
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d107      	bne.n	8001da8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001da6:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001dae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	069b      	lsls	r3, r3, #26
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d107      	bne.n	8001dcc <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001dca:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001dd2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	069b      	lsls	r3, r3, #26
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d10a      	bne.n	8001df6 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001dee:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001df0:	e001      	b.n	8001df6 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001df2:	bf00      	nop
 8001df4:	e000      	b.n	8001df8 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001df6:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f003 0303 	and.w	r3, r3, #3
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d108      	bne.n	8001e18 <HAL_ADC_ConfigChannel+0x344>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d101      	bne.n	8001e18 <HAL_ADC_ConfigChannel+0x344>
 8001e14:	2301      	movs	r3, #1
 8001e16:	e000      	b.n	8001e1a <HAL_ADC_ConfigChannel+0x346>
 8001e18:	2300      	movs	r3, #0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	f040 810b 	bne.w	8002036 <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d00f      	beq.n	8001e48 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2201      	movs	r2, #1
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	43da      	mvns	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	400a      	ands	r2, r1
 8001e42:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001e46:	e049      	b.n	8001edc <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2201      	movs	r2, #1
 8001e56:	409a      	lsls	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2b09      	cmp	r3, #9
 8001e68:	d91c      	bls.n	8001ea4 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	6999      	ldr	r1, [r3, #24]
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	4613      	mov	r3, r2
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	4413      	add	r3, r2
 8001e7a:	3b1b      	subs	r3, #27
 8001e7c:	2207      	movs	r2, #7
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	43db      	mvns	r3, r3
 8001e84:	4019      	ands	r1, r3
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	6898      	ldr	r0, [r3, #8]
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	4613      	mov	r3, r2
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	4413      	add	r3, r2
 8001e94:	3b1b      	subs	r3, #27
 8001e96:	fa00 f203 	lsl.w	r2, r0, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	619a      	str	r2, [r3, #24]
 8001ea2:	e01b      	b.n	8001edc <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	6959      	ldr	r1, [r3, #20]
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	1c5a      	adds	r2, r3, #1
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	4413      	add	r3, r2
 8001eb6:	2207      	movs	r2, #7
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	4019      	ands	r1, r3
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	6898      	ldr	r0, [r3, #8]
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	1c5a      	adds	r2, r3, #1
 8001eca:	4613      	mov	r3, r2
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	4413      	add	r3, r2
 8001ed0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001edc:	4b1f      	ldr	r3, [pc, #124]	; (8001f5c <HAL_ADC_ConfigChannel+0x488>)
 8001ede:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2b10      	cmp	r3, #16
 8001ee6:	d105      	bne.n	8001ef4 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001ee8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d015      	beq.n	8001f20 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001ef8:	2b11      	cmp	r3, #17
 8001efa:	d105      	bne.n	8001f08 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001efc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d00b      	beq.n	8001f20 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001f0c:	2b12      	cmp	r3, #18
 8001f0e:	f040 8092 	bne.w	8002036 <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001f12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	f040 808b 	bne.w	8002036 <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f28:	d102      	bne.n	8001f30 <HAL_ADC_ConfigChannel+0x45c>
 8001f2a:	4b0d      	ldr	r3, [pc, #52]	; (8001f60 <HAL_ADC_ConfigChannel+0x48c>)
 8001f2c:	60fb      	str	r3, [r7, #12]
 8001f2e:	e002      	b.n	8001f36 <HAL_ADC_ConfigChannel+0x462>
 8001f30:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001f34:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f003 0303 	and.w	r3, r3, #3
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d10f      	bne.n	8001f64 <HAL_ADC_ConfigChannel+0x490>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d108      	bne.n	8001f64 <HAL_ADC_ConfigChannel+0x490>
 8001f52:	2301      	movs	r3, #1
 8001f54:	e007      	b.n	8001f66 <HAL_ADC_ConfigChannel+0x492>
 8001f56:	bf00      	nop
 8001f58:	83fff000 	.word	0x83fff000
 8001f5c:	50000300 	.word	0x50000300
 8001f60:	50000100 	.word	0x50000100
 8001f64:	2300      	movs	r3, #0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d150      	bne.n	800200c <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001f6a:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d010      	beq.n	8001f92 <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f003 0303 	and.w	r3, r3, #3
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d107      	bne.n	8001f8c <HAL_ADC_ConfigChannel+0x4b8>
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d101      	bne.n	8001f8c <HAL_ADC_ConfigChannel+0x4b8>
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e000      	b.n	8001f8e <HAL_ADC_ConfigChannel+0x4ba>
 8001f8c:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d13c      	bne.n	800200c <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2b10      	cmp	r3, #16
 8001f98:	d11d      	bne.n	8001fd6 <HAL_ADC_ConfigChannel+0x502>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fa2:	d118      	bne.n	8001fd6 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001fa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001fac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fae:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001fb0:	4b27      	ldr	r3, [pc, #156]	; (8002050 <HAL_ADC_ConfigChannel+0x57c>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a27      	ldr	r2, [pc, #156]	; (8002054 <HAL_ADC_ConfigChannel+0x580>)
 8001fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fba:	0c9a      	lsrs	r2, r3, #18
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	4413      	add	r3, r2
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001fc6:	e002      	b.n	8001fce <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d1f9      	bne.n	8001fc8 <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001fd4:	e02e      	b.n	8002034 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2b11      	cmp	r3, #17
 8001fdc:	d10b      	bne.n	8001ff6 <HAL_ADC_ConfigChannel+0x522>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fe6:	d106      	bne.n	8001ff6 <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001fe8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001ff0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ff2:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001ff4:	e01e      	b.n	8002034 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	2b12      	cmp	r3, #18
 8001ffc:	d11a      	bne.n	8002034 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001ffe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002006:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002008:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800200a:	e013      	b.n	8002034 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002010:	f043 0220 	orr.w	r2, r3, #32
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800201e:	e00a      	b.n	8002036 <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002024:	f043 0220 	orr.w	r2, r3, #32
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002032:	e000      	b.n	8002036 <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002034:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800203e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002042:	4618      	mov	r0, r3
 8002044:	376c      	adds	r7, #108	; 0x6c
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	20000000 	.word	0x20000000
 8002054:	431bde83 	.word	0x431bde83

08002058 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002058:	b480      	push	{r7}
 800205a:	b099      	sub	sp, #100	; 0x64
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002062:	2300      	movs	r3, #0
 8002064:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002070:	d102      	bne.n	8002078 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002072:	4b5a      	ldr	r3, [pc, #360]	; (80021dc <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8002074:	60bb      	str	r3, [r7, #8]
 8002076:	e002      	b.n	800207e <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8002078:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800207c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d101      	bne.n	8002088 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e0a2      	b.n	80021ce <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800208e:	2b01      	cmp	r3, #1
 8002090:	d101      	bne.n	8002096 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002092:	2302      	movs	r3, #2
 8002094:	e09b      	b.n	80021ce <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2201      	movs	r2, #1
 800209a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f003 0304 	and.w	r3, r3, #4
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d17f      	bne.n	80021ac <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	f003 0304 	and.w	r3, r3, #4
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d179      	bne.n	80021ac <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020b8:	4b49      	ldr	r3, [pc, #292]	; (80021e0 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 80020ba:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d040      	beq.n	8002146 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80020c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	6859      	ldr	r1, [r3, #4]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80020d6:	035b      	lsls	r3, r3, #13
 80020d8:	430b      	orrs	r3, r1
 80020da:	431a      	orrs	r2, r3
 80020dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020de:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f003 0303 	and.w	r3, r3, #3
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d108      	bne.n	8002100 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d101      	bne.n	8002100 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80020fc:	2301      	movs	r3, #1
 80020fe:	e000      	b.n	8002102 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8002100:	2300      	movs	r3, #0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d15c      	bne.n	80021c0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f003 0303 	and.w	r3, r3, #3
 800210e:	2b01      	cmp	r3, #1
 8002110:	d107      	bne.n	8002122 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b01      	cmp	r3, #1
 800211c:	d101      	bne.n	8002122 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800211e:	2301      	movs	r3, #1
 8002120:	e000      	b.n	8002124 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8002122:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002124:	2b00      	cmp	r3, #0
 8002126:	d14b      	bne.n	80021c0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002128:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002130:	f023 030f 	bic.w	r3, r3, #15
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	6811      	ldr	r1, [r2, #0]
 8002138:	683a      	ldr	r2, [r7, #0]
 800213a:	6892      	ldr	r2, [r2, #8]
 800213c:	430a      	orrs	r2, r1
 800213e:	431a      	orrs	r2, r3
 8002140:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002142:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002144:	e03c      	b.n	80021c0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002146:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800214e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002150:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f003 0303 	and.w	r3, r3, #3
 800215c:	2b01      	cmp	r3, #1
 800215e:	d108      	bne.n	8002172 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	2b01      	cmp	r3, #1
 800216c:	d101      	bne.n	8002172 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 800216e:	2301      	movs	r3, #1
 8002170:	e000      	b.n	8002174 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8002172:	2300      	movs	r3, #0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d123      	bne.n	80021c0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f003 0303 	and.w	r3, r3, #3
 8002180:	2b01      	cmp	r3, #1
 8002182:	d107      	bne.n	8002194 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0301 	and.w	r3, r3, #1
 800218c:	2b01      	cmp	r3, #1
 800218e:	d101      	bne.n	8002194 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002190:	2301      	movs	r3, #1
 8002192:	e000      	b.n	8002196 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002194:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002196:	2b00      	cmp	r3, #0
 8002198:	d112      	bne.n	80021c0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800219a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80021a2:	f023 030f 	bic.w	r3, r3, #15
 80021a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80021a8:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80021aa:	e009      	b.n	80021c0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b0:	f043 0220 	orr.w	r2, r3, #32
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80021be:	e000      	b.n	80021c2 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80021c0:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80021ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80021ce:	4618      	mov	r0, r3
 80021d0:	3764      	adds	r7, #100	; 0x64
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	50000100 	.word	0x50000100
 80021e0:	50000300 	.word	0x50000300

080021e4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021ec:	2300      	movs	r3, #0
 80021ee:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f003 0303 	and.w	r3, r3, #3
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d108      	bne.n	8002210 <ADC_Disable+0x2c>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	2b01      	cmp	r3, #1
 800220a:	d101      	bne.n	8002210 <ADC_Disable+0x2c>
 800220c:	2301      	movs	r3, #1
 800220e:	e000      	b.n	8002212 <ADC_Disable+0x2e>
 8002210:	2300      	movs	r3, #0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d047      	beq.n	80022a6 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f003 030d 	and.w	r3, r3, #13
 8002220:	2b01      	cmp	r3, #1
 8002222:	d10f      	bne.n	8002244 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	689a      	ldr	r2, [r3, #8]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f042 0202 	orr.w	r2, r2, #2
 8002232:	609a      	str	r2, [r3, #8]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2203      	movs	r2, #3
 800223a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800223c:	f7ff fa88 	bl	8001750 <HAL_GetTick>
 8002240:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002242:	e029      	b.n	8002298 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002248:	f043 0210 	orr.w	r2, r3, #16
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002254:	f043 0201 	orr.w	r2, r3, #1
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e023      	b.n	80022a8 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002260:	f7ff fa76 	bl	8001750 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d914      	bls.n	8002298 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	2b01      	cmp	r3, #1
 800227a:	d10d      	bne.n	8002298 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002280:	f043 0210 	orr.w	r2, r3, #16
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228c:	f043 0201 	orr.w	r2, r3, #1
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e007      	b.n	80022a8 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d0dc      	beq.n	8002260 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3710      	adds	r7, #16
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e0ed      	b.n	800249e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d102      	bne.n	80022d4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f7fe fbae 	bl	8000a30 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f042 0201 	orr.w	r2, r2, #1
 80022e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022e4:	f7ff fa34 	bl	8001750 <HAL_GetTick>
 80022e8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80022ea:	e012      	b.n	8002312 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80022ec:	f7ff fa30 	bl	8001750 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b0a      	cmp	r3, #10
 80022f8:	d90b      	bls.n	8002312 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2205      	movs	r2, #5
 800230a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e0c5      	b.n	800249e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	2b00      	cmp	r3, #0
 800231e:	d0e5      	beq.n	80022ec <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f022 0202 	bic.w	r2, r2, #2
 800232e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002330:	f7ff fa0e 	bl	8001750 <HAL_GetTick>
 8002334:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002336:	e012      	b.n	800235e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002338:	f7ff fa0a 	bl	8001750 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b0a      	cmp	r3, #10
 8002344:	d90b      	bls.n	800235e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2205      	movs	r2, #5
 8002356:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e09f      	b.n	800249e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d1e5      	bne.n	8002338 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	7e1b      	ldrb	r3, [r3, #24]
 8002370:	2b01      	cmp	r3, #1
 8002372:	d108      	bne.n	8002386 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	e007      	b.n	8002396 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002394:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	7e5b      	ldrb	r3, [r3, #25]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d108      	bne.n	80023b0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023ac:	601a      	str	r2, [r3, #0]
 80023ae:	e007      	b.n	80023c0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023be:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	7e9b      	ldrb	r3, [r3, #26]
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d108      	bne.n	80023da <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f042 0220 	orr.w	r2, r2, #32
 80023d6:	601a      	str	r2, [r3, #0]
 80023d8:	e007      	b.n	80023ea <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f022 0220 	bic.w	r2, r2, #32
 80023e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	7edb      	ldrb	r3, [r3, #27]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d108      	bne.n	8002404 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f022 0210 	bic.w	r2, r2, #16
 8002400:	601a      	str	r2, [r3, #0]
 8002402:	e007      	b.n	8002414 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f042 0210 	orr.w	r2, r2, #16
 8002412:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	7f1b      	ldrb	r3, [r3, #28]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d108      	bne.n	800242e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f042 0208 	orr.w	r2, r2, #8
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	e007      	b.n	800243e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f022 0208 	bic.w	r2, r2, #8
 800243c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	7f5b      	ldrb	r3, [r3, #29]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d108      	bne.n	8002458 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f042 0204 	orr.w	r2, r2, #4
 8002454:	601a      	str	r2, [r3, #0]
 8002456:	e007      	b.n	8002468 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f022 0204 	bic.w	r2, r2, #4
 8002466:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689a      	ldr	r2, [r3, #8]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	431a      	orrs	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	431a      	orrs	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	695b      	ldr	r3, [r3, #20]
 800247c:	ea42 0103 	orr.w	r1, r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	1e5a      	subs	r2, r3, #1
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	430a      	orrs	r2, r1
 800248c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
	...

080024a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f003 0307 	and.w	r3, r3, #7
 80024b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024b8:	4b0c      	ldr	r3, [pc, #48]	; (80024ec <__NVIC_SetPriorityGrouping+0x44>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024be:	68ba      	ldr	r2, [r7, #8]
 80024c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024c4:	4013      	ands	r3, r2
 80024c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024da:	4a04      	ldr	r2, [pc, #16]	; (80024ec <__NVIC_SetPriorityGrouping+0x44>)
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	60d3      	str	r3, [r2, #12]
}
 80024e0:	bf00      	nop
 80024e2:	3714      	adds	r7, #20
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr
 80024ec:	e000ed00 	.word	0xe000ed00

080024f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024f4:	4b04      	ldr	r3, [pc, #16]	; (8002508 <__NVIC_GetPriorityGrouping+0x18>)
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	0a1b      	lsrs	r3, r3, #8
 80024fa:	f003 0307 	and.w	r3, r3, #7
}
 80024fe:	4618      	mov	r0, r3
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr
 8002508:	e000ed00 	.word	0xe000ed00

0800250c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	4603      	mov	r3, r0
 8002514:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800251a:	2b00      	cmp	r3, #0
 800251c:	db0b      	blt.n	8002536 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800251e:	79fb      	ldrb	r3, [r7, #7]
 8002520:	f003 021f 	and.w	r2, r3, #31
 8002524:	4907      	ldr	r1, [pc, #28]	; (8002544 <__NVIC_EnableIRQ+0x38>)
 8002526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252a:	095b      	lsrs	r3, r3, #5
 800252c:	2001      	movs	r0, #1
 800252e:	fa00 f202 	lsl.w	r2, r0, r2
 8002532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002536:	bf00      	nop
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	e000e100 	.word	0xe000e100

08002548 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	4603      	mov	r3, r0
 8002550:	6039      	str	r1, [r7, #0]
 8002552:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002558:	2b00      	cmp	r3, #0
 800255a:	db0a      	blt.n	8002572 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	b2da      	uxtb	r2, r3
 8002560:	490c      	ldr	r1, [pc, #48]	; (8002594 <__NVIC_SetPriority+0x4c>)
 8002562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002566:	0112      	lsls	r2, r2, #4
 8002568:	b2d2      	uxtb	r2, r2
 800256a:	440b      	add	r3, r1
 800256c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002570:	e00a      	b.n	8002588 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	b2da      	uxtb	r2, r3
 8002576:	4908      	ldr	r1, [pc, #32]	; (8002598 <__NVIC_SetPriority+0x50>)
 8002578:	79fb      	ldrb	r3, [r7, #7]
 800257a:	f003 030f 	and.w	r3, r3, #15
 800257e:	3b04      	subs	r3, #4
 8002580:	0112      	lsls	r2, r2, #4
 8002582:	b2d2      	uxtb	r2, r2
 8002584:	440b      	add	r3, r1
 8002586:	761a      	strb	r2, [r3, #24]
}
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	e000e100 	.word	0xe000e100
 8002598:	e000ed00 	.word	0xe000ed00

0800259c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800259c:	b480      	push	{r7}
 800259e:	b089      	sub	sp, #36	; 0x24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f003 0307 	and.w	r3, r3, #7
 80025ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	f1c3 0307 	rsb	r3, r3, #7
 80025b6:	2b04      	cmp	r3, #4
 80025b8:	bf28      	it	cs
 80025ba:	2304      	movcs	r3, #4
 80025bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	3304      	adds	r3, #4
 80025c2:	2b06      	cmp	r3, #6
 80025c4:	d902      	bls.n	80025cc <NVIC_EncodePriority+0x30>
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	3b03      	subs	r3, #3
 80025ca:	e000      	b.n	80025ce <NVIC_EncodePriority+0x32>
 80025cc:	2300      	movs	r3, #0
 80025ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025d0:	f04f 32ff 	mov.w	r2, #4294967295
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	43da      	mvns	r2, r3
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	401a      	ands	r2, r3
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025e4:	f04f 31ff 	mov.w	r1, #4294967295
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	fa01 f303 	lsl.w	r3, r1, r3
 80025ee:	43d9      	mvns	r1, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025f4:	4313      	orrs	r3, r2
         );
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3724      	adds	r7, #36	; 0x24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
	...

08002604 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	3b01      	subs	r3, #1
 8002610:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002614:	d301      	bcc.n	800261a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002616:	2301      	movs	r3, #1
 8002618:	e00f      	b.n	800263a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800261a:	4a0a      	ldr	r2, [pc, #40]	; (8002644 <SysTick_Config+0x40>)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	3b01      	subs	r3, #1
 8002620:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002622:	210f      	movs	r1, #15
 8002624:	f04f 30ff 	mov.w	r0, #4294967295
 8002628:	f7ff ff8e 	bl	8002548 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800262c:	4b05      	ldr	r3, [pc, #20]	; (8002644 <SysTick_Config+0x40>)
 800262e:	2200      	movs	r2, #0
 8002630:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002632:	4b04      	ldr	r3, [pc, #16]	; (8002644 <SysTick_Config+0x40>)
 8002634:	2207      	movs	r2, #7
 8002636:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	e000e010 	.word	0xe000e010

08002648 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f7ff ff29 	bl	80024a8 <__NVIC_SetPriorityGrouping>
}
 8002656:	bf00      	nop
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	b086      	sub	sp, #24
 8002662:	af00      	add	r7, sp, #0
 8002664:	4603      	mov	r3, r0
 8002666:	60b9      	str	r1, [r7, #8]
 8002668:	607a      	str	r2, [r7, #4]
 800266a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800266c:	2300      	movs	r3, #0
 800266e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002670:	f7ff ff3e 	bl	80024f0 <__NVIC_GetPriorityGrouping>
 8002674:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	68b9      	ldr	r1, [r7, #8]
 800267a:	6978      	ldr	r0, [r7, #20]
 800267c:	f7ff ff8e 	bl	800259c <NVIC_EncodePriority>
 8002680:	4602      	mov	r2, r0
 8002682:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002686:	4611      	mov	r1, r2
 8002688:	4618      	mov	r0, r3
 800268a:	f7ff ff5d 	bl	8002548 <__NVIC_SetPriority>
}
 800268e:	bf00      	nop
 8002690:	3718      	adds	r7, #24
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b082      	sub	sp, #8
 800269a:	af00      	add	r7, sp, #0
 800269c:	4603      	mov	r3, r0
 800269e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7ff ff31 	bl	800250c <__NVIC_EnableIRQ>
}
 80026aa:	bf00      	nop
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b082      	sub	sp, #8
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f7ff ffa2 	bl	8002604 <SysTick_Config>
 80026c0:	4603      	mov	r3, r0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b084      	sub	sp, #16
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80026d2:	2300      	movs	r3, #0
 80026d4:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d101      	bne.n	80026e0 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e037      	b.n	8002750 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2202      	movs	r2, #2
 80026e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80026f6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80026fa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002704:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002710:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800271c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	69db      	ldr	r3, [r3, #28]
 8002722:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	4313      	orrs	r3, r2
 8002728:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 f98c 	bl	8002a50 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2201      	movs	r2, #1
 8002742:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800274e:	2300      	movs	r3, #0
}  
 8002750:	4618      	mov	r0, r3
 8002752:	3710      	adds	r7, #16
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b086      	sub	sp, #24
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	607a      	str	r2, [r7, #4]
 8002764:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002766:	2300      	movs	r3, #0
 8002768:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d101      	bne.n	8002778 <HAL_DMA_Start_IT+0x20>
 8002774:	2302      	movs	r3, #2
 8002776:	e04a      	b.n	800280e <HAL_DMA_Start_IT+0xb6>
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002786:	2b01      	cmp	r3, #1
 8002788:	d13a      	bne.n	8002800 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2202      	movs	r2, #2
 800278e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2200      	movs	r2, #0
 8002796:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f022 0201 	bic.w	r2, r2, #1
 80027a6:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	68b9      	ldr	r1, [r7, #8]
 80027ae:	68f8      	ldr	r0, [r7, #12]
 80027b0:	f000 f91f 	bl	80029f2 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d008      	beq.n	80027ce <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f042 020e 	orr.w	r2, r2, #14
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	e00f      	b.n	80027ee <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f042 020a 	orr.w	r2, r2, #10
 80027dc:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f022 0204 	bic.w	r2, r2, #4
 80027ec:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f042 0201 	orr.w	r2, r2, #1
 80027fc:	601a      	str	r2, [r3, #0]
 80027fe:	e005      	b.n	800280c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2200      	movs	r2, #0
 8002804:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002808:	2302      	movs	r3, #2
 800280a:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 800280c:	7dfb      	ldrb	r3, [r7, #23]
} 
 800280e:	4618      	mov	r0, r3
 8002810:	3718      	adds	r7, #24
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002816:	b580      	push	{r7, lr}
 8002818:	b084      	sub	sp, #16
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800281e:	2300      	movs	r3, #0
 8002820:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002828:	2b02      	cmp	r3, #2
 800282a:	d005      	beq.n	8002838 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2204      	movs	r2, #4
 8002830:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	73fb      	strb	r3, [r7, #15]
 8002836:	e027      	b.n	8002888 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f022 020e 	bic.w	r2, r2, #14
 8002846:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f022 0201 	bic.w	r2, r2, #1
 8002856:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002860:	2101      	movs	r1, #1
 8002862:	fa01 f202 	lsl.w	r2, r1, r2
 8002866:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800287c:	2b00      	cmp	r3, #0
 800287e:	d003      	beq.n	8002888 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	4798      	blx	r3
    } 
  }
  return status;
 8002888:	7bfb      	ldrb	r3, [r7, #15]
}
 800288a:	4618      	mov	r0, r3
 800288c:	3710      	adds	r7, #16
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002892:	b580      	push	{r7, lr}
 8002894:	b084      	sub	sp, #16
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	2204      	movs	r2, #4
 80028b0:	409a      	lsls	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	4013      	ands	r3, r2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d024      	beq.n	8002904 <HAL_DMA_IRQHandler+0x72>
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	f003 0304 	and.w	r3, r3, #4
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d01f      	beq.n	8002904 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0320 	and.w	r3, r3, #32
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d107      	bne.n	80028e2 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f022 0204 	bic.w	r2, r2, #4
 80028e0:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ea:	2104      	movs	r1, #4
 80028ec:	fa01 f202 	lsl.w	r2, r1, r2
 80028f0:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d06a      	beq.n	80029d0 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002902:	e065      	b.n	80029d0 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002908:	2202      	movs	r2, #2
 800290a:	409a      	lsls	r2, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	4013      	ands	r3, r2
 8002910:	2b00      	cmp	r3, #0
 8002912:	d02c      	beq.n	800296e <HAL_DMA_IRQHandler+0xdc>
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d027      	beq.n	800296e <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0320 	and.w	r3, r3, #32
 8002928:	2b00      	cmp	r3, #0
 800292a:	d10b      	bne.n	8002944 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f022 020a 	bic.w	r2, r2, #10
 800293a:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800294c:	2102      	movs	r1, #2
 800294e:	fa01 f202 	lsl.w	r2, r1, r2
 8002952:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002960:	2b00      	cmp	r3, #0
 8002962:	d035      	beq.n	80029d0 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800296c:	e030      	b.n	80029d0 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002972:	2208      	movs	r2, #8
 8002974:	409a      	lsls	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	4013      	ands	r3, r2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d028      	beq.n	80029d0 <HAL_DMA_IRQHandler+0x13e>
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	f003 0308 	and.w	r3, r3, #8
 8002984:	2b00      	cmp	r3, #0
 8002986:	d023      	beq.n	80029d0 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f022 020e 	bic.w	r2, r2, #14
 8002996:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a0:	2101      	movs	r1, #1
 80029a2:	fa01 f202 	lsl.w	r2, r1, r2
 80029a6:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2201      	movs	r2, #1
 80029b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d004      	beq.n	80029d0 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	4798      	blx	r3
    }
  }
}  
 80029ce:	e7ff      	b.n	80029d0 <HAL_DMA_IRQHandler+0x13e>
 80029d0:	bf00      	nop
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr

080029f2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029f2:	b480      	push	{r7}
 80029f4:	b085      	sub	sp, #20
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	60f8      	str	r0, [r7, #12]
 80029fa:	60b9      	str	r1, [r7, #8]
 80029fc:	607a      	str	r2, [r7, #4]
 80029fe:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a08:	2101      	movs	r1, #1
 8002a0a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a0e:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	2b10      	cmp	r3, #16
 8002a1e:	d108      	bne.n	8002a32 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68ba      	ldr	r2, [r7, #8]
 8002a2e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002a30:	e007      	b.n	8002a42 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68ba      	ldr	r2, [r7, #8]
 8002a38:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	60da      	str	r2, [r3, #12]
}
 8002a42:	bf00      	nop
 8002a44:	3714      	adds	r7, #20
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
	...

08002a50 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	4b09      	ldr	r3, [pc, #36]	; (8002a84 <DMA_CalcBaseAndBitshift+0x34>)
 8002a60:	4413      	add	r3, r2
 8002a62:	4a09      	ldr	r2, [pc, #36]	; (8002a88 <DMA_CalcBaseAndBitshift+0x38>)
 8002a64:	fba2 2303 	umull	r2, r3, r2, r3
 8002a68:	091b      	lsrs	r3, r3, #4
 8002a6a:	009a      	lsls	r2, r3, #2
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	4a06      	ldr	r2, [pc, #24]	; (8002a8c <DMA_CalcBaseAndBitshift+0x3c>)
 8002a74:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002a76:	bf00      	nop
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	bffdfff8 	.word	0xbffdfff8
 8002a88:	cccccccd 	.word	0xcccccccd
 8002a8c:	40020000 	.word	0x40020000

08002a90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b087      	sub	sp, #28
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a9e:	e14e      	b.n	8002d3e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	2101      	movs	r1, #1
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8002aac:	4013      	ands	r3, r2
 8002aae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	f000 8140 	beq.w	8002d38 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f003 0303 	and.w	r3, r3, #3
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d005      	beq.n	8002ad0 <HAL_GPIO_Init+0x40>
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f003 0303 	and.w	r3, r3, #3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d130      	bne.n	8002b32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	005b      	lsls	r3, r3, #1
 8002ada:	2203      	movs	r2, #3
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	43db      	mvns	r3, r3
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	68da      	ldr	r2, [r3, #12]
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b06:	2201      	movs	r2, #1
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0e:	43db      	mvns	r3, r3
 8002b10:	693a      	ldr	r2, [r7, #16]
 8002b12:	4013      	ands	r3, r2
 8002b14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	091b      	lsrs	r3, r3, #4
 8002b1c:	f003 0201 	and.w	r2, r3, #1
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	fa02 f303 	lsl.w	r3, r2, r3
 8002b26:	693a      	ldr	r2, [r7, #16]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f003 0303 	and.w	r3, r3, #3
 8002b3a:	2b03      	cmp	r3, #3
 8002b3c:	d017      	beq.n	8002b6e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	2203      	movs	r2, #3
 8002b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4e:	43db      	mvns	r3, r3
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	4013      	ands	r3, r2
 8002b54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	689a      	ldr	r2, [r3, #8]
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	005b      	lsls	r3, r3, #1
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	693a      	ldr	r2, [r7, #16]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	693a      	ldr	r2, [r7, #16]
 8002b6c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f003 0303 	and.w	r3, r3, #3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d123      	bne.n	8002bc2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	08da      	lsrs	r2, r3, #3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	3208      	adds	r2, #8
 8002b82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	f003 0307 	and.w	r3, r3, #7
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	220f      	movs	r2, #15
 8002b92:	fa02 f303 	lsl.w	r3, r2, r3
 8002b96:	43db      	mvns	r3, r3
 8002b98:	693a      	ldr	r2, [r7, #16]
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	691a      	ldr	r2, [r3, #16]
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	f003 0307 	and.w	r3, r3, #7
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bae:	693a      	ldr	r2, [r7, #16]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	08da      	lsrs	r2, r3, #3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	3208      	adds	r2, #8
 8002bbc:	6939      	ldr	r1, [r7, #16]
 8002bbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	2203      	movs	r2, #3
 8002bce:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd2:	43db      	mvns	r3, r3
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f003 0203 	and.w	r2, r3, #3
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	005b      	lsls	r3, r3, #1
 8002be6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	693a      	ldr	r2, [r7, #16]
 8002bf4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	f000 809a 	beq.w	8002d38 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c04:	4b55      	ldr	r3, [pc, #340]	; (8002d5c <HAL_GPIO_Init+0x2cc>)
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	4a54      	ldr	r2, [pc, #336]	; (8002d5c <HAL_GPIO_Init+0x2cc>)
 8002c0a:	f043 0301 	orr.w	r3, r3, #1
 8002c0e:	6193      	str	r3, [r2, #24]
 8002c10:	4b52      	ldr	r3, [pc, #328]	; (8002d5c <HAL_GPIO_Init+0x2cc>)
 8002c12:	699b      	ldr	r3, [r3, #24]
 8002c14:	f003 0301 	and.w	r3, r3, #1
 8002c18:	60bb      	str	r3, [r7, #8]
 8002c1a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c1c:	4a50      	ldr	r2, [pc, #320]	; (8002d60 <HAL_GPIO_Init+0x2d0>)
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	089b      	lsrs	r3, r3, #2
 8002c22:	3302      	adds	r3, #2
 8002c24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	f003 0303 	and.w	r3, r3, #3
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	220f      	movs	r2, #15
 8002c34:	fa02 f303 	lsl.w	r3, r2, r3
 8002c38:	43db      	mvns	r3, r3
 8002c3a:	693a      	ldr	r2, [r7, #16]
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002c46:	d013      	beq.n	8002c70 <HAL_GPIO_Init+0x1e0>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4a46      	ldr	r2, [pc, #280]	; (8002d64 <HAL_GPIO_Init+0x2d4>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d00d      	beq.n	8002c6c <HAL_GPIO_Init+0x1dc>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4a45      	ldr	r2, [pc, #276]	; (8002d68 <HAL_GPIO_Init+0x2d8>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d007      	beq.n	8002c68 <HAL_GPIO_Init+0x1d8>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4a44      	ldr	r2, [pc, #272]	; (8002d6c <HAL_GPIO_Init+0x2dc>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d101      	bne.n	8002c64 <HAL_GPIO_Init+0x1d4>
 8002c60:	2303      	movs	r3, #3
 8002c62:	e006      	b.n	8002c72 <HAL_GPIO_Init+0x1e2>
 8002c64:	2305      	movs	r3, #5
 8002c66:	e004      	b.n	8002c72 <HAL_GPIO_Init+0x1e2>
 8002c68:	2302      	movs	r3, #2
 8002c6a:	e002      	b.n	8002c72 <HAL_GPIO_Init+0x1e2>
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e000      	b.n	8002c72 <HAL_GPIO_Init+0x1e2>
 8002c70:	2300      	movs	r3, #0
 8002c72:	697a      	ldr	r2, [r7, #20]
 8002c74:	f002 0203 	and.w	r2, r2, #3
 8002c78:	0092      	lsls	r2, r2, #2
 8002c7a:	4093      	lsls	r3, r2
 8002c7c:	693a      	ldr	r2, [r7, #16]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c82:	4937      	ldr	r1, [pc, #220]	; (8002d60 <HAL_GPIO_Init+0x2d0>)
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	089b      	lsrs	r3, r3, #2
 8002c88:	3302      	adds	r3, #2
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c90:	4b37      	ldr	r3, [pc, #220]	; (8002d70 <HAL_GPIO_Init+0x2e0>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	43db      	mvns	r3, r3
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d003      	beq.n	8002cb4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002cb4:	4a2e      	ldr	r2, [pc, #184]	; (8002d70 <HAL_GPIO_Init+0x2e0>)
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002cba:	4b2d      	ldr	r3, [pc, #180]	; (8002d70 <HAL_GPIO_Init+0x2e0>)
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	43db      	mvns	r3, r3
 8002cc4:	693a      	ldr	r2, [r7, #16]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d003      	beq.n	8002cde <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002cde:	4a24      	ldr	r2, [pc, #144]	; (8002d70 <HAL_GPIO_Init+0x2e0>)
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ce4:	4b22      	ldr	r3, [pc, #136]	; (8002d70 <HAL_GPIO_Init+0x2e0>)
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	43db      	mvns	r3, r3
 8002cee:	693a      	ldr	r2, [r7, #16]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d003      	beq.n	8002d08 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002d08:	4a19      	ldr	r2, [pc, #100]	; (8002d70 <HAL_GPIO_Init+0x2e0>)
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d0e:	4b18      	ldr	r3, [pc, #96]	; (8002d70 <HAL_GPIO_Init+0x2e0>)
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	43db      	mvns	r3, r3
 8002d18:	693a      	ldr	r2, [r7, #16]
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d003      	beq.n	8002d32 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002d2a:	693a      	ldr	r2, [r7, #16]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002d32:	4a0f      	ldr	r2, [pc, #60]	; (8002d70 <HAL_GPIO_Init+0x2e0>)
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	fa22 f303 	lsr.w	r3, r2, r3
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	f47f aea9 	bne.w	8002aa0 <HAL_GPIO_Init+0x10>
  }
}
 8002d4e:	bf00      	nop
 8002d50:	bf00      	nop
 8002d52:	371c      	adds	r7, #28
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr
 8002d5c:	40021000 	.word	0x40021000
 8002d60:	40010000 	.word	0x40010000
 8002d64:	48000400 	.word	0x48000400
 8002d68:	48000800 	.word	0x48000800
 8002d6c:	48000c00 	.word	0x48000c00
 8002d70:	40010400 	.word	0x40010400

08002d74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	807b      	strh	r3, [r7, #2]
 8002d80:	4613      	mov	r3, r2
 8002d82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d84:	787b      	ldrb	r3, [r7, #1]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d003      	beq.n	8002d92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d8a:	887a      	ldrh	r2, [r7, #2]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d90:	e002      	b.n	8002d98 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d92:	887a      	ldrh	r2, [r7, #2]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e081      	b.n	8002eba <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d106      	bne.n	8002dd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f7fd ff5c 	bl	8000c88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2224      	movs	r2, #36	; 0x24
 8002dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f022 0201 	bic.w	r2, r2, #1
 8002de6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685a      	ldr	r2, [r3, #4]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002df4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	689a      	ldr	r2, [r3, #8]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e04:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d107      	bne.n	8002e1e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	689a      	ldr	r2, [r3, #8]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e1a:	609a      	str	r2, [r3, #8]
 8002e1c:	e006      	b.n	8002e2c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	689a      	ldr	r2, [r3, #8]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002e2a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d104      	bne.n	8002e3e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e3c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	6812      	ldr	r2, [r2, #0]
 8002e48:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e50:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68da      	ldr	r2, [r3, #12]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e60:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	691a      	ldr	r2, [r3, #16]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	69d9      	ldr	r1, [r3, #28]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a1a      	ldr	r2, [r3, #32]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f042 0201 	orr.w	r2, r2, #1
 8002e9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2220      	movs	r2, #32
 8002ea6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3708      	adds	r7, #8
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
	...

08002ec4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b088      	sub	sp, #32
 8002ec8:	af02      	add	r7, sp, #8
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	4608      	mov	r0, r1
 8002ece:	4611      	mov	r1, r2
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	817b      	strh	r3, [r7, #10]
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	813b      	strh	r3, [r7, #8]
 8002eda:	4613      	mov	r3, r2
 8002edc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b20      	cmp	r3, #32
 8002ee8:	f040 80f9 	bne.w	80030de <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002eec:	6a3b      	ldr	r3, [r7, #32]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d002      	beq.n	8002ef8 <HAL_I2C_Mem_Write+0x34>
 8002ef2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d105      	bne.n	8002f04 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002efe:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e0ed      	b.n	80030e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d101      	bne.n	8002f12 <HAL_I2C_Mem_Write+0x4e>
 8002f0e:	2302      	movs	r3, #2
 8002f10:	e0e6      	b.n	80030e0 <HAL_I2C_Mem_Write+0x21c>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2201      	movs	r2, #1
 8002f16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f1a:	f7fe fc19 	bl	8001750 <HAL_GetTick>
 8002f1e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	9300      	str	r3, [sp, #0]
 8002f24:	2319      	movs	r3, #25
 8002f26:	2201      	movs	r2, #1
 8002f28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f001 fac6 	bl	80044be <I2C_WaitOnFlagUntilTimeout>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d001      	beq.n	8002f3c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e0d1      	b.n	80030e0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2221      	movs	r2, #33	; 0x21
 8002f40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2240      	movs	r2, #64	; 0x40
 8002f48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6a3a      	ldr	r2, [r7, #32]
 8002f56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002f5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2200      	movs	r2, #0
 8002f62:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f64:	88f8      	ldrh	r0, [r7, #6]
 8002f66:	893a      	ldrh	r2, [r7, #8]
 8002f68:	8979      	ldrh	r1, [r7, #10]
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	9301      	str	r3, [sp, #4]
 8002f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f70:	9300      	str	r3, [sp, #0]
 8002f72:	4603      	mov	r3, r0
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	f000 fd69 	bl	8003a4c <I2C_RequestMemoryWrite>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d005      	beq.n	8002f8c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e0a9      	b.n	80030e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	2bff      	cmp	r3, #255	; 0xff
 8002f94:	d90e      	bls.n	8002fb4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	22ff      	movs	r2, #255	; 0xff
 8002f9a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa0:	b2da      	uxtb	r2, r3
 8002fa2:	8979      	ldrh	r1, [r7, #10]
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	9300      	str	r3, [sp, #0]
 8002fa8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fac:	68f8      	ldr	r0, [r7, #12]
 8002fae:	f001 fbb9 	bl	8004724 <I2C_TransferConfig>
 8002fb2:	e00f      	b.n	8002fd4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb8:	b29a      	uxth	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc2:	b2da      	uxtb	r2, r3
 8002fc4:	8979      	ldrh	r1, [r7, #10]
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	9300      	str	r3, [sp, #0]
 8002fca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	f001 fba8 	bl	8004724 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fd4:	697a      	ldr	r2, [r7, #20]
 8002fd6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fd8:	68f8      	ldr	r0, [r7, #12]
 8002fda:	f001 fab0 	bl	800453e <I2C_WaitOnTXISFlagUntilTimeout>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d001      	beq.n	8002fe8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e07b      	b.n	80030e0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fec:	781a      	ldrb	r2, [r3, #0]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff8:	1c5a      	adds	r2, r3, #1
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003002:	b29b      	uxth	r3, r3
 8003004:	3b01      	subs	r3, #1
 8003006:	b29a      	uxth	r2, r3
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003010:	3b01      	subs	r3, #1
 8003012:	b29a      	uxth	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800301c:	b29b      	uxth	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d034      	beq.n	800308c <HAL_I2C_Mem_Write+0x1c8>
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003026:	2b00      	cmp	r3, #0
 8003028:	d130      	bne.n	800308c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	9300      	str	r3, [sp, #0]
 800302e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003030:	2200      	movs	r2, #0
 8003032:	2180      	movs	r1, #128	; 0x80
 8003034:	68f8      	ldr	r0, [r7, #12]
 8003036:	f001 fa42 	bl	80044be <I2C_WaitOnFlagUntilTimeout>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e04d      	b.n	80030e0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003048:	b29b      	uxth	r3, r3
 800304a:	2bff      	cmp	r3, #255	; 0xff
 800304c:	d90e      	bls.n	800306c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	22ff      	movs	r2, #255	; 0xff
 8003052:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003058:	b2da      	uxtb	r2, r3
 800305a:	8979      	ldrh	r1, [r7, #10]
 800305c:	2300      	movs	r3, #0
 800305e:	9300      	str	r3, [sp, #0]
 8003060:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003064:	68f8      	ldr	r0, [r7, #12]
 8003066:	f001 fb5d 	bl	8004724 <I2C_TransferConfig>
 800306a:	e00f      	b.n	800308c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003070:	b29a      	uxth	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800307a:	b2da      	uxtb	r2, r3
 800307c:	8979      	ldrh	r1, [r7, #10]
 800307e:	2300      	movs	r3, #0
 8003080:	9300      	str	r3, [sp, #0]
 8003082:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003086:	68f8      	ldr	r0, [r7, #12]
 8003088:	f001 fb4c 	bl	8004724 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003090:	b29b      	uxth	r3, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d19e      	bne.n	8002fd4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800309a:	68f8      	ldr	r0, [r7, #12]
 800309c:	f001 fa8f 	bl	80045be <I2C_WaitOnSTOPFlagUntilTimeout>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e01a      	b.n	80030e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2220      	movs	r2, #32
 80030b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	6859      	ldr	r1, [r3, #4]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	4b0a      	ldr	r3, [pc, #40]	; (80030e8 <HAL_I2C_Mem_Write+0x224>)
 80030be:	400b      	ands	r3, r1
 80030c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2220      	movs	r2, #32
 80030c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030da:	2300      	movs	r3, #0
 80030dc:	e000      	b.n	80030e0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80030de:	2302      	movs	r3, #2
  }
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3718      	adds	r7, #24
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	fe00e800 	.word	0xfe00e800

080030ec <HAL_I2C_Mem_Write_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                        uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b08a      	sub	sp, #40	; 0x28
 80030f0:	af02      	add	r7, sp, #8
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	4608      	mov	r0, r1
 80030f6:	4611      	mov	r1, r2
 80030f8:	461a      	mov	r2, r3
 80030fa:	4603      	mov	r3, r0
 80030fc:	817b      	strh	r3, [r7, #10]
 80030fe:	460b      	mov	r3, r1
 8003100:	813b      	strh	r3, [r7, #8]
 8003102:	4613      	mov	r3, r2
 8003104:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b20      	cmp	r3, #32
 8003110:	f040 80d5 	bne.w	80032be <HAL_I2C_Mem_Write_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 8003114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003116:	2b00      	cmp	r3, #0
 8003118:	d002      	beq.n	8003120 <HAL_I2C_Mem_Write_DMA+0x34>
 800311a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800311c:	2b00      	cmp	r3, #0
 800311e:	d105      	bne.n	800312c <HAL_I2C_Mem_Write_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003126:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e0c9      	b.n	80032c0 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003136:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800313a:	d101      	bne.n	8003140 <HAL_I2C_Mem_Write_DMA+0x54>
    {
      return HAL_BUSY;
 800313c:	2302      	movs	r3, #2
 800313e:	e0bf      	b.n	80032c0 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003146:	2b01      	cmp	r3, #1
 8003148:	d101      	bne.n	800314e <HAL_I2C_Mem_Write_DMA+0x62>
 800314a:	2302      	movs	r3, #2
 800314c:	e0b8      	b.n	80032c0 <HAL_I2C_Mem_Write_DMA+0x1d4>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2201      	movs	r2, #1
 8003152:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003156:	f7fe fafb 	bl	8001750 <HAL_GetTick>
 800315a:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2221      	movs	r2, #33	; 0x21
 8003160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2240      	movs	r2, #64	; 0x40
 8003168:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003176:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800317c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	4a51      	ldr	r2, [pc, #324]	; (80032c8 <HAL_I2C_Mem_Write_DMA+0x1dc>)
 8003182:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	4a51      	ldr	r2, [pc, #324]	; (80032cc <HAL_I2C_Mem_Write_DMA+0x1e0>)
 8003188:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800318e:	b29b      	uxth	r3, r3
 8003190:	2bff      	cmp	r3, #255	; 0xff
 8003192:	d906      	bls.n	80031a2 <HAL_I2C_Mem_Write_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	22ff      	movs	r2, #255	; 0xff
 8003198:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800319a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800319e:	61fb      	str	r3, [r7, #28]
 80031a0:	e007      	b.n	80031b2 <HAL_I2C_Mem_Write_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a6:	b29a      	uxth	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80031ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031b0:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart)
 80031b2:	88f8      	ldrh	r0, [r7, #6]
 80031b4:	893a      	ldrh	r2, [r7, #8]
 80031b6:	8979      	ldrh	r1, [r7, #10]
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	9301      	str	r3, [sp, #4]
 80031bc:	2319      	movs	r3, #25
 80031be:	9300      	str	r3, [sp, #0]
 80031c0:	4603      	mov	r3, r0
 80031c2:	68f8      	ldr	r0, [r7, #12]
 80031c4:	f000 fc42 	bl	8003a4c <I2C_RequestMemoryWrite>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d005      	beq.n	80031da <HAL_I2C_Mem_Write_DMA+0xee>
        != HAL_OK)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e072      	b.n	80032c0 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }


    if (hi2c->hdmatx != NULL)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d020      	beq.n	8003224 <HAL_I2C_Mem_Write_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e6:	4a3a      	ldr	r2, [pc, #232]	; (80032d0 <HAL_I2C_Mem_Write_DMA+0x1e4>)
 80031e8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ee:	4a39      	ldr	r2, [pc, #228]	; (80032d4 <HAL_I2C_Mem_Write_DMA+0x1e8>)
 80031f0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f6:	2200      	movs	r2, #0
 80031f8:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->hdmatx->XferAbortCallback = NULL;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031fe:	2200      	movs	r2, #0
 8003200:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003206:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	3328      	adds	r3, #40	; 0x28
 800320e:	461a      	mov	r2, r3
                                       hi2c->XferSize);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8003214:	f7ff faa0 	bl	8002758 <HAL_DMA_Start_IT>
 8003218:	4603      	mov	r3, r0
 800321a:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 800321c:	7dfb      	ldrb	r3, [r7, #23]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d139      	bne.n	8003296 <HAL_I2C_Mem_Write_DMA+0x1aa>
 8003222:	e013      	b.n	800324c <HAL_I2C_Mem_Write_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2220      	movs	r2, #32
 8003228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003238:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e039      	b.n	80032c0 <HAL_I2C_Mem_Write_DMA+0x1d4>
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003250:	b2da      	uxtb	r2, r3
 8003252:	8979      	ldrh	r1, [r7, #10]
 8003254:	2300      	movs	r3, #0
 8003256:	9300      	str	r3, [sp, #0]
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	f001 fa62 	bl	8004724 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003264:	b29a      	uxth	r2, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	b29a      	uxth	r2, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800327a:	2110      	movs	r1, #16
 800327c:	68f8      	ldr	r0, [r7, #12]
 800327e:	f001 fa7f 	bl	8004780 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003290:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8003292:	2300      	movs	r3, #0
 8003294:	e014      	b.n	80032c0 <HAL_I2C_Mem_Write_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2220      	movs	r2, #32
 800329a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032aa:	f043 0210 	orr.w	r2, r3, #16
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e000      	b.n	80032c0 <HAL_I2C_Mem_Write_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 80032be:	2302      	movs	r3, #2
  }
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3720      	adds	r7, #32
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	ffff0000 	.word	0xffff0000
 80032cc:	080036a5 	.word	0x080036a5
 80032d0:	080043bf 	.word	0x080043bf
 80032d4:	08004455 	.word	0x08004455

080032d8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	699b      	ldr	r3, [r3, #24]
 80032e6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d005      	beq.n	8003304 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032fc:	68ba      	ldr	r2, [r7, #8]
 80032fe:	68f9      	ldr	r1, [r7, #12]
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	4798      	blx	r3
  }
}
 8003304:	bf00      	nop
 8003306:	3710      	adds	r7, #16
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b086      	sub	sp, #24
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	0a1b      	lsrs	r3, r3, #8
 8003328:	f003 0301 	and.w	r3, r3, #1
 800332c:	2b00      	cmp	r3, #0
 800332e:	d010      	beq.n	8003352 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	09db      	lsrs	r3, r3, #7
 8003334:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00a      	beq.n	8003352 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003340:	f043 0201 	orr.w	r2, r3, #1
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003350:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	0a9b      	lsrs	r3, r3, #10
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	2b00      	cmp	r3, #0
 800335c:	d010      	beq.n	8003380 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	09db      	lsrs	r3, r3, #7
 8003362:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00a      	beq.n	8003380 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336e:	f043 0208 	orr.w	r2, r3, #8
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800337e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	0a5b      	lsrs	r3, r3, #9
 8003384:	f003 0301 	and.w	r3, r3, #1
 8003388:	2b00      	cmp	r3, #0
 800338a:	d010      	beq.n	80033ae <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	09db      	lsrs	r3, r3, #7
 8003390:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00a      	beq.n	80033ae <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800339c:	f043 0202 	orr.w	r2, r3, #2
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033ac:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f003 030b 	and.w	r3, r3, #11
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d003      	beq.n	80033c6 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80033be:	68f9      	ldr	r1, [r7, #12]
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f000 fee1 	bl	8004188 <I2C_ITError>
  }
}
 80033c6:	bf00      	nop
 80033c8:	3718      	adds	r7, #24
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033ce:	b480      	push	{r7}
 80033d0:	b083      	sub	sp, #12
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80033d6:	bf00      	nop
 80033d8:	370c      	adds	r7, #12
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr

080033e2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033e2:	b480      	push	{r7}
 80033e4:	b083      	sub	sp, #12
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80033ea:	bf00      	nop
 80033ec:	370c      	adds	r7, #12
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr

080033f6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033f6:	b480      	push	{r7}
 80033f8:	b083      	sub	sp, #12
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80033fe:	bf00      	nop
 8003400:	370c      	adds	r7, #12
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr

0800340a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800340a:	b480      	push	{r7}
 800340c:	b083      	sub	sp, #12
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003412:	bf00      	nop
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr

0800341e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800341e:	b480      	push	{r7}
 8003420:	b083      	sub	sp, #12
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
 8003426:	460b      	mov	r3, r1
 8003428:	70fb      	strb	r3, [r7, #3]
 800342a:	4613      	mov	r3, r2
 800342c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800342e:	bf00      	nop
 8003430:	370c      	adds	r7, #12
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr

0800343a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800343a:	b480      	push	{r7}
 800343c:	b083      	sub	sp, #12
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003442:	bf00      	nop
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr

0800344e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800344e:	b480      	push	{r7}
 8003450:	b083      	sub	sp, #12
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003456:	bf00      	nop
 8003458:	370c      	adds	r7, #12
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr

08003462 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003462:	b480      	push	{r7}
 8003464:	b083      	sub	sp, #12
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800346a:	bf00      	nop
 800346c:	370c      	adds	r7, #12
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr

08003476 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003476:	b480      	push	{r7}
 8003478:	b083      	sub	sp, #12
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800347e:	bf00      	nop
 8003480:	370c      	adds	r7, #12
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr

0800348a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800348a:	b480      	push	{r7}
 800348c:	b083      	sub	sp, #12
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003492:	bf00      	nop
 8003494:	370c      	adds	r7, #12
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr

0800349e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b086      	sub	sp, #24
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	60f8      	str	r0, [r7, #12]
 80034a6:	60b9      	str	r1, [r7, #8]
 80034a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d101      	bne.n	80034c2 <I2C_Slave_ISR_IT+0x24>
 80034be:	2302      	movs	r3, #2
 80034c0:	e0ec      	b.n	800369c <I2C_Slave_ISR_IT+0x1fe>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2201      	movs	r2, #1
 80034c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	095b      	lsrs	r3, r3, #5
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d009      	beq.n	80034ea <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	095b      	lsrs	r3, r3, #5
 80034da:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d003      	beq.n	80034ea <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80034e2:	6939      	ldr	r1, [r7, #16]
 80034e4:	68f8      	ldr	r0, [r7, #12]
 80034e6:	f000 fcef 	bl	8003ec8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	091b      	lsrs	r3, r3, #4
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d04d      	beq.n	8003592 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	091b      	lsrs	r3, r3, #4
 80034fa:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d047      	beq.n	8003592 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003506:	b29b      	uxth	r3, r3
 8003508:	2b00      	cmp	r3, #0
 800350a:	d128      	bne.n	800355e <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003512:	b2db      	uxtb	r3, r3
 8003514:	2b28      	cmp	r3, #40	; 0x28
 8003516:	d108      	bne.n	800352a <I2C_Slave_ISR_IT+0x8c>
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800351e:	d104      	bne.n	800352a <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003520:	6939      	ldr	r1, [r7, #16]
 8003522:	68f8      	ldr	r0, [r7, #12]
 8003524:	f000 fdda 	bl	80040dc <I2C_ITListenCplt>
 8003528:	e032      	b.n	8003590 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b29      	cmp	r3, #41	; 0x29
 8003534:	d10e      	bne.n	8003554 <I2C_Slave_ISR_IT+0xb6>
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800353c:	d00a      	beq.n	8003554 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2210      	movs	r2, #16
 8003544:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003546:	68f8      	ldr	r0, [r7, #12]
 8003548:	f000 ff15 	bl	8004376 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800354c:	68f8      	ldr	r0, [r7, #12]
 800354e:	f000 fb92 	bl	8003c76 <I2C_ITSlaveSeqCplt>
 8003552:	e01d      	b.n	8003590 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2210      	movs	r2, #16
 800355a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800355c:	e096      	b.n	800368c <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2210      	movs	r2, #16
 8003564:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356a:	f043 0204 	orr.w	r2, r3, #4
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d004      	beq.n	8003582 <I2C_Slave_ISR_IT+0xe4>
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800357e:	f040 8085 	bne.w	800368c <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003586:	4619      	mov	r1, r3
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f000 fdfd 	bl	8004188 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800358e:	e07d      	b.n	800368c <I2C_Slave_ISR_IT+0x1ee>
 8003590:	e07c      	b.n	800368c <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	089b      	lsrs	r3, r3, #2
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b00      	cmp	r3, #0
 800359c:	d030      	beq.n	8003600 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	089b      	lsrs	r3, r3, #2
 80035a2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d02a      	beq.n	8003600 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d018      	beq.n	80035e6 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035be:	b2d2      	uxtb	r2, r2
 80035c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c6:	1c5a      	adds	r2, r3, #1
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035d0:	3b01      	subs	r3, #1
 80035d2:	b29a      	uxth	r2, r3
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035dc:	b29b      	uxth	r3, r3
 80035de:	3b01      	subs	r3, #1
 80035e0:	b29a      	uxth	r2, r3
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d14f      	bne.n	8003690 <I2C_Slave_ISR_IT+0x1f2>
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80035f6:	d04b      	beq.n	8003690 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80035f8:	68f8      	ldr	r0, [r7, #12]
 80035fa:	f000 fb3c 	bl	8003c76 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80035fe:	e047      	b.n	8003690 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	08db      	lsrs	r3, r3, #3
 8003604:	f003 0301 	and.w	r3, r3, #1
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00a      	beq.n	8003622 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	08db      	lsrs	r3, r3, #3
 8003610:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003614:	2b00      	cmp	r3, #0
 8003616:	d004      	beq.n	8003622 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003618:	6939      	ldr	r1, [r7, #16]
 800361a:	68f8      	ldr	r0, [r7, #12]
 800361c:	f000 fa6a 	bl	8003af4 <I2C_ITAddrCplt>
 8003620:	e037      	b.n	8003692 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	085b      	lsrs	r3, r3, #1
 8003626:	f003 0301 	and.w	r3, r3, #1
 800362a:	2b00      	cmp	r3, #0
 800362c:	d031      	beq.n	8003692 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	085b      	lsrs	r3, r3, #1
 8003632:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003636:	2b00      	cmp	r3, #0
 8003638:	d02b      	beq.n	8003692 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800363e:	b29b      	uxth	r3, r3
 8003640:	2b00      	cmp	r3, #0
 8003642:	d018      	beq.n	8003676 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003648:	781a      	ldrb	r2, [r3, #0]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003654:	1c5a      	adds	r2, r3, #1
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800365e:	b29b      	uxth	r3, r3
 8003660:	3b01      	subs	r3, #1
 8003662:	b29a      	uxth	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800366c:	3b01      	subs	r3, #1
 800366e:	b29a      	uxth	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	851a      	strh	r2, [r3, #40]	; 0x28
 8003674:	e00d      	b.n	8003692 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800367c:	d002      	beq.n	8003684 <I2C_Slave_ISR_IT+0x1e6>
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d106      	bne.n	8003692 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f000 faf6 	bl	8003c76 <I2C_ITSlaveSeqCplt>
 800368a:	e002      	b.n	8003692 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800368c:	bf00      	nop
 800368e:	e000      	b.n	8003692 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8003690:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800369a:	2300      	movs	r3, #0
}
 800369c:	4618      	mov	r0, r3
 800369e:	3718      	adds	r7, #24
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b088      	sub	sp, #32
 80036a8:	af02      	add	r7, sp, #8
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d101      	bne.n	80036be <I2C_Master_ISR_DMA+0x1a>
 80036ba:	2302      	movs	r3, #2
 80036bc:	e0e1      	b.n	8003882 <I2C_Master_ISR_DMA+0x1de>
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2201      	movs	r2, #1
 80036c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	091b      	lsrs	r3, r3, #4
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d017      	beq.n	8003702 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	091b      	lsrs	r3, r3, #4
 80036d6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d011      	beq.n	8003702 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2210      	movs	r2, #16
 80036e4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ea:	f043 0204 	orr.w	r2, r3, #4
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80036f2:	2120      	movs	r1, #32
 80036f4:	68f8      	ldr	r0, [r7, #12]
 80036f6:	f001 f843 	bl	8004780 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80036fa:	68f8      	ldr	r0, [r7, #12]
 80036fc:	f000 fe3b 	bl	8004376 <I2C_Flush_TXDR>
 8003700:	e0ba      	b.n	8003878 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	09db      	lsrs	r3, r3, #7
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	2b00      	cmp	r3, #0
 800370c:	d072      	beq.n	80037f4 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	099b      	lsrs	r3, r3, #6
 8003712:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003716:	2b00      	cmp	r3, #0
 8003718:	d06c      	beq.n	80037f4 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003728:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800372e:	b29b      	uxth	r3, r3
 8003730:	2b00      	cmp	r3, #0
 8003732:	d04e      	beq.n	80037d2 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	b29b      	uxth	r3, r3
 800373c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003740:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003746:	b29b      	uxth	r3, r3
 8003748:	2bff      	cmp	r3, #255	; 0xff
 800374a:	d906      	bls.n	800375a <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	22ff      	movs	r2, #255	; 0xff
 8003750:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8003752:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003756:	617b      	str	r3, [r7, #20]
 8003758:	e010      	b.n	800377c <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800375e:	b29a      	uxth	r2, r3
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003768:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800376c:	d003      	beq.n	8003776 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003772:	617b      	str	r3, [r7, #20]
 8003774:	e002      	b.n	800377c <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8003776:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800377a:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003780:	b2da      	uxtb	r2, r3
 8003782:	8a79      	ldrh	r1, [r7, #18]
 8003784:	2300      	movs	r3, #0
 8003786:	9300      	str	r3, [sp, #0]
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	68f8      	ldr	r0, [r7, #12]
 800378c:	f000 ffca 	bl	8004724 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003794:	b29a      	uxth	r2, r3
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	b29a      	uxth	r2, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b22      	cmp	r3, #34	; 0x22
 80037ac:	d108      	bne.n	80037c0 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037bc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80037be:	e05b      	b.n	8003878 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037ce:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80037d0:	e052      	b.n	8003878 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80037e0:	d003      	beq.n	80037ea <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80037e2:	68f8      	ldr	r0, [r7, #12]
 80037e4:	f000 fa0a 	bl	8003bfc <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80037e8:	e046      	b.n	8003878 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80037ea:	2140      	movs	r1, #64	; 0x40
 80037ec:	68f8      	ldr	r0, [r7, #12]
 80037ee:	f000 fccb 	bl	8004188 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80037f2:	e041      	b.n	8003878 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	099b      	lsrs	r3, r3, #6
 80037f8:	f003 0301 	and.w	r3, r3, #1
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d029      	beq.n	8003854 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	099b      	lsrs	r3, r3, #6
 8003804:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003808:	2b00      	cmp	r3, #0
 800380a:	d023      	beq.n	8003854 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003810:	b29b      	uxth	r3, r3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d119      	bne.n	800384a <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003820:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003824:	d027      	beq.n	8003876 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800382e:	d108      	bne.n	8003842 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	685a      	ldr	r2, [r3, #4]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800383e:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8003840:	e019      	b.n	8003876 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003842:	68f8      	ldr	r0, [r7, #12]
 8003844:	f000 f9da 	bl	8003bfc <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8003848:	e015      	b.n	8003876 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800384a:	2140      	movs	r1, #64	; 0x40
 800384c:	68f8      	ldr	r0, [r7, #12]
 800384e:	f000 fc9b 	bl	8004188 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003852:	e010      	b.n	8003876 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	095b      	lsrs	r3, r3, #5
 8003858:	f003 0301 	and.w	r3, r3, #1
 800385c:	2b00      	cmp	r3, #0
 800385e:	d00b      	beq.n	8003878 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	095b      	lsrs	r3, r3, #5
 8003864:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003868:	2b00      	cmp	r3, #0
 800386a:	d005      	beq.n	8003878 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800386c:	68b9      	ldr	r1, [r7, #8]
 800386e:	68f8      	ldr	r0, [r7, #12]
 8003870:	f000 fa60 	bl	8003d34 <I2C_ITMasterCplt>
 8003874:	e000      	b.n	8003878 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8003876:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3718      	adds	r7, #24
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}

0800388a <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800388a:	b580      	push	{r7, lr}
 800388c:	b088      	sub	sp, #32
 800388e:	af00      	add	r7, sp, #0
 8003890:	60f8      	str	r0, [r7, #12]
 8003892:	60b9      	str	r1, [r7, #8]
 8003894:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389a:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800389c:	2300      	movs	r3, #0
 800389e:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d101      	bne.n	80038ae <I2C_Slave_ISR_DMA+0x24>
 80038aa:	2302      	movs	r3, #2
 80038ac:	e0c9      	b.n	8003a42 <I2C_Slave_ISR_DMA+0x1b8>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	095b      	lsrs	r3, r3, #5
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d009      	beq.n	80038d6 <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	095b      	lsrs	r3, r3, #5
 80038c6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d003      	beq.n	80038d6 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80038ce:	68b9      	ldr	r1, [r7, #8]
 80038d0:	68f8      	ldr	r0, [r7, #12]
 80038d2:	f000 faf9 	bl	8003ec8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	091b      	lsrs	r3, r3, #4
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	2b00      	cmp	r3, #0
 80038e0:	f000 809a 	beq.w	8003a18 <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	091b      	lsrs	r3, r3, #4
 80038e8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	f000 8093 	beq.w	8003a18 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	0b9b      	lsrs	r3, r3, #14
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d105      	bne.n	800390a <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	0bdb      	lsrs	r3, r3, #15
 8003902:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003906:	2b00      	cmp	r3, #0
 8003908:	d07f      	beq.n	8003a0a <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00d      	beq.n	800392e <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	0bdb      	lsrs	r3, r3, #15
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	2b00      	cmp	r3, #0
 800391c:	d007      	beq.n	800392e <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 800392a:	2301      	movs	r3, #1
 800392c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00d      	beq.n	8003952 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	0b9b      	lsrs	r3, r3, #14
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b00      	cmp	r3, #0
 8003940:	d007      	beq.n	8003952 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 800394e:	2301      	movs	r3, #1
 8003950:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d128      	bne.n	80039aa <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800395e:	b2db      	uxtb	r3, r3
 8003960:	2b28      	cmp	r3, #40	; 0x28
 8003962:	d108      	bne.n	8003976 <I2C_Slave_ISR_DMA+0xec>
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800396a:	d104      	bne.n	8003976 <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800396c:	68b9      	ldr	r1, [r7, #8]
 800396e:	68f8      	ldr	r0, [r7, #12]
 8003970:	f000 fbb4 	bl	80040dc <I2C_ITListenCplt>
 8003974:	e048      	b.n	8003a08 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b29      	cmp	r3, #41	; 0x29
 8003980:	d10e      	bne.n	80039a0 <I2C_Slave_ISR_DMA+0x116>
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003988:	d00a      	beq.n	80039a0 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2210      	movs	r2, #16
 8003990:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	f000 fcef 	bl	8004376 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	f000 f96c 	bl	8003c76 <I2C_ITSlaveSeqCplt>
 800399e:	e033      	b.n	8003a08 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2210      	movs	r2, #16
 80039a6:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80039a8:	e034      	b.n	8003a14 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2210      	movs	r2, #16
 80039b0:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b6:	f043 0204 	orr.w	r2, r3, #4
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039c4:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d003      	beq.n	80039d4 <I2C_Slave_ISR_DMA+0x14a>
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039d2:	d11f      	bne.n	8003a14 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80039d4:	7dfb      	ldrb	r3, [r7, #23]
 80039d6:	2b21      	cmp	r3, #33	; 0x21
 80039d8:	d002      	beq.n	80039e0 <I2C_Slave_ISR_DMA+0x156>
 80039da:	7dfb      	ldrb	r3, [r7, #23]
 80039dc:	2b29      	cmp	r3, #41	; 0x29
 80039de:	d103      	bne.n	80039e8 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2221      	movs	r2, #33	; 0x21
 80039e4:	631a      	str	r2, [r3, #48]	; 0x30
 80039e6:	e008      	b.n	80039fa <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80039e8:	7dfb      	ldrb	r3, [r7, #23]
 80039ea:	2b22      	cmp	r3, #34	; 0x22
 80039ec:	d002      	beq.n	80039f4 <I2C_Slave_ISR_DMA+0x16a>
 80039ee:	7dfb      	ldrb	r3, [r7, #23]
 80039f0:	2b2a      	cmp	r3, #42	; 0x2a
 80039f2:	d102      	bne.n	80039fa <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2222      	movs	r2, #34	; 0x22
 80039f8:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039fe:	4619      	mov	r1, r3
 8003a00:	68f8      	ldr	r0, [r7, #12]
 8003a02:	f000 fbc1 	bl	8004188 <I2C_ITError>
      if (treatdmanack == 1U)
 8003a06:	e005      	b.n	8003a14 <I2C_Slave_ISR_DMA+0x18a>
 8003a08:	e004      	b.n	8003a14 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2210      	movs	r2, #16
 8003a10:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003a12:	e011      	b.n	8003a38 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8003a14:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003a16:	e00f      	b.n	8003a38 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	08db      	lsrs	r3, r3, #3
 8003a1c:	f003 0301 	and.w	r3, r3, #1
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d009      	beq.n	8003a38 <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	08db      	lsrs	r3, r3, #3
 8003a28:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d003      	beq.n	8003a38 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8003a30:	68b9      	ldr	r1, [r7, #8]
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	f000 f85e 	bl	8003af4 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3720      	adds	r7, #32
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
	...

08003a4c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b086      	sub	sp, #24
 8003a50:	af02      	add	r7, sp, #8
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	4608      	mov	r0, r1
 8003a56:	4611      	mov	r1, r2
 8003a58:	461a      	mov	r2, r3
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	817b      	strh	r3, [r7, #10]
 8003a5e:	460b      	mov	r3, r1
 8003a60:	813b      	strh	r3, [r7, #8]
 8003a62:	4613      	mov	r3, r2
 8003a64:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003a66:	88fb      	ldrh	r3, [r7, #6]
 8003a68:	b2da      	uxtb	r2, r3
 8003a6a:	8979      	ldrh	r1, [r7, #10]
 8003a6c:	4b20      	ldr	r3, [pc, #128]	; (8003af0 <I2C_RequestMemoryWrite+0xa4>)
 8003a6e:	9300      	str	r3, [sp, #0]
 8003a70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a74:	68f8      	ldr	r0, [r7, #12]
 8003a76:	f000 fe55 	bl	8004724 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a7a:	69fa      	ldr	r2, [r7, #28]
 8003a7c:	69b9      	ldr	r1, [r7, #24]
 8003a7e:	68f8      	ldr	r0, [r7, #12]
 8003a80:	f000 fd5d 	bl	800453e <I2C_WaitOnTXISFlagUntilTimeout>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d001      	beq.n	8003a8e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e02c      	b.n	8003ae8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a8e:	88fb      	ldrh	r3, [r7, #6]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d105      	bne.n	8003aa0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a94:	893b      	ldrh	r3, [r7, #8]
 8003a96:	b2da      	uxtb	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	629a      	str	r2, [r3, #40]	; 0x28
 8003a9e:	e015      	b.n	8003acc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003aa0:	893b      	ldrh	r3, [r7, #8]
 8003aa2:	0a1b      	lsrs	r3, r3, #8
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	b2da      	uxtb	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aae:	69fa      	ldr	r2, [r7, #28]
 8003ab0:	69b9      	ldr	r1, [r7, #24]
 8003ab2:	68f8      	ldr	r0, [r7, #12]
 8003ab4:	f000 fd43 	bl	800453e <I2C_WaitOnTXISFlagUntilTimeout>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d001      	beq.n	8003ac2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e012      	b.n	8003ae8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ac2:	893b      	ldrh	r3, [r7, #8]
 8003ac4:	b2da      	uxtb	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	9300      	str	r3, [sp, #0]
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	2180      	movs	r1, #128	; 0x80
 8003ad6:	68f8      	ldr	r0, [r7, #12]
 8003ad8:	f000 fcf1 	bl	80044be <I2C_WaitOnFlagUntilTimeout>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d001      	beq.n	8003ae6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e000      	b.n	8003ae8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003ae6:	2300      	movs	r3, #0
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3710      	adds	r7, #16
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	80002000 	.word	0x80002000

08003af4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003b0a:	2b28      	cmp	r3, #40	; 0x28
 8003b0c:	d16a      	bne.n	8003be4 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	699b      	ldr	r3, [r3, #24]
 8003b14:	0c1b      	lsrs	r3, r3, #16
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	0c1b      	lsrs	r3, r3, #16
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003b2c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b3a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003b48:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d138      	bne.n	8003bc4 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003b52:	897b      	ldrh	r3, [r7, #10]
 8003b54:	09db      	lsrs	r3, r3, #7
 8003b56:	b29a      	uxth	r2, r3
 8003b58:	89bb      	ldrh	r3, [r7, #12]
 8003b5a:	4053      	eors	r3, r2
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	f003 0306 	and.w	r3, r3, #6
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d11c      	bne.n	8003ba0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003b66:	897b      	ldrh	r3, [r7, #10]
 8003b68:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b6e:	1c5a      	adds	r2, r3, #1
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d13b      	bne.n	8003bf4 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2208      	movs	r2, #8
 8003b88:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003b92:	89ba      	ldrh	r2, [r7, #12]
 8003b94:	7bfb      	ldrb	r3, [r7, #15]
 8003b96:	4619      	mov	r1, r3
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f7ff fc40 	bl	800341e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003b9e:	e029      	b.n	8003bf4 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003ba0:	893b      	ldrh	r3, [r7, #8]
 8003ba2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003ba4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 fe4d 	bl	8004848 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003bb6:	89ba      	ldrh	r2, [r7, #12]
 8003bb8:	7bfb      	ldrb	r3, [r7, #15]
 8003bba:	4619      	mov	r1, r3
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f7ff fc2e 	bl	800341e <HAL_I2C_AddrCallback>
}
 8003bc2:	e017      	b.n	8003bf4 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003bc4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 fe3d 	bl	8004848 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003bd6:	89ba      	ldrh	r2, [r7, #12]
 8003bd8:	7bfb      	ldrb	r3, [r7, #15]
 8003bda:	4619      	mov	r1, r3
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f7ff fc1e 	bl	800341e <HAL_I2C_AddrCallback>
}
 8003be2:	e007      	b.n	8003bf4 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2208      	movs	r2, #8
 8003bea:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003bf4:	bf00      	nop
 8003bf6:	3710      	adds	r7, #16
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	2b21      	cmp	r3, #33	; 0x21
 8003c16:	d115      	bne.n	8003c44 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2220      	movs	r2, #32
 8003c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2211      	movs	r2, #17
 8003c24:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003c2c:	2101      	movs	r1, #1
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 fe0a 	bl	8004848 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f7ff fbc6 	bl	80033ce <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003c42:	e014      	b.n	8003c6e <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2220      	movs	r2, #32
 8003c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2212      	movs	r2, #18
 8003c50:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003c58:	2102      	movs	r1, #2
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 fdf4 	bl	8004848 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f7ff fbba 	bl	80033e2 <HAL_I2C_MasterRxCpltCallback>
}
 8003c6e:	bf00      	nop
 8003c70:	3708      	adds	r7, #8
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}

08003c76 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003c76:	b580      	push	{r7, lr}
 8003c78:	b084      	sub	sp, #16
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	0b9b      	lsrs	r3, r3, #14
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d008      	beq.n	8003cac <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003ca8:	601a      	str	r2, [r3, #0]
 8003caa:	e00d      	b.n	8003cc8 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	0bdb      	lsrs	r3, r3, #15
 8003cb0:	f003 0301 	and.w	r3, r3, #1
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d007      	beq.n	8003cc8 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003cc6:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	2b29      	cmp	r3, #41	; 0x29
 8003cd2:	d112      	bne.n	8003cfa <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2228      	movs	r2, #40	; 0x28
 8003cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2221      	movs	r2, #33	; 0x21
 8003ce0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003ce2:	2101      	movs	r1, #1
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f000 fdaf 	bl	8004848 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f7ff fb7f 	bl	80033f6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003cf8:	e017      	b.n	8003d2a <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	2b2a      	cmp	r3, #42	; 0x2a
 8003d04:	d111      	bne.n	8003d2a <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2228      	movs	r2, #40	; 0x28
 8003d0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2222      	movs	r2, #34	; 0x22
 8003d12:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003d14:	2102      	movs	r1, #2
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 fd96 	bl	8004848 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f7ff fb70 	bl	800340a <HAL_I2C_SlaveRxCpltCallback>
}
 8003d2a:	bf00      	nop
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
	...

08003d34 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b086      	sub	sp, #24
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2220      	movs	r2, #32
 8003d48:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b21      	cmp	r3, #33	; 0x21
 8003d54:	d107      	bne.n	8003d66 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003d56:	2101      	movs	r1, #1
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f000 fd75 	bl	8004848 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2211      	movs	r2, #17
 8003d62:	631a      	str	r2, [r3, #48]	; 0x30
 8003d64:	e00c      	b.n	8003d80 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	2b22      	cmp	r3, #34	; 0x22
 8003d70:	d106      	bne.n	8003d80 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003d72:	2102      	movs	r1, #2
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f000 fd67 	bl	8004848 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2212      	movs	r2, #18
 8003d7e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	6859      	ldr	r1, [r3, #4]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	4b4d      	ldr	r3, [pc, #308]	; (8003ec0 <I2C_ITMasterCplt+0x18c>)
 8003d8c:	400b      	ands	r3, r1
 8003d8e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a4a      	ldr	r2, [pc, #296]	; (8003ec4 <I2C_ITMasterCplt+0x190>)
 8003d9a:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	091b      	lsrs	r3, r3, #4
 8003da0:	f003 0301 	and.w	r3, r3, #1
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d009      	beq.n	8003dbc <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2210      	movs	r2, #16
 8003dae:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db4:	f043 0204 	orr.w	r2, r3, #4
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	2b60      	cmp	r3, #96	; 0x60
 8003dc6:	d10b      	bne.n	8003de0 <I2C_ITMasterCplt+0xac>
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	089b      	lsrs	r3, r3, #2
 8003dcc:	f003 0301 	and.w	r3, r3, #1
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d005      	beq.n	8003de0 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8003dde:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f000 fac8 	bl	8004376 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dea:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	2b60      	cmp	r3, #96	; 0x60
 8003df6:	d002      	beq.n	8003dfe <I2C_ITMasterCplt+0xca>
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d006      	beq.n	8003e0c <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e02:	4619      	mov	r1, r3
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f000 f9bf 	bl	8004188 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003e0a:	e054      	b.n	8003eb6 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	2b21      	cmp	r3, #33	; 0x21
 8003e16:	d124      	bne.n	8003e62 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2220      	movs	r2, #32
 8003e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	2b40      	cmp	r3, #64	; 0x40
 8003e30:	d10b      	bne.n	8003e4a <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f7ff fb03 	bl	800344e <HAL_I2C_MemTxCpltCallback>
}
 8003e48:	e035      	b.n	8003eb6 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f7ff fab7 	bl	80033ce <HAL_I2C_MasterTxCpltCallback>
}
 8003e60:	e029      	b.n	8003eb6 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b22      	cmp	r3, #34	; 0x22
 8003e6c:	d123      	bne.n	8003eb6 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2220      	movs	r2, #32
 8003e72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	2b40      	cmp	r3, #64	; 0x40
 8003e86:	d10b      	bne.n	8003ea0 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f7ff fae2 	bl	8003462 <HAL_I2C_MemRxCpltCallback>
}
 8003e9e:	e00a      	b.n	8003eb6 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f7ff fa96 	bl	80033e2 <HAL_I2C_MasterRxCpltCallback>
}
 8003eb6:	bf00      	nop
 8003eb8:	3718      	adds	r7, #24
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	fe00e800 	.word	0xfe00e800
 8003ec4:	ffff0000 	.word	0xffff0000

08003ec8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b086      	sub	sp, #24
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ee4:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2220      	movs	r2, #32
 8003eec:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003eee:	7bfb      	ldrb	r3, [r7, #15]
 8003ef0:	2b21      	cmp	r3, #33	; 0x21
 8003ef2:	d002      	beq.n	8003efa <I2C_ITSlaveCplt+0x32>
 8003ef4:	7bfb      	ldrb	r3, [r7, #15]
 8003ef6:	2b29      	cmp	r3, #41	; 0x29
 8003ef8:	d108      	bne.n	8003f0c <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003efa:	f248 0101 	movw	r1, #32769	; 0x8001
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 fca2 	bl	8004848 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2221      	movs	r2, #33	; 0x21
 8003f08:	631a      	str	r2, [r3, #48]	; 0x30
 8003f0a:	e00d      	b.n	8003f28 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003f0c:	7bfb      	ldrb	r3, [r7, #15]
 8003f0e:	2b22      	cmp	r3, #34	; 0x22
 8003f10:	d002      	beq.n	8003f18 <I2C_ITSlaveCplt+0x50>
 8003f12:	7bfb      	ldrb	r3, [r7, #15]
 8003f14:	2b2a      	cmp	r3, #42	; 0x2a
 8003f16:	d107      	bne.n	8003f28 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003f18:	f248 0102 	movw	r1, #32770	; 0x8002
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f000 fc93 	bl	8004848 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2222      	movs	r2, #34	; 0x22
 8003f26:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	685a      	ldr	r2, [r3, #4]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f36:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	6859      	ldr	r1, [r3, #4]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	4b64      	ldr	r3, [pc, #400]	; (80040d4 <I2C_ITSlaveCplt+0x20c>)
 8003f44:	400b      	ands	r3, r1
 8003f46:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f000 fa14 	bl	8004376 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	0b9b      	lsrs	r3, r3, #14
 8003f52:	f003 0301 	and.w	r3, r3, #1
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d013      	beq.n	8003f82 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003f68:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d020      	beq.n	8003fb4 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	b29a      	uxth	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f80:	e018      	b.n	8003fb4 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	0bdb      	lsrs	r3, r3, #15
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d012      	beq.n	8003fb4 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f9c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d006      	beq.n	8003fb4 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	089b      	lsrs	r3, r3, #2
 8003fb8:	f003 0301 	and.w	r3, r3, #1
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d020      	beq.n	8004002 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	f023 0304 	bic.w	r3, r3, #4
 8003fc6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd2:	b2d2      	uxtb	r2, r2
 8003fd4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fda:	1c5a      	adds	r2, r3, #1
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d00c      	beq.n	8004002 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fec:	3b01      	subs	r3, #1
 8003fee:	b29a      	uxth	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	b29a      	uxth	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004006:	b29b      	uxth	r3, r3
 8004008:	2b00      	cmp	r3, #0
 800400a:	d005      	beq.n	8004018 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004010:	f043 0204 	orr.w	r2, r3, #4
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800402a:	2b00      	cmp	r3, #0
 800402c:	d010      	beq.n	8004050 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004032:	4619      	mov	r1, r3
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f000 f8a7 	bl	8004188 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004040:	b2db      	uxtb	r3, r3
 8004042:	2b28      	cmp	r3, #40	; 0x28
 8004044:	d141      	bne.n	80040ca <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004046:	6979      	ldr	r1, [r7, #20]
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f000 f847 	bl	80040dc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800404e:	e03c      	b.n	80040ca <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004054:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004058:	d014      	beq.n	8004084 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f7ff fe0b 	bl	8003c76 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a1d      	ldr	r2, [pc, #116]	; (80040d8 <I2C_ITSlaveCplt+0x210>)
 8004064:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2220      	movs	r2, #32
 800406a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f7ff f9dc 	bl	800343a <HAL_I2C_ListenCpltCallback>
}
 8004082:	e022      	b.n	80040ca <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800408a:	b2db      	uxtb	r3, r3
 800408c:	2b22      	cmp	r3, #34	; 0x22
 800408e:	d10e      	bne.n	80040ae <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2220      	movs	r2, #32
 8004094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f7ff f9af 	bl	800340a <HAL_I2C_SlaveRxCpltCallback>
}
 80040ac:	e00d      	b.n	80040ca <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2220      	movs	r2, #32
 80040b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f7ff f996 	bl	80033f6 <HAL_I2C_SlaveTxCpltCallback>
}
 80040ca:	bf00      	nop
 80040cc:	3718      	adds	r7, #24
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	fe00e800 	.word	0xfe00e800
 80040d8:	ffff0000 	.word	0xffff0000

080040dc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a26      	ldr	r2, [pc, #152]	; (8004184 <I2C_ITListenCplt+0xa8>)
 80040ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2220      	movs	r2, #32
 80040f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	089b      	lsrs	r3, r3, #2
 800410c:	f003 0301 	and.w	r3, r3, #1
 8004110:	2b00      	cmp	r3, #0
 8004112:	d022      	beq.n	800415a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411e:	b2d2      	uxtb	r2, r2
 8004120:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004126:	1c5a      	adds	r2, r3, #1
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004130:	2b00      	cmp	r3, #0
 8004132:	d012      	beq.n	800415a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004138:	3b01      	subs	r3, #1
 800413a:	b29a      	uxth	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004144:	b29b      	uxth	r3, r3
 8004146:	3b01      	subs	r3, #1
 8004148:	b29a      	uxth	r2, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004152:	f043 0204 	orr.w	r2, r3, #4
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800415a:	f248 0103 	movw	r1, #32771	; 0x8003
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 fb72 	bl	8004848 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2210      	movs	r2, #16
 800416a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f7ff f960 	bl	800343a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800417a:	bf00      	nop
 800417c:	3708      	adds	r7, #8
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	ffff0000 	.word	0xffff0000

08004188 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004198:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a5d      	ldr	r2, [pc, #372]	; (800431c <I2C_ITError+0x194>)
 80041a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	431a      	orrs	r2, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80041ba:	7bfb      	ldrb	r3, [r7, #15]
 80041bc:	2b28      	cmp	r3, #40	; 0x28
 80041be:	d005      	beq.n	80041cc <I2C_ITError+0x44>
 80041c0:	7bfb      	ldrb	r3, [r7, #15]
 80041c2:	2b29      	cmp	r3, #41	; 0x29
 80041c4:	d002      	beq.n	80041cc <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80041c6:	7bfb      	ldrb	r3, [r7, #15]
 80041c8:	2b2a      	cmp	r3, #42	; 0x2a
 80041ca:	d10b      	bne.n	80041e4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80041cc:	2103      	movs	r1, #3
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 fb3a 	bl	8004848 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2228      	movs	r2, #40	; 0x28
 80041d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a50      	ldr	r2, [pc, #320]	; (8004320 <I2C_ITError+0x198>)
 80041e0:	635a      	str	r2, [r3, #52]	; 0x34
 80041e2:	e011      	b.n	8004208 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80041e4:	f248 0103 	movw	r1, #32771	; 0x8003
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f000 fb2d 	bl	8004848 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	2b60      	cmp	r3, #96	; 0x60
 80041f8:	d003      	beq.n	8004202 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2220      	movs	r2, #32
 80041fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420c:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004212:	2b00      	cmp	r3, #0
 8004214:	d039      	beq.n	800428a <I2C_ITError+0x102>
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	2b11      	cmp	r3, #17
 800421a:	d002      	beq.n	8004222 <I2C_ITError+0x9a>
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	2b21      	cmp	r3, #33	; 0x21
 8004220:	d133      	bne.n	800428a <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800422c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004230:	d107      	bne.n	8004242 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004240:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004246:	4618      	mov	r0, r3
 8004248:	f7fe fbc6 	bl	80029d8 <HAL_DMA_GetState>
 800424c:	4603      	mov	r3, r0
 800424e:	2b01      	cmp	r3, #1
 8004250:	d017      	beq.n	8004282 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004256:	4a33      	ldr	r2, [pc, #204]	; (8004324 <I2C_ITError+0x19c>)
 8004258:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004266:	4618      	mov	r0, r3
 8004268:	f7fe fad5 	bl	8002816 <HAL_DMA_Abort_IT>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d04d      	beq.n	800430e <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800427c:	4610      	mov	r0, r2
 800427e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004280:	e045      	b.n	800430e <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 f850 	bl	8004328 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004288:	e041      	b.n	800430e <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800428e:	2b00      	cmp	r3, #0
 8004290:	d039      	beq.n	8004306 <I2C_ITError+0x17e>
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	2b12      	cmp	r3, #18
 8004296:	d002      	beq.n	800429e <I2C_ITError+0x116>
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	2b22      	cmp	r3, #34	; 0x22
 800429c:	d133      	bne.n	8004306 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042ac:	d107      	bne.n	80042be <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042bc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042c2:	4618      	mov	r0, r3
 80042c4:	f7fe fb88 	bl	80029d8 <HAL_DMA_GetState>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d017      	beq.n	80042fe <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042d2:	4a14      	ldr	r2, [pc, #80]	; (8004324 <I2C_ITError+0x19c>)
 80042d4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7fe fa97 	bl	8002816 <HAL_DMA_Abort_IT>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d011      	beq.n	8004312 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80042f8:	4610      	mov	r0, r2
 80042fa:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80042fc:	e009      	b.n	8004312 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 f812 	bl	8004328 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004304:	e005      	b.n	8004312 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 f80e 	bl	8004328 <I2C_TreatErrorCallback>
  }
}
 800430c:	e002      	b.n	8004314 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800430e:	bf00      	nop
 8004310:	e000      	b.n	8004314 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004312:	bf00      	nop
}
 8004314:	bf00      	nop
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	ffff0000 	.word	0xffff0000
 8004320:	0800349f 	.word	0x0800349f
 8004324:	08004483 	.word	0x08004483

08004328 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004336:	b2db      	uxtb	r3, r3
 8004338:	2b60      	cmp	r3, #96	; 0x60
 800433a:	d10e      	bne.n	800435a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2220      	movs	r2, #32
 8004340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f7ff f899 	bl	800348a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004358:	e009      	b.n	800436e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f7ff f884 	bl	8003476 <HAL_I2C_ErrorCallback>
}
 800436e:	bf00      	nop
 8004370:	3708      	adds	r7, #8
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}

08004376 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004376:	b480      	push	{r7}
 8004378:	b083      	sub	sp, #12
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	699b      	ldr	r3, [r3, #24]
 8004384:	f003 0302 	and.w	r3, r3, #2
 8004388:	2b02      	cmp	r3, #2
 800438a:	d103      	bne.n	8004394 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2200      	movs	r2, #0
 8004392:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	f003 0301 	and.w	r3, r3, #1
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d007      	beq.n	80043b2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	699a      	ldr	r2, [r3, #24]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f042 0201 	orr.w	r2, r2, #1
 80043b0:	619a      	str	r2, [r3, #24]
  }
}
 80043b2:	bf00      	nop
 80043b4:	370c      	adds	r7, #12
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr

080043be <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80043be:	b580      	push	{r7, lr}
 80043c0:	b084      	sub	sp, #16
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ca:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80043da:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d104      	bne.n	80043f0 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80043e6:	2120      	movs	r1, #32
 80043e8:	68f8      	ldr	r0, [r7, #12]
 80043ea:	f000 f9c9 	bl	8004780 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80043ee:	e02d      	b.n	800444c <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80043f8:	441a      	add	r2, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004402:	b29b      	uxth	r3, r3
 8004404:	2bff      	cmp	r3, #255	; 0xff
 8004406:	d903      	bls.n	8004410 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	22ff      	movs	r2, #255	; 0xff
 800440c:	851a      	strh	r2, [r3, #40]	; 0x28
 800440e:	e004      	b.n	800441a <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004414:	b29a      	uxth	r2, r3
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004422:	4619      	mov	r1, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	3328      	adds	r3, #40	; 0x28
 800442a:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8004430:	f7fe f992 	bl	8002758 <HAL_DMA_Start_IT>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d004      	beq.n	8004444 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800443a:	2110      	movs	r1, #16
 800443c:	68f8      	ldr	r0, [r7, #12]
 800443e:	f7ff fea3 	bl	8004188 <I2C_ITError>
}
 8004442:	e003      	b.n	800444c <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8004444:	2140      	movs	r1, #64	; 0x40
 8004446:	68f8      	ldr	r0, [r7, #12]
 8004448:	f000 f99a 	bl	8004780 <I2C_Enable_IRQ>
}
 800444c:	bf00      	nop
 800444e:	3710      	adds	r7, #16
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}

08004454 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004460:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	685a      	ldr	r2, [r3, #4]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004470:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8004472:	2110      	movs	r1, #16
 8004474:	68f8      	ldr	r0, [r7, #12]
 8004476:	f7ff fe87 	bl	8004188 <I2C_ITError>
}
 800447a:	bf00      	nop
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}

08004482 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004482:	b580      	push	{r7, lr}
 8004484:	b084      	sub	sp, #16
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004494:	2b00      	cmp	r3, #0
 8004496:	d003      	beq.n	80044a0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800449c:	2200      	movs	r2, #0
 800449e:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d003      	beq.n	80044b0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ac:	2200      	movs	r2, #0
 80044ae:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 80044b0:	68f8      	ldr	r0, [r7, #12]
 80044b2:	f7ff ff39 	bl	8004328 <I2C_TreatErrorCallback>
}
 80044b6:	bf00      	nop
 80044b8:	3710      	adds	r7, #16
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}

080044be <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80044be:	b580      	push	{r7, lr}
 80044c0:	b084      	sub	sp, #16
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	60f8      	str	r0, [r7, #12]
 80044c6:	60b9      	str	r1, [r7, #8]
 80044c8:	603b      	str	r3, [r7, #0]
 80044ca:	4613      	mov	r3, r2
 80044cc:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044ce:	e022      	b.n	8004516 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d6:	d01e      	beq.n	8004516 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044d8:	f7fd f93a 	bl	8001750 <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	683a      	ldr	r2, [r7, #0]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d302      	bcc.n	80044ee <I2C_WaitOnFlagUntilTimeout+0x30>
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d113      	bne.n	8004516 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f2:	f043 0220 	orr.w	r2, r3, #32
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2220      	movs	r2, #32
 80044fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e00f      	b.n	8004536 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	699a      	ldr	r2, [r3, #24]
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	4013      	ands	r3, r2
 8004520:	68ba      	ldr	r2, [r7, #8]
 8004522:	429a      	cmp	r2, r3
 8004524:	bf0c      	ite	eq
 8004526:	2301      	moveq	r3, #1
 8004528:	2300      	movne	r3, #0
 800452a:	b2db      	uxtb	r3, r3
 800452c:	461a      	mov	r2, r3
 800452e:	79fb      	ldrb	r3, [r7, #7]
 8004530:	429a      	cmp	r2, r3
 8004532:	d0cd      	beq.n	80044d0 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3710      	adds	r7, #16
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}

0800453e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800453e:	b580      	push	{r7, lr}
 8004540:	b084      	sub	sp, #16
 8004542:	af00      	add	r7, sp, #0
 8004544:	60f8      	str	r0, [r7, #12]
 8004546:	60b9      	str	r1, [r7, #8]
 8004548:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800454a:	e02c      	b.n	80045a6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	68b9      	ldr	r1, [r7, #8]
 8004550:	68f8      	ldr	r0, [r7, #12]
 8004552:	f000 f871 	bl	8004638 <I2C_IsAcknowledgeFailed>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d001      	beq.n	8004560 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e02a      	b.n	80045b6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004566:	d01e      	beq.n	80045a6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004568:	f7fd f8f2 	bl	8001750 <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	68ba      	ldr	r2, [r7, #8]
 8004574:	429a      	cmp	r2, r3
 8004576:	d302      	bcc.n	800457e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d113      	bne.n	80045a6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004582:	f043 0220 	orr.w	r2, r3, #32
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2220      	movs	r2, #32
 800458e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2200      	movs	r2, #0
 800459e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e007      	b.n	80045b6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	f003 0302 	and.w	r3, r3, #2
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d1cb      	bne.n	800454c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3710      	adds	r7, #16
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}

080045be <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80045be:	b580      	push	{r7, lr}
 80045c0:	b084      	sub	sp, #16
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	60f8      	str	r0, [r7, #12]
 80045c6:	60b9      	str	r1, [r7, #8]
 80045c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045ca:	e028      	b.n	800461e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	68b9      	ldr	r1, [r7, #8]
 80045d0:	68f8      	ldr	r0, [r7, #12]
 80045d2:	f000 f831 	bl	8004638 <I2C_IsAcknowledgeFailed>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d001      	beq.n	80045e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e026      	b.n	800462e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045e0:	f7fd f8b6 	bl	8001750 <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	68ba      	ldr	r2, [r7, #8]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d302      	bcc.n	80045f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d113      	bne.n	800461e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045fa:	f043 0220 	orr.w	r2, r3, #32
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2220      	movs	r2, #32
 8004606:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2200      	movs	r2, #0
 800460e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e007      	b.n	800462e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	f003 0320 	and.w	r3, r3, #32
 8004628:	2b20      	cmp	r3, #32
 800462a:	d1cf      	bne.n	80045cc <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	3710      	adds	r7, #16
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
	...

08004638 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	699b      	ldr	r3, [r3, #24]
 800464a:	f003 0310 	and.w	r3, r3, #16
 800464e:	2b10      	cmp	r3, #16
 8004650:	d161      	bne.n	8004716 <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800465c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004660:	d02b      	beq.n	80046ba <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	685a      	ldr	r2, [r3, #4]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004670:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004672:	e022      	b.n	80046ba <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800467a:	d01e      	beq.n	80046ba <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800467c:	f7fd f868 	bl	8001750 <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	68ba      	ldr	r2, [r7, #8]
 8004688:	429a      	cmp	r2, r3
 800468a:	d302      	bcc.n	8004692 <I2C_IsAcknowledgeFailed+0x5a>
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d113      	bne.n	80046ba <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004696:	f043 0220 	orr.w	r2, r3, #32
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2220      	movs	r2, #32
 80046a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e02e      	b.n	8004718 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	699b      	ldr	r3, [r3, #24]
 80046c0:	f003 0320 	and.w	r3, r3, #32
 80046c4:	2b20      	cmp	r3, #32
 80046c6:	d1d5      	bne.n	8004674 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2210      	movs	r2, #16
 80046ce:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2220      	movs	r2, #32
 80046d6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80046d8:	68f8      	ldr	r0, [r7, #12]
 80046da:	f7ff fe4c 	bl	8004376 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	6859      	ldr	r1, [r3, #4]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	4b0d      	ldr	r3, [pc, #52]	; (8004720 <I2C_IsAcknowledgeFailed+0xe8>)
 80046ea:	400b      	ands	r3, r1
 80046ec:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f2:	f043 0204 	orr.w	r2, r3, #4
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2220      	movs	r2, #32
 80046fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2200      	movs	r2, #0
 8004706:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e000      	b.n	8004718 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3710      	adds	r7, #16
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}
 8004720:	fe00e800 	.word	0xfe00e800

08004724 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004724:	b480      	push	{r7}
 8004726:	b085      	sub	sp, #20
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	607b      	str	r3, [r7, #4]
 800472e:	460b      	mov	r3, r1
 8004730:	817b      	strh	r3, [r7, #10]
 8004732:	4613      	mov	r3, r2
 8004734:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	685a      	ldr	r2, [r3, #4]
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	0d5b      	lsrs	r3, r3, #21
 8004740:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004744:	4b0d      	ldr	r3, [pc, #52]	; (800477c <I2C_TransferConfig+0x58>)
 8004746:	430b      	orrs	r3, r1
 8004748:	43db      	mvns	r3, r3
 800474a:	ea02 0103 	and.w	r1, r2, r3
 800474e:	897b      	ldrh	r3, [r7, #10]
 8004750:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004754:	7a7b      	ldrb	r3, [r7, #9]
 8004756:	041b      	lsls	r3, r3, #16
 8004758:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800475c:	431a      	orrs	r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	431a      	orrs	r2, r3
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	431a      	orrs	r2, r3
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	430a      	orrs	r2, r1
 800476c:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800476e:	bf00      	nop
 8004770:	3714      	adds	r7, #20
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	03ff63ff 	.word	0x03ff63ff

08004780 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004780:	b480      	push	{r7}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	460b      	mov	r3, r1
 800478a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800478c:	2300      	movs	r3, #0
 800478e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004794:	4a2a      	ldr	r2, [pc, #168]	; (8004840 <I2C_Enable_IRQ+0xc0>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d004      	beq.n	80047a4 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800479e:	4a29      	ldr	r2, [pc, #164]	; (8004844 <I2C_Enable_IRQ+0xc4>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d11d      	bne.n	80047e0 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80047a4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	da03      	bge.n	80047b4 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80047b2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80047b4:	887b      	ldrh	r3, [r7, #2]
 80047b6:	2b10      	cmp	r3, #16
 80047b8:	d103      	bne.n	80047c2 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80047c0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80047c2:	887b      	ldrh	r3, [r7, #2]
 80047c4:	2b20      	cmp	r3, #32
 80047c6:	d103      	bne.n	80047d0 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80047ce:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80047d0:	887b      	ldrh	r3, [r7, #2]
 80047d2:	2b40      	cmp	r3, #64	; 0x40
 80047d4:	d125      	bne.n	8004822 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047dc:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80047de:	e020      	b.n	8004822 <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80047e0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	da03      	bge.n	80047f0 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80047ee:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80047f0:	887b      	ldrh	r3, [r7, #2]
 80047f2:	f003 0301 	and.w	r3, r3, #1
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d003      	beq.n	8004802 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8004800:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004802:	887b      	ldrh	r3, [r7, #2]
 8004804:	f003 0302 	and.w	r3, r3, #2
 8004808:	2b00      	cmp	r3, #0
 800480a:	d003      	beq.n	8004814 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8004812:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004814:	887b      	ldrh	r3, [r7, #2]
 8004816:	2b20      	cmp	r3, #32
 8004818:	d103      	bne.n	8004822 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f043 0320 	orr.w	r3, r3, #32
 8004820:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	6819      	ldr	r1, [r3, #0]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	430a      	orrs	r2, r1
 8004830:	601a      	str	r2, [r3, #0]
}
 8004832:	bf00      	nop
 8004834:	3714      	adds	r7, #20
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr
 800483e:	bf00      	nop
 8004840:	080036a5 	.word	0x080036a5
 8004844:	0800388b 	.word	0x0800388b

08004848 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004848:	b480      	push	{r7}
 800484a:	b085      	sub	sp, #20
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	460b      	mov	r3, r1
 8004852:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004854:	2300      	movs	r3, #0
 8004856:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004858:	887b      	ldrh	r3, [r7, #2]
 800485a:	f003 0301 	and.w	r3, r3, #1
 800485e:	2b00      	cmp	r3, #0
 8004860:	d00f      	beq.n	8004882 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8004868:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004870:	b2db      	uxtb	r3, r3
 8004872:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004876:	2b28      	cmp	r3, #40	; 0x28
 8004878:	d003      	beq.n	8004882 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004880:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004882:	887b      	ldrh	r3, [r7, #2]
 8004884:	f003 0302 	and.w	r3, r3, #2
 8004888:	2b00      	cmp	r3, #0
 800488a:	d00f      	beq.n	80048ac <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8004892:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800489a:	b2db      	uxtb	r3, r3
 800489c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80048a0:	2b28      	cmp	r3, #40	; 0x28
 80048a2:	d003      	beq.n	80048ac <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80048aa:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80048ac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	da03      	bge.n	80048bc <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80048ba:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80048bc:	887b      	ldrh	r3, [r7, #2]
 80048be:	2b10      	cmp	r3, #16
 80048c0:	d103      	bne.n	80048ca <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80048c8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80048ca:	887b      	ldrh	r3, [r7, #2]
 80048cc:	2b20      	cmp	r3, #32
 80048ce:	d103      	bne.n	80048d8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f043 0320 	orr.w	r3, r3, #32
 80048d6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80048d8:	887b      	ldrh	r3, [r7, #2]
 80048da:	2b40      	cmp	r3, #64	; 0x40
 80048dc:	d103      	bne.n	80048e6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048e4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	6819      	ldr	r1, [r3, #0]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	43da      	mvns	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	400a      	ands	r2, r1
 80048f6:	601a      	str	r2, [r3, #0]
}
 80048f8:	bf00      	nop
 80048fa:	3714      	adds	r7, #20
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004914:	b2db      	uxtb	r3, r3
 8004916:	2b20      	cmp	r3, #32
 8004918:	d138      	bne.n	800498c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004920:	2b01      	cmp	r3, #1
 8004922:	d101      	bne.n	8004928 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004924:	2302      	movs	r3, #2
 8004926:	e032      	b.n	800498e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2224      	movs	r2, #36	; 0x24
 8004934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f022 0201 	bic.w	r2, r2, #1
 8004946:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004956:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	6819      	ldr	r1, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	683a      	ldr	r2, [r7, #0]
 8004964:	430a      	orrs	r2, r1
 8004966:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f042 0201 	orr.w	r2, r2, #1
 8004976:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2220      	movs	r2, #32
 800497c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004988:	2300      	movs	r3, #0
 800498a:	e000      	b.n	800498e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800498c:	2302      	movs	r3, #2
  }
}
 800498e:	4618      	mov	r0, r3
 8004990:	370c      	adds	r7, #12
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr

0800499a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800499a:	b480      	push	{r7}
 800499c:	b085      	sub	sp, #20
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
 80049a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	2b20      	cmp	r3, #32
 80049ae:	d139      	bne.n	8004a24 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d101      	bne.n	80049be <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80049ba:	2302      	movs	r3, #2
 80049bc:	e033      	b.n	8004a26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2224      	movs	r2, #36	; 0x24
 80049ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f022 0201 	bic.w	r2, r2, #1
 80049dc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80049ec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	021b      	lsls	r3, r3, #8
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f042 0201 	orr.w	r2, r2, #1
 8004a0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2220      	movs	r2, #32
 8004a14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004a20:	2300      	movs	r3, #0
 8004a22:	e000      	b.n	8004a26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004a24:	2302      	movs	r3, #2
  }
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3714      	adds	r7, #20
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
	...

08004a34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	1d3b      	adds	r3, r7, #4
 8004a3e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a40:	1d3b      	adds	r3, r7, #4
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d102      	bne.n	8004a4e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	f000 bef4 	b.w	8005836 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a4e:	1d3b      	adds	r3, r7, #4
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0301 	and.w	r3, r3, #1
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	f000 816a 	beq.w	8004d32 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004a5e:	4bb3      	ldr	r3, [pc, #716]	; (8004d2c <HAL_RCC_OscConfig+0x2f8>)
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	f003 030c 	and.w	r3, r3, #12
 8004a66:	2b04      	cmp	r3, #4
 8004a68:	d00c      	beq.n	8004a84 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004a6a:	4bb0      	ldr	r3, [pc, #704]	; (8004d2c <HAL_RCC_OscConfig+0x2f8>)
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f003 030c 	and.w	r3, r3, #12
 8004a72:	2b08      	cmp	r3, #8
 8004a74:	d159      	bne.n	8004b2a <HAL_RCC_OscConfig+0xf6>
 8004a76:	4bad      	ldr	r3, [pc, #692]	; (8004d2c <HAL_RCC_OscConfig+0x2f8>)
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a82:	d152      	bne.n	8004b2a <HAL_RCC_OscConfig+0xf6>
 8004a84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a88:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a8c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004a90:	fa93 f3a3 	rbit	r3, r3
 8004a94:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004a98:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a9c:	fab3 f383 	clz	r3, r3
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	095b      	lsrs	r3, r3, #5
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	f043 0301 	orr.w	r3, r3, #1
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d102      	bne.n	8004ab6 <HAL_RCC_OscConfig+0x82>
 8004ab0:	4b9e      	ldr	r3, [pc, #632]	; (8004d2c <HAL_RCC_OscConfig+0x2f8>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	e015      	b.n	8004ae2 <HAL_RCC_OscConfig+0xae>
 8004ab6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004aba:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004abe:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004ac2:	fa93 f3a3 	rbit	r3, r3
 8004ac6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004aca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ace:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004ad2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004ad6:	fa93 f3a3 	rbit	r3, r3
 8004ada:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004ade:	4b93      	ldr	r3, [pc, #588]	; (8004d2c <HAL_RCC_OscConfig+0x2f8>)
 8004ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004ae6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8004aea:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004aee:	fa92 f2a2 	rbit	r2, r2
 8004af2:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004af6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004afa:	fab2 f282 	clz	r2, r2
 8004afe:	b2d2      	uxtb	r2, r2
 8004b00:	f042 0220 	orr.w	r2, r2, #32
 8004b04:	b2d2      	uxtb	r2, r2
 8004b06:	f002 021f 	and.w	r2, r2, #31
 8004b0a:	2101      	movs	r1, #1
 8004b0c:	fa01 f202 	lsl.w	r2, r1, r2
 8004b10:	4013      	ands	r3, r2
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	f000 810c 	beq.w	8004d30 <HAL_RCC_OscConfig+0x2fc>
 8004b18:	1d3b      	adds	r3, r7, #4
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	f040 8106 	bne.w	8004d30 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	f000 be86 	b.w	8005836 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b2a:	1d3b      	adds	r3, r7, #4
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b34:	d106      	bne.n	8004b44 <HAL_RCC_OscConfig+0x110>
 8004b36:	4b7d      	ldr	r3, [pc, #500]	; (8004d2c <HAL_RCC_OscConfig+0x2f8>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a7c      	ldr	r2, [pc, #496]	; (8004d2c <HAL_RCC_OscConfig+0x2f8>)
 8004b3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b40:	6013      	str	r3, [r2, #0]
 8004b42:	e030      	b.n	8004ba6 <HAL_RCC_OscConfig+0x172>
 8004b44:	1d3b      	adds	r3, r7, #4
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d10c      	bne.n	8004b68 <HAL_RCC_OscConfig+0x134>
 8004b4e:	4b77      	ldr	r3, [pc, #476]	; (8004d2c <HAL_RCC_OscConfig+0x2f8>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a76      	ldr	r2, [pc, #472]	; (8004d2c <HAL_RCC_OscConfig+0x2f8>)
 8004b54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b58:	6013      	str	r3, [r2, #0]
 8004b5a:	4b74      	ldr	r3, [pc, #464]	; (8004d2c <HAL_RCC_OscConfig+0x2f8>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a73      	ldr	r2, [pc, #460]	; (8004d2c <HAL_RCC_OscConfig+0x2f8>)
 8004b60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b64:	6013      	str	r3, [r2, #0]
 8004b66:	e01e      	b.n	8004ba6 <HAL_RCC_OscConfig+0x172>
 8004b68:	1d3b      	adds	r3, r7, #4
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b72:	d10c      	bne.n	8004b8e <HAL_RCC_OscConfig+0x15a>
 8004b74:	4b6d      	ldr	r3, [pc, #436]	; (8004d2c <HAL_RCC_OscConfig+0x2f8>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a6c      	ldr	r2, [pc, #432]	; (8004d2c <HAL_RCC_OscConfig+0x2f8>)
 8004b7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b7e:	6013      	str	r3, [r2, #0]
 8004b80:	4b6a      	ldr	r3, [pc, #424]	; (8004d2c <HAL_RCC_OscConfig+0x2f8>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a69      	ldr	r2, [pc, #420]	; (8004d2c <HAL_RCC_OscConfig+0x2f8>)
 8004b86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b8a:	6013      	str	r3, [r2, #0]
 8004b8c:	e00b      	b.n	8004ba6 <HAL_RCC_OscConfig+0x172>
 8004b8e:	4b67      	ldr	r3, [pc, #412]	; (8004d2c <HAL_RCC_OscConfig+0x2f8>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a66      	ldr	r2, [pc, #408]	; (8004d2c <HAL_RCC_OscConfig+0x2f8>)
 8004b94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b98:	6013      	str	r3, [r2, #0]
 8004b9a:	4b64      	ldr	r3, [pc, #400]	; (8004d2c <HAL_RCC_OscConfig+0x2f8>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a63      	ldr	r2, [pc, #396]	; (8004d2c <HAL_RCC_OscConfig+0x2f8>)
 8004ba0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ba4:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004ba6:	4b61      	ldr	r3, [pc, #388]	; (8004d2c <HAL_RCC_OscConfig+0x2f8>)
 8004ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004baa:	f023 020f 	bic.w	r2, r3, #15
 8004bae:	1d3b      	adds	r3, r7, #4
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	495d      	ldr	r1, [pc, #372]	; (8004d2c <HAL_RCC_OscConfig+0x2f8>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004bba:	1d3b      	adds	r3, r7, #4
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d059      	beq.n	8004c78 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bc4:	f7fc fdc4 	bl	8001750 <HAL_GetTick>
 8004bc8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bcc:	e00a      	b.n	8004be4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bce:	f7fc fdbf 	bl	8001750 <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	2b64      	cmp	r3, #100	; 0x64
 8004bdc:	d902      	bls.n	8004be4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	f000 be29 	b.w	8005836 <HAL_RCC_OscConfig+0xe02>
 8004be4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004be8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bec:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004bf0:	fa93 f3a3 	rbit	r3, r3
 8004bf4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004bf8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bfc:	fab3 f383 	clz	r3, r3
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	095b      	lsrs	r3, r3, #5
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	f043 0301 	orr.w	r3, r3, #1
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d102      	bne.n	8004c16 <HAL_RCC_OscConfig+0x1e2>
 8004c10:	4b46      	ldr	r3, [pc, #280]	; (8004d2c <HAL_RCC_OscConfig+0x2f8>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	e015      	b.n	8004c42 <HAL_RCC_OscConfig+0x20e>
 8004c16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c1a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c1e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004c22:	fa93 f3a3 	rbit	r3, r3
 8004c26:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004c2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c2e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004c32:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004c36:	fa93 f3a3 	rbit	r3, r3
 8004c3a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004c3e:	4b3b      	ldr	r3, [pc, #236]	; (8004d2c <HAL_RCC_OscConfig+0x2f8>)
 8004c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c42:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004c46:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004c4a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004c4e:	fa92 f2a2 	rbit	r2, r2
 8004c52:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004c56:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004c5a:	fab2 f282 	clz	r2, r2
 8004c5e:	b2d2      	uxtb	r2, r2
 8004c60:	f042 0220 	orr.w	r2, r2, #32
 8004c64:	b2d2      	uxtb	r2, r2
 8004c66:	f002 021f 	and.w	r2, r2, #31
 8004c6a:	2101      	movs	r1, #1
 8004c6c:	fa01 f202 	lsl.w	r2, r1, r2
 8004c70:	4013      	ands	r3, r2
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d0ab      	beq.n	8004bce <HAL_RCC_OscConfig+0x19a>
 8004c76:	e05c      	b.n	8004d32 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c78:	f7fc fd6a 	bl	8001750 <HAL_GetTick>
 8004c7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c80:	e00a      	b.n	8004c98 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c82:	f7fc fd65 	bl	8001750 <HAL_GetTick>
 8004c86:	4602      	mov	r2, r0
 8004c88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	2b64      	cmp	r3, #100	; 0x64
 8004c90:	d902      	bls.n	8004c98 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	f000 bdcf 	b.w	8005836 <HAL_RCC_OscConfig+0xe02>
 8004c98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c9c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ca0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004ca4:	fa93 f3a3 	rbit	r3, r3
 8004ca8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004cac:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cb0:	fab3 f383 	clz	r3, r3
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	095b      	lsrs	r3, r3, #5
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	f043 0301 	orr.w	r3, r3, #1
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d102      	bne.n	8004cca <HAL_RCC_OscConfig+0x296>
 8004cc4:	4b19      	ldr	r3, [pc, #100]	; (8004d2c <HAL_RCC_OscConfig+0x2f8>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	e015      	b.n	8004cf6 <HAL_RCC_OscConfig+0x2c2>
 8004cca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004cce:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cd2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004cd6:	fa93 f3a3 	rbit	r3, r3
 8004cda:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004cde:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ce2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004ce6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004cea:	fa93 f3a3 	rbit	r3, r3
 8004cee:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004cf2:	4b0e      	ldr	r3, [pc, #56]	; (8004d2c <HAL_RCC_OscConfig+0x2f8>)
 8004cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004cfa:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004cfe:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004d02:	fa92 f2a2 	rbit	r2, r2
 8004d06:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004d0a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004d0e:	fab2 f282 	clz	r2, r2
 8004d12:	b2d2      	uxtb	r2, r2
 8004d14:	f042 0220 	orr.w	r2, r2, #32
 8004d18:	b2d2      	uxtb	r2, r2
 8004d1a:	f002 021f 	and.w	r2, r2, #31
 8004d1e:	2101      	movs	r1, #1
 8004d20:	fa01 f202 	lsl.w	r2, r1, r2
 8004d24:	4013      	ands	r3, r2
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d1ab      	bne.n	8004c82 <HAL_RCC_OscConfig+0x24e>
 8004d2a:	e002      	b.n	8004d32 <HAL_RCC_OscConfig+0x2fe>
 8004d2c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d32:	1d3b      	adds	r3, r7, #4
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0302 	and.w	r3, r3, #2
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	f000 816f 	beq.w	8005020 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004d42:	4bd0      	ldr	r3, [pc, #832]	; (8005084 <HAL_RCC_OscConfig+0x650>)
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	f003 030c 	and.w	r3, r3, #12
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00b      	beq.n	8004d66 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004d4e:	4bcd      	ldr	r3, [pc, #820]	; (8005084 <HAL_RCC_OscConfig+0x650>)
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	f003 030c 	and.w	r3, r3, #12
 8004d56:	2b08      	cmp	r3, #8
 8004d58:	d16c      	bne.n	8004e34 <HAL_RCC_OscConfig+0x400>
 8004d5a:	4bca      	ldr	r3, [pc, #808]	; (8005084 <HAL_RCC_OscConfig+0x650>)
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d166      	bne.n	8004e34 <HAL_RCC_OscConfig+0x400>
 8004d66:	2302      	movs	r3, #2
 8004d68:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d6c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004d70:	fa93 f3a3 	rbit	r3, r3
 8004d74:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004d78:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d7c:	fab3 f383 	clz	r3, r3
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	095b      	lsrs	r3, r3, #5
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	f043 0301 	orr.w	r3, r3, #1
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d102      	bne.n	8004d96 <HAL_RCC_OscConfig+0x362>
 8004d90:	4bbc      	ldr	r3, [pc, #752]	; (8005084 <HAL_RCC_OscConfig+0x650>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	e013      	b.n	8004dbe <HAL_RCC_OscConfig+0x38a>
 8004d96:	2302      	movs	r3, #2
 8004d98:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d9c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004da0:	fa93 f3a3 	rbit	r3, r3
 8004da4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004da8:	2302      	movs	r3, #2
 8004daa:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004dae:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004db2:	fa93 f3a3 	rbit	r3, r3
 8004db6:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004dba:	4bb2      	ldr	r3, [pc, #712]	; (8005084 <HAL_RCC_OscConfig+0x650>)
 8004dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbe:	2202      	movs	r2, #2
 8004dc0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004dc4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004dc8:	fa92 f2a2 	rbit	r2, r2
 8004dcc:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004dd0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004dd4:	fab2 f282 	clz	r2, r2
 8004dd8:	b2d2      	uxtb	r2, r2
 8004dda:	f042 0220 	orr.w	r2, r2, #32
 8004dde:	b2d2      	uxtb	r2, r2
 8004de0:	f002 021f 	and.w	r2, r2, #31
 8004de4:	2101      	movs	r1, #1
 8004de6:	fa01 f202 	lsl.w	r2, r1, r2
 8004dea:	4013      	ands	r3, r2
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d007      	beq.n	8004e00 <HAL_RCC_OscConfig+0x3cc>
 8004df0:	1d3b      	adds	r3, r7, #4
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d002      	beq.n	8004e00 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	f000 bd1b 	b.w	8005836 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e00:	4ba0      	ldr	r3, [pc, #640]	; (8005084 <HAL_RCC_OscConfig+0x650>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e08:	1d3b      	adds	r3, r7, #4
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	695b      	ldr	r3, [r3, #20]
 8004e0e:	21f8      	movs	r1, #248	; 0xf8
 8004e10:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e14:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004e18:	fa91 f1a1 	rbit	r1, r1
 8004e1c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004e20:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004e24:	fab1 f181 	clz	r1, r1
 8004e28:	b2c9      	uxtb	r1, r1
 8004e2a:	408b      	lsls	r3, r1
 8004e2c:	4995      	ldr	r1, [pc, #596]	; (8005084 <HAL_RCC_OscConfig+0x650>)
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e32:	e0f5      	b.n	8005020 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e34:	1d3b      	adds	r3, r7, #4
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	f000 8085 	beq.w	8004f4a <HAL_RCC_OscConfig+0x516>
 8004e40:	2301      	movs	r3, #1
 8004e42:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e46:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004e4a:	fa93 f3a3 	rbit	r3, r3
 8004e4e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004e52:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e56:	fab3 f383 	clz	r3, r3
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004e60:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	461a      	mov	r2, r3
 8004e68:	2301      	movs	r3, #1
 8004e6a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e6c:	f7fc fc70 	bl	8001750 <HAL_GetTick>
 8004e70:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e74:	e00a      	b.n	8004e8c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e76:	f7fc fc6b 	bl	8001750 <HAL_GetTick>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	2b02      	cmp	r3, #2
 8004e84:	d902      	bls.n	8004e8c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	f000 bcd5 	b.w	8005836 <HAL_RCC_OscConfig+0xe02>
 8004e8c:	2302      	movs	r3, #2
 8004e8e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e92:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004e96:	fa93 f3a3 	rbit	r3, r3
 8004e9a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004e9e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ea2:	fab3 f383 	clz	r3, r3
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	095b      	lsrs	r3, r3, #5
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	f043 0301 	orr.w	r3, r3, #1
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d102      	bne.n	8004ebc <HAL_RCC_OscConfig+0x488>
 8004eb6:	4b73      	ldr	r3, [pc, #460]	; (8005084 <HAL_RCC_OscConfig+0x650>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	e013      	b.n	8004ee4 <HAL_RCC_OscConfig+0x4b0>
 8004ebc:	2302      	movs	r3, #2
 8004ebe:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ec2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004ec6:	fa93 f3a3 	rbit	r3, r3
 8004eca:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004ece:	2302      	movs	r3, #2
 8004ed0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004ed4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004ed8:	fa93 f3a3 	rbit	r3, r3
 8004edc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004ee0:	4b68      	ldr	r3, [pc, #416]	; (8005084 <HAL_RCC_OscConfig+0x650>)
 8004ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee4:	2202      	movs	r2, #2
 8004ee6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004eea:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004eee:	fa92 f2a2 	rbit	r2, r2
 8004ef2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004ef6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004efa:	fab2 f282 	clz	r2, r2
 8004efe:	b2d2      	uxtb	r2, r2
 8004f00:	f042 0220 	orr.w	r2, r2, #32
 8004f04:	b2d2      	uxtb	r2, r2
 8004f06:	f002 021f 	and.w	r2, r2, #31
 8004f0a:	2101      	movs	r1, #1
 8004f0c:	fa01 f202 	lsl.w	r2, r1, r2
 8004f10:	4013      	ands	r3, r2
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d0af      	beq.n	8004e76 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f16:	4b5b      	ldr	r3, [pc, #364]	; (8005084 <HAL_RCC_OscConfig+0x650>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f1e:	1d3b      	adds	r3, r7, #4
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	695b      	ldr	r3, [r3, #20]
 8004f24:	21f8      	movs	r1, #248	; 0xf8
 8004f26:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f2a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004f2e:	fa91 f1a1 	rbit	r1, r1
 8004f32:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004f36:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004f3a:	fab1 f181 	clz	r1, r1
 8004f3e:	b2c9      	uxtb	r1, r1
 8004f40:	408b      	lsls	r3, r1
 8004f42:	4950      	ldr	r1, [pc, #320]	; (8005084 <HAL_RCC_OscConfig+0x650>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	600b      	str	r3, [r1, #0]
 8004f48:	e06a      	b.n	8005020 <HAL_RCC_OscConfig+0x5ec>
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f50:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004f54:	fa93 f3a3 	rbit	r3, r3
 8004f58:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004f5c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f60:	fab3 f383 	clz	r3, r3
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004f6a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	461a      	mov	r2, r3
 8004f72:	2300      	movs	r3, #0
 8004f74:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f76:	f7fc fbeb 	bl	8001750 <HAL_GetTick>
 8004f7a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f7e:	e00a      	b.n	8004f96 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f80:	f7fc fbe6 	bl	8001750 <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d902      	bls.n	8004f96 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8004f90:	2303      	movs	r3, #3
 8004f92:	f000 bc50 	b.w	8005836 <HAL_RCC_OscConfig+0xe02>
 8004f96:	2302      	movs	r3, #2
 8004f98:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f9c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004fa0:	fa93 f3a3 	rbit	r3, r3
 8004fa4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004fa8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fac:	fab3 f383 	clz	r3, r3
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	095b      	lsrs	r3, r3, #5
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	f043 0301 	orr.w	r3, r3, #1
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d102      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x592>
 8004fc0:	4b30      	ldr	r3, [pc, #192]	; (8005084 <HAL_RCC_OscConfig+0x650>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	e013      	b.n	8004fee <HAL_RCC_OscConfig+0x5ba>
 8004fc6:	2302      	movs	r3, #2
 8004fc8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fcc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004fd0:	fa93 f3a3 	rbit	r3, r3
 8004fd4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004fd8:	2302      	movs	r3, #2
 8004fda:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004fde:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004fe2:	fa93 f3a3 	rbit	r3, r3
 8004fe6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004fea:	4b26      	ldr	r3, [pc, #152]	; (8005084 <HAL_RCC_OscConfig+0x650>)
 8004fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fee:	2202      	movs	r2, #2
 8004ff0:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004ff4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004ff8:	fa92 f2a2 	rbit	r2, r2
 8004ffc:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8005000:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005004:	fab2 f282 	clz	r2, r2
 8005008:	b2d2      	uxtb	r2, r2
 800500a:	f042 0220 	orr.w	r2, r2, #32
 800500e:	b2d2      	uxtb	r2, r2
 8005010:	f002 021f 	and.w	r2, r2, #31
 8005014:	2101      	movs	r1, #1
 8005016:	fa01 f202 	lsl.w	r2, r1, r2
 800501a:	4013      	ands	r3, r2
 800501c:	2b00      	cmp	r3, #0
 800501e:	d1af      	bne.n	8004f80 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005020:	1d3b      	adds	r3, r7, #4
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 0308 	and.w	r3, r3, #8
 800502a:	2b00      	cmp	r3, #0
 800502c:	f000 80da 	beq.w	80051e4 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005030:	1d3b      	adds	r3, r7, #4
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	699b      	ldr	r3, [r3, #24]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d069      	beq.n	800510e <HAL_RCC_OscConfig+0x6da>
 800503a:	2301      	movs	r3, #1
 800503c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005040:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005044:	fa93 f3a3 	rbit	r3, r3
 8005048:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800504c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005050:	fab3 f383 	clz	r3, r3
 8005054:	b2db      	uxtb	r3, r3
 8005056:	461a      	mov	r2, r3
 8005058:	4b0b      	ldr	r3, [pc, #44]	; (8005088 <HAL_RCC_OscConfig+0x654>)
 800505a:	4413      	add	r3, r2
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	461a      	mov	r2, r3
 8005060:	2301      	movs	r3, #1
 8005062:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005064:	f7fc fb74 	bl	8001750 <HAL_GetTick>
 8005068:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800506c:	e00e      	b.n	800508c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800506e:	f7fc fb6f 	bl	8001750 <HAL_GetTick>
 8005072:	4602      	mov	r2, r0
 8005074:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	2b02      	cmp	r3, #2
 800507c:	d906      	bls.n	800508c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e3d9      	b.n	8005836 <HAL_RCC_OscConfig+0xe02>
 8005082:	bf00      	nop
 8005084:	40021000 	.word	0x40021000
 8005088:	10908120 	.word	0x10908120
 800508c:	2302      	movs	r3, #2
 800508e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005092:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005096:	fa93 f3a3 	rbit	r3, r3
 800509a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800509e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80050a2:	2202      	movs	r2, #2
 80050a4:	601a      	str	r2, [r3, #0]
 80050a6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	fa93 f2a3 	rbit	r2, r3
 80050b0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80050b4:	601a      	str	r2, [r3, #0]
 80050b6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80050ba:	2202      	movs	r2, #2
 80050bc:	601a      	str	r2, [r3, #0]
 80050be:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	fa93 f2a3 	rbit	r2, r3
 80050c8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80050cc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050ce:	4ba5      	ldr	r3, [pc, #660]	; (8005364 <HAL_RCC_OscConfig+0x930>)
 80050d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050d2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80050d6:	2102      	movs	r1, #2
 80050d8:	6019      	str	r1, [r3, #0]
 80050da:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	fa93 f1a3 	rbit	r1, r3
 80050e4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80050e8:	6019      	str	r1, [r3, #0]
  return result;
 80050ea:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	fab3 f383 	clz	r3, r3
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	f003 031f 	and.w	r3, r3, #31
 8005100:	2101      	movs	r1, #1
 8005102:	fa01 f303 	lsl.w	r3, r1, r3
 8005106:	4013      	ands	r3, r2
 8005108:	2b00      	cmp	r3, #0
 800510a:	d0b0      	beq.n	800506e <HAL_RCC_OscConfig+0x63a>
 800510c:	e06a      	b.n	80051e4 <HAL_RCC_OscConfig+0x7b0>
 800510e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8005112:	2201      	movs	r2, #1
 8005114:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005116:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	fa93 f2a3 	rbit	r2, r3
 8005120:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005124:	601a      	str	r2, [r3, #0]
  return result;
 8005126:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800512a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800512c:	fab3 f383 	clz	r3, r3
 8005130:	b2db      	uxtb	r3, r3
 8005132:	461a      	mov	r2, r3
 8005134:	4b8c      	ldr	r3, [pc, #560]	; (8005368 <HAL_RCC_OscConfig+0x934>)
 8005136:	4413      	add	r3, r2
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	461a      	mov	r2, r3
 800513c:	2300      	movs	r3, #0
 800513e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005140:	f7fc fb06 	bl	8001750 <HAL_GetTick>
 8005144:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005148:	e009      	b.n	800515e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800514a:	f7fc fb01 	bl	8001750 <HAL_GetTick>
 800514e:	4602      	mov	r2, r0
 8005150:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	2b02      	cmp	r3, #2
 8005158:	d901      	bls.n	800515e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e36b      	b.n	8005836 <HAL_RCC_OscConfig+0xe02>
 800515e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005162:	2202      	movs	r2, #2
 8005164:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005166:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	fa93 f2a3 	rbit	r2, r3
 8005170:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005174:	601a      	str	r2, [r3, #0]
 8005176:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800517a:	2202      	movs	r2, #2
 800517c:	601a      	str	r2, [r3, #0]
 800517e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	fa93 f2a3 	rbit	r2, r3
 8005188:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800518c:	601a      	str	r2, [r3, #0]
 800518e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005192:	2202      	movs	r2, #2
 8005194:	601a      	str	r2, [r3, #0]
 8005196:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	fa93 f2a3 	rbit	r2, r3
 80051a0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80051a4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051a6:	4b6f      	ldr	r3, [pc, #444]	; (8005364 <HAL_RCC_OscConfig+0x930>)
 80051a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051aa:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80051ae:	2102      	movs	r1, #2
 80051b0:	6019      	str	r1, [r3, #0]
 80051b2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	fa93 f1a3 	rbit	r1, r3
 80051bc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80051c0:	6019      	str	r1, [r3, #0]
  return result;
 80051c2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	fab3 f383 	clz	r3, r3
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	f003 031f 	and.w	r3, r3, #31
 80051d8:	2101      	movs	r1, #1
 80051da:	fa01 f303 	lsl.w	r3, r1, r3
 80051de:	4013      	ands	r3, r2
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d1b2      	bne.n	800514a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051e4:	1d3b      	adds	r3, r7, #4
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 0304 	and.w	r3, r3, #4
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	f000 8158 	beq.w	80054a4 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051f4:	2300      	movs	r3, #0
 80051f6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051fa:	4b5a      	ldr	r3, [pc, #360]	; (8005364 <HAL_RCC_OscConfig+0x930>)
 80051fc:	69db      	ldr	r3, [r3, #28]
 80051fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005202:	2b00      	cmp	r3, #0
 8005204:	d112      	bne.n	800522c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005206:	4b57      	ldr	r3, [pc, #348]	; (8005364 <HAL_RCC_OscConfig+0x930>)
 8005208:	69db      	ldr	r3, [r3, #28]
 800520a:	4a56      	ldr	r2, [pc, #344]	; (8005364 <HAL_RCC_OscConfig+0x930>)
 800520c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005210:	61d3      	str	r3, [r2, #28]
 8005212:	4b54      	ldr	r3, [pc, #336]	; (8005364 <HAL_RCC_OscConfig+0x930>)
 8005214:	69db      	ldr	r3, [r3, #28]
 8005216:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800521a:	f107 0308 	add.w	r3, r7, #8
 800521e:	601a      	str	r2, [r3, #0]
 8005220:	f107 0308 	add.w	r3, r7, #8
 8005224:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005226:	2301      	movs	r3, #1
 8005228:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800522c:	4b4f      	ldr	r3, [pc, #316]	; (800536c <HAL_RCC_OscConfig+0x938>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005234:	2b00      	cmp	r3, #0
 8005236:	d11a      	bne.n	800526e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005238:	4b4c      	ldr	r3, [pc, #304]	; (800536c <HAL_RCC_OscConfig+0x938>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a4b      	ldr	r2, [pc, #300]	; (800536c <HAL_RCC_OscConfig+0x938>)
 800523e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005242:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005244:	f7fc fa84 	bl	8001750 <HAL_GetTick>
 8005248:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800524c:	e009      	b.n	8005262 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800524e:	f7fc fa7f 	bl	8001750 <HAL_GetTick>
 8005252:	4602      	mov	r2, r0
 8005254:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	2b64      	cmp	r3, #100	; 0x64
 800525c:	d901      	bls.n	8005262 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e2e9      	b.n	8005836 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005262:	4b42      	ldr	r3, [pc, #264]	; (800536c <HAL_RCC_OscConfig+0x938>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800526a:	2b00      	cmp	r3, #0
 800526c:	d0ef      	beq.n	800524e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800526e:	1d3b      	adds	r3, r7, #4
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	2b01      	cmp	r3, #1
 8005276:	d106      	bne.n	8005286 <HAL_RCC_OscConfig+0x852>
 8005278:	4b3a      	ldr	r3, [pc, #232]	; (8005364 <HAL_RCC_OscConfig+0x930>)
 800527a:	6a1b      	ldr	r3, [r3, #32]
 800527c:	4a39      	ldr	r2, [pc, #228]	; (8005364 <HAL_RCC_OscConfig+0x930>)
 800527e:	f043 0301 	orr.w	r3, r3, #1
 8005282:	6213      	str	r3, [r2, #32]
 8005284:	e02f      	b.n	80052e6 <HAL_RCC_OscConfig+0x8b2>
 8005286:	1d3b      	adds	r3, r7, #4
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d10c      	bne.n	80052aa <HAL_RCC_OscConfig+0x876>
 8005290:	4b34      	ldr	r3, [pc, #208]	; (8005364 <HAL_RCC_OscConfig+0x930>)
 8005292:	6a1b      	ldr	r3, [r3, #32]
 8005294:	4a33      	ldr	r2, [pc, #204]	; (8005364 <HAL_RCC_OscConfig+0x930>)
 8005296:	f023 0301 	bic.w	r3, r3, #1
 800529a:	6213      	str	r3, [r2, #32]
 800529c:	4b31      	ldr	r3, [pc, #196]	; (8005364 <HAL_RCC_OscConfig+0x930>)
 800529e:	6a1b      	ldr	r3, [r3, #32]
 80052a0:	4a30      	ldr	r2, [pc, #192]	; (8005364 <HAL_RCC_OscConfig+0x930>)
 80052a2:	f023 0304 	bic.w	r3, r3, #4
 80052a6:	6213      	str	r3, [r2, #32]
 80052a8:	e01d      	b.n	80052e6 <HAL_RCC_OscConfig+0x8b2>
 80052aa:	1d3b      	adds	r3, r7, #4
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	2b05      	cmp	r3, #5
 80052b2:	d10c      	bne.n	80052ce <HAL_RCC_OscConfig+0x89a>
 80052b4:	4b2b      	ldr	r3, [pc, #172]	; (8005364 <HAL_RCC_OscConfig+0x930>)
 80052b6:	6a1b      	ldr	r3, [r3, #32]
 80052b8:	4a2a      	ldr	r2, [pc, #168]	; (8005364 <HAL_RCC_OscConfig+0x930>)
 80052ba:	f043 0304 	orr.w	r3, r3, #4
 80052be:	6213      	str	r3, [r2, #32]
 80052c0:	4b28      	ldr	r3, [pc, #160]	; (8005364 <HAL_RCC_OscConfig+0x930>)
 80052c2:	6a1b      	ldr	r3, [r3, #32]
 80052c4:	4a27      	ldr	r2, [pc, #156]	; (8005364 <HAL_RCC_OscConfig+0x930>)
 80052c6:	f043 0301 	orr.w	r3, r3, #1
 80052ca:	6213      	str	r3, [r2, #32]
 80052cc:	e00b      	b.n	80052e6 <HAL_RCC_OscConfig+0x8b2>
 80052ce:	4b25      	ldr	r3, [pc, #148]	; (8005364 <HAL_RCC_OscConfig+0x930>)
 80052d0:	6a1b      	ldr	r3, [r3, #32]
 80052d2:	4a24      	ldr	r2, [pc, #144]	; (8005364 <HAL_RCC_OscConfig+0x930>)
 80052d4:	f023 0301 	bic.w	r3, r3, #1
 80052d8:	6213      	str	r3, [r2, #32]
 80052da:	4b22      	ldr	r3, [pc, #136]	; (8005364 <HAL_RCC_OscConfig+0x930>)
 80052dc:	6a1b      	ldr	r3, [r3, #32]
 80052de:	4a21      	ldr	r2, [pc, #132]	; (8005364 <HAL_RCC_OscConfig+0x930>)
 80052e0:	f023 0304 	bic.w	r3, r3, #4
 80052e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80052e6:	1d3b      	adds	r3, r7, #4
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d06b      	beq.n	80053c8 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052f0:	f7fc fa2e 	bl	8001750 <HAL_GetTick>
 80052f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052f8:	e00b      	b.n	8005312 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052fa:	f7fc fa29 	bl	8001750 <HAL_GetTick>
 80052fe:	4602      	mov	r2, r0
 8005300:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	f241 3288 	movw	r2, #5000	; 0x1388
 800530a:	4293      	cmp	r3, r2
 800530c:	d901      	bls.n	8005312 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e291      	b.n	8005836 <HAL_RCC_OscConfig+0xe02>
 8005312:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005316:	2202      	movs	r2, #2
 8005318:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800531a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	fa93 f2a3 	rbit	r2, r3
 8005324:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005328:	601a      	str	r2, [r3, #0]
 800532a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800532e:	2202      	movs	r2, #2
 8005330:	601a      	str	r2, [r3, #0]
 8005332:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	fa93 f2a3 	rbit	r2, r3
 800533c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005340:	601a      	str	r2, [r3, #0]
  return result;
 8005342:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005346:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005348:	fab3 f383 	clz	r3, r3
 800534c:	b2db      	uxtb	r3, r3
 800534e:	095b      	lsrs	r3, r3, #5
 8005350:	b2db      	uxtb	r3, r3
 8005352:	f043 0302 	orr.w	r3, r3, #2
 8005356:	b2db      	uxtb	r3, r3
 8005358:	2b02      	cmp	r3, #2
 800535a:	d109      	bne.n	8005370 <HAL_RCC_OscConfig+0x93c>
 800535c:	4b01      	ldr	r3, [pc, #4]	; (8005364 <HAL_RCC_OscConfig+0x930>)
 800535e:	6a1b      	ldr	r3, [r3, #32]
 8005360:	e014      	b.n	800538c <HAL_RCC_OscConfig+0x958>
 8005362:	bf00      	nop
 8005364:	40021000 	.word	0x40021000
 8005368:	10908120 	.word	0x10908120
 800536c:	40007000 	.word	0x40007000
 8005370:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005374:	2202      	movs	r2, #2
 8005376:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005378:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	fa93 f2a3 	rbit	r2, r3
 8005382:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005386:	601a      	str	r2, [r3, #0]
 8005388:	4bbb      	ldr	r3, [pc, #748]	; (8005678 <HAL_RCC_OscConfig+0xc44>)
 800538a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005390:	2102      	movs	r1, #2
 8005392:	6011      	str	r1, [r2, #0]
 8005394:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005398:	6812      	ldr	r2, [r2, #0]
 800539a:	fa92 f1a2 	rbit	r1, r2
 800539e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80053a2:	6011      	str	r1, [r2, #0]
  return result;
 80053a4:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80053a8:	6812      	ldr	r2, [r2, #0]
 80053aa:	fab2 f282 	clz	r2, r2
 80053ae:	b2d2      	uxtb	r2, r2
 80053b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053b4:	b2d2      	uxtb	r2, r2
 80053b6:	f002 021f 	and.w	r2, r2, #31
 80053ba:	2101      	movs	r1, #1
 80053bc:	fa01 f202 	lsl.w	r2, r1, r2
 80053c0:	4013      	ands	r3, r2
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d099      	beq.n	80052fa <HAL_RCC_OscConfig+0x8c6>
 80053c6:	e063      	b.n	8005490 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053c8:	f7fc f9c2 	bl	8001750 <HAL_GetTick>
 80053cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053d0:	e00b      	b.n	80053ea <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053d2:	f7fc f9bd 	bl	8001750 <HAL_GetTick>
 80053d6:	4602      	mov	r2, r0
 80053d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	f241 3288 	movw	r2, #5000	; 0x1388
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d901      	bls.n	80053ea <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e225      	b.n	8005836 <HAL_RCC_OscConfig+0xe02>
 80053ea:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80053ee:	2202      	movs	r2, #2
 80053f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053f2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	fa93 f2a3 	rbit	r2, r3
 80053fc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005400:	601a      	str	r2, [r3, #0]
 8005402:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005406:	2202      	movs	r2, #2
 8005408:	601a      	str	r2, [r3, #0]
 800540a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	fa93 f2a3 	rbit	r2, r3
 8005414:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005418:	601a      	str	r2, [r3, #0]
  return result;
 800541a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800541e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005420:	fab3 f383 	clz	r3, r3
 8005424:	b2db      	uxtb	r3, r3
 8005426:	095b      	lsrs	r3, r3, #5
 8005428:	b2db      	uxtb	r3, r3
 800542a:	f043 0302 	orr.w	r3, r3, #2
 800542e:	b2db      	uxtb	r3, r3
 8005430:	2b02      	cmp	r3, #2
 8005432:	d102      	bne.n	800543a <HAL_RCC_OscConfig+0xa06>
 8005434:	4b90      	ldr	r3, [pc, #576]	; (8005678 <HAL_RCC_OscConfig+0xc44>)
 8005436:	6a1b      	ldr	r3, [r3, #32]
 8005438:	e00d      	b.n	8005456 <HAL_RCC_OscConfig+0xa22>
 800543a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800543e:	2202      	movs	r2, #2
 8005440:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005442:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	fa93 f2a3 	rbit	r2, r3
 800544c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8005450:	601a      	str	r2, [r3, #0]
 8005452:	4b89      	ldr	r3, [pc, #548]	; (8005678 <HAL_RCC_OscConfig+0xc44>)
 8005454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005456:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800545a:	2102      	movs	r1, #2
 800545c:	6011      	str	r1, [r2, #0]
 800545e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005462:	6812      	ldr	r2, [r2, #0]
 8005464:	fa92 f1a2 	rbit	r1, r2
 8005468:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800546c:	6011      	str	r1, [r2, #0]
  return result;
 800546e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8005472:	6812      	ldr	r2, [r2, #0]
 8005474:	fab2 f282 	clz	r2, r2
 8005478:	b2d2      	uxtb	r2, r2
 800547a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800547e:	b2d2      	uxtb	r2, r2
 8005480:	f002 021f 	and.w	r2, r2, #31
 8005484:	2101      	movs	r1, #1
 8005486:	fa01 f202 	lsl.w	r2, r1, r2
 800548a:	4013      	ands	r3, r2
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1a0      	bne.n	80053d2 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005490:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8005494:	2b01      	cmp	r3, #1
 8005496:	d105      	bne.n	80054a4 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005498:	4b77      	ldr	r3, [pc, #476]	; (8005678 <HAL_RCC_OscConfig+0xc44>)
 800549a:	69db      	ldr	r3, [r3, #28]
 800549c:	4a76      	ldr	r2, [pc, #472]	; (8005678 <HAL_RCC_OscConfig+0xc44>)
 800549e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054a2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054a4:	1d3b      	adds	r3, r7, #4
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	69db      	ldr	r3, [r3, #28]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	f000 81c2 	beq.w	8005834 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80054b0:	4b71      	ldr	r3, [pc, #452]	; (8005678 <HAL_RCC_OscConfig+0xc44>)
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	f003 030c 	and.w	r3, r3, #12
 80054b8:	2b08      	cmp	r3, #8
 80054ba:	f000 819c 	beq.w	80057f6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054be:	1d3b      	adds	r3, r7, #4
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	69db      	ldr	r3, [r3, #28]
 80054c4:	2b02      	cmp	r3, #2
 80054c6:	f040 8114 	bne.w	80056f2 <HAL_RCC_OscConfig+0xcbe>
 80054ca:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80054ce:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80054d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054d4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	fa93 f2a3 	rbit	r2, r3
 80054de:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80054e2:	601a      	str	r2, [r3, #0]
  return result;
 80054e4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80054e8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054ea:	fab3 f383 	clz	r3, r3
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80054f4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	461a      	mov	r2, r3
 80054fc:	2300      	movs	r3, #0
 80054fe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005500:	f7fc f926 	bl	8001750 <HAL_GetTick>
 8005504:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005508:	e009      	b.n	800551e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800550a:	f7fc f921 	bl	8001750 <HAL_GetTick>
 800550e:	4602      	mov	r2, r0
 8005510:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	2b02      	cmp	r3, #2
 8005518:	d901      	bls.n	800551e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e18b      	b.n	8005836 <HAL_RCC_OscConfig+0xe02>
 800551e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005522:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005526:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005528:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	fa93 f2a3 	rbit	r2, r3
 8005532:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005536:	601a      	str	r2, [r3, #0]
  return result;
 8005538:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800553c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800553e:	fab3 f383 	clz	r3, r3
 8005542:	b2db      	uxtb	r3, r3
 8005544:	095b      	lsrs	r3, r3, #5
 8005546:	b2db      	uxtb	r3, r3
 8005548:	f043 0301 	orr.w	r3, r3, #1
 800554c:	b2db      	uxtb	r3, r3
 800554e:	2b01      	cmp	r3, #1
 8005550:	d102      	bne.n	8005558 <HAL_RCC_OscConfig+0xb24>
 8005552:	4b49      	ldr	r3, [pc, #292]	; (8005678 <HAL_RCC_OscConfig+0xc44>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	e01b      	b.n	8005590 <HAL_RCC_OscConfig+0xb5c>
 8005558:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800555c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005560:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005562:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	fa93 f2a3 	rbit	r2, r3
 800556c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005570:	601a      	str	r2, [r3, #0]
 8005572:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005576:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800557a:	601a      	str	r2, [r3, #0]
 800557c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	fa93 f2a3 	rbit	r2, r3
 8005586:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800558a:	601a      	str	r2, [r3, #0]
 800558c:	4b3a      	ldr	r3, [pc, #232]	; (8005678 <HAL_RCC_OscConfig+0xc44>)
 800558e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005590:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005594:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005598:	6011      	str	r1, [r2, #0]
 800559a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800559e:	6812      	ldr	r2, [r2, #0]
 80055a0:	fa92 f1a2 	rbit	r1, r2
 80055a4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80055a8:	6011      	str	r1, [r2, #0]
  return result;
 80055aa:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80055ae:	6812      	ldr	r2, [r2, #0]
 80055b0:	fab2 f282 	clz	r2, r2
 80055b4:	b2d2      	uxtb	r2, r2
 80055b6:	f042 0220 	orr.w	r2, r2, #32
 80055ba:	b2d2      	uxtb	r2, r2
 80055bc:	f002 021f 	and.w	r2, r2, #31
 80055c0:	2101      	movs	r1, #1
 80055c2:	fa01 f202 	lsl.w	r2, r1, r2
 80055c6:	4013      	ands	r3, r2
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d19e      	bne.n	800550a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80055cc:	4b2a      	ldr	r3, [pc, #168]	; (8005678 <HAL_RCC_OscConfig+0xc44>)
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80055d4:	1d3b      	adds	r3, r7, #4
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80055da:	1d3b      	adds	r3, r7, #4
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	6a1b      	ldr	r3, [r3, #32]
 80055e0:	430b      	orrs	r3, r1
 80055e2:	4925      	ldr	r1, [pc, #148]	; (8005678 <HAL_RCC_OscConfig+0xc44>)
 80055e4:	4313      	orrs	r3, r2
 80055e6:	604b      	str	r3, [r1, #4]
 80055e8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80055ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80055f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055f2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	fa93 f2a3 	rbit	r2, r3
 80055fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005600:	601a      	str	r2, [r3, #0]
  return result;
 8005602:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005606:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005608:	fab3 f383 	clz	r3, r3
 800560c:	b2db      	uxtb	r3, r3
 800560e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005612:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	461a      	mov	r2, r3
 800561a:	2301      	movs	r3, #1
 800561c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800561e:	f7fc f897 	bl	8001750 <HAL_GetTick>
 8005622:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005626:	e009      	b.n	800563c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005628:	f7fc f892 	bl	8001750 <HAL_GetTick>
 800562c:	4602      	mov	r2, r0
 800562e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005632:	1ad3      	subs	r3, r2, r3
 8005634:	2b02      	cmp	r3, #2
 8005636:	d901      	bls.n	800563c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8005638:	2303      	movs	r3, #3
 800563a:	e0fc      	b.n	8005836 <HAL_RCC_OscConfig+0xe02>
 800563c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005640:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005644:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005646:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	fa93 f2a3 	rbit	r2, r3
 8005650:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005654:	601a      	str	r2, [r3, #0]
  return result;
 8005656:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800565a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800565c:	fab3 f383 	clz	r3, r3
 8005660:	b2db      	uxtb	r3, r3
 8005662:	095b      	lsrs	r3, r3, #5
 8005664:	b2db      	uxtb	r3, r3
 8005666:	f043 0301 	orr.w	r3, r3, #1
 800566a:	b2db      	uxtb	r3, r3
 800566c:	2b01      	cmp	r3, #1
 800566e:	d105      	bne.n	800567c <HAL_RCC_OscConfig+0xc48>
 8005670:	4b01      	ldr	r3, [pc, #4]	; (8005678 <HAL_RCC_OscConfig+0xc44>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	e01e      	b.n	80056b4 <HAL_RCC_OscConfig+0xc80>
 8005676:	bf00      	nop
 8005678:	40021000 	.word	0x40021000
 800567c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005680:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005684:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005686:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	fa93 f2a3 	rbit	r2, r3
 8005690:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005694:	601a      	str	r2, [r3, #0]
 8005696:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800569a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800569e:	601a      	str	r2, [r3, #0]
 80056a0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	fa93 f2a3 	rbit	r2, r3
 80056aa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80056ae:	601a      	str	r2, [r3, #0]
 80056b0:	4b63      	ldr	r3, [pc, #396]	; (8005840 <HAL_RCC_OscConfig+0xe0c>)
 80056b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80056b8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80056bc:	6011      	str	r1, [r2, #0]
 80056be:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80056c2:	6812      	ldr	r2, [r2, #0]
 80056c4:	fa92 f1a2 	rbit	r1, r2
 80056c8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80056cc:	6011      	str	r1, [r2, #0]
  return result;
 80056ce:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80056d2:	6812      	ldr	r2, [r2, #0]
 80056d4:	fab2 f282 	clz	r2, r2
 80056d8:	b2d2      	uxtb	r2, r2
 80056da:	f042 0220 	orr.w	r2, r2, #32
 80056de:	b2d2      	uxtb	r2, r2
 80056e0:	f002 021f 	and.w	r2, r2, #31
 80056e4:	2101      	movs	r1, #1
 80056e6:	fa01 f202 	lsl.w	r2, r1, r2
 80056ea:	4013      	ands	r3, r2
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d09b      	beq.n	8005628 <HAL_RCC_OscConfig+0xbf4>
 80056f0:	e0a0      	b.n	8005834 <HAL_RCC_OscConfig+0xe00>
 80056f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80056f6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80056fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	fa93 f2a3 	rbit	r2, r3
 8005706:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800570a:	601a      	str	r2, [r3, #0]
  return result;
 800570c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005710:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005712:	fab3 f383 	clz	r3, r3
 8005716:	b2db      	uxtb	r3, r3
 8005718:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800571c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	461a      	mov	r2, r3
 8005724:	2300      	movs	r3, #0
 8005726:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005728:	f7fc f812 	bl	8001750 <HAL_GetTick>
 800572c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005730:	e009      	b.n	8005746 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005732:	f7fc f80d 	bl	8001750 <HAL_GetTick>
 8005736:	4602      	mov	r2, r0
 8005738:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	2b02      	cmp	r3, #2
 8005740:	d901      	bls.n	8005746 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8005742:	2303      	movs	r3, #3
 8005744:	e077      	b.n	8005836 <HAL_RCC_OscConfig+0xe02>
 8005746:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800574a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800574e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005750:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	fa93 f2a3 	rbit	r2, r3
 800575a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800575e:	601a      	str	r2, [r3, #0]
  return result;
 8005760:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005764:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005766:	fab3 f383 	clz	r3, r3
 800576a:	b2db      	uxtb	r3, r3
 800576c:	095b      	lsrs	r3, r3, #5
 800576e:	b2db      	uxtb	r3, r3
 8005770:	f043 0301 	orr.w	r3, r3, #1
 8005774:	b2db      	uxtb	r3, r3
 8005776:	2b01      	cmp	r3, #1
 8005778:	d102      	bne.n	8005780 <HAL_RCC_OscConfig+0xd4c>
 800577a:	4b31      	ldr	r3, [pc, #196]	; (8005840 <HAL_RCC_OscConfig+0xe0c>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	e01b      	b.n	80057b8 <HAL_RCC_OscConfig+0xd84>
 8005780:	f107 0320 	add.w	r3, r7, #32
 8005784:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005788:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800578a:	f107 0320 	add.w	r3, r7, #32
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	fa93 f2a3 	rbit	r2, r3
 8005794:	f107 031c 	add.w	r3, r7, #28
 8005798:	601a      	str	r2, [r3, #0]
 800579a:	f107 0318 	add.w	r3, r7, #24
 800579e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80057a2:	601a      	str	r2, [r3, #0]
 80057a4:	f107 0318 	add.w	r3, r7, #24
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	fa93 f2a3 	rbit	r2, r3
 80057ae:	f107 0314 	add.w	r3, r7, #20
 80057b2:	601a      	str	r2, [r3, #0]
 80057b4:	4b22      	ldr	r3, [pc, #136]	; (8005840 <HAL_RCC_OscConfig+0xe0c>)
 80057b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b8:	f107 0210 	add.w	r2, r7, #16
 80057bc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80057c0:	6011      	str	r1, [r2, #0]
 80057c2:	f107 0210 	add.w	r2, r7, #16
 80057c6:	6812      	ldr	r2, [r2, #0]
 80057c8:	fa92 f1a2 	rbit	r1, r2
 80057cc:	f107 020c 	add.w	r2, r7, #12
 80057d0:	6011      	str	r1, [r2, #0]
  return result;
 80057d2:	f107 020c 	add.w	r2, r7, #12
 80057d6:	6812      	ldr	r2, [r2, #0]
 80057d8:	fab2 f282 	clz	r2, r2
 80057dc:	b2d2      	uxtb	r2, r2
 80057de:	f042 0220 	orr.w	r2, r2, #32
 80057e2:	b2d2      	uxtb	r2, r2
 80057e4:	f002 021f 	and.w	r2, r2, #31
 80057e8:	2101      	movs	r1, #1
 80057ea:	fa01 f202 	lsl.w	r2, r1, r2
 80057ee:	4013      	ands	r3, r2
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d19e      	bne.n	8005732 <HAL_RCC_OscConfig+0xcfe>
 80057f4:	e01e      	b.n	8005834 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057f6:	1d3b      	adds	r3, r7, #4
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	69db      	ldr	r3, [r3, #28]
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d101      	bne.n	8005804 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	e018      	b.n	8005836 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005804:	4b0e      	ldr	r3, [pc, #56]	; (8005840 <HAL_RCC_OscConfig+0xe0c>)
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800580c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005810:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005814:	1d3b      	adds	r3, r7, #4
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	6a1b      	ldr	r3, [r3, #32]
 800581a:	429a      	cmp	r2, r3
 800581c:	d108      	bne.n	8005830 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800581e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005822:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005826:	1d3b      	adds	r3, r7, #4
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800582c:	429a      	cmp	r2, r3
 800582e:	d001      	beq.n	8005834 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	e000      	b.n	8005836 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}
 8005840:	40021000 	.word	0x40021000

08005844 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b09e      	sub	sp, #120	; 0x78
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800584e:	2300      	movs	r3, #0
 8005850:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d101      	bne.n	800585c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	e162      	b.n	8005b22 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800585c:	4b90      	ldr	r3, [pc, #576]	; (8005aa0 <HAL_RCC_ClockConfig+0x25c>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 0307 	and.w	r3, r3, #7
 8005864:	683a      	ldr	r2, [r7, #0]
 8005866:	429a      	cmp	r2, r3
 8005868:	d910      	bls.n	800588c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800586a:	4b8d      	ldr	r3, [pc, #564]	; (8005aa0 <HAL_RCC_ClockConfig+0x25c>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f023 0207 	bic.w	r2, r3, #7
 8005872:	498b      	ldr	r1, [pc, #556]	; (8005aa0 <HAL_RCC_ClockConfig+0x25c>)
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	4313      	orrs	r3, r2
 8005878:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800587a:	4b89      	ldr	r3, [pc, #548]	; (8005aa0 <HAL_RCC_ClockConfig+0x25c>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 0307 	and.w	r3, r3, #7
 8005882:	683a      	ldr	r2, [r7, #0]
 8005884:	429a      	cmp	r2, r3
 8005886:	d001      	beq.n	800588c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	e14a      	b.n	8005b22 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 0302 	and.w	r3, r3, #2
 8005894:	2b00      	cmp	r3, #0
 8005896:	d008      	beq.n	80058aa <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005898:	4b82      	ldr	r3, [pc, #520]	; (8005aa4 <HAL_RCC_ClockConfig+0x260>)
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	497f      	ldr	r1, [pc, #508]	; (8005aa4 <HAL_RCC_ClockConfig+0x260>)
 80058a6:	4313      	orrs	r3, r2
 80058a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 0301 	and.w	r3, r3, #1
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	f000 80dc 	beq.w	8005a70 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d13c      	bne.n	800593a <HAL_RCC_ClockConfig+0xf6>
 80058c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80058c4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80058c8:	fa93 f3a3 	rbit	r3, r3
 80058cc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80058ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058d0:	fab3 f383 	clz	r3, r3
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	095b      	lsrs	r3, r3, #5
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	f043 0301 	orr.w	r3, r3, #1
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d102      	bne.n	80058ea <HAL_RCC_ClockConfig+0xa6>
 80058e4:	4b6f      	ldr	r3, [pc, #444]	; (8005aa4 <HAL_RCC_ClockConfig+0x260>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	e00f      	b.n	800590a <HAL_RCC_ClockConfig+0xc6>
 80058ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80058ee:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80058f2:	fa93 f3a3 	rbit	r3, r3
 80058f6:	667b      	str	r3, [r7, #100]	; 0x64
 80058f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80058fc:	663b      	str	r3, [r7, #96]	; 0x60
 80058fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005900:	fa93 f3a3 	rbit	r3, r3
 8005904:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005906:	4b67      	ldr	r3, [pc, #412]	; (8005aa4 <HAL_RCC_ClockConfig+0x260>)
 8005908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800590e:	65ba      	str	r2, [r7, #88]	; 0x58
 8005910:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005912:	fa92 f2a2 	rbit	r2, r2
 8005916:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005918:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800591a:	fab2 f282 	clz	r2, r2
 800591e:	b2d2      	uxtb	r2, r2
 8005920:	f042 0220 	orr.w	r2, r2, #32
 8005924:	b2d2      	uxtb	r2, r2
 8005926:	f002 021f 	and.w	r2, r2, #31
 800592a:	2101      	movs	r1, #1
 800592c:	fa01 f202 	lsl.w	r2, r1, r2
 8005930:	4013      	ands	r3, r2
 8005932:	2b00      	cmp	r3, #0
 8005934:	d17b      	bne.n	8005a2e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e0f3      	b.n	8005b22 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	2b02      	cmp	r3, #2
 8005940:	d13c      	bne.n	80059bc <HAL_RCC_ClockConfig+0x178>
 8005942:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005946:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005948:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800594a:	fa93 f3a3 	rbit	r3, r3
 800594e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005950:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005952:	fab3 f383 	clz	r3, r3
 8005956:	b2db      	uxtb	r3, r3
 8005958:	095b      	lsrs	r3, r3, #5
 800595a:	b2db      	uxtb	r3, r3
 800595c:	f043 0301 	orr.w	r3, r3, #1
 8005960:	b2db      	uxtb	r3, r3
 8005962:	2b01      	cmp	r3, #1
 8005964:	d102      	bne.n	800596c <HAL_RCC_ClockConfig+0x128>
 8005966:	4b4f      	ldr	r3, [pc, #316]	; (8005aa4 <HAL_RCC_ClockConfig+0x260>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	e00f      	b.n	800598c <HAL_RCC_ClockConfig+0x148>
 800596c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005970:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005972:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005974:	fa93 f3a3 	rbit	r3, r3
 8005978:	647b      	str	r3, [r7, #68]	; 0x44
 800597a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800597e:	643b      	str	r3, [r7, #64]	; 0x40
 8005980:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005982:	fa93 f3a3 	rbit	r3, r3
 8005986:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005988:	4b46      	ldr	r3, [pc, #280]	; (8005aa4 <HAL_RCC_ClockConfig+0x260>)
 800598a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005990:	63ba      	str	r2, [r7, #56]	; 0x38
 8005992:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005994:	fa92 f2a2 	rbit	r2, r2
 8005998:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800599a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800599c:	fab2 f282 	clz	r2, r2
 80059a0:	b2d2      	uxtb	r2, r2
 80059a2:	f042 0220 	orr.w	r2, r2, #32
 80059a6:	b2d2      	uxtb	r2, r2
 80059a8:	f002 021f 	and.w	r2, r2, #31
 80059ac:	2101      	movs	r1, #1
 80059ae:	fa01 f202 	lsl.w	r2, r1, r2
 80059b2:	4013      	ands	r3, r2
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d13a      	bne.n	8005a2e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	e0b2      	b.n	8005b22 <HAL_RCC_ClockConfig+0x2de>
 80059bc:	2302      	movs	r3, #2
 80059be:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c2:	fa93 f3a3 	rbit	r3, r3
 80059c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80059c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059ca:	fab3 f383 	clz	r3, r3
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	095b      	lsrs	r3, r3, #5
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	f043 0301 	orr.w	r3, r3, #1
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d102      	bne.n	80059e4 <HAL_RCC_ClockConfig+0x1a0>
 80059de:	4b31      	ldr	r3, [pc, #196]	; (8005aa4 <HAL_RCC_ClockConfig+0x260>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	e00d      	b.n	8005a00 <HAL_RCC_ClockConfig+0x1bc>
 80059e4:	2302      	movs	r3, #2
 80059e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ea:	fa93 f3a3 	rbit	r3, r3
 80059ee:	627b      	str	r3, [r7, #36]	; 0x24
 80059f0:	2302      	movs	r3, #2
 80059f2:	623b      	str	r3, [r7, #32]
 80059f4:	6a3b      	ldr	r3, [r7, #32]
 80059f6:	fa93 f3a3 	rbit	r3, r3
 80059fa:	61fb      	str	r3, [r7, #28]
 80059fc:	4b29      	ldr	r3, [pc, #164]	; (8005aa4 <HAL_RCC_ClockConfig+0x260>)
 80059fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a00:	2202      	movs	r2, #2
 8005a02:	61ba      	str	r2, [r7, #24]
 8005a04:	69ba      	ldr	r2, [r7, #24]
 8005a06:	fa92 f2a2 	rbit	r2, r2
 8005a0a:	617a      	str	r2, [r7, #20]
  return result;
 8005a0c:	697a      	ldr	r2, [r7, #20]
 8005a0e:	fab2 f282 	clz	r2, r2
 8005a12:	b2d2      	uxtb	r2, r2
 8005a14:	f042 0220 	orr.w	r2, r2, #32
 8005a18:	b2d2      	uxtb	r2, r2
 8005a1a:	f002 021f 	and.w	r2, r2, #31
 8005a1e:	2101      	movs	r1, #1
 8005a20:	fa01 f202 	lsl.w	r2, r1, r2
 8005a24:	4013      	ands	r3, r2
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d101      	bne.n	8005a2e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e079      	b.n	8005b22 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a2e:	4b1d      	ldr	r3, [pc, #116]	; (8005aa4 <HAL_RCC_ClockConfig+0x260>)
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	f023 0203 	bic.w	r2, r3, #3
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	491a      	ldr	r1, [pc, #104]	; (8005aa4 <HAL_RCC_ClockConfig+0x260>)
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a40:	f7fb fe86 	bl	8001750 <HAL_GetTick>
 8005a44:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a46:	e00a      	b.n	8005a5e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a48:	f7fb fe82 	bl	8001750 <HAL_GetTick>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a50:	1ad3      	subs	r3, r2, r3
 8005a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d901      	bls.n	8005a5e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005a5a:	2303      	movs	r3, #3
 8005a5c:	e061      	b.n	8005b22 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a5e:	4b11      	ldr	r3, [pc, #68]	; (8005aa4 <HAL_RCC_ClockConfig+0x260>)
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	f003 020c 	and.w	r2, r3, #12
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d1eb      	bne.n	8005a48 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a70:	4b0b      	ldr	r3, [pc, #44]	; (8005aa0 <HAL_RCC_ClockConfig+0x25c>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 0307 	and.w	r3, r3, #7
 8005a78:	683a      	ldr	r2, [r7, #0]
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d214      	bcs.n	8005aa8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a7e:	4b08      	ldr	r3, [pc, #32]	; (8005aa0 <HAL_RCC_ClockConfig+0x25c>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f023 0207 	bic.w	r2, r3, #7
 8005a86:	4906      	ldr	r1, [pc, #24]	; (8005aa0 <HAL_RCC_ClockConfig+0x25c>)
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a8e:	4b04      	ldr	r3, [pc, #16]	; (8005aa0 <HAL_RCC_ClockConfig+0x25c>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 0307 	and.w	r3, r3, #7
 8005a96:	683a      	ldr	r2, [r7, #0]
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d005      	beq.n	8005aa8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e040      	b.n	8005b22 <HAL_RCC_ClockConfig+0x2de>
 8005aa0:	40022000 	.word	0x40022000
 8005aa4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 0304 	and.w	r3, r3, #4
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d008      	beq.n	8005ac6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ab4:	4b1d      	ldr	r3, [pc, #116]	; (8005b2c <HAL_RCC_ClockConfig+0x2e8>)
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	491a      	ldr	r1, [pc, #104]	; (8005b2c <HAL_RCC_ClockConfig+0x2e8>)
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f003 0308 	and.w	r3, r3, #8
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d009      	beq.n	8005ae6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ad2:	4b16      	ldr	r3, [pc, #88]	; (8005b2c <HAL_RCC_ClockConfig+0x2e8>)
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	00db      	lsls	r3, r3, #3
 8005ae0:	4912      	ldr	r1, [pc, #72]	; (8005b2c <HAL_RCC_ClockConfig+0x2e8>)
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005ae6:	f000 f829 	bl	8005b3c <HAL_RCC_GetSysClockFreq>
 8005aea:	4601      	mov	r1, r0
 8005aec:	4b0f      	ldr	r3, [pc, #60]	; (8005b2c <HAL_RCC_ClockConfig+0x2e8>)
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005af4:	22f0      	movs	r2, #240	; 0xf0
 8005af6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005af8:	693a      	ldr	r2, [r7, #16]
 8005afa:	fa92 f2a2 	rbit	r2, r2
 8005afe:	60fa      	str	r2, [r7, #12]
  return result;
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	fab2 f282 	clz	r2, r2
 8005b06:	b2d2      	uxtb	r2, r2
 8005b08:	40d3      	lsrs	r3, r2
 8005b0a:	4a09      	ldr	r2, [pc, #36]	; (8005b30 <HAL_RCC_ClockConfig+0x2ec>)
 8005b0c:	5cd3      	ldrb	r3, [r2, r3]
 8005b0e:	fa21 f303 	lsr.w	r3, r1, r3
 8005b12:	4a08      	ldr	r2, [pc, #32]	; (8005b34 <HAL_RCC_ClockConfig+0x2f0>)
 8005b14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005b16:	4b08      	ldr	r3, [pc, #32]	; (8005b38 <HAL_RCC_ClockConfig+0x2f4>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f7fb fdd4 	bl	80016c8 <HAL_InitTick>
  
  return HAL_OK;
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3778      	adds	r7, #120	; 0x78
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop
 8005b2c:	40021000 	.word	0x40021000
 8005b30:	08007708 	.word	0x08007708
 8005b34:	20000000 	.word	0x20000000
 8005b38:	20000004 	.word	0x20000004

08005b3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b08b      	sub	sp, #44	; 0x2c
 8005b40:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005b42:	2300      	movs	r3, #0
 8005b44:	61fb      	str	r3, [r7, #28]
 8005b46:	2300      	movs	r3, #0
 8005b48:	61bb      	str	r3, [r7, #24]
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8005b4e:	2300      	movs	r3, #0
 8005b50:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005b52:	2300      	movs	r3, #0
 8005b54:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005b56:	4b29      	ldr	r3, [pc, #164]	; (8005bfc <HAL_RCC_GetSysClockFreq+0xc0>)
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	f003 030c 	and.w	r3, r3, #12
 8005b62:	2b04      	cmp	r3, #4
 8005b64:	d002      	beq.n	8005b6c <HAL_RCC_GetSysClockFreq+0x30>
 8005b66:	2b08      	cmp	r3, #8
 8005b68:	d003      	beq.n	8005b72 <HAL_RCC_GetSysClockFreq+0x36>
 8005b6a:	e03c      	b.n	8005be6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005b6c:	4b24      	ldr	r3, [pc, #144]	; (8005c00 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005b6e:	623b      	str	r3, [r7, #32]
      break;
 8005b70:	e03c      	b.n	8005bec <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005b78:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005b7c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b7e:	68ba      	ldr	r2, [r7, #8]
 8005b80:	fa92 f2a2 	rbit	r2, r2
 8005b84:	607a      	str	r2, [r7, #4]
  return result;
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	fab2 f282 	clz	r2, r2
 8005b8c:	b2d2      	uxtb	r2, r2
 8005b8e:	40d3      	lsrs	r3, r2
 8005b90:	4a1c      	ldr	r2, [pc, #112]	; (8005c04 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005b92:	5cd3      	ldrb	r3, [r2, r3]
 8005b94:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005b96:	4b19      	ldr	r3, [pc, #100]	; (8005bfc <HAL_RCC_GetSysClockFreq+0xc0>)
 8005b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b9a:	f003 030f 	and.w	r3, r3, #15
 8005b9e:	220f      	movs	r2, #15
 8005ba0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ba2:	693a      	ldr	r2, [r7, #16]
 8005ba4:	fa92 f2a2 	rbit	r2, r2
 8005ba8:	60fa      	str	r2, [r7, #12]
  return result;
 8005baa:	68fa      	ldr	r2, [r7, #12]
 8005bac:	fab2 f282 	clz	r2, r2
 8005bb0:	b2d2      	uxtb	r2, r2
 8005bb2:	40d3      	lsrs	r3, r2
 8005bb4:	4a14      	ldr	r2, [pc, #80]	; (8005c08 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005bb6:	5cd3      	ldrb	r3, [r2, r3]
 8005bb8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d008      	beq.n	8005bd6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005bc4:	4a0e      	ldr	r2, [pc, #56]	; (8005c00 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005bc6:	69bb      	ldr	r3, [r7, #24]
 8005bc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	fb02 f303 	mul.w	r3, r2, r3
 8005bd2:	627b      	str	r3, [r7, #36]	; 0x24
 8005bd4:	e004      	b.n	8005be0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	4a0c      	ldr	r2, [pc, #48]	; (8005c0c <HAL_RCC_GetSysClockFreq+0xd0>)
 8005bda:	fb02 f303 	mul.w	r3, r2, r3
 8005bde:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be2:	623b      	str	r3, [r7, #32]
      break;
 8005be4:	e002      	b.n	8005bec <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005be6:	4b06      	ldr	r3, [pc, #24]	; (8005c00 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005be8:	623b      	str	r3, [r7, #32]
      break;
 8005bea:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005bec:	6a3b      	ldr	r3, [r7, #32]
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	372c      	adds	r7, #44	; 0x2c
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr
 8005bfa:	bf00      	nop
 8005bfc:	40021000 	.word	0x40021000
 8005c00:	007a1200 	.word	0x007a1200
 8005c04:	08007720 	.word	0x08007720
 8005c08:	08007730 	.word	0x08007730
 8005c0c:	003d0900 	.word	0x003d0900

08005c10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c10:	b480      	push	{r7}
 8005c12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c14:	4b03      	ldr	r3, [pc, #12]	; (8005c24 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c16:	681b      	ldr	r3, [r3, #0]
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr
 8005c22:	bf00      	nop
 8005c24:	20000000 	.word	0x20000000

08005c28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b082      	sub	sp, #8
 8005c2c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005c2e:	f7ff ffef 	bl	8005c10 <HAL_RCC_GetHCLKFreq>
 8005c32:	4601      	mov	r1, r0
 8005c34:	4b0b      	ldr	r3, [pc, #44]	; (8005c64 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c3c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005c40:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	fa92 f2a2 	rbit	r2, r2
 8005c48:	603a      	str	r2, [r7, #0]
  return result;
 8005c4a:	683a      	ldr	r2, [r7, #0]
 8005c4c:	fab2 f282 	clz	r2, r2
 8005c50:	b2d2      	uxtb	r2, r2
 8005c52:	40d3      	lsrs	r3, r2
 8005c54:	4a04      	ldr	r2, [pc, #16]	; (8005c68 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005c56:	5cd3      	ldrb	r3, [r2, r3]
 8005c58:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3708      	adds	r7, #8
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}
 8005c64:	40021000 	.word	0x40021000
 8005c68:	08007718 	.word	0x08007718

08005c6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b082      	sub	sp, #8
 8005c70:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005c72:	f7ff ffcd 	bl	8005c10 <HAL_RCC_GetHCLKFreq>
 8005c76:	4601      	mov	r1, r0
 8005c78:	4b0b      	ldr	r3, [pc, #44]	; (8005ca8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005c80:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005c84:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	fa92 f2a2 	rbit	r2, r2
 8005c8c:	603a      	str	r2, [r7, #0]
  return result;
 8005c8e:	683a      	ldr	r2, [r7, #0]
 8005c90:	fab2 f282 	clz	r2, r2
 8005c94:	b2d2      	uxtb	r2, r2
 8005c96:	40d3      	lsrs	r3, r2
 8005c98:	4a04      	ldr	r2, [pc, #16]	; (8005cac <HAL_RCC_GetPCLK2Freq+0x40>)
 8005c9a:	5cd3      	ldrb	r3, [r2, r3]
 8005c9c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3708      	adds	r7, #8
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}
 8005ca8:	40021000 	.word	0x40021000
 8005cac:	08007718 	.word	0x08007718

08005cb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b092      	sub	sp, #72	; 0x48
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	f000 80cd 	beq.w	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005cd4:	4b86      	ldr	r3, [pc, #536]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005cd6:	69db      	ldr	r3, [r3, #28]
 8005cd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d10e      	bne.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ce0:	4b83      	ldr	r3, [pc, #524]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005ce2:	69db      	ldr	r3, [r3, #28]
 8005ce4:	4a82      	ldr	r2, [pc, #520]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005ce6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cea:	61d3      	str	r3, [r2, #28]
 8005cec:	4b80      	ldr	r3, [pc, #512]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005cee:	69db      	ldr	r3, [r3, #28]
 8005cf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cf4:	60bb      	str	r3, [r7, #8]
 8005cf6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cfe:	4b7d      	ldr	r3, [pc, #500]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d118      	bne.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d0a:	4b7a      	ldr	r3, [pc, #488]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a79      	ldr	r2, [pc, #484]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005d10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d14:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d16:	f7fb fd1b 	bl	8001750 <HAL_GetTick>
 8005d1a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d1c:	e008      	b.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d1e:	f7fb fd17 	bl	8001750 <HAL_GetTick>
 8005d22:	4602      	mov	r2, r0
 8005d24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d26:	1ad3      	subs	r3, r2, r3
 8005d28:	2b64      	cmp	r3, #100	; 0x64
 8005d2a:	d901      	bls.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	e0db      	b.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d30:	4b70      	ldr	r3, [pc, #448]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d0f0      	beq.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005d3c:	4b6c      	ldr	r3, [pc, #432]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005d3e:	6a1b      	ldr	r3, [r3, #32]
 8005d40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d44:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005d46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d07d      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d54:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d076      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d5a:	4b65      	ldr	r3, [pc, #404]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005d5c:	6a1b      	ldr	r3, [r3, #32]
 8005d5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005d68:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d6c:	fa93 f3a3 	rbit	r3, r3
 8005d70:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005d74:	fab3 f383 	clz	r3, r3
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	4b5e      	ldr	r3, [pc, #376]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005d7e:	4413      	add	r3, r2
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	461a      	mov	r2, r3
 8005d84:	2301      	movs	r3, #1
 8005d86:	6013      	str	r3, [r2, #0]
 8005d88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005d8c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d90:	fa93 f3a3 	rbit	r3, r3
 8005d94:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005d98:	fab3 f383 	clz	r3, r3
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	461a      	mov	r2, r3
 8005da0:	4b55      	ldr	r3, [pc, #340]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005da2:	4413      	add	r3, r2
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	461a      	mov	r2, r3
 8005da8:	2300      	movs	r3, #0
 8005daa:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005dac:	4a50      	ldr	r2, [pc, #320]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005dae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005db0:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005db2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005db4:	f003 0301 	and.w	r3, r3, #1
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d045      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dbc:	f7fb fcc8 	bl	8001750 <HAL_GetTick>
 8005dc0:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dc2:	e00a      	b.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dc4:	f7fb fcc4 	bl	8001750 <HAL_GetTick>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dcc:	1ad3      	subs	r3, r2, r3
 8005dce:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d901      	bls.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	e086      	b.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8005dda:	2302      	movs	r3, #2
 8005ddc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de0:	fa93 f3a3 	rbit	r3, r3
 8005de4:	627b      	str	r3, [r7, #36]	; 0x24
 8005de6:	2302      	movs	r3, #2
 8005de8:	623b      	str	r3, [r7, #32]
 8005dea:	6a3b      	ldr	r3, [r7, #32]
 8005dec:	fa93 f3a3 	rbit	r3, r3
 8005df0:	61fb      	str	r3, [r7, #28]
  return result;
 8005df2:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005df4:	fab3 f383 	clz	r3, r3
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	095b      	lsrs	r3, r3, #5
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	f043 0302 	orr.w	r3, r3, #2
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	2b02      	cmp	r3, #2
 8005e06:	d102      	bne.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005e08:	4b39      	ldr	r3, [pc, #228]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005e0a:	6a1b      	ldr	r3, [r3, #32]
 8005e0c:	e007      	b.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8005e0e:	2302      	movs	r3, #2
 8005e10:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e12:	69bb      	ldr	r3, [r7, #24]
 8005e14:	fa93 f3a3 	rbit	r3, r3
 8005e18:	617b      	str	r3, [r7, #20]
 8005e1a:	4b35      	ldr	r3, [pc, #212]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1e:	2202      	movs	r2, #2
 8005e20:	613a      	str	r2, [r7, #16]
 8005e22:	693a      	ldr	r2, [r7, #16]
 8005e24:	fa92 f2a2 	rbit	r2, r2
 8005e28:	60fa      	str	r2, [r7, #12]
  return result;
 8005e2a:	68fa      	ldr	r2, [r7, #12]
 8005e2c:	fab2 f282 	clz	r2, r2
 8005e30:	b2d2      	uxtb	r2, r2
 8005e32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e36:	b2d2      	uxtb	r2, r2
 8005e38:	f002 021f 	and.w	r2, r2, #31
 8005e3c:	2101      	movs	r1, #1
 8005e3e:	fa01 f202 	lsl.w	r2, r1, r2
 8005e42:	4013      	ands	r3, r2
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d0bd      	beq.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005e48:	4b29      	ldr	r3, [pc, #164]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005e4a:	6a1b      	ldr	r3, [r3, #32]
 8005e4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	4926      	ldr	r1, [pc, #152]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005e56:	4313      	orrs	r3, r2
 8005e58:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005e5a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d105      	bne.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e62:	4b23      	ldr	r3, [pc, #140]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005e64:	69db      	ldr	r3, [r3, #28]
 8005e66:	4a22      	ldr	r2, [pc, #136]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005e68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e6c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 0301 	and.w	r3, r3, #1
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d008      	beq.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005e7a:	4b1d      	ldr	r3, [pc, #116]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e7e:	f023 0203 	bic.w	r2, r3, #3
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	491a      	ldr	r1, [pc, #104]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 0320 	and.w	r3, r3, #32
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d008      	beq.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e98:	4b15      	ldr	r3, [pc, #84]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e9c:	f023 0210 	bic.w	r2, r3, #16
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	4912      	ldr	r1, [pc, #72]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d008      	beq.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005eb6:	4b0e      	ldr	r3, [pc, #56]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eba:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	691b      	ldr	r3, [r3, #16]
 8005ec2:	490b      	ldr	r1, [pc, #44]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d008      	beq.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005ed4:	4b06      	ldr	r3, [pc, #24]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	695b      	ldr	r3, [r3, #20]
 8005ee0:	4903      	ldr	r1, [pc, #12]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005ee6:	2300      	movs	r3, #0
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3748      	adds	r7, #72	; 0x48
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}
 8005ef0:	40021000 	.word	0x40021000
 8005ef4:	40007000 	.word	0x40007000
 8005ef8:	10908100 	.word	0x10908100

08005efc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b082      	sub	sp, #8
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d101      	bne.n	8005f0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e049      	b.n	8005fa2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d106      	bne.n	8005f28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f7fb fa6a 	bl	80013fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2202      	movs	r2, #2
 8005f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	3304      	adds	r3, #4
 8005f38:	4619      	mov	r1, r3
 8005f3a:	4610      	mov	r0, r2
 8005f3c:	f000 fbc0 	bl	80066c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fa0:	2300      	movs	r3, #0
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3708      	adds	r7, #8
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}

08005faa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005faa:	b580      	push	{r7, lr}
 8005fac:	b082      	sub	sp, #8
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d101      	bne.n	8005fbc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e049      	b.n	8006050 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d106      	bne.n	8005fd6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f7fb f9b3 	bl	800133c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2202      	movs	r2, #2
 8005fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	3304      	adds	r3, #4
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	4610      	mov	r0, r2
 8005fea:	f000 fb69 	bl	80066c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2201      	movs	r2, #1
 8006002:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2201      	movs	r2, #1
 800600a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2201      	movs	r2, #1
 8006012:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2201      	movs	r2, #1
 800601a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2201      	movs	r2, #1
 8006022:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2201      	movs	r2, #1
 800602a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2201      	movs	r2, #1
 8006032:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2201      	movs	r2, #1
 800603a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2201      	movs	r2, #1
 8006042:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2201      	movs	r2, #1
 800604a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800604e:	2300      	movs	r3, #0
}
 8006050:	4618      	mov	r0, r3
 8006052:	3708      	adds	r7, #8
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d109      	bne.n	800607c <HAL_TIM_PWM_Start+0x24>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800606e:	b2db      	uxtb	r3, r3
 8006070:	2b01      	cmp	r3, #1
 8006072:	bf14      	ite	ne
 8006074:	2301      	movne	r3, #1
 8006076:	2300      	moveq	r3, #0
 8006078:	b2db      	uxtb	r3, r3
 800607a:	e03c      	b.n	80060f6 <HAL_TIM_PWM_Start+0x9e>
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	2b04      	cmp	r3, #4
 8006080:	d109      	bne.n	8006096 <HAL_TIM_PWM_Start+0x3e>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006088:	b2db      	uxtb	r3, r3
 800608a:	2b01      	cmp	r3, #1
 800608c:	bf14      	ite	ne
 800608e:	2301      	movne	r3, #1
 8006090:	2300      	moveq	r3, #0
 8006092:	b2db      	uxtb	r3, r3
 8006094:	e02f      	b.n	80060f6 <HAL_TIM_PWM_Start+0x9e>
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	2b08      	cmp	r3, #8
 800609a:	d109      	bne.n	80060b0 <HAL_TIM_PWM_Start+0x58>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	bf14      	ite	ne
 80060a8:	2301      	movne	r3, #1
 80060aa:	2300      	moveq	r3, #0
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	e022      	b.n	80060f6 <HAL_TIM_PWM_Start+0x9e>
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	2b0c      	cmp	r3, #12
 80060b4:	d109      	bne.n	80060ca <HAL_TIM_PWM_Start+0x72>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	2b01      	cmp	r3, #1
 80060c0:	bf14      	ite	ne
 80060c2:	2301      	movne	r3, #1
 80060c4:	2300      	moveq	r3, #0
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	e015      	b.n	80060f6 <HAL_TIM_PWM_Start+0x9e>
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	2b10      	cmp	r3, #16
 80060ce:	d109      	bne.n	80060e4 <HAL_TIM_PWM_Start+0x8c>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	2b01      	cmp	r3, #1
 80060da:	bf14      	ite	ne
 80060dc:	2301      	movne	r3, #1
 80060de:	2300      	moveq	r3, #0
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	e008      	b.n	80060f6 <HAL_TIM_PWM_Start+0x9e>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	bf14      	ite	ne
 80060f0:	2301      	movne	r3, #1
 80060f2:	2300      	moveq	r3, #0
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d001      	beq.n	80060fe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	e088      	b.n	8006210 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d104      	bne.n	800610e <HAL_TIM_PWM_Start+0xb6>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2202      	movs	r2, #2
 8006108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800610c:	e023      	b.n	8006156 <HAL_TIM_PWM_Start+0xfe>
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	2b04      	cmp	r3, #4
 8006112:	d104      	bne.n	800611e <HAL_TIM_PWM_Start+0xc6>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2202      	movs	r2, #2
 8006118:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800611c:	e01b      	b.n	8006156 <HAL_TIM_PWM_Start+0xfe>
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	2b08      	cmp	r3, #8
 8006122:	d104      	bne.n	800612e <HAL_TIM_PWM_Start+0xd6>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2202      	movs	r2, #2
 8006128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800612c:	e013      	b.n	8006156 <HAL_TIM_PWM_Start+0xfe>
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	2b0c      	cmp	r3, #12
 8006132:	d104      	bne.n	800613e <HAL_TIM_PWM_Start+0xe6>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2202      	movs	r2, #2
 8006138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800613c:	e00b      	b.n	8006156 <HAL_TIM_PWM_Start+0xfe>
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	2b10      	cmp	r3, #16
 8006142:	d104      	bne.n	800614e <HAL_TIM_PWM_Start+0xf6>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2202      	movs	r2, #2
 8006148:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800614c:	e003      	b.n	8006156 <HAL_TIM_PWM_Start+0xfe>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2202      	movs	r2, #2
 8006152:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	2201      	movs	r2, #1
 800615c:	6839      	ldr	r1, [r7, #0]
 800615e:	4618      	mov	r0, r3
 8006160:	f000 fdcc 	bl	8006cfc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a2b      	ldr	r2, [pc, #172]	; (8006218 <HAL_TIM_PWM_Start+0x1c0>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d00e      	beq.n	800618c <HAL_TIM_PWM_Start+0x134>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a2a      	ldr	r2, [pc, #168]	; (800621c <HAL_TIM_PWM_Start+0x1c4>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d009      	beq.n	800618c <HAL_TIM_PWM_Start+0x134>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a28      	ldr	r2, [pc, #160]	; (8006220 <HAL_TIM_PWM_Start+0x1c8>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d004      	beq.n	800618c <HAL_TIM_PWM_Start+0x134>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a27      	ldr	r2, [pc, #156]	; (8006224 <HAL_TIM_PWM_Start+0x1cc>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d101      	bne.n	8006190 <HAL_TIM_PWM_Start+0x138>
 800618c:	2301      	movs	r3, #1
 800618e:	e000      	b.n	8006192 <HAL_TIM_PWM_Start+0x13a>
 8006190:	2300      	movs	r3, #0
 8006192:	2b00      	cmp	r3, #0
 8006194:	d007      	beq.n	80061a6 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80061a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a1b      	ldr	r2, [pc, #108]	; (8006218 <HAL_TIM_PWM_Start+0x1c0>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d00e      	beq.n	80061ce <HAL_TIM_PWM_Start+0x176>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061b8:	d009      	beq.n	80061ce <HAL_TIM_PWM_Start+0x176>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a1a      	ldr	r2, [pc, #104]	; (8006228 <HAL_TIM_PWM_Start+0x1d0>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d004      	beq.n	80061ce <HAL_TIM_PWM_Start+0x176>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a14      	ldr	r2, [pc, #80]	; (800621c <HAL_TIM_PWM_Start+0x1c4>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d115      	bne.n	80061fa <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	689a      	ldr	r2, [r3, #8]
 80061d4:	4b15      	ldr	r3, [pc, #84]	; (800622c <HAL_TIM_PWM_Start+0x1d4>)
 80061d6:	4013      	ands	r3, r2
 80061d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2b06      	cmp	r3, #6
 80061de:	d015      	beq.n	800620c <HAL_TIM_PWM_Start+0x1b4>
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061e6:	d011      	beq.n	800620c <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f042 0201 	orr.w	r2, r2, #1
 80061f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061f8:	e008      	b.n	800620c <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f042 0201 	orr.w	r2, r2, #1
 8006208:	601a      	str	r2, [r3, #0]
 800620a:	e000      	b.n	800620e <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800620c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800620e:	2300      	movs	r3, #0
}
 8006210:	4618      	mov	r0, r3
 8006212:	3710      	adds	r7, #16
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}
 8006218:	40012c00 	.word	0x40012c00
 800621c:	40014000 	.word	0x40014000
 8006220:	40014400 	.word	0x40014400
 8006224:	40014800 	.word	0x40014800
 8006228:	40000400 	.word	0x40000400
 800622c:	00010007 	.word	0x00010007

08006230 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b086      	sub	sp, #24
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d101      	bne.n	8006244 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	e097      	b.n	8006374 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800624a:	b2db      	uxtb	r3, r3
 800624c:	2b00      	cmp	r3, #0
 800624e:	d106      	bne.n	800625e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f7fb f88d 	bl	8001378 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2202      	movs	r2, #2
 8006262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	6812      	ldr	r2, [r2, #0]
 8006270:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8006274:	f023 0307 	bic.w	r3, r3, #7
 8006278:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	3304      	adds	r3, #4
 8006282:	4619      	mov	r1, r3
 8006284:	4610      	mov	r0, r2
 8006286:	f000 fa1b 	bl	80066c0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	699b      	ldr	r3, [r3, #24]
 8006298:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	6a1b      	ldr	r3, [r3, #32]
 80062a0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	697a      	ldr	r2, [r7, #20]
 80062a8:	4313      	orrs	r3, r2
 80062aa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062b2:	f023 0303 	bic.w	r3, r3, #3
 80062b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	689a      	ldr	r2, [r3, #8]
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	699b      	ldr	r3, [r3, #24]
 80062c0:	021b      	lsls	r3, r3, #8
 80062c2:	4313      	orrs	r3, r2
 80062c4:	693a      	ldr	r2, [r7, #16]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80062d0:	f023 030c 	bic.w	r3, r3, #12
 80062d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80062dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	68da      	ldr	r2, [r3, #12]
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	69db      	ldr	r3, [r3, #28]
 80062ea:	021b      	lsls	r3, r3, #8
 80062ec:	4313      	orrs	r3, r2
 80062ee:	693a      	ldr	r2, [r7, #16]
 80062f0:	4313      	orrs	r3, r2
 80062f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	691b      	ldr	r3, [r3, #16]
 80062f8:	011a      	lsls	r2, r3, #4
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	6a1b      	ldr	r3, [r3, #32]
 80062fe:	031b      	lsls	r3, r3, #12
 8006300:	4313      	orrs	r3, r2
 8006302:	693a      	ldr	r2, [r7, #16]
 8006304:	4313      	orrs	r3, r2
 8006306:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800630e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006316:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	685a      	ldr	r2, [r3, #4]
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	695b      	ldr	r3, [r3, #20]
 8006320:	011b      	lsls	r3, r3, #4
 8006322:	4313      	orrs	r3, r2
 8006324:	68fa      	ldr	r2, [r7, #12]
 8006326:	4313      	orrs	r3, r2
 8006328:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	697a      	ldr	r2, [r7, #20]
 8006330:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	693a      	ldr	r2, [r7, #16]
 8006338:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	68fa      	ldr	r2, [r7, #12]
 8006340:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2201      	movs	r2, #1
 8006346:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2201      	movs	r2, #1
 800634e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2201      	movs	r2, #1
 8006356:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2201      	movs	r2, #1
 800635e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2201      	movs	r2, #1
 8006366:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2201      	movs	r2, #1
 800636e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006372:	2300      	movs	r3, #0
}
 8006374:	4618      	mov	r0, r3
 8006376:	3718      	adds	r7, #24
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800638c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006394:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800639c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063a4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d110      	bne.n	80063ce <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80063ac:	7bfb      	ldrb	r3, [r7, #15]
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d102      	bne.n	80063b8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80063b2:	7b7b      	ldrb	r3, [r7, #13]
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d001      	beq.n	80063bc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	e069      	b.n	8006490 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2202      	movs	r2, #2
 80063c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2202      	movs	r2, #2
 80063c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063cc:	e031      	b.n	8006432 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	2b04      	cmp	r3, #4
 80063d2:	d110      	bne.n	80063f6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80063d4:	7bbb      	ldrb	r3, [r7, #14]
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d102      	bne.n	80063e0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80063da:	7b3b      	ldrb	r3, [r7, #12]
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d001      	beq.n	80063e4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	e055      	b.n	8006490 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2202      	movs	r2, #2
 80063e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2202      	movs	r2, #2
 80063f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063f4:	e01d      	b.n	8006432 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80063f6:	7bfb      	ldrb	r3, [r7, #15]
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d108      	bne.n	800640e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80063fc:	7bbb      	ldrb	r3, [r7, #14]
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d105      	bne.n	800640e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006402:	7b7b      	ldrb	r3, [r7, #13]
 8006404:	2b01      	cmp	r3, #1
 8006406:	d102      	bne.n	800640e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006408:	7b3b      	ldrb	r3, [r7, #12]
 800640a:	2b01      	cmp	r3, #1
 800640c:	d001      	beq.n	8006412 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	e03e      	b.n	8006490 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2202      	movs	r2, #2
 8006416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2202      	movs	r2, #2
 800641e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2202      	movs	r2, #2
 8006426:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2202      	movs	r2, #2
 800642e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d003      	beq.n	8006440 <HAL_TIM_Encoder_Start+0xc4>
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	2b04      	cmp	r3, #4
 800643c:	d008      	beq.n	8006450 <HAL_TIM_Encoder_Start+0xd4>
 800643e:	e00f      	b.n	8006460 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2201      	movs	r2, #1
 8006446:	2100      	movs	r1, #0
 8006448:	4618      	mov	r0, r3
 800644a:	f000 fc57 	bl	8006cfc <TIM_CCxChannelCmd>
      break;
 800644e:	e016      	b.n	800647e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	2201      	movs	r2, #1
 8006456:	2104      	movs	r1, #4
 8006458:	4618      	mov	r0, r3
 800645a:	f000 fc4f 	bl	8006cfc <TIM_CCxChannelCmd>
      break;
 800645e:	e00e      	b.n	800647e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2201      	movs	r2, #1
 8006466:	2100      	movs	r1, #0
 8006468:	4618      	mov	r0, r3
 800646a:	f000 fc47 	bl	8006cfc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	2201      	movs	r2, #1
 8006474:	2104      	movs	r1, #4
 8006476:	4618      	mov	r0, r3
 8006478:	f000 fc40 	bl	8006cfc <TIM_CCxChannelCmd>
      break;
 800647c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f042 0201 	orr.w	r2, r2, #1
 800648c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800648e:	2300      	movs	r3, #0
}
 8006490:	4618      	mov	r0, r3
 8006492:	3710      	adds	r7, #16
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}

08006498 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b086      	sub	sp, #24
 800649c:	af00      	add	r7, sp, #0
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	60b9      	str	r1, [r7, #8]
 80064a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064a4:	2300      	movs	r3, #0
 80064a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d101      	bne.n	80064b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80064b2:	2302      	movs	r3, #2
 80064b4:	e0ff      	b.n	80066b6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2201      	movs	r2, #1
 80064ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2b14      	cmp	r3, #20
 80064c2:	f200 80f0 	bhi.w	80066a6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80064c6:	a201      	add	r2, pc, #4	; (adr r2, 80064cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80064c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064cc:	08006521 	.word	0x08006521
 80064d0:	080066a7 	.word	0x080066a7
 80064d4:	080066a7 	.word	0x080066a7
 80064d8:	080066a7 	.word	0x080066a7
 80064dc:	08006561 	.word	0x08006561
 80064e0:	080066a7 	.word	0x080066a7
 80064e4:	080066a7 	.word	0x080066a7
 80064e8:	080066a7 	.word	0x080066a7
 80064ec:	080065a3 	.word	0x080065a3
 80064f0:	080066a7 	.word	0x080066a7
 80064f4:	080066a7 	.word	0x080066a7
 80064f8:	080066a7 	.word	0x080066a7
 80064fc:	080065e3 	.word	0x080065e3
 8006500:	080066a7 	.word	0x080066a7
 8006504:	080066a7 	.word	0x080066a7
 8006508:	080066a7 	.word	0x080066a7
 800650c:	08006625 	.word	0x08006625
 8006510:	080066a7 	.word	0x080066a7
 8006514:	080066a7 	.word	0x080066a7
 8006518:	080066a7 	.word	0x080066a7
 800651c:	08006665 	.word	0x08006665
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	68b9      	ldr	r1, [r7, #8]
 8006526:	4618      	mov	r0, r3
 8006528:	f000 f942 	bl	80067b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	699a      	ldr	r2, [r3, #24]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f042 0208 	orr.w	r2, r2, #8
 800653a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	699a      	ldr	r2, [r3, #24]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f022 0204 	bic.w	r2, r2, #4
 800654a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	6999      	ldr	r1, [r3, #24]
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	691a      	ldr	r2, [r3, #16]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	430a      	orrs	r2, r1
 800655c:	619a      	str	r2, [r3, #24]
      break;
 800655e:	e0a5      	b.n	80066ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	68b9      	ldr	r1, [r7, #8]
 8006566:	4618      	mov	r0, r3
 8006568:	f000 f9a8 	bl	80068bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	699a      	ldr	r2, [r3, #24]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800657a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	699a      	ldr	r2, [r3, #24]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800658a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	6999      	ldr	r1, [r3, #24]
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	021a      	lsls	r2, r3, #8
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	430a      	orrs	r2, r1
 800659e:	619a      	str	r2, [r3, #24]
      break;
 80065a0:	e084      	b.n	80066ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68b9      	ldr	r1, [r7, #8]
 80065a8:	4618      	mov	r0, r3
 80065aa:	f000 fa07 	bl	80069bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	69da      	ldr	r2, [r3, #28]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f042 0208 	orr.w	r2, r2, #8
 80065bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	69da      	ldr	r2, [r3, #28]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f022 0204 	bic.w	r2, r2, #4
 80065cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	69d9      	ldr	r1, [r3, #28]
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	691a      	ldr	r2, [r3, #16]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	430a      	orrs	r2, r1
 80065de:	61da      	str	r2, [r3, #28]
      break;
 80065e0:	e064      	b.n	80066ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	68b9      	ldr	r1, [r7, #8]
 80065e8:	4618      	mov	r0, r3
 80065ea:	f000 fa65 	bl	8006ab8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	69da      	ldr	r2, [r3, #28]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	69da      	ldr	r2, [r3, #28]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800660c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	69d9      	ldr	r1, [r3, #28]
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	691b      	ldr	r3, [r3, #16]
 8006618:	021a      	lsls	r2, r3, #8
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	430a      	orrs	r2, r1
 8006620:	61da      	str	r2, [r3, #28]
      break;
 8006622:	e043      	b.n	80066ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	68b9      	ldr	r1, [r7, #8]
 800662a:	4618      	mov	r0, r3
 800662c:	f000 faa8 	bl	8006b80 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f042 0208 	orr.w	r2, r2, #8
 800663e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f022 0204 	bic.w	r2, r2, #4
 800664e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	691a      	ldr	r2, [r3, #16]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	430a      	orrs	r2, r1
 8006660:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006662:	e023      	b.n	80066ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	68b9      	ldr	r1, [r7, #8]
 800666a:	4618      	mov	r0, r3
 800666c:	f000 fae6 	bl	8006c3c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800667e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800668e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	691b      	ldr	r3, [r3, #16]
 800669a:	021a      	lsls	r2, r3, #8
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	430a      	orrs	r2, r1
 80066a2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80066a4:	e002      	b.n	80066ac <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	75fb      	strb	r3, [r7, #23]
      break;
 80066aa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80066b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3718      	adds	r7, #24
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop

080066c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b085      	sub	sp, #20
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	4a32      	ldr	r2, [pc, #200]	; (800679c <TIM_Base_SetConfig+0xdc>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d007      	beq.n	80066e8 <TIM_Base_SetConfig+0x28>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066de:	d003      	beq.n	80066e8 <TIM_Base_SetConfig+0x28>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4a2f      	ldr	r2, [pc, #188]	; (80067a0 <TIM_Base_SetConfig+0xe0>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d108      	bne.n	80066fa <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	68fa      	ldr	r2, [r7, #12]
 80066f6:	4313      	orrs	r3, r2
 80066f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	4a27      	ldr	r2, [pc, #156]	; (800679c <TIM_Base_SetConfig+0xdc>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d013      	beq.n	800672a <TIM_Base_SetConfig+0x6a>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006708:	d00f      	beq.n	800672a <TIM_Base_SetConfig+0x6a>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	4a24      	ldr	r2, [pc, #144]	; (80067a0 <TIM_Base_SetConfig+0xe0>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d00b      	beq.n	800672a <TIM_Base_SetConfig+0x6a>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	4a23      	ldr	r2, [pc, #140]	; (80067a4 <TIM_Base_SetConfig+0xe4>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d007      	beq.n	800672a <TIM_Base_SetConfig+0x6a>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	4a22      	ldr	r2, [pc, #136]	; (80067a8 <TIM_Base_SetConfig+0xe8>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d003      	beq.n	800672a <TIM_Base_SetConfig+0x6a>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	4a21      	ldr	r2, [pc, #132]	; (80067ac <TIM_Base_SetConfig+0xec>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d108      	bne.n	800673c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006730:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	68fa      	ldr	r2, [r7, #12]
 8006738:	4313      	orrs	r3, r2
 800673a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	695b      	ldr	r3, [r3, #20]
 8006746:	4313      	orrs	r3, r2
 8006748:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	689a      	ldr	r2, [r3, #8]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	4a0e      	ldr	r2, [pc, #56]	; (800679c <TIM_Base_SetConfig+0xdc>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d00b      	beq.n	8006780 <TIM_Base_SetConfig+0xc0>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	4a0e      	ldr	r2, [pc, #56]	; (80067a4 <TIM_Base_SetConfig+0xe4>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d007      	beq.n	8006780 <TIM_Base_SetConfig+0xc0>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	4a0d      	ldr	r2, [pc, #52]	; (80067a8 <TIM_Base_SetConfig+0xe8>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d003      	beq.n	8006780 <TIM_Base_SetConfig+0xc0>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	4a0c      	ldr	r2, [pc, #48]	; (80067ac <TIM_Base_SetConfig+0xec>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d103      	bne.n	8006788 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	691a      	ldr	r2, [r3, #16]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	615a      	str	r2, [r3, #20]
}
 800678e:	bf00      	nop
 8006790:	3714      	adds	r7, #20
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop
 800679c:	40012c00 	.word	0x40012c00
 80067a0:	40000400 	.word	0x40000400
 80067a4:	40014000 	.word	0x40014000
 80067a8:	40014400 	.word	0x40014400
 80067ac:	40014800 	.word	0x40014800

080067b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b087      	sub	sp, #28
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6a1b      	ldr	r3, [r3, #32]
 80067be:	f023 0201 	bic.w	r2, r3, #1
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6a1b      	ldr	r3, [r3, #32]
 80067ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	699b      	ldr	r3, [r3, #24]
 80067d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f023 0303 	bic.w	r3, r3, #3
 80067ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	68fa      	ldr	r2, [r7, #12]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	f023 0302 	bic.w	r3, r3, #2
 80067fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	697a      	ldr	r2, [r7, #20]
 8006804:	4313      	orrs	r3, r2
 8006806:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	4a28      	ldr	r2, [pc, #160]	; (80068ac <TIM_OC1_SetConfig+0xfc>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d00b      	beq.n	8006828 <TIM_OC1_SetConfig+0x78>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	4a27      	ldr	r2, [pc, #156]	; (80068b0 <TIM_OC1_SetConfig+0x100>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d007      	beq.n	8006828 <TIM_OC1_SetConfig+0x78>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	4a26      	ldr	r2, [pc, #152]	; (80068b4 <TIM_OC1_SetConfig+0x104>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d003      	beq.n	8006828 <TIM_OC1_SetConfig+0x78>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	4a25      	ldr	r2, [pc, #148]	; (80068b8 <TIM_OC1_SetConfig+0x108>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d10c      	bne.n	8006842 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	f023 0308 	bic.w	r3, r3, #8
 800682e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	697a      	ldr	r2, [r7, #20]
 8006836:	4313      	orrs	r3, r2
 8006838:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	f023 0304 	bic.w	r3, r3, #4
 8006840:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4a19      	ldr	r2, [pc, #100]	; (80068ac <TIM_OC1_SetConfig+0xfc>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d00b      	beq.n	8006862 <TIM_OC1_SetConfig+0xb2>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4a18      	ldr	r2, [pc, #96]	; (80068b0 <TIM_OC1_SetConfig+0x100>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d007      	beq.n	8006862 <TIM_OC1_SetConfig+0xb2>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	4a17      	ldr	r2, [pc, #92]	; (80068b4 <TIM_OC1_SetConfig+0x104>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d003      	beq.n	8006862 <TIM_OC1_SetConfig+0xb2>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	4a16      	ldr	r2, [pc, #88]	; (80068b8 <TIM_OC1_SetConfig+0x108>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d111      	bne.n	8006886 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006868:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006870:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	695b      	ldr	r3, [r3, #20]
 8006876:	693a      	ldr	r2, [r7, #16]
 8006878:	4313      	orrs	r3, r2
 800687a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	699b      	ldr	r3, [r3, #24]
 8006880:	693a      	ldr	r2, [r7, #16]
 8006882:	4313      	orrs	r3, r2
 8006884:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	693a      	ldr	r2, [r7, #16]
 800688a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	68fa      	ldr	r2, [r7, #12]
 8006890:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	685a      	ldr	r2, [r3, #4]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	697a      	ldr	r2, [r7, #20]
 800689e:	621a      	str	r2, [r3, #32]
}
 80068a0:	bf00      	nop
 80068a2:	371c      	adds	r7, #28
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr
 80068ac:	40012c00 	.word	0x40012c00
 80068b0:	40014000 	.word	0x40014000
 80068b4:	40014400 	.word	0x40014400
 80068b8:	40014800 	.word	0x40014800

080068bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068bc:	b480      	push	{r7}
 80068be:	b087      	sub	sp, #28
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6a1b      	ldr	r3, [r3, #32]
 80068ca:	f023 0210 	bic.w	r2, r3, #16
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6a1b      	ldr	r3, [r3, #32]
 80068d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	699b      	ldr	r3, [r3, #24]
 80068e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80068ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	021b      	lsls	r3, r3, #8
 80068fe:	68fa      	ldr	r2, [r7, #12]
 8006900:	4313      	orrs	r3, r2
 8006902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	f023 0320 	bic.w	r3, r3, #32
 800690a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	011b      	lsls	r3, r3, #4
 8006912:	697a      	ldr	r2, [r7, #20]
 8006914:	4313      	orrs	r3, r2
 8006916:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4a24      	ldr	r2, [pc, #144]	; (80069ac <TIM_OC2_SetConfig+0xf0>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d10d      	bne.n	800693c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006926:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	68db      	ldr	r3, [r3, #12]
 800692c:	011b      	lsls	r3, r3, #4
 800692e:	697a      	ldr	r2, [r7, #20]
 8006930:	4313      	orrs	r3, r2
 8006932:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800693a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	4a1b      	ldr	r2, [pc, #108]	; (80069ac <TIM_OC2_SetConfig+0xf0>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d00b      	beq.n	800695c <TIM_OC2_SetConfig+0xa0>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	4a1a      	ldr	r2, [pc, #104]	; (80069b0 <TIM_OC2_SetConfig+0xf4>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d007      	beq.n	800695c <TIM_OC2_SetConfig+0xa0>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	4a19      	ldr	r2, [pc, #100]	; (80069b4 <TIM_OC2_SetConfig+0xf8>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d003      	beq.n	800695c <TIM_OC2_SetConfig+0xa0>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	4a18      	ldr	r2, [pc, #96]	; (80069b8 <TIM_OC2_SetConfig+0xfc>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d113      	bne.n	8006984 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006962:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800696a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	695b      	ldr	r3, [r3, #20]
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	693a      	ldr	r2, [r7, #16]
 8006974:	4313      	orrs	r3, r2
 8006976:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	699b      	ldr	r3, [r3, #24]
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	693a      	ldr	r2, [r7, #16]
 8006980:	4313      	orrs	r3, r2
 8006982:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	693a      	ldr	r2, [r7, #16]
 8006988:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	68fa      	ldr	r2, [r7, #12]
 800698e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	685a      	ldr	r2, [r3, #4]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	697a      	ldr	r2, [r7, #20]
 800699c:	621a      	str	r2, [r3, #32]
}
 800699e:	bf00      	nop
 80069a0:	371c      	adds	r7, #28
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr
 80069aa:	bf00      	nop
 80069ac:	40012c00 	.word	0x40012c00
 80069b0:	40014000 	.word	0x40014000
 80069b4:	40014400 	.word	0x40014400
 80069b8:	40014800 	.word	0x40014800

080069bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069bc:	b480      	push	{r7}
 80069be:	b087      	sub	sp, #28
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a1b      	ldr	r3, [r3, #32]
 80069ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6a1b      	ldr	r3, [r3, #32]
 80069d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	69db      	ldr	r3, [r3, #28]
 80069e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f023 0303 	bic.w	r3, r3, #3
 80069f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	68fa      	ldr	r2, [r7, #12]
 80069fe:	4313      	orrs	r3, r2
 8006a00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	021b      	lsls	r3, r3, #8
 8006a10:	697a      	ldr	r2, [r7, #20]
 8006a12:	4313      	orrs	r3, r2
 8006a14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4a23      	ldr	r2, [pc, #140]	; (8006aa8 <TIM_OC3_SetConfig+0xec>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d10d      	bne.n	8006a3a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	68db      	ldr	r3, [r3, #12]
 8006a2a:	021b      	lsls	r3, r3, #8
 8006a2c:	697a      	ldr	r2, [r7, #20]
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a38:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	4a1a      	ldr	r2, [pc, #104]	; (8006aa8 <TIM_OC3_SetConfig+0xec>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d00b      	beq.n	8006a5a <TIM_OC3_SetConfig+0x9e>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	4a19      	ldr	r2, [pc, #100]	; (8006aac <TIM_OC3_SetConfig+0xf0>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d007      	beq.n	8006a5a <TIM_OC3_SetConfig+0x9e>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	4a18      	ldr	r2, [pc, #96]	; (8006ab0 <TIM_OC3_SetConfig+0xf4>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d003      	beq.n	8006a5a <TIM_OC3_SetConfig+0x9e>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	4a17      	ldr	r2, [pc, #92]	; (8006ab4 <TIM_OC3_SetConfig+0xf8>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d113      	bne.n	8006a82 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	695b      	ldr	r3, [r3, #20]
 8006a6e:	011b      	lsls	r3, r3, #4
 8006a70:	693a      	ldr	r2, [r7, #16]
 8006a72:	4313      	orrs	r3, r2
 8006a74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	699b      	ldr	r3, [r3, #24]
 8006a7a:	011b      	lsls	r3, r3, #4
 8006a7c:	693a      	ldr	r2, [r7, #16]
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	693a      	ldr	r2, [r7, #16]
 8006a86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	68fa      	ldr	r2, [r7, #12]
 8006a8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	685a      	ldr	r2, [r3, #4]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	697a      	ldr	r2, [r7, #20]
 8006a9a:	621a      	str	r2, [r3, #32]
}
 8006a9c:	bf00      	nop
 8006a9e:	371c      	adds	r7, #28
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr
 8006aa8:	40012c00 	.word	0x40012c00
 8006aac:	40014000 	.word	0x40014000
 8006ab0:	40014400 	.word	0x40014400
 8006ab4:	40014800 	.word	0x40014800

08006ab8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b087      	sub	sp, #28
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6a1b      	ldr	r3, [r3, #32]
 8006ac6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6a1b      	ldr	r3, [r3, #32]
 8006ad2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	69db      	ldr	r3, [r3, #28]
 8006ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ae6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006aea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006af2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	021b      	lsls	r3, r3, #8
 8006afa:	68fa      	ldr	r2, [r7, #12]
 8006afc:	4313      	orrs	r3, r2
 8006afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	031b      	lsls	r3, r3, #12
 8006b0e:	693a      	ldr	r2, [r7, #16]
 8006b10:	4313      	orrs	r3, r2
 8006b12:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	4a16      	ldr	r2, [pc, #88]	; (8006b70 <TIM_OC4_SetConfig+0xb8>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d00b      	beq.n	8006b34 <TIM_OC4_SetConfig+0x7c>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4a15      	ldr	r2, [pc, #84]	; (8006b74 <TIM_OC4_SetConfig+0xbc>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d007      	beq.n	8006b34 <TIM_OC4_SetConfig+0x7c>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	4a14      	ldr	r2, [pc, #80]	; (8006b78 <TIM_OC4_SetConfig+0xc0>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d003      	beq.n	8006b34 <TIM_OC4_SetConfig+0x7c>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	4a13      	ldr	r2, [pc, #76]	; (8006b7c <TIM_OC4_SetConfig+0xc4>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d109      	bne.n	8006b48 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	695b      	ldr	r3, [r3, #20]
 8006b40:	019b      	lsls	r3, r3, #6
 8006b42:	697a      	ldr	r2, [r7, #20]
 8006b44:	4313      	orrs	r3, r2
 8006b46:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	697a      	ldr	r2, [r7, #20]
 8006b4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	68fa      	ldr	r2, [r7, #12]
 8006b52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	685a      	ldr	r2, [r3, #4]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	693a      	ldr	r2, [r7, #16]
 8006b60:	621a      	str	r2, [r3, #32]
}
 8006b62:	bf00      	nop
 8006b64:	371c      	adds	r7, #28
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr
 8006b6e:	bf00      	nop
 8006b70:	40012c00 	.word	0x40012c00
 8006b74:	40014000 	.word	0x40014000
 8006b78:	40014400 	.word	0x40014400
 8006b7c:	40014800 	.word	0x40014800

08006b80 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b087      	sub	sp, #28
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6a1b      	ldr	r3, [r3, #32]
 8006b8e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6a1b      	ldr	r3, [r3, #32]
 8006b9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006bc4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	041b      	lsls	r3, r3, #16
 8006bcc:	693a      	ldr	r2, [r7, #16]
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	4a15      	ldr	r2, [pc, #84]	; (8006c2c <TIM_OC5_SetConfig+0xac>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d00b      	beq.n	8006bf2 <TIM_OC5_SetConfig+0x72>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	4a14      	ldr	r2, [pc, #80]	; (8006c30 <TIM_OC5_SetConfig+0xb0>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d007      	beq.n	8006bf2 <TIM_OC5_SetConfig+0x72>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	4a13      	ldr	r2, [pc, #76]	; (8006c34 <TIM_OC5_SetConfig+0xb4>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d003      	beq.n	8006bf2 <TIM_OC5_SetConfig+0x72>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	4a12      	ldr	r2, [pc, #72]	; (8006c38 <TIM_OC5_SetConfig+0xb8>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d109      	bne.n	8006c06 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bf8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	695b      	ldr	r3, [r3, #20]
 8006bfe:	021b      	lsls	r3, r3, #8
 8006c00:	697a      	ldr	r2, [r7, #20]
 8006c02:	4313      	orrs	r3, r2
 8006c04:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	697a      	ldr	r2, [r7, #20]
 8006c0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	68fa      	ldr	r2, [r7, #12]
 8006c10:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	685a      	ldr	r2, [r3, #4]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	693a      	ldr	r2, [r7, #16]
 8006c1e:	621a      	str	r2, [r3, #32]
}
 8006c20:	bf00      	nop
 8006c22:	371c      	adds	r7, #28
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr
 8006c2c:	40012c00 	.word	0x40012c00
 8006c30:	40014000 	.word	0x40014000
 8006c34:	40014400 	.word	0x40014400
 8006c38:	40014800 	.word	0x40014800

08006c3c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b087      	sub	sp, #28
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6a1b      	ldr	r3, [r3, #32]
 8006c4a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6a1b      	ldr	r3, [r3, #32]
 8006c56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	021b      	lsls	r3, r3, #8
 8006c76:	68fa      	ldr	r2, [r7, #12]
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006c82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	051b      	lsls	r3, r3, #20
 8006c8a:	693a      	ldr	r2, [r7, #16]
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4a16      	ldr	r2, [pc, #88]	; (8006cec <TIM_OC6_SetConfig+0xb0>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d00b      	beq.n	8006cb0 <TIM_OC6_SetConfig+0x74>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4a15      	ldr	r2, [pc, #84]	; (8006cf0 <TIM_OC6_SetConfig+0xb4>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d007      	beq.n	8006cb0 <TIM_OC6_SetConfig+0x74>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	4a14      	ldr	r2, [pc, #80]	; (8006cf4 <TIM_OC6_SetConfig+0xb8>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d003      	beq.n	8006cb0 <TIM_OC6_SetConfig+0x74>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	4a13      	ldr	r2, [pc, #76]	; (8006cf8 <TIM_OC6_SetConfig+0xbc>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d109      	bne.n	8006cc4 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006cb6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	695b      	ldr	r3, [r3, #20]
 8006cbc:	029b      	lsls	r3, r3, #10
 8006cbe:	697a      	ldr	r2, [r7, #20]
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	697a      	ldr	r2, [r7, #20]
 8006cc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	68fa      	ldr	r2, [r7, #12]
 8006cce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	685a      	ldr	r2, [r3, #4]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	693a      	ldr	r2, [r7, #16]
 8006cdc:	621a      	str	r2, [r3, #32]
}
 8006cde:	bf00      	nop
 8006ce0:	371c      	adds	r7, #28
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr
 8006cea:	bf00      	nop
 8006cec:	40012c00 	.word	0x40012c00
 8006cf0:	40014000 	.word	0x40014000
 8006cf4:	40014400 	.word	0x40014400
 8006cf8:	40014800 	.word	0x40014800

08006cfc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b087      	sub	sp, #28
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	60f8      	str	r0, [r7, #12]
 8006d04:	60b9      	str	r1, [r7, #8]
 8006d06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	f003 031f 	and.w	r3, r3, #31
 8006d0e:	2201      	movs	r2, #1
 8006d10:	fa02 f303 	lsl.w	r3, r2, r3
 8006d14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	6a1a      	ldr	r2, [r3, #32]
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	43db      	mvns	r3, r3
 8006d1e:	401a      	ands	r2, r3
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	6a1a      	ldr	r2, [r3, #32]
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	f003 031f 	and.w	r3, r3, #31
 8006d2e:	6879      	ldr	r1, [r7, #4]
 8006d30:	fa01 f303 	lsl.w	r3, r1, r3
 8006d34:	431a      	orrs	r2, r3
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	621a      	str	r2, [r3, #32]
}
 8006d3a:	bf00      	nop
 8006d3c:	371c      	adds	r7, #28
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr
	...

08006d48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b085      	sub	sp, #20
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d101      	bne.n	8006d60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d5c:	2302      	movs	r3, #2
 8006d5e:	e054      	b.n	8006e0a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2201      	movs	r2, #1
 8006d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2202      	movs	r2, #2
 8006d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a24      	ldr	r2, [pc, #144]	; (8006e18 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d108      	bne.n	8006d9c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006d90:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	68fa      	ldr	r2, [r7, #12]
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006da2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	68fa      	ldr	r2, [r7, #12]
 8006daa:	4313      	orrs	r3, r2
 8006dac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	68fa      	ldr	r2, [r7, #12]
 8006db4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a17      	ldr	r2, [pc, #92]	; (8006e18 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d00e      	beq.n	8006dde <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dc8:	d009      	beq.n	8006dde <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a13      	ldr	r2, [pc, #76]	; (8006e1c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d004      	beq.n	8006dde <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a11      	ldr	r2, [pc, #68]	; (8006e20 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d10c      	bne.n	8006df8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006de4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	68ba      	ldr	r2, [r7, #8]
 8006dec:	4313      	orrs	r3, r2
 8006dee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	68ba      	ldr	r2, [r7, #8]
 8006df6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2200      	movs	r2, #0
 8006e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3714      	adds	r7, #20
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr
 8006e16:	bf00      	nop
 8006e18:	40012c00 	.word	0x40012c00
 8006e1c:	40000400 	.word	0x40000400
 8006e20:	40014000 	.word	0x40014000

08006e24 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b085      	sub	sp, #20
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d101      	bne.n	8006e40 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006e3c:	2302      	movs	r3, #2
 8006e3e:	e060      	b.n	8006f02 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2201      	movs	r2, #1
 8006e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	68db      	ldr	r3, [r3, #12]
 8006e52:	4313      	orrs	r3, r2
 8006e54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	4313      	orrs	r3, r2
 8006e62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	691b      	ldr	r3, [r3, #16]
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	695b      	ldr	r3, [r3, #20]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	699b      	ldr	r3, [r3, #24]
 8006eb4:	041b      	lsls	r3, r3, #16
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a14      	ldr	r2, [pc, #80]	; (8006f10 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d115      	bne.n	8006ef0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ece:	051b      	lsls	r3, r3, #20
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	69db      	ldr	r3, [r3, #28]
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	6a1b      	ldr	r3, [r3, #32]
 8006eec:	4313      	orrs	r3, r2
 8006eee:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	68fa      	ldr	r2, [r7, #12]
 8006ef6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f00:	2300      	movs	r3, #0
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3714      	adds	r7, #20
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr
 8006f0e:	bf00      	nop
 8006f10:	40012c00 	.word	0x40012c00

08006f14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b082      	sub	sp, #8
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d101      	bne.n	8006f26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	e040      	b.n	8006fa8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d106      	bne.n	8006f3c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2200      	movs	r2, #0
 8006f32:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f7fa fb42 	bl	80015c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2224      	movs	r2, #36	; 0x24
 8006f40:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	681a      	ldr	r2, [r3, #0]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f022 0201 	bic.w	r2, r2, #1
 8006f50:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 f82c 	bl	8006fb0 <UART_SetConfig>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d101      	bne.n	8006f62 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e022      	b.n	8006fa8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d002      	beq.n	8006f70 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 f956 	bl	800721c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	685a      	ldr	r2, [r3, #4]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	689a      	ldr	r2, [r3, #8]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f042 0201 	orr.w	r2, r2, #1
 8006f9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f000 f9dd 	bl	8007360 <UART_CheckIdleState>
 8006fa6:	4603      	mov	r3, r0
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3708      	adds	r7, #8
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b088      	sub	sp, #32
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	689a      	ldr	r2, [r3, #8]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	691b      	ldr	r3, [r3, #16]
 8006fc4:	431a      	orrs	r2, r3
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	695b      	ldr	r3, [r3, #20]
 8006fca:	431a      	orrs	r2, r3
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	69db      	ldr	r3, [r3, #28]
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	4b8a      	ldr	r3, [pc, #552]	; (8007204 <UART_SetConfig+0x254>)
 8006fdc:	4013      	ands	r3, r2
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	6812      	ldr	r2, [r2, #0]
 8006fe2:	6979      	ldr	r1, [r7, #20]
 8006fe4:	430b      	orrs	r3, r1
 8006fe6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	68da      	ldr	r2, [r3, #12]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	430a      	orrs	r2, r1
 8006ffc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	699b      	ldr	r3, [r3, #24]
 8007002:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6a1b      	ldr	r3, [r3, #32]
 8007008:	697a      	ldr	r2, [r7, #20]
 800700a:	4313      	orrs	r3, r2
 800700c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	689b      	ldr	r3, [r3, #8]
 8007014:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	697a      	ldr	r2, [r7, #20]
 800701e:	430a      	orrs	r2, r1
 8007020:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a78      	ldr	r2, [pc, #480]	; (8007208 <UART_SetConfig+0x258>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d120      	bne.n	800706e <UART_SetConfig+0xbe>
 800702c:	4b77      	ldr	r3, [pc, #476]	; (800720c <UART_SetConfig+0x25c>)
 800702e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007030:	f003 0303 	and.w	r3, r3, #3
 8007034:	2b03      	cmp	r3, #3
 8007036:	d817      	bhi.n	8007068 <UART_SetConfig+0xb8>
 8007038:	a201      	add	r2, pc, #4	; (adr r2, 8007040 <UART_SetConfig+0x90>)
 800703a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800703e:	bf00      	nop
 8007040:	08007051 	.word	0x08007051
 8007044:	0800705d 	.word	0x0800705d
 8007048:	08007063 	.word	0x08007063
 800704c:	08007057 	.word	0x08007057
 8007050:	2300      	movs	r3, #0
 8007052:	77fb      	strb	r3, [r7, #31]
 8007054:	e01d      	b.n	8007092 <UART_SetConfig+0xe2>
 8007056:	2302      	movs	r3, #2
 8007058:	77fb      	strb	r3, [r7, #31]
 800705a:	e01a      	b.n	8007092 <UART_SetConfig+0xe2>
 800705c:	2304      	movs	r3, #4
 800705e:	77fb      	strb	r3, [r7, #31]
 8007060:	e017      	b.n	8007092 <UART_SetConfig+0xe2>
 8007062:	2308      	movs	r3, #8
 8007064:	77fb      	strb	r3, [r7, #31]
 8007066:	e014      	b.n	8007092 <UART_SetConfig+0xe2>
 8007068:	2310      	movs	r3, #16
 800706a:	77fb      	strb	r3, [r7, #31]
 800706c:	e011      	b.n	8007092 <UART_SetConfig+0xe2>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a67      	ldr	r2, [pc, #412]	; (8007210 <UART_SetConfig+0x260>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d102      	bne.n	800707e <UART_SetConfig+0xce>
 8007078:	2300      	movs	r3, #0
 800707a:	77fb      	strb	r3, [r7, #31]
 800707c:	e009      	b.n	8007092 <UART_SetConfig+0xe2>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a64      	ldr	r2, [pc, #400]	; (8007214 <UART_SetConfig+0x264>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d102      	bne.n	800708e <UART_SetConfig+0xde>
 8007088:	2300      	movs	r3, #0
 800708a:	77fb      	strb	r3, [r7, #31]
 800708c:	e001      	b.n	8007092 <UART_SetConfig+0xe2>
 800708e:	2310      	movs	r3, #16
 8007090:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	69db      	ldr	r3, [r3, #28]
 8007096:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800709a:	d15b      	bne.n	8007154 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 800709c:	7ffb      	ldrb	r3, [r7, #31]
 800709e:	2b08      	cmp	r3, #8
 80070a0:	d827      	bhi.n	80070f2 <UART_SetConfig+0x142>
 80070a2:	a201      	add	r2, pc, #4	; (adr r2, 80070a8 <UART_SetConfig+0xf8>)
 80070a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070a8:	080070cd 	.word	0x080070cd
 80070ac:	080070d5 	.word	0x080070d5
 80070b0:	080070dd 	.word	0x080070dd
 80070b4:	080070f3 	.word	0x080070f3
 80070b8:	080070e3 	.word	0x080070e3
 80070bc:	080070f3 	.word	0x080070f3
 80070c0:	080070f3 	.word	0x080070f3
 80070c4:	080070f3 	.word	0x080070f3
 80070c8:	080070eb 	.word	0x080070eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070cc:	f7fe fdac 	bl	8005c28 <HAL_RCC_GetPCLK1Freq>
 80070d0:	61b8      	str	r0, [r7, #24]
        break;
 80070d2:	e013      	b.n	80070fc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070d4:	f7fe fdca 	bl	8005c6c <HAL_RCC_GetPCLK2Freq>
 80070d8:	61b8      	str	r0, [r7, #24]
        break;
 80070da:	e00f      	b.n	80070fc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070dc:	4b4e      	ldr	r3, [pc, #312]	; (8007218 <UART_SetConfig+0x268>)
 80070de:	61bb      	str	r3, [r7, #24]
        break;
 80070e0:	e00c      	b.n	80070fc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070e2:	f7fe fd2b 	bl	8005b3c <HAL_RCC_GetSysClockFreq>
 80070e6:	61b8      	str	r0, [r7, #24]
        break;
 80070e8:	e008      	b.n	80070fc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070ee:	61bb      	str	r3, [r7, #24]
        break;
 80070f0:	e004      	b.n	80070fc <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80070f2:	2300      	movs	r3, #0
 80070f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
 80070f8:	77bb      	strb	r3, [r7, #30]
        break;
 80070fa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80070fc:	69bb      	ldr	r3, [r7, #24]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d074      	beq.n	80071ec <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007102:	69bb      	ldr	r3, [r7, #24]
 8007104:	005a      	lsls	r2, r3, #1
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	085b      	lsrs	r3, r3, #1
 800710c:	441a      	add	r2, r3
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	fbb2 f3f3 	udiv	r3, r2, r3
 8007116:	b29b      	uxth	r3, r3
 8007118:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	2b0f      	cmp	r3, #15
 800711e:	d916      	bls.n	800714e <UART_SetConfig+0x19e>
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007126:	d212      	bcs.n	800714e <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	b29b      	uxth	r3, r3
 800712c:	f023 030f 	bic.w	r3, r3, #15
 8007130:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	085b      	lsrs	r3, r3, #1
 8007136:	b29b      	uxth	r3, r3
 8007138:	f003 0307 	and.w	r3, r3, #7
 800713c:	b29a      	uxth	r2, r3
 800713e:	89fb      	ldrh	r3, [r7, #14]
 8007140:	4313      	orrs	r3, r2
 8007142:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	89fa      	ldrh	r2, [r7, #14]
 800714a:	60da      	str	r2, [r3, #12]
 800714c:	e04e      	b.n	80071ec <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800714e:	2301      	movs	r3, #1
 8007150:	77bb      	strb	r3, [r7, #30]
 8007152:	e04b      	b.n	80071ec <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007154:	7ffb      	ldrb	r3, [r7, #31]
 8007156:	2b08      	cmp	r3, #8
 8007158:	d827      	bhi.n	80071aa <UART_SetConfig+0x1fa>
 800715a:	a201      	add	r2, pc, #4	; (adr r2, 8007160 <UART_SetConfig+0x1b0>)
 800715c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007160:	08007185 	.word	0x08007185
 8007164:	0800718d 	.word	0x0800718d
 8007168:	08007195 	.word	0x08007195
 800716c:	080071ab 	.word	0x080071ab
 8007170:	0800719b 	.word	0x0800719b
 8007174:	080071ab 	.word	0x080071ab
 8007178:	080071ab 	.word	0x080071ab
 800717c:	080071ab 	.word	0x080071ab
 8007180:	080071a3 	.word	0x080071a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007184:	f7fe fd50 	bl	8005c28 <HAL_RCC_GetPCLK1Freq>
 8007188:	61b8      	str	r0, [r7, #24]
        break;
 800718a:	e013      	b.n	80071b4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800718c:	f7fe fd6e 	bl	8005c6c <HAL_RCC_GetPCLK2Freq>
 8007190:	61b8      	str	r0, [r7, #24]
        break;
 8007192:	e00f      	b.n	80071b4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007194:	4b20      	ldr	r3, [pc, #128]	; (8007218 <UART_SetConfig+0x268>)
 8007196:	61bb      	str	r3, [r7, #24]
        break;
 8007198:	e00c      	b.n	80071b4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800719a:	f7fe fccf 	bl	8005b3c <HAL_RCC_GetSysClockFreq>
 800719e:	61b8      	str	r0, [r7, #24]
        break;
 80071a0:	e008      	b.n	80071b4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071a6:	61bb      	str	r3, [r7, #24]
        break;
 80071a8:	e004      	b.n	80071b4 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80071aa:	2300      	movs	r3, #0
 80071ac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80071ae:	2301      	movs	r3, #1
 80071b0:	77bb      	strb	r3, [r7, #30]
        break;
 80071b2:	bf00      	nop
    }

    if (pclk != 0U)
 80071b4:	69bb      	ldr	r3, [r7, #24]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d018      	beq.n	80071ec <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	085a      	lsrs	r2, r3, #1
 80071c0:	69bb      	ldr	r3, [r7, #24]
 80071c2:	441a      	add	r2, r3
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	2b0f      	cmp	r3, #15
 80071d4:	d908      	bls.n	80071e8 <UART_SetConfig+0x238>
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071dc:	d204      	bcs.n	80071e8 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	693a      	ldr	r2, [r7, #16]
 80071e4:	60da      	str	r2, [r3, #12]
 80071e6:	e001      	b.n	80071ec <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80071e8:	2301      	movs	r3, #1
 80071ea:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2200      	movs	r2, #0
 80071f0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80071f8:	7fbb      	ldrb	r3, [r7, #30]
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3720      	adds	r7, #32
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
 8007202:	bf00      	nop
 8007204:	efff69f3 	.word	0xefff69f3
 8007208:	40013800 	.word	0x40013800
 800720c:	40021000 	.word	0x40021000
 8007210:	40004400 	.word	0x40004400
 8007214:	40004800 	.word	0x40004800
 8007218:	007a1200 	.word	0x007a1200

0800721c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800721c:	b480      	push	{r7}
 800721e:	b083      	sub	sp, #12
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007228:	f003 0301 	and.w	r3, r3, #1
 800722c:	2b00      	cmp	r3, #0
 800722e:	d00a      	beq.n	8007246 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	430a      	orrs	r2, r1
 8007244:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800724a:	f003 0302 	and.w	r3, r3, #2
 800724e:	2b00      	cmp	r3, #0
 8007250:	d00a      	beq.n	8007268 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	430a      	orrs	r2, r1
 8007266:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800726c:	f003 0304 	and.w	r3, r3, #4
 8007270:	2b00      	cmp	r3, #0
 8007272:	d00a      	beq.n	800728a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	430a      	orrs	r2, r1
 8007288:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728e:	f003 0308 	and.w	r3, r3, #8
 8007292:	2b00      	cmp	r3, #0
 8007294:	d00a      	beq.n	80072ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	430a      	orrs	r2, r1
 80072aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b0:	f003 0310 	and.w	r3, r3, #16
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d00a      	beq.n	80072ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	430a      	orrs	r2, r1
 80072cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d2:	f003 0320 	and.w	r3, r3, #32
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d00a      	beq.n	80072f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	430a      	orrs	r2, r1
 80072ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d01a      	beq.n	8007332 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	430a      	orrs	r2, r1
 8007310:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007316:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800731a:	d10a      	bne.n	8007332 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	430a      	orrs	r2, r1
 8007330:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800733a:	2b00      	cmp	r3, #0
 800733c:	d00a      	beq.n	8007354 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	430a      	orrs	r2, r1
 8007352:	605a      	str	r2, [r3, #4]
  }
}
 8007354:	bf00      	nop
 8007356:	370c      	adds	r7, #12
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr

08007360 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b086      	sub	sp, #24
 8007364:	af02      	add	r7, sp, #8
 8007366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2200      	movs	r2, #0
 800736c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007370:	f7fa f9ee 	bl	8001750 <HAL_GetTick>
 8007374:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f003 0308 	and.w	r3, r3, #8
 8007380:	2b08      	cmp	r3, #8
 8007382:	d10e      	bne.n	80073a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007384:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007388:	9300      	str	r3, [sp, #0]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2200      	movs	r2, #0
 800738e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f000 f82d 	bl	80073f2 <UART_WaitOnFlagUntilTimeout>
 8007398:	4603      	mov	r3, r0
 800739a:	2b00      	cmp	r3, #0
 800739c:	d001      	beq.n	80073a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800739e:	2303      	movs	r3, #3
 80073a0:	e023      	b.n	80073ea <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f003 0304 	and.w	r3, r3, #4
 80073ac:	2b04      	cmp	r3, #4
 80073ae:	d10e      	bne.n	80073ce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80073b4:	9300      	str	r3, [sp, #0]
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2200      	movs	r2, #0
 80073ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 f817 	bl	80073f2 <UART_WaitOnFlagUntilTimeout>
 80073c4:	4603      	mov	r3, r0
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d001      	beq.n	80073ce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073ca:	2303      	movs	r3, #3
 80073cc:	e00d      	b.n	80073ea <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2220      	movs	r2, #32
 80073d2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2220      	movs	r2, #32
 80073d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2200      	movs	r2, #0
 80073de:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2200      	movs	r2, #0
 80073e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80073e8:	2300      	movs	r3, #0
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3710      	adds	r7, #16
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}

080073f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80073f2:	b580      	push	{r7, lr}
 80073f4:	b09c      	sub	sp, #112	; 0x70
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	60f8      	str	r0, [r7, #12]
 80073fa:	60b9      	str	r1, [r7, #8]
 80073fc:	603b      	str	r3, [r7, #0]
 80073fe:	4613      	mov	r3, r2
 8007400:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007402:	e0a5      	b.n	8007550 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007404:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800740a:	f000 80a1 	beq.w	8007550 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800740e:	f7fa f99f 	bl	8001750 <HAL_GetTick>
 8007412:	4602      	mov	r2, r0
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	1ad3      	subs	r3, r2, r3
 8007418:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800741a:	429a      	cmp	r2, r3
 800741c:	d302      	bcc.n	8007424 <UART_WaitOnFlagUntilTimeout+0x32>
 800741e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007420:	2b00      	cmp	r3, #0
 8007422:	d13e      	bne.n	80074a2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800742a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800742c:	e853 3f00 	ldrex	r3, [r3]
 8007430:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007434:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007438:	667b      	str	r3, [r7, #100]	; 0x64
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	461a      	mov	r2, r3
 8007440:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007442:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007444:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007446:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007448:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800744a:	e841 2300 	strex	r3, r2, [r1]
 800744e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007450:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007452:	2b00      	cmp	r3, #0
 8007454:	d1e6      	bne.n	8007424 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	3308      	adds	r3, #8
 800745c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800745e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007460:	e853 3f00 	ldrex	r3, [r3]
 8007464:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007468:	f023 0301 	bic.w	r3, r3, #1
 800746c:	663b      	str	r3, [r7, #96]	; 0x60
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	3308      	adds	r3, #8
 8007474:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007476:	64ba      	str	r2, [r7, #72]	; 0x48
 8007478:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800747c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800747e:	e841 2300 	strex	r3, r2, [r1]
 8007482:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007484:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007486:	2b00      	cmp	r3, #0
 8007488:	d1e5      	bne.n	8007456 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2220      	movs	r2, #32
 800748e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2220      	movs	r2, #32
 8007494:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2200      	movs	r2, #0
 800749a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800749e:	2303      	movs	r3, #3
 80074a0:	e067      	b.n	8007572 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f003 0304 	and.w	r3, r3, #4
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d04f      	beq.n	8007550 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	69db      	ldr	r3, [r3, #28]
 80074b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074be:	d147      	bne.n	8007550 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80074c8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d2:	e853 3f00 	ldrex	r3, [r3]
 80074d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80074d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074da:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80074de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	461a      	mov	r2, r3
 80074e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074e8:	637b      	str	r3, [r7, #52]	; 0x34
 80074ea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80074ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074f0:	e841 2300 	strex	r3, r2, [r1]
 80074f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80074f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d1e6      	bne.n	80074ca <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	3308      	adds	r3, #8
 8007502:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	e853 3f00 	ldrex	r3, [r3]
 800750a:	613b      	str	r3, [r7, #16]
   return(result);
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	f023 0301 	bic.w	r3, r3, #1
 8007512:	66bb      	str	r3, [r7, #104]	; 0x68
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	3308      	adds	r3, #8
 800751a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800751c:	623a      	str	r2, [r7, #32]
 800751e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007520:	69f9      	ldr	r1, [r7, #28]
 8007522:	6a3a      	ldr	r2, [r7, #32]
 8007524:	e841 2300 	strex	r3, r2, [r1]
 8007528:	61bb      	str	r3, [r7, #24]
   return(result);
 800752a:	69bb      	ldr	r3, [r7, #24]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d1e5      	bne.n	80074fc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2220      	movs	r2, #32
 8007534:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2220      	movs	r2, #32
 800753a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2220      	movs	r2, #32
 8007540:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2200      	movs	r2, #0
 8007548:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800754c:	2303      	movs	r3, #3
 800754e:	e010      	b.n	8007572 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	69da      	ldr	r2, [r3, #28]
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	4013      	ands	r3, r2
 800755a:	68ba      	ldr	r2, [r7, #8]
 800755c:	429a      	cmp	r2, r3
 800755e:	bf0c      	ite	eq
 8007560:	2301      	moveq	r3, #1
 8007562:	2300      	movne	r3, #0
 8007564:	b2db      	uxtb	r3, r3
 8007566:	461a      	mov	r2, r3
 8007568:	79fb      	ldrb	r3, [r7, #7]
 800756a:	429a      	cmp	r2, r3
 800756c:	f43f af4a 	beq.w	8007404 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007570:	2300      	movs	r3, #0
}
 8007572:	4618      	mov	r0, r3
 8007574:	3770      	adds	r7, #112	; 0x70
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
	...

0800757c <__errno>:
 800757c:	4b01      	ldr	r3, [pc, #4]	; (8007584 <__errno+0x8>)
 800757e:	6818      	ldr	r0, [r3, #0]
 8007580:	4770      	bx	lr
 8007582:	bf00      	nop
 8007584:	2000000c 	.word	0x2000000c

08007588 <__libc_init_array>:
 8007588:	b570      	push	{r4, r5, r6, lr}
 800758a:	4d0d      	ldr	r5, [pc, #52]	; (80075c0 <__libc_init_array+0x38>)
 800758c:	4c0d      	ldr	r4, [pc, #52]	; (80075c4 <__libc_init_array+0x3c>)
 800758e:	1b64      	subs	r4, r4, r5
 8007590:	10a4      	asrs	r4, r4, #2
 8007592:	2600      	movs	r6, #0
 8007594:	42a6      	cmp	r6, r4
 8007596:	d109      	bne.n	80075ac <__libc_init_array+0x24>
 8007598:	4d0b      	ldr	r5, [pc, #44]	; (80075c8 <__libc_init_array+0x40>)
 800759a:	4c0c      	ldr	r4, [pc, #48]	; (80075cc <__libc_init_array+0x44>)
 800759c:	f000 f8a0 	bl	80076e0 <_init>
 80075a0:	1b64      	subs	r4, r4, r5
 80075a2:	10a4      	asrs	r4, r4, #2
 80075a4:	2600      	movs	r6, #0
 80075a6:	42a6      	cmp	r6, r4
 80075a8:	d105      	bne.n	80075b6 <__libc_init_array+0x2e>
 80075aa:	bd70      	pop	{r4, r5, r6, pc}
 80075ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80075b0:	4798      	blx	r3
 80075b2:	3601      	adds	r6, #1
 80075b4:	e7ee      	b.n	8007594 <__libc_init_array+0xc>
 80075b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80075ba:	4798      	blx	r3
 80075bc:	3601      	adds	r6, #1
 80075be:	e7f2      	b.n	80075a6 <__libc_init_array+0x1e>
 80075c0:	08007740 	.word	0x08007740
 80075c4:	08007740 	.word	0x08007740
 80075c8:	08007740 	.word	0x08007740
 80075cc:	08007744 	.word	0x08007744

080075d0 <malloc>:
 80075d0:	4b02      	ldr	r3, [pc, #8]	; (80075dc <malloc+0xc>)
 80075d2:	4601      	mov	r1, r0
 80075d4:	6818      	ldr	r0, [r3, #0]
 80075d6:	f000 b80b 	b.w	80075f0 <_malloc_r>
 80075da:	bf00      	nop
 80075dc:	2000000c 	.word	0x2000000c

080075e0 <memset>:
 80075e0:	4402      	add	r2, r0
 80075e2:	4603      	mov	r3, r0
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d100      	bne.n	80075ea <memset+0xa>
 80075e8:	4770      	bx	lr
 80075ea:	f803 1b01 	strb.w	r1, [r3], #1
 80075ee:	e7f9      	b.n	80075e4 <memset+0x4>

080075f0 <_malloc_r>:
 80075f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075f2:	1ccd      	adds	r5, r1, #3
 80075f4:	f025 0503 	bic.w	r5, r5, #3
 80075f8:	3508      	adds	r5, #8
 80075fa:	2d0c      	cmp	r5, #12
 80075fc:	bf38      	it	cc
 80075fe:	250c      	movcc	r5, #12
 8007600:	2d00      	cmp	r5, #0
 8007602:	4606      	mov	r6, r0
 8007604:	db01      	blt.n	800760a <_malloc_r+0x1a>
 8007606:	42a9      	cmp	r1, r5
 8007608:	d903      	bls.n	8007612 <_malloc_r+0x22>
 800760a:	230c      	movs	r3, #12
 800760c:	6033      	str	r3, [r6, #0]
 800760e:	2000      	movs	r0, #0
 8007610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007612:	f000 f857 	bl	80076c4 <__malloc_lock>
 8007616:	4921      	ldr	r1, [pc, #132]	; (800769c <_malloc_r+0xac>)
 8007618:	680a      	ldr	r2, [r1, #0]
 800761a:	4614      	mov	r4, r2
 800761c:	b99c      	cbnz	r4, 8007646 <_malloc_r+0x56>
 800761e:	4f20      	ldr	r7, [pc, #128]	; (80076a0 <_malloc_r+0xb0>)
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	b923      	cbnz	r3, 800762e <_malloc_r+0x3e>
 8007624:	4621      	mov	r1, r4
 8007626:	4630      	mov	r0, r6
 8007628:	f000 f83c 	bl	80076a4 <_sbrk_r>
 800762c:	6038      	str	r0, [r7, #0]
 800762e:	4629      	mov	r1, r5
 8007630:	4630      	mov	r0, r6
 8007632:	f000 f837 	bl	80076a4 <_sbrk_r>
 8007636:	1c43      	adds	r3, r0, #1
 8007638:	d123      	bne.n	8007682 <_malloc_r+0x92>
 800763a:	230c      	movs	r3, #12
 800763c:	6033      	str	r3, [r6, #0]
 800763e:	4630      	mov	r0, r6
 8007640:	f000 f846 	bl	80076d0 <__malloc_unlock>
 8007644:	e7e3      	b.n	800760e <_malloc_r+0x1e>
 8007646:	6823      	ldr	r3, [r4, #0]
 8007648:	1b5b      	subs	r3, r3, r5
 800764a:	d417      	bmi.n	800767c <_malloc_r+0x8c>
 800764c:	2b0b      	cmp	r3, #11
 800764e:	d903      	bls.n	8007658 <_malloc_r+0x68>
 8007650:	6023      	str	r3, [r4, #0]
 8007652:	441c      	add	r4, r3
 8007654:	6025      	str	r5, [r4, #0]
 8007656:	e004      	b.n	8007662 <_malloc_r+0x72>
 8007658:	6863      	ldr	r3, [r4, #4]
 800765a:	42a2      	cmp	r2, r4
 800765c:	bf0c      	ite	eq
 800765e:	600b      	streq	r3, [r1, #0]
 8007660:	6053      	strne	r3, [r2, #4]
 8007662:	4630      	mov	r0, r6
 8007664:	f000 f834 	bl	80076d0 <__malloc_unlock>
 8007668:	f104 000b 	add.w	r0, r4, #11
 800766c:	1d23      	adds	r3, r4, #4
 800766e:	f020 0007 	bic.w	r0, r0, #7
 8007672:	1ac2      	subs	r2, r0, r3
 8007674:	d0cc      	beq.n	8007610 <_malloc_r+0x20>
 8007676:	1a1b      	subs	r3, r3, r0
 8007678:	50a3      	str	r3, [r4, r2]
 800767a:	e7c9      	b.n	8007610 <_malloc_r+0x20>
 800767c:	4622      	mov	r2, r4
 800767e:	6864      	ldr	r4, [r4, #4]
 8007680:	e7cc      	b.n	800761c <_malloc_r+0x2c>
 8007682:	1cc4      	adds	r4, r0, #3
 8007684:	f024 0403 	bic.w	r4, r4, #3
 8007688:	42a0      	cmp	r0, r4
 800768a:	d0e3      	beq.n	8007654 <_malloc_r+0x64>
 800768c:	1a21      	subs	r1, r4, r0
 800768e:	4630      	mov	r0, r6
 8007690:	f000 f808 	bl	80076a4 <_sbrk_r>
 8007694:	3001      	adds	r0, #1
 8007696:	d1dd      	bne.n	8007654 <_malloc_r+0x64>
 8007698:	e7cf      	b.n	800763a <_malloc_r+0x4a>
 800769a:	bf00      	nop
 800769c:	20000098 	.word	0x20000098
 80076a0:	2000009c 	.word	0x2000009c

080076a4 <_sbrk_r>:
 80076a4:	b538      	push	{r3, r4, r5, lr}
 80076a6:	4d06      	ldr	r5, [pc, #24]	; (80076c0 <_sbrk_r+0x1c>)
 80076a8:	2300      	movs	r3, #0
 80076aa:	4604      	mov	r4, r0
 80076ac:	4608      	mov	r0, r1
 80076ae:	602b      	str	r3, [r5, #0]
 80076b0:	f7f9 fcd2 	bl	8001058 <_sbrk>
 80076b4:	1c43      	adds	r3, r0, #1
 80076b6:	d102      	bne.n	80076be <_sbrk_r+0x1a>
 80076b8:	682b      	ldr	r3, [r5, #0]
 80076ba:	b103      	cbz	r3, 80076be <_sbrk_r+0x1a>
 80076bc:	6023      	str	r3, [r4, #0]
 80076be:	bd38      	pop	{r3, r4, r5, pc}
 80076c0:	200003a4 	.word	0x200003a4

080076c4 <__malloc_lock>:
 80076c4:	4801      	ldr	r0, [pc, #4]	; (80076cc <__malloc_lock+0x8>)
 80076c6:	f000 b809 	b.w	80076dc <__retarget_lock_acquire_recursive>
 80076ca:	bf00      	nop
 80076cc:	200003ac 	.word	0x200003ac

080076d0 <__malloc_unlock>:
 80076d0:	4801      	ldr	r0, [pc, #4]	; (80076d8 <__malloc_unlock+0x8>)
 80076d2:	f000 b804 	b.w	80076de <__retarget_lock_release_recursive>
 80076d6:	bf00      	nop
 80076d8:	200003ac 	.word	0x200003ac

080076dc <__retarget_lock_acquire_recursive>:
 80076dc:	4770      	bx	lr

080076de <__retarget_lock_release_recursive>:
 80076de:	4770      	bx	lr

080076e0 <_init>:
 80076e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076e2:	bf00      	nop
 80076e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076e6:	bc08      	pop	{r3}
 80076e8:	469e      	mov	lr, r3
 80076ea:	4770      	bx	lr

080076ec <_fini>:
 80076ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ee:	bf00      	nop
 80076f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076f2:	bc08      	pop	{r3}
 80076f4:	469e      	mov	lr, r3
 80076f6:	4770      	bx	lr
