
tester.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000750c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08007694  08007694  00017694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076cc  080076cc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080076cc  080076cc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080076cc  080076cc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076cc  080076cc  000176cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080076d0  080076d0  000176d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080076d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000344  20000070  08007744  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003b4  08007744  000203b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a2e4  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000364d  00000000  00000000  0003a384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001408  00000000  00000000  0003d9d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001280  00000000  00000000  0003ede0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003b89  00000000  00000000  00040060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b0d0  00000000  00000000  00043be9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000afcd1  00000000  00000000  0005ecb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010e98a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054c8  00000000  00000000  0010e9e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800767c 	.word	0x0800767c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	0800767c 	.word	0x0800767c

080001c8 <platform_write>:

static uint8_t * buffer;
static uint8_t rotation;

static uint8_t platform_write(uint8_t reg, uint8_t *bufp, uint16_t len)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b086      	sub	sp, #24
 80001cc:	af04      	add	r7, sp, #16
 80001ce:	4603      	mov	r3, r0
 80001d0:	6039      	str	r1, [r7, #0]
 80001d2:	71fb      	strb	r3, [r7, #7]
 80001d4:	4613      	mov	r3, r2
 80001d6:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write(&SSD1306_I2C_BUS, SSD1306_I2C_ADDRESS, reg, 1, bufp, len, 100);
 80001d8:	79fb      	ldrb	r3, [r7, #7]
 80001da:	b29a      	uxth	r2, r3
 80001dc:	2364      	movs	r3, #100	; 0x64
 80001de:	9302      	str	r3, [sp, #8]
 80001e0:	88bb      	ldrh	r3, [r7, #4]
 80001e2:	9301      	str	r3, [sp, #4]
 80001e4:	683b      	ldr	r3, [r7, #0]
 80001e6:	9300      	str	r3, [sp, #0]
 80001e8:	2301      	movs	r3, #1
 80001ea:	2178      	movs	r1, #120	; 0x78
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <platform_write+0x34>)
 80001ee:	f002 fcc9 	bl	8002b84 <HAL_I2C_Mem_Write>
	return 0;
 80001f2:	2300      	movs	r3, #0
}
 80001f4:	4618      	mov	r0, r3
 80001f6:	3708      	adds	r7, #8
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bd80      	pop	{r7, pc}
 80001fc:	200001a0 	.word	0x200001a0

08000200 <platform_write_dma>:

static uint8_t platform_write_dma(uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b084      	sub	sp, #16
 8000204:	af02      	add	r7, sp, #8
 8000206:	4603      	mov	r3, r0
 8000208:	6039      	str	r1, [r7, #0]
 800020a:	71fb      	strb	r3, [r7, #7]
 800020c:	4613      	mov	r3, r2
 800020e:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_BUS, SSD1306_I2C_ADDRESS, reg, 1, bufp, len);
 8000210:	79fb      	ldrb	r3, [r7, #7]
 8000212:	b29a      	uxth	r2, r3
 8000214:	88bb      	ldrh	r3, [r7, #4]
 8000216:	9301      	str	r3, [sp, #4]
 8000218:	683b      	ldr	r3, [r7, #0]
 800021a:	9300      	str	r3, [sp, #0]
 800021c:	2301      	movs	r3, #1
 800021e:	2178      	movs	r1, #120	; 0x78
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <platform_write_dma+0x30>)
 8000222:	f002 fdc3 	bl	8002dac <HAL_I2C_Mem_Write_DMA>
	//HAL_I2C_Mem_Write(&SSD1306_I2C_BUS, SSD1306_I2C_ADDRESS, reg, 1, bufp, len,100);
	return 0;
 8000226:	2300      	movs	r3, #0
}
 8000228:	4618      	mov	r0, r3
 800022a:	3708      	adds	r7, #8
 800022c:	46bd      	mov	sp, r7
 800022e:	bd80      	pop	{r7, pc}
 8000230:	200001a0 	.word	0x200001a0

08000234 <SSD1306_send_com>:

static void SSD1306_send_com(uint8_t c)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	4603      	mov	r3, r0
 800023c:	71fb      	strb	r3, [r7, #7]
	platform_write(0x00, &c, 1);
 800023e:	1dfb      	adds	r3, r7, #7
 8000240:	2201      	movs	r2, #1
 8000242:	4619      	mov	r1, r3
 8000244:	2000      	movs	r0, #0
 8000246:	f7ff ffbf 	bl	80001c8 <platform_write>
}
 800024a:	bf00      	nop
 800024c:	3708      	adds	r7, #8
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
	...

08000254 <SSD1306_init>:

bool SSD1306_init(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b082      	sub	sp, #8
 8000258:	af00      	add	r7, sp, #0
  uint8_t comPins = 0x02, contrast = 0x8F, vccstate = SSD1306_SWITCHCAPVCC;
 800025a:	2302      	movs	r3, #2
 800025c:	71fb      	strb	r3, [r7, #7]
 800025e:	238f      	movs	r3, #143	; 0x8f
 8000260:	71bb      	strb	r3, [r7, #6]
 8000262:	2302      	movs	r3, #2
 8000264:	717b      	strb	r3, [r7, #5]
  size_t q= SSD1306_WIDTH * ((SSD1306_HEIGHT + 7) / 8);
 8000266:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800026a:	603b      	str	r3, [r7, #0]
  if ((!buffer) && !(buffer = (uint8_t *)malloc(q)))
 800026c:	4b3f      	ldr	r3, [pc, #252]	; (800036c <SSD1306_init+0x118>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	2b00      	cmp	r3, #0
 8000272:	d10c      	bne.n	800028e <SSD1306_init+0x3a>
 8000274:	6838      	ldr	r0, [r7, #0]
 8000276:	f007 f979 	bl	800756c <malloc>
 800027a:	4603      	mov	r3, r0
 800027c:	461a      	mov	r2, r3
 800027e:	4b3b      	ldr	r3, [pc, #236]	; (800036c <SSD1306_init+0x118>)
 8000280:	601a      	str	r2, [r3, #0]
 8000282:	4b3a      	ldr	r3, [pc, #232]	; (800036c <SSD1306_init+0x118>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	2b00      	cmp	r3, #0
 8000288:	d101      	bne.n	800028e <SSD1306_init+0x3a>
  {
    return false;
 800028a:	2300      	movs	r3, #0
 800028c:	e06a      	b.n	8000364 <SSD1306_init+0x110>
  }

  SSD1306_display_clear();
 800028e:	f000 f86f 	bl	8000370 <SSD1306_display_clear>

  // Init sequence
  SSD1306_send_com(SSD1306_DISPLAYOFF);
 8000292:	20ae      	movs	r0, #174	; 0xae
 8000294:	f7ff ffce 	bl	8000234 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETDISPLAYCLOCKDIV);
 8000298:	20d5      	movs	r0, #213	; 0xd5
 800029a:	f7ff ffcb 	bl	8000234 <SSD1306_send_com>
  SSD1306_send_com(0xE0);
 800029e:	20e0      	movs	r0, #224	; 0xe0
 80002a0:	f7ff ffc8 	bl	8000234 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETMULTIPLEX);
 80002a4:	20a8      	movs	r0, #168	; 0xa8
 80002a6:	f7ff ffc5 	bl	8000234 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_HEIGHT - 1);
 80002aa:	203f      	movs	r0, #63	; 0x3f
 80002ac:	f7ff ffc2 	bl	8000234 <SSD1306_send_com>

  SSD1306_send_com(SSD1306_SETDISPLAYOFFSET);
 80002b0:	20d3      	movs	r0, #211	; 0xd3
 80002b2:	f7ff ffbf 	bl	8000234 <SSD1306_send_com>
  SSD1306_send_com(0x00);
 80002b6:	2000      	movs	r0, #0
 80002b8:	f7ff ffbc 	bl	8000234 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETSTARTLINE | 0x00);
 80002bc:	2040      	movs	r0, #64	; 0x40
 80002be:	f7ff ffb9 	bl	8000234 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_CHARGEPUMP);
 80002c2:	208d      	movs	r0, #141	; 0x8d
 80002c4:	f7ff ffb6 	bl	8000234 <SSD1306_send_com>

  SSD1306_send_com((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
 80002c8:	797b      	ldrb	r3, [r7, #5]
 80002ca:	2b01      	cmp	r3, #1
 80002cc:	d101      	bne.n	80002d2 <SSD1306_init+0x7e>
 80002ce:	2310      	movs	r3, #16
 80002d0:	e000      	b.n	80002d4 <SSD1306_init+0x80>
 80002d2:	2314      	movs	r3, #20
 80002d4:	4618      	mov	r0, r3
 80002d6:	f7ff ffad 	bl	8000234 <SSD1306_send_com>

  SSD1306_send_com(SSD1306_MEMORYMODE);
 80002da:	2020      	movs	r0, #32
 80002dc:	f7ff ffaa 	bl	8000234 <SSD1306_send_com>
  SSD1306_send_com(0x00);
 80002e0:	2000      	movs	r0, #0
 80002e2:	f7ff ffa7 	bl	8000234 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SEGREMAP | 0x10);
 80002e6:	20b0      	movs	r0, #176	; 0xb0
 80002e8:	f7ff ffa4 	bl	8000234 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_COMSCANDEC);
 80002ec:	20c8      	movs	r0, #200	; 0xc8
 80002ee:	f7ff ffa1 	bl	8000234 <SSD1306_send_com>
    comPins = 0x02;
    contrast = 0x8F;
  }
  else if ((SSD1306_WIDTH == 128) && (SSD1306_HEIGHT == 64))
  {
    comPins = 0x12;
 80002f2:	2312      	movs	r3, #18
 80002f4:	71fb      	strb	r3, [r7, #7]
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF;
 80002f6:	797b      	ldrb	r3, [r7, #5]
 80002f8:	2b01      	cmp	r3, #1
 80002fa:	d101      	bne.n	8000300 <SSD1306_init+0xac>
 80002fc:	239f      	movs	r3, #159	; 0x9f
 80002fe:	e000      	b.n	8000302 <SSD1306_init+0xae>
 8000300:	23cf      	movs	r3, #207	; 0xcf
 8000302:	71bb      	strb	r3, [r7, #6]
  {
    comPins = 0x2; // ada x12
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF;
  }

  SSD1306_send_com(SSD1306_SETCOMPINS);
 8000304:	20da      	movs	r0, #218	; 0xda
 8000306:	f7ff ff95 	bl	8000234 <SSD1306_send_com>
  SSD1306_send_com(comPins);
 800030a:	79fb      	ldrb	r3, [r7, #7]
 800030c:	4618      	mov	r0, r3
 800030e:	f7ff ff91 	bl	8000234 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETCONTRAST);
 8000312:	2081      	movs	r0, #129	; 0x81
 8000314:	f7ff ff8e 	bl	8000234 <SSD1306_send_com>
  SSD1306_send_com(contrast);
 8000318:	79bb      	ldrb	r3, [r7, #6]
 800031a:	4618      	mov	r0, r3
 800031c:	f7ff ff8a 	bl	8000234 <SSD1306_send_com>

  SSD1306_send_com(SSD1306_SETPRECHARGE);
 8000320:	20d9      	movs	r0, #217	; 0xd9
 8000322:	f7ff ff87 	bl	8000234 <SSD1306_send_com>
  SSD1306_send_com((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
 8000326:	797b      	ldrb	r3, [r7, #5]
 8000328:	2b01      	cmp	r3, #1
 800032a:	d101      	bne.n	8000330 <SSD1306_init+0xdc>
 800032c:	2322      	movs	r3, #34	; 0x22
 800032e:	e000      	b.n	8000332 <SSD1306_init+0xde>
 8000330:	23f1      	movs	r3, #241	; 0xf1
 8000332:	4618      	mov	r0, r3
 8000334:	f7ff ff7e 	bl	8000234 <SSD1306_send_com>

  SSD1306_send_com(SSD1306_SETVCOMDETECT);
 8000338:	20db      	movs	r0, #219	; 0xdb
 800033a:	f7ff ff7b 	bl	8000234 <SSD1306_send_com>
  SSD1306_send_com(0x40);
 800033e:	2040      	movs	r0, #64	; 0x40
 8000340:	f7ff ff78 	bl	8000234 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_DISPLAYALLON_RESUME);
 8000344:	20a4      	movs	r0, #164	; 0xa4
 8000346:	f7ff ff75 	bl	8000234 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_NORMALDISPLAY);
 800034a:	20a6      	movs	r0, #166	; 0xa6
 800034c:	f7ff ff72 	bl	8000234 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_DEACTIVATE_SCROLL);
 8000350:	202e      	movs	r0, #46	; 0x2e
 8000352:	f7ff ff6f 	bl	8000234 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_DISPLAYON);
 8000356:	20af      	movs	r0, #175	; 0xaf
 8000358:	f7ff ff6c 	bl	8000234 <SSD1306_send_com>

  SSD1306_set_rotation(SSD1306_HORIZONTAL_MODE2);
 800035c:	2002      	movs	r0, #2
 800035e:	f000 f861 	bl	8000424 <SSD1306_set_rotation>
  return true;
 8000362:	2301      	movs	r3, #1
}
 8000364:	4618      	mov	r0, r3
 8000366:	3708      	adds	r7, #8
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}
 800036c:	2000008c 	.word	0x2000008c

08000370 <SSD1306_display_clear>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void SSD1306_display_clear(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
	memset(buffer, 0, SSD1306_WIDTH * ((SSD1306_HEIGHT + 7) / 8));
 8000374:	4b04      	ldr	r3, [pc, #16]	; (8000388 <SSD1306_display_clear+0x18>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800037c:	2100      	movs	r1, #0
 800037e:	4618      	mov	r0, r3
 8000380:	f007 f8fc 	bl	800757c <memset>
}
 8000384:	bf00      	nop
 8000386:	bd80      	pop	{r7, pc}
 8000388:	2000008c 	.word	0x2000008c

0800038c <SSD1306_display_repaint>:
    @note   Drawing operations are not visible until this function is
            called. Call after each graphics command, or after a whole set
            of graphics commands, as best needed by one's own application.
*/
void SSD1306_display_repaint(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
	uint16_t buf_len = SSD1306_WIDTH * ((SSD1306_HEIGHT + 7) / 8);
 8000392:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000396:	80fb      	strh	r3, [r7, #6]

	SSD1306_send_com(SSD1306_PAGEADDR);
 8000398:	2022      	movs	r0, #34	; 0x22
 800039a:	f7ff ff4b 	bl	8000234 <SSD1306_send_com>
	SSD1306_send_com(0x00);
 800039e:	2000      	movs	r0, #0
 80003a0:	f7ff ff48 	bl	8000234 <SSD1306_send_com>
	SSD1306_send_com(0xFF);
 80003a4:	20ff      	movs	r0, #255	; 0xff
 80003a6:	f7ff ff45 	bl	8000234 <SSD1306_send_com>
	SSD1306_send_com(SSD1306_COLUMNADDR);
 80003aa:	2021      	movs	r0, #33	; 0x21
 80003ac:	f7ff ff42 	bl	8000234 <SSD1306_send_com>
	SSD1306_send_com(0x00);
 80003b0:	2000      	movs	r0, #0
 80003b2:	f7ff ff3f 	bl	8000234 <SSD1306_send_com>

	SSD1306_send_com(SSD1306_WIDTH - 1); // Column end address
 80003b6:	207f      	movs	r0, #127	; 0x7f
 80003b8:	f7ff ff3c 	bl	8000234 <SSD1306_send_com>

	platform_write_dma(SSD1306_SETSTARTLINE, buffer, buf_len);
 80003bc:	4b05      	ldr	r3, [pc, #20]	; (80003d4 <SSD1306_display_repaint+0x48>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	88fa      	ldrh	r2, [r7, #6]
 80003c2:	4619      	mov	r1, r3
 80003c4:	2040      	movs	r0, #64	; 0x40
 80003c6:	f7ff ff1b 	bl	8000200 <platform_write_dma>
}
 80003ca:	bf00      	nop
 80003cc:	3708      	adds	r7, #8
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	2000008c 	.word	0x2000008c

080003d8 <SSD1306_start_scroll_right>:
            Last row.
    @return None (void).
*/
/* To scroll the whole display, run: display.startscrollright(0x00, 0x0F) */
void SSD1306_start_scroll_right(uint8_t start, uint8_t stop)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b082      	sub	sp, #8
 80003dc:	af00      	add	r7, sp, #0
 80003de:	4603      	mov	r3, r0
 80003e0:	460a      	mov	r2, r1
 80003e2:	71fb      	strb	r3, [r7, #7]
 80003e4:	4613      	mov	r3, r2
 80003e6:	71bb      	strb	r3, [r7, #6]
	SSD1306_send_com(SSD1306_RIGHT_HORIZONTAL_SCROLL);
 80003e8:	2026      	movs	r0, #38	; 0x26
 80003ea:	f7ff ff23 	bl	8000234 <SSD1306_send_com>
	SSD1306_send_com(0x00);
 80003ee:	2000      	movs	r0, #0
 80003f0:	f7ff ff20 	bl	8000234 <SSD1306_send_com>

	SSD1306_send_com(start);
 80003f4:	79fb      	ldrb	r3, [r7, #7]
 80003f6:	4618      	mov	r0, r3
 80003f8:	f7ff ff1c 	bl	8000234 <SSD1306_send_com>
	SSD1306_send_com(0x00);
 80003fc:	2000      	movs	r0, #0
 80003fe:	f7ff ff19 	bl	8000234 <SSD1306_send_com>
	SSD1306_send_com(stop);
 8000402:	79bb      	ldrb	r3, [r7, #6]
 8000404:	4618      	mov	r0, r3
 8000406:	f7ff ff15 	bl	8000234 <SSD1306_send_com>

	SSD1306_send_com(0x00);
 800040a:	2000      	movs	r0, #0
 800040c:	f7ff ff12 	bl	8000234 <SSD1306_send_com>
	SSD1306_send_com(0xFF);
 8000410:	20ff      	movs	r0, #255	; 0xff
 8000412:	f7ff ff0f 	bl	8000234 <SSD1306_send_com>
	SSD1306_send_com(SSD1306_ACTIVATE_SCROLL);
 8000416:	202f      	movs	r0, #47	; 0x2f
 8000418:	f7ff ff0c 	bl	8000234 <SSD1306_send_com>
}
 800041c:	bf00      	nop
 800041e:	3708      	adds	r7, #8
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}

08000424 <SSD1306_set_rotation>:
    SSD1306_send_com(SSD1306_SETCONTRAST);
    SSD1306_send_com(contrast);
}

void SSD1306_set_rotation(uint8_t rot)
{
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
 800042a:	4603      	mov	r3, r0
 800042c:	71fb      	strb	r3, [r7, #7]
	rotation = rot;
 800042e:	4a04      	ldr	r2, [pc, #16]	; (8000440 <SSD1306_set_rotation+0x1c>)
 8000430:	79fb      	ldrb	r3, [r7, #7]
 8000432:	7013      	strb	r3, [r2, #0]
}
 8000434:	bf00      	nop
 8000436:	370c      	adds	r7, #12
 8000438:	46bd      	mov	sp, r7
 800043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043e:	4770      	bx	lr
 8000440:	20000090 	.word	0x20000090

08000444 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b08a      	sub	sp, #40	; 0x28
 8000448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800044a:	f107 031c 	add.w	r3, r7, #28
 800044e:	2200      	movs	r2, #0
 8000450:	601a      	str	r2, [r3, #0]
 8000452:	605a      	str	r2, [r3, #4]
 8000454:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000456:	1d3b      	adds	r3, r7, #4
 8000458:	2200      	movs	r2, #0
 800045a:	601a      	str	r2, [r3, #0]
 800045c:	605a      	str	r2, [r3, #4]
 800045e:	609a      	str	r2, [r3, #8]
 8000460:	60da      	str	r2, [r3, #12]
 8000462:	611a      	str	r2, [r3, #16]
 8000464:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000466:	4b2e      	ldr	r3, [pc, #184]	; (8000520 <MX_ADC1_Init+0xdc>)
 8000468:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800046c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800046e:	4b2c      	ldr	r3, [pc, #176]	; (8000520 <MX_ADC1_Init+0xdc>)
 8000470:	2200      	movs	r2, #0
 8000472:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000474:	4b2a      	ldr	r3, [pc, #168]	; (8000520 <MX_ADC1_Init+0xdc>)
 8000476:	2200      	movs	r2, #0
 8000478:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800047a:	4b29      	ldr	r3, [pc, #164]	; (8000520 <MX_ADC1_Init+0xdc>)
 800047c:	2200      	movs	r2, #0
 800047e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000480:	4b27      	ldr	r3, [pc, #156]	; (8000520 <MX_ADC1_Init+0xdc>)
 8000482:	2200      	movs	r2, #0
 8000484:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000486:	4b26      	ldr	r3, [pc, #152]	; (8000520 <MX_ADC1_Init+0xdc>)
 8000488:	2200      	movs	r2, #0
 800048a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800048e:	4b24      	ldr	r3, [pc, #144]	; (8000520 <MX_ADC1_Init+0xdc>)
 8000490:	2200      	movs	r2, #0
 8000492:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000494:	4b22      	ldr	r3, [pc, #136]	; (8000520 <MX_ADC1_Init+0xdc>)
 8000496:	2201      	movs	r2, #1
 8000498:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800049a:	4b21      	ldr	r3, [pc, #132]	; (8000520 <MX_ADC1_Init+0xdc>)
 800049c:	2200      	movs	r2, #0
 800049e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80004a0:	4b1f      	ldr	r3, [pc, #124]	; (8000520 <MX_ADC1_Init+0xdc>)
 80004a2:	2201      	movs	r2, #1
 80004a4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80004a6:	4b1e      	ldr	r3, [pc, #120]	; (8000520 <MX_ADC1_Init+0xdc>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004ae:	4b1c      	ldr	r3, [pc, #112]	; (8000520 <MX_ADC1_Init+0xdc>)
 80004b0:	2204      	movs	r2, #4
 80004b2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80004b4:	4b1a      	ldr	r3, [pc, #104]	; (8000520 <MX_ADC1_Init+0xdc>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80004ba:	4b19      	ldr	r3, [pc, #100]	; (8000520 <MX_ADC1_Init+0xdc>)
 80004bc:	2200      	movs	r2, #0
 80004be:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80004c0:	4817      	ldr	r0, [pc, #92]	; (8000520 <MX_ADC1_Init+0xdc>)
 80004c2:	f000 ffd5 	bl	8001470 <HAL_ADC_Init>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d001      	beq.n	80004d0 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80004cc:	f000 fb8a 	bl	8000be4 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80004d0:	2300      	movs	r3, #0
 80004d2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80004d4:	f107 031c 	add.w	r3, r7, #28
 80004d8:	4619      	mov	r1, r3
 80004da:	4811      	ldr	r0, [pc, #68]	; (8000520 <MX_ADC1_Init+0xdc>)
 80004dc:	f001 fc1c 	bl	8001d18 <HAL_ADCEx_MultiModeConfigChannel>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d001      	beq.n	80004ea <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80004e6:	f000 fb7d 	bl	8000be4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80004ea:	2301      	movs	r3, #1
 80004ec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004ee:	2301      	movs	r3, #1
 80004f0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80004f2:	2300      	movs	r3, #0
 80004f4:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80004f6:	2300      	movs	r3, #0
 80004f8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80004fa:	2300      	movs	r3, #0
 80004fc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80004fe:	2300      	movs	r3, #0
 8000500:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000502:	1d3b      	adds	r3, r7, #4
 8000504:	4619      	mov	r1, r3
 8000506:	4806      	ldr	r0, [pc, #24]	; (8000520 <MX_ADC1_Init+0xdc>)
 8000508:	f001 f944 	bl	8001794 <HAL_ADC_ConfigChannel>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000512:	f000 fb67 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000516:	bf00      	nop
 8000518:	3728      	adds	r7, #40	; 0x28
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	200000a0 	.word	0x200000a0

08000524 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b08a      	sub	sp, #40	; 0x28
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800052c:	f107 0314 	add.w	r3, r7, #20
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	605a      	str	r2, [r3, #4]
 8000536:	609a      	str	r2, [r3, #8]
 8000538:	60da      	str	r2, [r3, #12]
 800053a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000544:	d14c      	bne.n	80005e0 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000546:	4b28      	ldr	r3, [pc, #160]	; (80005e8 <HAL_ADC_MspInit+0xc4>)
 8000548:	695b      	ldr	r3, [r3, #20]
 800054a:	4a27      	ldr	r2, [pc, #156]	; (80005e8 <HAL_ADC_MspInit+0xc4>)
 800054c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000550:	6153      	str	r3, [r2, #20]
 8000552:	4b25      	ldr	r3, [pc, #148]	; (80005e8 <HAL_ADC_MspInit+0xc4>)
 8000554:	695b      	ldr	r3, [r3, #20]
 8000556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800055a:	613b      	str	r3, [r7, #16]
 800055c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800055e:	4b22      	ldr	r3, [pc, #136]	; (80005e8 <HAL_ADC_MspInit+0xc4>)
 8000560:	695b      	ldr	r3, [r3, #20]
 8000562:	4a21      	ldr	r2, [pc, #132]	; (80005e8 <HAL_ADC_MspInit+0xc4>)
 8000564:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000568:	6153      	str	r3, [r2, #20]
 800056a:	4b1f      	ldr	r3, [pc, #124]	; (80005e8 <HAL_ADC_MspInit+0xc4>)
 800056c:	695b      	ldr	r3, [r3, #20]
 800056e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000572:	60fb      	str	r3, [r7, #12]
 8000574:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000576:	2303      	movs	r3, #3
 8000578:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800057a:	2303      	movs	r3, #3
 800057c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057e:	2300      	movs	r3, #0
 8000580:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000582:	f107 0314 	add.w	r3, r7, #20
 8000586:	4619      	mov	r1, r3
 8000588:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800058c:	f002 f8e0 	bl	8002750 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000590:	4b16      	ldr	r3, [pc, #88]	; (80005ec <HAL_ADC_MspInit+0xc8>)
 8000592:	4a17      	ldr	r2, [pc, #92]	; (80005f0 <HAL_ADC_MspInit+0xcc>)
 8000594:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000596:	4b15      	ldr	r3, [pc, #84]	; (80005ec <HAL_ADC_MspInit+0xc8>)
 8000598:	2200      	movs	r2, #0
 800059a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800059c:	4b13      	ldr	r3, [pc, #76]	; (80005ec <HAL_ADC_MspInit+0xc8>)
 800059e:	2200      	movs	r2, #0
 80005a0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80005a2:	4b12      	ldr	r3, [pc, #72]	; (80005ec <HAL_ADC_MspInit+0xc8>)
 80005a4:	2280      	movs	r2, #128	; 0x80
 80005a6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80005a8:	4b10      	ldr	r3, [pc, #64]	; (80005ec <HAL_ADC_MspInit+0xc8>)
 80005aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005ae:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80005b0:	4b0e      	ldr	r3, [pc, #56]	; (80005ec <HAL_ADC_MspInit+0xc8>)
 80005b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005b6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80005b8:	4b0c      	ldr	r3, [pc, #48]	; (80005ec <HAL_ADC_MspInit+0xc8>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80005be:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <HAL_ADC_MspInit+0xc8>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80005c4:	4809      	ldr	r0, [pc, #36]	; (80005ec <HAL_ADC_MspInit+0xc8>)
 80005c6:	f001 fee0 	bl	800238a <HAL_DMA_Init>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 80005d0:	f000 fb08 	bl	8000be4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	4a05      	ldr	r2, [pc, #20]	; (80005ec <HAL_ADC_MspInit+0xc8>)
 80005d8:	639a      	str	r2, [r3, #56]	; 0x38
 80005da:	4a04      	ldr	r2, [pc, #16]	; (80005ec <HAL_ADC_MspInit+0xc8>)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80005e0:	bf00      	nop
 80005e2:	3728      	adds	r7, #40	; 0x28
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40021000 	.word	0x40021000
 80005ec:	200000f0 	.word	0x200000f0
 80005f0:	40020008 	.word	0x40020008

080005f4 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80005f8:	4b16      	ldr	r3, [pc, #88]	; (8000654 <MX_CAN_Init+0x60>)
 80005fa:	4a17      	ldr	r2, [pc, #92]	; (8000658 <MX_CAN_Init+0x64>)
 80005fc:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80005fe:	4b15      	ldr	r3, [pc, #84]	; (8000654 <MX_CAN_Init+0x60>)
 8000600:	2210      	movs	r2, #16
 8000602:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000604:	4b13      	ldr	r3, [pc, #76]	; (8000654 <MX_CAN_Init+0x60>)
 8000606:	2200      	movs	r2, #0
 8000608:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800060a:	4b12      	ldr	r3, [pc, #72]	; (8000654 <MX_CAN_Init+0x60>)
 800060c:	2200      	movs	r2, #0
 800060e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000610:	4b10      	ldr	r3, [pc, #64]	; (8000654 <MX_CAN_Init+0x60>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000616:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <MX_CAN_Init+0x60>)
 8000618:	2200      	movs	r2, #0
 800061a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800061c:	4b0d      	ldr	r3, [pc, #52]	; (8000654 <MX_CAN_Init+0x60>)
 800061e:	2200      	movs	r2, #0
 8000620:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000622:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <MX_CAN_Init+0x60>)
 8000624:	2200      	movs	r2, #0
 8000626:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000628:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <MX_CAN_Init+0x60>)
 800062a:	2200      	movs	r2, #0
 800062c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800062e:	4b09      	ldr	r3, [pc, #36]	; (8000654 <MX_CAN_Init+0x60>)
 8000630:	2200      	movs	r2, #0
 8000632:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000634:	4b07      	ldr	r3, [pc, #28]	; (8000654 <MX_CAN_Init+0x60>)
 8000636:	2200      	movs	r2, #0
 8000638:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800063a:	4b06      	ldr	r3, [pc, #24]	; (8000654 <MX_CAN_Init+0x60>)
 800063c:	2200      	movs	r2, #0
 800063e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000640:	4804      	ldr	r0, [pc, #16]	; (8000654 <MX_CAN_Init+0x60>)
 8000642:	f001 fc95 	bl	8001f70 <HAL_CAN_Init>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 800064c:	f000 faca 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000650:	bf00      	nop
 8000652:	bd80      	pop	{r7, pc}
 8000654:	20000134 	.word	0x20000134
 8000658:	40006400 	.word	0x40006400

0800065c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b08a      	sub	sp, #40	; 0x28
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000664:	f107 0314 	add.w	r3, r7, #20
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a18      	ldr	r2, [pc, #96]	; (80006dc <HAL_CAN_MspInit+0x80>)
 800067a:	4293      	cmp	r3, r2
 800067c:	d129      	bne.n	80006d2 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800067e:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <HAL_CAN_MspInit+0x84>)
 8000680:	69db      	ldr	r3, [r3, #28]
 8000682:	4a17      	ldr	r2, [pc, #92]	; (80006e0 <HAL_CAN_MspInit+0x84>)
 8000684:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000688:	61d3      	str	r3, [r2, #28]
 800068a:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <HAL_CAN_MspInit+0x84>)
 800068c:	69db      	ldr	r3, [r3, #28]
 800068e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000692:	613b      	str	r3, [r7, #16]
 8000694:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000696:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <HAL_CAN_MspInit+0x84>)
 8000698:	695b      	ldr	r3, [r3, #20]
 800069a:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <HAL_CAN_MspInit+0x84>)
 800069c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006a0:	6153      	str	r3, [r2, #20]
 80006a2:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <HAL_CAN_MspInit+0x84>)
 80006a4:	695b      	ldr	r3, [r3, #20]
 80006a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80006ae:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80006b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b4:	2302      	movs	r3, #2
 80006b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006bc:	2303      	movs	r3, #3
 80006be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80006c0:	2309      	movs	r3, #9
 80006c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c4:	f107 0314 	add.w	r3, r7, #20
 80006c8:	4619      	mov	r1, r3
 80006ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ce:	f002 f83f 	bl	8002750 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 80006d2:	bf00      	nop
 80006d4:	3728      	adds	r7, #40	; 0x28
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40006400 	.word	0x40006400
 80006e0:	40021000 	.word	0x40021000

080006e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006ea:	4b14      	ldr	r3, [pc, #80]	; (800073c <MX_DMA_Init+0x58>)
 80006ec:	695b      	ldr	r3, [r3, #20]
 80006ee:	4a13      	ldr	r2, [pc, #76]	; (800073c <MX_DMA_Init+0x58>)
 80006f0:	f043 0301 	orr.w	r3, r3, #1
 80006f4:	6153      	str	r3, [r2, #20]
 80006f6:	4b11      	ldr	r3, [pc, #68]	; (800073c <MX_DMA_Init+0x58>)
 80006f8:	695b      	ldr	r3, [r3, #20]
 80006fa:	f003 0301 	and.w	r3, r3, #1
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000702:	2200      	movs	r2, #0
 8000704:	2100      	movs	r1, #0
 8000706:	200b      	movs	r0, #11
 8000708:	f001 fe09 	bl	800231e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800070c:	200b      	movs	r0, #11
 800070e:	f001 fe22 	bl	8002356 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000712:	2200      	movs	r2, #0
 8000714:	2100      	movs	r1, #0
 8000716:	200e      	movs	r0, #14
 8000718:	f001 fe01 	bl	800231e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800071c:	200e      	movs	r0, #14
 800071e:	f001 fe1a 	bl	8002356 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000722:	2200      	movs	r2, #0
 8000724:	2100      	movs	r1, #0
 8000726:	2011      	movs	r0, #17
 8000728:	f001 fdf9 	bl	800231e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800072c:	2011      	movs	r0, #17
 800072e:	f001 fe12 	bl	8002356 <HAL_NVIC_EnableIRQ>

}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40021000 	.word	0x40021000

08000740 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b088      	sub	sp, #32
 8000744:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000746:	f107 030c 	add.w	r3, r7, #12
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
 8000752:	60da      	str	r2, [r3, #12]
 8000754:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000756:	4b3f      	ldr	r3, [pc, #252]	; (8000854 <MX_GPIO_Init+0x114>)
 8000758:	695b      	ldr	r3, [r3, #20]
 800075a:	4a3e      	ldr	r2, [pc, #248]	; (8000854 <MX_GPIO_Init+0x114>)
 800075c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000760:	6153      	str	r3, [r2, #20]
 8000762:	4b3c      	ldr	r3, [pc, #240]	; (8000854 <MX_GPIO_Init+0x114>)
 8000764:	695b      	ldr	r3, [r3, #20]
 8000766:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800076a:	60bb      	str	r3, [r7, #8]
 800076c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076e:	4b39      	ldr	r3, [pc, #228]	; (8000854 <MX_GPIO_Init+0x114>)
 8000770:	695b      	ldr	r3, [r3, #20]
 8000772:	4a38      	ldr	r2, [pc, #224]	; (8000854 <MX_GPIO_Init+0x114>)
 8000774:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000778:	6153      	str	r3, [r2, #20]
 800077a:	4b36      	ldr	r3, [pc, #216]	; (8000854 <MX_GPIO_Init+0x114>)
 800077c:	695b      	ldr	r3, [r3, #20]
 800077e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000786:	4b33      	ldr	r3, [pc, #204]	; (8000854 <MX_GPIO_Init+0x114>)
 8000788:	695b      	ldr	r3, [r3, #20]
 800078a:	4a32      	ldr	r2, [pc, #200]	; (8000854 <MX_GPIO_Init+0x114>)
 800078c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000790:	6153      	str	r3, [r2, #20]
 8000792:	4b30      	ldr	r3, [pc, #192]	; (8000854 <MX_GPIO_Init+0x114>)
 8000794:	695b      	ldr	r3, [r3, #20]
 8000796:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800079a:	603b      	str	r3, [r7, #0]
 800079c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HX_PD_SCK_GPIO_Port, HX_PD_SCK_Pin, GPIO_PIN_RESET);
 800079e:	2200      	movs	r2, #0
 80007a0:	2101      	movs	r1, #1
 80007a2:	482d      	ldr	r0, [pc, #180]	; (8000858 <MX_GPIO_Init+0x118>)
 80007a4:	f002 f946 	bl	8002a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CMES_ENA_Pin|M2_INB_Pin|M1_INB_Pin|M1_INA_Pin
 80007a8:	2200      	movs	r2, #0
 80007aa:	f240 7114 	movw	r1, #1812	; 0x714
 80007ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007b2:	f002 f93f 	bl	8002a34 <HAL_GPIO_WritePin>
                          |M1_ENA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M2_ENA_Pin|M2_INA_Pin, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2103      	movs	r1, #3
 80007ba:	4828      	ldr	r0, [pc, #160]	; (800085c <MX_GPIO_Init+0x11c>)
 80007bc:	f002 f93a 	bl	8002a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HX_PD_SCK_Pin;
 80007c0:	2301      	movs	r3, #1
 80007c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c4:	2301      	movs	r3, #1
 80007c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HX_PD_SCK_GPIO_Port, &GPIO_InitStruct);
 80007d0:	f107 030c 	add.w	r3, r7, #12
 80007d4:	4619      	mov	r1, r3
 80007d6:	4820      	ldr	r0, [pc, #128]	; (8000858 <MX_GPIO_Init+0x118>)
 80007d8:	f001 ffba 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HX_DOUT_Pin;
 80007dc:	2302      	movs	r3, #2
 80007de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e0:	2300      	movs	r3, #0
 80007e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HX_DOUT_GPIO_Port, &GPIO_InitStruct);
 80007e8:	f107 030c 	add.w	r3, r7, #12
 80007ec:	4619      	mov	r1, r3
 80007ee:	481a      	ldr	r0, [pc, #104]	; (8000858 <MX_GPIO_Init+0x118>)
 80007f0:	f001 ffae 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = CMES_ENA_Pin|M2_INB_Pin|M1_INB_Pin|M1_INA_Pin
 80007f4:	f240 7314 	movw	r3, #1812	; 0x714
 80007f8:	60fb      	str	r3, [r7, #12]
                          |M1_ENA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fa:	2301      	movs	r3, #1
 80007fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000802:	2300      	movs	r3, #0
 8000804:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000806:	f107 030c 	add.w	r3, r7, #12
 800080a:	4619      	mov	r1, r3
 800080c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000810:	f001 ff9e 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_SW_Pin;
 8000814:	2320      	movs	r3, #32
 8000816:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000818:	2300      	movs	r3, #0
 800081a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800081c:	2301      	movs	r3, #1
 800081e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ENC_SW_GPIO_Port, &GPIO_InitStruct);
 8000820:	f107 030c 	add.w	r3, r7, #12
 8000824:	4619      	mov	r1, r3
 8000826:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800082a:	f001 ff91 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = M2_ENA_Pin|M2_INA_Pin;
 800082e:	2303      	movs	r3, #3
 8000830:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000832:	2301      	movs	r3, #1
 8000834:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083a:	2300      	movs	r3, #0
 800083c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800083e:	f107 030c 	add.w	r3, r7, #12
 8000842:	4619      	mov	r1, r3
 8000844:	4805      	ldr	r0, [pc, #20]	; (800085c <MX_GPIO_Init+0x11c>)
 8000846:	f001 ff83 	bl	8002750 <HAL_GPIO_Init>

}
 800084a:	bf00      	nop
 800084c:	3720      	adds	r7, #32
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40021000 	.word	0x40021000
 8000858:	48001400 	.word	0x48001400
 800085c:	48000400 	.word	0x48000400

08000860 <GUI_STARTSCREAN_DRAW>:
	_gui_handle->Current_Screen=GUI_STATE_START;
	_gui_handle->Last_Event=GUI_EVENT_IDLE;
	_gui_handle->cusor_pos=0;
}

void GUI_STARTSCREAN_DRAW(void){
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0

		GFX_draw_string(30, 40, (unsigned char*)"Boguc", SSD1306_BLACK, SSD1306_WHITE, 2, 2);
		//GFX_draw_string(1, 10, (unsigned char*)"Technology", SSD1306_BLACK, SSD1306_WHITE, 2, 1);

	#endif
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
	...

08000870 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000874:	4b1b      	ldr	r3, [pc, #108]	; (80008e4 <MX_I2C1_Init+0x74>)
 8000876:	4a1c      	ldr	r2, [pc, #112]	; (80008e8 <MX_I2C1_Init+0x78>)
 8000878:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 800087a:	4b1a      	ldr	r3, [pc, #104]	; (80008e4 <MX_I2C1_Init+0x74>)
 800087c:	f240 220b 	movw	r2, #523	; 0x20b
 8000880:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000882:	4b18      	ldr	r3, [pc, #96]	; (80008e4 <MX_I2C1_Init+0x74>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000888:	4b16      	ldr	r3, [pc, #88]	; (80008e4 <MX_I2C1_Init+0x74>)
 800088a:	2201      	movs	r2, #1
 800088c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800088e:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <MX_I2C1_Init+0x74>)
 8000890:	2200      	movs	r2, #0
 8000892:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000894:	4b13      	ldr	r3, [pc, #76]	; (80008e4 <MX_I2C1_Init+0x74>)
 8000896:	2200      	movs	r2, #0
 8000898:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800089a:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <MX_I2C1_Init+0x74>)
 800089c:	2200      	movs	r2, #0
 800089e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008a0:	4b10      	ldr	r3, [pc, #64]	; (80008e4 <MX_I2C1_Init+0x74>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008a6:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <MX_I2C1_Init+0x74>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008ac:	480d      	ldr	r0, [pc, #52]	; (80008e4 <MX_I2C1_Init+0x74>)
 80008ae:	f002 f8d9 	bl	8002a64 <HAL_I2C_Init>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008b8:	f000 f994 	bl	8000be4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008bc:	2100      	movs	r1, #0
 80008be:	4809      	ldr	r0, [pc, #36]	; (80008e4 <MX_I2C1_Init+0x74>)
 80008c0:	f003 fe80 	bl	80045c4 <HAL_I2CEx_ConfigAnalogFilter>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80008ca:	f000 f98b 	bl	8000be4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008ce:	2100      	movs	r1, #0
 80008d0:	4804      	ldr	r0, [pc, #16]	; (80008e4 <MX_I2C1_Init+0x74>)
 80008d2:	f003 fec2 	bl	800465a <HAL_I2CEx_ConfigDigitalFilter>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80008dc:	f000 f982 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	200001a0 	.word	0x200001a0
 80008e8:	40005400 	.word	0x40005400

080008ec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08a      	sub	sp, #40	; 0x28
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f4:	f107 0314 	add.w	r3, r7, #20
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a35      	ldr	r2, [pc, #212]	; (80009e0 <HAL_I2C_MspInit+0xf4>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d164      	bne.n	80009d8 <HAL_I2C_MspInit+0xec>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800090e:	4b35      	ldr	r3, [pc, #212]	; (80009e4 <HAL_I2C_MspInit+0xf8>)
 8000910:	695b      	ldr	r3, [r3, #20]
 8000912:	4a34      	ldr	r2, [pc, #208]	; (80009e4 <HAL_I2C_MspInit+0xf8>)
 8000914:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000918:	6153      	str	r3, [r2, #20]
 800091a:	4b32      	ldr	r3, [pc, #200]	; (80009e4 <HAL_I2C_MspInit+0xf8>)
 800091c:	695b      	ldr	r3, [r3, #20]
 800091e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000922:	613b      	str	r3, [r7, #16]
 8000924:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 8000926:	23c0      	movs	r3, #192	; 0xc0
 8000928:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800092a:	2312      	movs	r3, #18
 800092c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800092e:	2301      	movs	r3, #1
 8000930:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000932:	2303      	movs	r3, #3
 8000934:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000936:	2304      	movs	r3, #4
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800093a:	f107 0314 	add.w	r3, r7, #20
 800093e:	4619      	mov	r1, r3
 8000940:	4829      	ldr	r0, [pc, #164]	; (80009e8 <HAL_I2C_MspInit+0xfc>)
 8000942:	f001 ff05 	bl	8002750 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000946:	4b27      	ldr	r3, [pc, #156]	; (80009e4 <HAL_I2C_MspInit+0xf8>)
 8000948:	69db      	ldr	r3, [r3, #28]
 800094a:	4a26      	ldr	r2, [pc, #152]	; (80009e4 <HAL_I2C_MspInit+0xf8>)
 800094c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000950:	61d3      	str	r3, [r2, #28]
 8000952:	4b24      	ldr	r3, [pc, #144]	; (80009e4 <HAL_I2C_MspInit+0xf8>)
 8000954:	69db      	ldr	r3, [r3, #28]
 8000956:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel4;
 800095e:	4b23      	ldr	r3, [pc, #140]	; (80009ec <HAL_I2C_MspInit+0x100>)
 8000960:	4a23      	ldr	r2, [pc, #140]	; (80009f0 <HAL_I2C_MspInit+0x104>)
 8000962:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000964:	4b21      	ldr	r3, [pc, #132]	; (80009ec <HAL_I2C_MspInit+0x100>)
 8000966:	2210      	movs	r2, #16
 8000968:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800096a:	4b20      	ldr	r3, [pc, #128]	; (80009ec <HAL_I2C_MspInit+0x100>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000970:	4b1e      	ldr	r3, [pc, #120]	; (80009ec <HAL_I2C_MspInit+0x100>)
 8000972:	2280      	movs	r2, #128	; 0x80
 8000974:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000976:	4b1d      	ldr	r3, [pc, #116]	; (80009ec <HAL_I2C_MspInit+0x100>)
 8000978:	2200      	movs	r2, #0
 800097a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800097c:	4b1b      	ldr	r3, [pc, #108]	; (80009ec <HAL_I2C_MspInit+0x100>)
 800097e:	2200      	movs	r2, #0
 8000980:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000982:	4b1a      	ldr	r3, [pc, #104]	; (80009ec <HAL_I2C_MspInit+0x100>)
 8000984:	2200      	movs	r2, #0
 8000986:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000988:	4b18      	ldr	r3, [pc, #96]	; (80009ec <HAL_I2C_MspInit+0x100>)
 800098a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800098e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000990:	4816      	ldr	r0, [pc, #88]	; (80009ec <HAL_I2C_MspInit+0x100>)
 8000992:	f001 fcfa 	bl	800238a <HAL_DMA_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <HAL_I2C_MspInit+0xb4>
    {
      Error_Handler();
 800099c:	f000 f922 	bl	8000be4 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_I2C1_TX_DMA1_CH4);
 80009a0:	4b14      	ldr	r3, [pc, #80]	; (80009f4 <HAL_I2C_MspInit+0x108>)
 80009a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80009a4:	4a13      	ldr	r2, [pc, #76]	; (80009f4 <HAL_I2C_MspInit+0x108>)
 80009a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009aa:	6513      	str	r3, [r2, #80]	; 0x50

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	4a0f      	ldr	r2, [pc, #60]	; (80009ec <HAL_I2C_MspInit+0x100>)
 80009b0:	639a      	str	r2, [r3, #56]	; 0x38
 80009b2:	4a0e      	ldr	r2, [pc, #56]	; (80009ec <HAL_I2C_MspInit+0x100>)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80009b8:	2200      	movs	r2, #0
 80009ba:	2100      	movs	r1, #0
 80009bc:	201f      	movs	r0, #31
 80009be:	f001 fcae 	bl	800231e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80009c2:	201f      	movs	r0, #31
 80009c4:	f001 fcc7 	bl	8002356 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80009c8:	2200      	movs	r2, #0
 80009ca:	2100      	movs	r1, #0
 80009cc:	2020      	movs	r0, #32
 80009ce:	f001 fca6 	bl	800231e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80009d2:	2020      	movs	r0, #32
 80009d4:	f001 fcbf 	bl	8002356 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80009d8:	bf00      	nop
 80009da:	3728      	adds	r7, #40	; 0x28
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	40005400 	.word	0x40005400
 80009e4:	40021000 	.word	0x40021000
 80009e8:	48000400 	.word	0x48000400
 80009ec:	2000015c 	.word	0x2000015c
 80009f0:	40020044 	.word	0x40020044
 80009f4:	40010000 	.word	0x40010000

080009f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009fc:	f000 fcae 	bl	800135c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a00:	f000 f896 	bl	8000b30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a04:	f7ff fe9c 	bl	8000740 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a08:	f7ff fe6c 	bl	80006e4 <MX_DMA_Init>
  MX_I2C1_Init();
 8000a0c:	f7ff ff30 	bl	8000870 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000a10:	f000 fa2e 	bl	8000e70 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000a14:	f7ff fd16 	bl	8000444 <MX_ADC1_Init>
  MX_CAN_Init();
 8000a18:	f7ff fdec 	bl	80005f4 <MX_CAN_Init>
  MX_USART2_UART_Init();
 8000a1c:	f000 fc00 	bl	8001220 <MX_USART2_UART_Init>
  MX_TIM17_Init();
 8000a20:	f000 fa7c 	bl	8000f1c <MX_TIM17_Init>
  MX_TIM2_Init();
 8000a24:	f000 f9ac 	bl	8000d80 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(100);
 8000a28:	2064      	movs	r0, #100	; 0x64
 8000a2a:	f000 fcfd 	bl	8001428 <HAL_Delay>
  SSD1306_init();
 8000a2e:	f7ff fc11 	bl	8000254 <SSD1306_init>

  HAL_GPIO_WritePin(M2_ENA_GPIO_Port,M2_ENA_Pin,GPIO_PIN_SET);
 8000a32:	2201      	movs	r2, #1
 8000a34:	2101      	movs	r1, #1
 8000a36:	4839      	ldr	r0, [pc, #228]	; (8000b1c <main+0x124>)
 8000a38:	f001 fffc 	bl	8002a34 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(M1_ENA_GPIO_Port,M1_ENA_Pin, GPIO_PIN_SET);
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a46:	f001 fff5 	bl	8002a34 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin( M2_INA_GPIO_Port,M2_INA_Pin, GPIO_PIN_RESET);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2102      	movs	r1, #2
 8000a4e:	4833      	ldr	r0, [pc, #204]	; (8000b1c <main+0x124>)
 8000a50:	f001 fff0 	bl	8002a34 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(M2_INB_GPIO_Port,M2_INB_Pin, GPIO_PIN_RESET);
 8000a54:	2200      	movs	r2, #0
 8000a56:	2110      	movs	r1, #16
 8000a58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a5c:	f001 ffea 	bl	8002a34 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin( M1_INA_GPIO_Port,M1_INA_Pin, GPIO_PIN_RESET);
 8000a60:	2200      	movs	r2, #0
 8000a62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a6a:	f001 ffe3 	bl	8002a34 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(M1_INB_GPIO_Port,M1_INB_Pin, GPIO_PIN_RESET);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a78:	f001 ffdc 	bl	8002a34 <HAL_GPIO_WritePin>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000a7c:	210c      	movs	r1, #12
 8000a7e:	4828      	ldr	r0, [pc, #160]	; (8000b20 <main+0x128>)
 8000a80:	f005 f954 	bl	8005d2c <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8000a84:	2100      	movs	r1, #0
 8000a86:	4827      	ldr	r0, [pc, #156]	; (8000b24 <main+0x12c>)
 8000a88:	f005 f950 	bl	8005d2c <HAL_TIM_PWM_Start>

  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,0);
 8000a8c:	4b24      	ldr	r3, [pc, #144]	; (8000b20 <main+0x128>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	2200      	movs	r2, #0
 8000a92:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_TIM_SET_COMPARE(&htim17,TIM_CHANNEL_1,0);
 8000a94:	4b23      	ldr	r3, [pc, #140]	; (8000b24 <main+0x12c>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2200      	movs	r2, #0
 8000a9a:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000a9c:	213c      	movs	r1, #60	; 0x3c
 8000a9e:	4822      	ldr	r0, [pc, #136]	; (8000b28 <main+0x130>)
 8000aa0:	f005 fad6 	bl	8006050 <HAL_TIM_Encoder_Start>
  HAL_Delay(1000);
 8000aa4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000aa8:	f000 fcbe 	bl	8001428 <HAL_Delay>

  GUI_STARTSCREAN_DRAW();
 8000aac:	f7ff fed8 	bl	8000860 <GUI_STARTSCREAN_DRAW>

  SSD1306_display_repaint();
 8000ab0:	f7ff fc6c 	bl	800038c <SSD1306_display_repaint>
  SSD1306_start_scroll_right(1, 50);
 8000ab4:	2132      	movs	r1, #50	; 0x32
 8000ab6:	2001      	movs	r0, #1
 8000ab8:	f7ff fc8e 	bl	80003d8 <SSD1306_start_scroll_right>
  HAL_Delay(1500);
 8000abc:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000ac0:	f000 fcb2 	bl	8001428 <HAL_Delay>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //da=__HAL_TIM_GET_COMPARE(&htim3,TIM_CHANNEL_1);
	  db= __HAL_TIM_GET_COUNTER(&htim3);
 8000ac4:	4b18      	ldr	r3, [pc, #96]	; (8000b28 <main+0x130>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aca:	4a18      	ldr	r2, [pc, #96]	; (8000b2c <main+0x134>)
 8000acc:	6013      	str	r3, [r2, #0]
	  if (db<0)  db=0 ;
	  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,db*100);
 8000ace:	4b17      	ldr	r3, [pc, #92]	; (8000b2c <main+0x134>)
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	4b13      	ldr	r3, [pc, #76]	; (8000b20 <main+0x128>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	2164      	movs	r1, #100	; 0x64
 8000ad8:	fb01 f202 	mul.w	r2, r1, r2
 8000adc:	641a      	str	r2, [r3, #64]	; 0x40
	  HAL_Delay(2500);
 8000ade:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8000ae2:	f000 fca1 	bl	8001428 <HAL_Delay>



	  HAL_GPIO_WritePin( M2_INA_GPIO_Port,M2_INA_Pin, GPIO_PIN_RESET);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2102      	movs	r1, #2
 8000aea:	480c      	ldr	r0, [pc, #48]	; (8000b1c <main+0x124>)
 8000aec:	f001 ffa2 	bl	8002a34 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(M2_INB_GPIO_Port,M2_INB_Pin, GPIO_PIN_SET);
 8000af0:	2201      	movs	r2, #1
 8000af2:	2110      	movs	r1, #16
 8000af4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000af8:	f001 ff9c 	bl	8002a34 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin( M1_INA_GPIO_Port,M1_INA_Pin, GPIO_PIN_RESET);
 8000afc:	2200      	movs	r2, #0
 8000afe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b06:	f001 ff95 	bl	8002a34 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(M1_INB_GPIO_Port,M1_INB_Pin, GPIO_PIN_SET);
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b14:	f001 ff8e 	bl	8002a34 <HAL_GPIO_WritePin>
	  db= __HAL_TIM_GET_COUNTER(&htim3);
 8000b18:	e7d4      	b.n	8000ac4 <main+0xcc>
 8000b1a:	bf00      	nop
 8000b1c:	48000400 	.word	0x48000400
 8000b20:	2000028c 	.word	0x2000028c
 8000b24:	200001f4 	.word	0x200001f4
 8000b28:	20000240 	.word	0x20000240
 8000b2c:	200001ec 	.word	0x200001ec

08000b30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b096      	sub	sp, #88	; 0x58
 8000b34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b36:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b3a:	2228      	movs	r2, #40	; 0x28
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f006 fd1c 	bl	800757c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b44:	f107 031c 	add.w	r3, r7, #28
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	609a      	str	r2, [r3, #8]
 8000b5e:	60da      	str	r2, [r3, #12]
 8000b60:	611a      	str	r2, [r3, #16]
 8000b62:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b64:	2302      	movs	r3, #2
 8000b66:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b6c:	2310      	movs	r3, #16
 8000b6e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b70:	2302      	movs	r3, #2
 8000b72:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b74:	2300      	movs	r3, #0
 8000b76:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000b78:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000b7c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b7e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b82:	4618      	mov	r0, r3
 8000b84:	f003 fdb6 	bl	80046f4 <HAL_RCC_OscConfig>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000b8e:	f000 f829 	bl	8000be4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b92:	230f      	movs	r3, #15
 8000b94:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b96:	2300      	movs	r3, #0
 8000b98:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ba6:	f107 031c 	add.w	r3, r7, #28
 8000baa:	2100      	movs	r1, #0
 8000bac:	4618      	mov	r0, r3
 8000bae:	f004 fca9 	bl	8005504 <HAL_RCC_ClockConfig>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000bb8:	f000 f814 	bl	8000be4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC12;
 8000bbc:	23a0      	movs	r3, #160	; 0xa0
 8000bbe:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000bc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bc4:	617b      	str	r3, [r7, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bca:	1d3b      	adds	r3, r7, #4
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f004 fecf 	bl	8005970 <HAL_RCCEx_PeriphCLKConfig>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000bd8:	f000 f804 	bl	8000be4 <Error_Handler>
  }
}
 8000bdc:	bf00      	nop
 8000bde:	3758      	adds	r7, #88	; 0x58
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be8:	b672      	cpsid	i
}
 8000bea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bec:	e7fe      	b.n	8000bec <Error_Handler+0x8>
	...

08000bf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bf6:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <HAL_MspInit+0x44>)
 8000bf8:	699b      	ldr	r3, [r3, #24]
 8000bfa:	4a0e      	ldr	r2, [pc, #56]	; (8000c34 <HAL_MspInit+0x44>)
 8000bfc:	f043 0301 	orr.w	r3, r3, #1
 8000c00:	6193      	str	r3, [r2, #24]
 8000c02:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <HAL_MspInit+0x44>)
 8000c04:	699b      	ldr	r3, [r3, #24]
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	607b      	str	r3, [r7, #4]
 8000c0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0e:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <HAL_MspInit+0x44>)
 8000c10:	69db      	ldr	r3, [r3, #28]
 8000c12:	4a08      	ldr	r2, [pc, #32]	; (8000c34 <HAL_MspInit+0x44>)
 8000c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c18:	61d3      	str	r3, [r2, #28]
 8000c1a:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <HAL_MspInit+0x44>)
 8000c1c:	69db      	ldr	r3, [r3, #28]
 8000c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c22:	603b      	str	r3, [r7, #0]
 8000c24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c26:	bf00      	nop
 8000c28:	370c      	adds	r7, #12
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	40021000 	.word	0x40021000

08000c38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <NMI_Handler+0x4>

08000c3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c42:	e7fe      	b.n	8000c42 <HardFault_Handler+0x4>

08000c44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <MemManage_Handler+0x4>

08000c4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c4e:	e7fe      	b.n	8000c4e <BusFault_Handler+0x4>

08000c50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <UsageFault_Handler+0x4>

08000c56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr

08000c64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr

08000c72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c84:	f000 fbb0 	bl	80013e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c88:	bf00      	nop
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000c90:	4802      	ldr	r0, [pc, #8]	; (8000c9c <DMA1_Channel1_IRQHandler+0x10>)
 8000c92:	f001 fc5e 	bl	8002552 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	200000f0 	.word	0x200000f0

08000ca0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000ca4:	4802      	ldr	r0, [pc, #8]	; (8000cb0 <DMA1_Channel4_IRQHandler+0x10>)
 8000ca6:	f001 fc54 	bl	8002552 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	2000015c 	.word	0x2000015c

08000cb4 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim17_ch1_up);
 8000cb8:	4802      	ldr	r0, [pc, #8]	; (8000cc4 <DMA1_Channel7_IRQHandler+0x10>)
 8000cba:	f001 fc4a 	bl	8002552 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	200002d8 	.word	0x200002d8

08000cc8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXT line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000ccc:	4802      	ldr	r0, [pc, #8]	; (8000cd8 <I2C1_EV_IRQHandler+0x10>)
 8000cce:	f002 f963 	bl	8002f98 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	200001a0 	.word	0x200001a0

08000cdc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000ce0:	4802      	ldr	r0, [pc, #8]	; (8000cec <I2C1_ER_IRQHandler+0x10>)
 8000ce2:	f002 f973 	bl	8002fcc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	200001a0 	.word	0x200001a0

08000cf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b086      	sub	sp, #24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cf8:	4a14      	ldr	r2, [pc, #80]	; (8000d4c <_sbrk+0x5c>)
 8000cfa:	4b15      	ldr	r3, [pc, #84]	; (8000d50 <_sbrk+0x60>)
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d04:	4b13      	ldr	r3, [pc, #76]	; (8000d54 <_sbrk+0x64>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d102      	bne.n	8000d12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d0c:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <_sbrk+0x64>)
 8000d0e:	4a12      	ldr	r2, [pc, #72]	; (8000d58 <_sbrk+0x68>)
 8000d10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d12:	4b10      	ldr	r3, [pc, #64]	; (8000d54 <_sbrk+0x64>)
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4413      	add	r3, r2
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d207      	bcs.n	8000d30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d20:	f006 fbfa 	bl	8007518 <__errno>
 8000d24:	4603      	mov	r3, r0
 8000d26:	220c      	movs	r2, #12
 8000d28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d2e:	e009      	b.n	8000d44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d30:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <_sbrk+0x64>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d36:	4b07      	ldr	r3, [pc, #28]	; (8000d54 <_sbrk+0x64>)
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4413      	add	r3, r2
 8000d3e:	4a05      	ldr	r2, [pc, #20]	; (8000d54 <_sbrk+0x64>)
 8000d40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d42:	68fb      	ldr	r3, [r7, #12]
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3718      	adds	r7, #24
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20003000 	.word	0x20003000
 8000d50:	00000400 	.word	0x00000400
 8000d54:	20000094 	.word	0x20000094
 8000d58:	200003b8 	.word	0x200003b8

08000d5c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <SystemInit+0x20>)
 8000d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d66:	4a05      	ldr	r2, [pc, #20]	; (8000d7c <SystemInit+0x20>)
 8000d68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <MX_TIM2_Init>:
TIM_HandleTypeDef htim17;
DMA_HandleTypeDef hdma_tim17_ch1_up;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08e      	sub	sp, #56	; 0x38
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
 8000d8e:	605a      	str	r2, [r3, #4]
 8000d90:	609a      	str	r2, [r3, #8]
 8000d92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d94:	f107 031c 	add.w	r3, r7, #28
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000da0:	463b      	mov	r3, r7
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
 8000da8:	609a      	str	r2, [r3, #8]
 8000daa:	60da      	str	r2, [r3, #12]
 8000dac:	611a      	str	r2, [r3, #16]
 8000dae:	615a      	str	r2, [r3, #20]
 8000db0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000db2:	4b2e      	ldr	r3, [pc, #184]	; (8000e6c <MX_TIM2_Init+0xec>)
 8000db4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000db8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000dba:	4b2c      	ldr	r3, [pc, #176]	; (8000e6c <MX_TIM2_Init+0xec>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc0:	4b2a      	ldr	r3, [pc, #168]	; (8000e6c <MX_TIM2_Init+0xec>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000dc6:	4b29      	ldr	r3, [pc, #164]	; (8000e6c <MX_TIM2_Init+0xec>)
 8000dc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dcc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dce:	4b27      	ldr	r3, [pc, #156]	; (8000e6c <MX_TIM2_Init+0xec>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd4:	4b25      	ldr	r3, [pc, #148]	; (8000e6c <MX_TIM2_Init+0xec>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000dda:	4824      	ldr	r0, [pc, #144]	; (8000e6c <MX_TIM2_Init+0xec>)
 8000ddc:	f004 feee 	bl	8005bbc <HAL_TIM_Base_Init>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000de6:	f7ff fefd 	bl	8000be4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dee:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000df0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000df4:	4619      	mov	r1, r3
 8000df6:	481d      	ldr	r0, [pc, #116]	; (8000e6c <MX_TIM2_Init+0xec>)
 8000df8:	f005 facc 	bl	8006394 <HAL_TIM_ConfigClockSource>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000e02:	f7ff feef 	bl	8000be4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e06:	4819      	ldr	r0, [pc, #100]	; (8000e6c <MX_TIM2_Init+0xec>)
 8000e08:	f004 ff2f 	bl	8005c6a <HAL_TIM_PWM_Init>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000e12:	f7ff fee7 	bl	8000be4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e1e:	f107 031c 	add.w	r3, r7, #28
 8000e22:	4619      	mov	r1, r3
 8000e24:	4811      	ldr	r0, [pc, #68]	; (8000e6c <MX_TIM2_Init+0xec>)
 8000e26:	f005 ff5d 	bl	8006ce4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000e30:	f7ff fed8 	bl	8000be4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e34:	2360      	movs	r3, #96	; 0x60
 8000e36:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 32767;
 8000e38:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8000e3c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e42:	2300      	movs	r3, #0
 8000e44:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e46:	463b      	mov	r3, r7
 8000e48:	220c      	movs	r2, #12
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4807      	ldr	r0, [pc, #28]	; (8000e6c <MX_TIM2_Init+0xec>)
 8000e4e:	f005 f98d 	bl	800616c <HAL_TIM_PWM_ConfigChannel>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000e58:	f7ff fec4 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e5c:	4803      	ldr	r0, [pc, #12]	; (8000e6c <MX_TIM2_Init+0xec>)
 8000e5e:	f000 f985 	bl	800116c <HAL_TIM_MspPostInit>

}
 8000e62:	bf00      	nop
 8000e64:	3738      	adds	r7, #56	; 0x38
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	2000028c 	.word	0x2000028c

08000e70 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08c      	sub	sp, #48	; 0x30
 8000e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e76:	f107 030c 	add.w	r3, r7, #12
 8000e7a:	2224      	movs	r2, #36	; 0x24
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f006 fb7c 	bl	800757c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e84:	463b      	mov	r3, r7
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	605a      	str	r2, [r3, #4]
 8000e8c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e8e:	4b21      	ldr	r3, [pc, #132]	; (8000f14 <MX_TIM3_Init+0xa4>)
 8000e90:	4a21      	ldr	r2, [pc, #132]	; (8000f18 <MX_TIM3_Init+0xa8>)
 8000e92:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4;
 8000e94:	4b1f      	ldr	r3, [pc, #124]	; (8000f14 <MX_TIM3_Init+0xa4>)
 8000e96:	2204      	movs	r2, #4
 8000e98:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e9a:	4b1e      	ldr	r3, [pc, #120]	; (8000f14 <MX_TIM3_Init+0xa4>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000ea0:	4b1c      	ldr	r3, [pc, #112]	; (8000f14 <MX_TIM3_Init+0xa4>)
 8000ea2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ea6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000ea8:	4b1a      	ldr	r3, [pc, #104]	; (8000f14 <MX_TIM3_Init+0xa4>)
 8000eaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eb0:	4b18      	ldr	r3, [pc, #96]	; (8000f14 <MX_TIM3_Init+0xa4>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV4;
 8000ec2:	2308      	movs	r3, #8
 8000ec4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8000ec6:	230f      	movs	r3, #15
 8000ec8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
 8000ed2:	2308      	movs	r3, #8
 8000ed4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8000ed6:	230f      	movs	r3, #15
 8000ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000eda:	f107 030c 	add.w	r3, r7, #12
 8000ede:	4619      	mov	r1, r3
 8000ee0:	480c      	ldr	r0, [pc, #48]	; (8000f14 <MX_TIM3_Init+0xa4>)
 8000ee2:	f005 f80f 	bl	8005f04 <HAL_TIM_Encoder_Init>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000eec:	f7ff fe7a 	bl	8000be4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ef8:	463b      	mov	r3, r7
 8000efa:	4619      	mov	r1, r3
 8000efc:	4805      	ldr	r0, [pc, #20]	; (8000f14 <MX_TIM3_Init+0xa4>)
 8000efe:	f005 fef1 	bl	8006ce4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000f08:	f7ff fe6c 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f0c:	bf00      	nop
 8000f0e:	3730      	adds	r7, #48	; 0x30
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20000240 	.word	0x20000240
 8000f18:	40000400 	.word	0x40000400

08000f1c <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b092      	sub	sp, #72	; 0x48
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	605a      	str	r2, [r3, #4]
 8000f2c:	609a      	str	r2, [r3, #8]
 8000f2e:	60da      	str	r2, [r3, #12]
 8000f30:	611a      	str	r2, [r3, #16]
 8000f32:	615a      	str	r2, [r3, #20]
 8000f34:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f36:	463b      	mov	r3, r7
 8000f38:	222c      	movs	r2, #44	; 0x2c
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f006 fb1d 	bl	800757c <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000f42:	4b32      	ldr	r3, [pc, #200]	; (800100c <MX_TIM17_Init+0xf0>)
 8000f44:	4a32      	ldr	r2, [pc, #200]	; (8001010 <MX_TIM17_Init+0xf4>)
 8000f46:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000f48:	4b30      	ldr	r3, [pc, #192]	; (800100c <MX_TIM17_Init+0xf0>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f4e:	4b2f      	ldr	r3, [pc, #188]	; (800100c <MX_TIM17_Init+0xf0>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8000f54:	4b2d      	ldr	r3, [pc, #180]	; (800100c <MX_TIM17_Init+0xf0>)
 8000f56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f5a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f5c:	4b2b      	ldr	r3, [pc, #172]	; (800100c <MX_TIM17_Init+0xf0>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000f62:	4b2a      	ldr	r3, [pc, #168]	; (800100c <MX_TIM17_Init+0xf0>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f68:	4b28      	ldr	r3, [pc, #160]	; (800100c <MX_TIM17_Init+0xf0>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000f6e:	4827      	ldr	r0, [pc, #156]	; (800100c <MX_TIM17_Init+0xf0>)
 8000f70:	f004 fe24 	bl	8005bbc <HAL_TIM_Base_Init>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8000f7a:	f7ff fe33 	bl	8000be4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000f7e:	4823      	ldr	r0, [pc, #140]	; (800100c <MX_TIM17_Init+0xf0>)
 8000f80:	f004 fe73 	bl	8005c6a <HAL_TIM_PWM_Init>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8000f8a:	f7ff fe2b 	bl	8000be4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f8e:	2360      	movs	r3, #96	; 0x60
 8000f90:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 32767;
 8000f92:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8000f96:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8000fa4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fa8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000faa:	2300      	movs	r3, #0
 8000fac:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4815      	ldr	r0, [pc, #84]	; (800100c <MX_TIM17_Init+0xf0>)
 8000fb8:	f005 f8d8 	bl	800616c <HAL_TIM_PWM_ConfigChannel>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_TIM17_Init+0xaa>
  {
    Error_Handler();
 8000fc2:	f7ff fe0f 	bl	8000be4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000fda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fde:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000fe8:	463b      	mov	r3, r7
 8000fea:	4619      	mov	r1, r3
 8000fec:	4807      	ldr	r0, [pc, #28]	; (800100c <MX_TIM17_Init+0xf0>)
 8000fee:	f005 fee7 	bl	8006dc0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_TIM17_Init+0xe0>
  {
    Error_Handler();
 8000ff8:	f7ff fdf4 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000ffc:	4803      	ldr	r0, [pc, #12]	; (800100c <MX_TIM17_Init+0xf0>)
 8000ffe:	f000 f8b5 	bl	800116c <HAL_TIM_MspPostInit>

}
 8001002:	bf00      	nop
 8001004:	3748      	adds	r7, #72	; 0x48
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	200001f4 	.word	0x200001f4
 8001010:	40014800 	.word	0x40014800

08001014 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001024:	d10c      	bne.n	8001040 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001026:	4b2b      	ldr	r3, [pc, #172]	; (80010d4 <HAL_TIM_Base_MspInit+0xc0>)
 8001028:	69db      	ldr	r3, [r3, #28]
 800102a:	4a2a      	ldr	r2, [pc, #168]	; (80010d4 <HAL_TIM_Base_MspInit+0xc0>)
 800102c:	f043 0301 	orr.w	r3, r3, #1
 8001030:	61d3      	str	r3, [r2, #28]
 8001032:	4b28      	ldr	r3, [pc, #160]	; (80010d4 <HAL_TIM_Base_MspInit+0xc0>)
 8001034:	69db      	ldr	r3, [r3, #28]
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 800103e:	e044      	b.n	80010ca <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM17)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a24      	ldr	r2, [pc, #144]	; (80010d8 <HAL_TIM_Base_MspInit+0xc4>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d13f      	bne.n	80010ca <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800104a:	4b22      	ldr	r3, [pc, #136]	; (80010d4 <HAL_TIM_Base_MspInit+0xc0>)
 800104c:	699b      	ldr	r3, [r3, #24]
 800104e:	4a21      	ldr	r2, [pc, #132]	; (80010d4 <HAL_TIM_Base_MspInit+0xc0>)
 8001050:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001054:	6193      	str	r3, [r2, #24]
 8001056:	4b1f      	ldr	r3, [pc, #124]	; (80010d4 <HAL_TIM_Base_MspInit+0xc0>)
 8001058:	699b      	ldr	r3, [r3, #24]
 800105a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800105e:	60bb      	str	r3, [r7, #8]
 8001060:	68bb      	ldr	r3, [r7, #8]
    hdma_tim17_ch1_up.Instance = DMA1_Channel7;
 8001062:	4b1e      	ldr	r3, [pc, #120]	; (80010dc <HAL_TIM_Base_MspInit+0xc8>)
 8001064:	4a1e      	ldr	r2, [pc, #120]	; (80010e0 <HAL_TIM_Base_MspInit+0xcc>)
 8001066:	601a      	str	r2, [r3, #0]
    hdma_tim17_ch1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001068:	4b1c      	ldr	r3, [pc, #112]	; (80010dc <HAL_TIM_Base_MspInit+0xc8>)
 800106a:	2210      	movs	r2, #16
 800106c:	605a      	str	r2, [r3, #4]
    hdma_tim17_ch1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800106e:	4b1b      	ldr	r3, [pc, #108]	; (80010dc <HAL_TIM_Base_MspInit+0xc8>)
 8001070:	2200      	movs	r2, #0
 8001072:	609a      	str	r2, [r3, #8]
    hdma_tim17_ch1_up.Init.MemInc = DMA_MINC_ENABLE;
 8001074:	4b19      	ldr	r3, [pc, #100]	; (80010dc <HAL_TIM_Base_MspInit+0xc8>)
 8001076:	2280      	movs	r2, #128	; 0x80
 8001078:	60da      	str	r2, [r3, #12]
    hdma_tim17_ch1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800107a:	4b18      	ldr	r3, [pc, #96]	; (80010dc <HAL_TIM_Base_MspInit+0xc8>)
 800107c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001080:	611a      	str	r2, [r3, #16]
    hdma_tim17_ch1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001082:	4b16      	ldr	r3, [pc, #88]	; (80010dc <HAL_TIM_Base_MspInit+0xc8>)
 8001084:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001088:	615a      	str	r2, [r3, #20]
    hdma_tim17_ch1_up.Init.Mode = DMA_NORMAL;
 800108a:	4b14      	ldr	r3, [pc, #80]	; (80010dc <HAL_TIM_Base_MspInit+0xc8>)
 800108c:	2200      	movs	r2, #0
 800108e:	619a      	str	r2, [r3, #24]
    hdma_tim17_ch1_up.Init.Priority = DMA_PRIORITY_LOW;
 8001090:	4b12      	ldr	r3, [pc, #72]	; (80010dc <HAL_TIM_Base_MspInit+0xc8>)
 8001092:	2200      	movs	r2, #0
 8001094:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim17_ch1_up) != HAL_OK)
 8001096:	4811      	ldr	r0, [pc, #68]	; (80010dc <HAL_TIM_Base_MspInit+0xc8>)
 8001098:	f001 f977 	bl	800238a <HAL_DMA_Init>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <HAL_TIM_Base_MspInit+0x92>
      Error_Handler();
 80010a2:	f7ff fd9f 	bl	8000be4 <Error_Handler>
    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM17_DMA1_CH7);
 80010a6:	4b0f      	ldr	r3, [pc, #60]	; (80010e4 <HAL_TIM_Base_MspInit+0xd0>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a0e      	ldr	r2, [pc, #56]	; (80010e4 <HAL_TIM_Base_MspInit+0xd0>)
 80010ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010b0:	6013      	str	r3, [r2, #0]
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim17_ch1_up);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a09      	ldr	r2, [pc, #36]	; (80010dc <HAL_TIM_Base_MspInit+0xc8>)
 80010b6:	625a      	str	r2, [r3, #36]	; 0x24
 80010b8:	4a08      	ldr	r2, [pc, #32]	; (80010dc <HAL_TIM_Base_MspInit+0xc8>)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim17_ch1_up);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a06      	ldr	r2, [pc, #24]	; (80010dc <HAL_TIM_Base_MspInit+0xc8>)
 80010c2:	621a      	str	r2, [r3, #32]
 80010c4:	4a05      	ldr	r2, [pc, #20]	; (80010dc <HAL_TIM_Base_MspInit+0xc8>)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6253      	str	r3, [r2, #36]	; 0x24
}
 80010ca:	bf00      	nop
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40021000 	.word	0x40021000
 80010d8:	40014800 	.word	0x40014800
 80010dc:	200002d8 	.word	0x200002d8
 80010e0:	40020080 	.word	0x40020080
 80010e4:	40010000 	.word	0x40010000

080010e8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08a      	sub	sp, #40	; 0x28
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a17      	ldr	r2, [pc, #92]	; (8001164 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d128      	bne.n	800115c <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800110a:	4b17      	ldr	r3, [pc, #92]	; (8001168 <HAL_TIM_Encoder_MspInit+0x80>)
 800110c:	69db      	ldr	r3, [r3, #28]
 800110e:	4a16      	ldr	r2, [pc, #88]	; (8001168 <HAL_TIM_Encoder_MspInit+0x80>)
 8001110:	f043 0302 	orr.w	r3, r3, #2
 8001114:	61d3      	str	r3, [r2, #28]
 8001116:	4b14      	ldr	r3, [pc, #80]	; (8001168 <HAL_TIM_Encoder_MspInit+0x80>)
 8001118:	69db      	ldr	r3, [r3, #28]
 800111a:	f003 0302 	and.w	r3, r3, #2
 800111e:	613b      	str	r3, [r7, #16]
 8001120:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001122:	4b11      	ldr	r3, [pc, #68]	; (8001168 <HAL_TIM_Encoder_MspInit+0x80>)
 8001124:	695b      	ldr	r3, [r3, #20]
 8001126:	4a10      	ldr	r2, [pc, #64]	; (8001168 <HAL_TIM_Encoder_MspInit+0x80>)
 8001128:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800112c:	6153      	str	r3, [r2, #20]
 800112e:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <HAL_TIM_Encoder_MspInit+0x80>)
 8001130:	695b      	ldr	r3, [r3, #20]
 8001132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_B_Pin|ENC_A_Pin;
 800113a:	23c0      	movs	r3, #192	; 0xc0
 800113c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113e:	2302      	movs	r3, #2
 8001140:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001146:	2300      	movs	r3, #0
 8001148:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800114a:	2302      	movs	r3, #2
 800114c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114e:	f107 0314 	add.w	r3, r7, #20
 8001152:	4619      	mov	r1, r3
 8001154:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001158:	f001 fafa 	bl	8002750 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800115c:	bf00      	nop
 800115e:	3728      	adds	r7, #40	; 0x28
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40000400 	.word	0x40000400
 8001168:	40021000 	.word	0x40021000

0800116c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08a      	sub	sp, #40	; 0x28
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800118c:	d11d      	bne.n	80011ca <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800118e:	4b21      	ldr	r3, [pc, #132]	; (8001214 <HAL_TIM_MspPostInit+0xa8>)
 8001190:	695b      	ldr	r3, [r3, #20]
 8001192:	4a20      	ldr	r2, [pc, #128]	; (8001214 <HAL_TIM_MspPostInit+0xa8>)
 8001194:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001198:	6153      	str	r3, [r2, #20]
 800119a:	4b1e      	ldr	r3, [pc, #120]	; (8001214 <HAL_TIM_MspPostInit+0xa8>)
 800119c:	695b      	ldr	r3, [r3, #20]
 800119e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a2:	613b      	str	r3, [r7, #16]
 80011a4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = M2_PWM_Pin;
 80011a6:	2308      	movs	r3, #8
 80011a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011aa:	2302      	movs	r3, #2
 80011ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b2:	2300      	movs	r3, #0
 80011b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011b6:	2301      	movs	r3, #1
 80011b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(M2_PWM_GPIO_Port, &GPIO_InitStruct);
 80011ba:	f107 0314 	add.w	r3, r7, #20
 80011be:	4619      	mov	r1, r3
 80011c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011c4:	f001 fac4 	bl	8002750 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80011c8:	e020      	b.n	800120c <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM17)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a12      	ldr	r2, [pc, #72]	; (8001218 <HAL_TIM_MspPostInit+0xac>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d11b      	bne.n	800120c <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d4:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <HAL_TIM_MspPostInit+0xa8>)
 80011d6:	695b      	ldr	r3, [r3, #20]
 80011d8:	4a0e      	ldr	r2, [pc, #56]	; (8001214 <HAL_TIM_MspPostInit+0xa8>)
 80011da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011de:	6153      	str	r3, [r2, #20]
 80011e0:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <HAL_TIM_MspPostInit+0xa8>)
 80011e2:	695b      	ldr	r3, [r3, #20]
 80011e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M1_PWM_Pin;
 80011ec:	2320      	movs	r3, #32
 80011ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f0:	2302      	movs	r3, #2
 80011f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f8:	2300      	movs	r3, #0
 80011fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 80011fc:	230a      	movs	r3, #10
 80011fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(M1_PWM_GPIO_Port, &GPIO_InitStruct);
 8001200:	f107 0314 	add.w	r3, r7, #20
 8001204:	4619      	mov	r1, r3
 8001206:	4805      	ldr	r0, [pc, #20]	; (800121c <HAL_TIM_MspPostInit+0xb0>)
 8001208:	f001 faa2 	bl	8002750 <HAL_GPIO_Init>
}
 800120c:	bf00      	nop
 800120e:	3728      	adds	r7, #40	; 0x28
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	40021000 	.word	0x40021000
 8001218:	40014800 	.word	0x40014800
 800121c:	48000400 	.word	0x48000400

08001220 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001224:	4b14      	ldr	r3, [pc, #80]	; (8001278 <MX_USART2_UART_Init+0x58>)
 8001226:	4a15      	ldr	r2, [pc, #84]	; (800127c <MX_USART2_UART_Init+0x5c>)
 8001228:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800122a:	4b13      	ldr	r3, [pc, #76]	; (8001278 <MX_USART2_UART_Init+0x58>)
 800122c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001230:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001232:	4b11      	ldr	r3, [pc, #68]	; (8001278 <MX_USART2_UART_Init+0x58>)
 8001234:	2200      	movs	r2, #0
 8001236:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001238:	4b0f      	ldr	r3, [pc, #60]	; (8001278 <MX_USART2_UART_Init+0x58>)
 800123a:	2200      	movs	r2, #0
 800123c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800123e:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <MX_USART2_UART_Init+0x58>)
 8001240:	2200      	movs	r2, #0
 8001242:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001244:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <MX_USART2_UART_Init+0x58>)
 8001246:	220c      	movs	r2, #12
 8001248:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800124a:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <MX_USART2_UART_Init+0x58>)
 800124c:	2200      	movs	r2, #0
 800124e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001250:	4b09      	ldr	r3, [pc, #36]	; (8001278 <MX_USART2_UART_Init+0x58>)
 8001252:	2200      	movs	r2, #0
 8001254:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001256:	4b08      	ldr	r3, [pc, #32]	; (8001278 <MX_USART2_UART_Init+0x58>)
 8001258:	2200      	movs	r2, #0
 800125a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800125c:	4b06      	ldr	r3, [pc, #24]	; (8001278 <MX_USART2_UART_Init+0x58>)
 800125e:	2200      	movs	r2, #0
 8001260:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001262:	4805      	ldr	r0, [pc, #20]	; (8001278 <MX_USART2_UART_Init+0x58>)
 8001264:	f005 fe24 	bl	8006eb0 <HAL_UART_Init>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800126e:	f7ff fcb9 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	2000031c 	.word	0x2000031c
 800127c:	40004400 	.word	0x40004400

08001280 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08a      	sub	sp, #40	; 0x28
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001288:	f107 0314 	add.w	r3, r7, #20
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a17      	ldr	r2, [pc, #92]	; (80012fc <HAL_UART_MspInit+0x7c>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d127      	bne.n	80012f2 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012a2:	4b17      	ldr	r3, [pc, #92]	; (8001300 <HAL_UART_MspInit+0x80>)
 80012a4:	69db      	ldr	r3, [r3, #28]
 80012a6:	4a16      	ldr	r2, [pc, #88]	; (8001300 <HAL_UART_MspInit+0x80>)
 80012a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ac:	61d3      	str	r3, [r2, #28]
 80012ae:	4b14      	ldr	r3, [pc, #80]	; (8001300 <HAL_UART_MspInit+0x80>)
 80012b0:	69db      	ldr	r3, [r3, #28]
 80012b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b6:	613b      	str	r3, [r7, #16]
 80012b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ba:	4b11      	ldr	r3, [pc, #68]	; (8001300 <HAL_UART_MspInit+0x80>)
 80012bc:	695b      	ldr	r3, [r3, #20]
 80012be:	4a10      	ldr	r2, [pc, #64]	; (8001300 <HAL_UART_MspInit+0x80>)
 80012c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012c4:	6153      	str	r3, [r2, #20]
 80012c6:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <HAL_UART_MspInit+0x80>)
 80012c8:	695b      	ldr	r3, [r3, #20]
 80012ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80012d2:	2318      	movs	r3, #24
 80012d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d6:	2302      	movs	r3, #2
 80012d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012de:	2303      	movs	r3, #3
 80012e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012e2:	2307      	movs	r3, #7
 80012e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e6:	f107 0314 	add.w	r3, r7, #20
 80012ea:	4619      	mov	r1, r3
 80012ec:	4805      	ldr	r0, [pc, #20]	; (8001304 <HAL_UART_MspInit+0x84>)
 80012ee:	f001 fa2f 	bl	8002750 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80012f2:	bf00      	nop
 80012f4:	3728      	adds	r7, #40	; 0x28
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40004400 	.word	0x40004400
 8001300:	40021000 	.word	0x40021000
 8001304:	48000400 	.word	0x48000400

08001308 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001308:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001340 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800130c:	480d      	ldr	r0, [pc, #52]	; (8001344 <LoopForever+0x6>)
  ldr r1, =_edata
 800130e:	490e      	ldr	r1, [pc, #56]	; (8001348 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001310:	4a0e      	ldr	r2, [pc, #56]	; (800134c <LoopForever+0xe>)
  movs r3, #0
 8001312:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001314:	e002      	b.n	800131c <LoopCopyDataInit>

08001316 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001316:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001318:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800131a:	3304      	adds	r3, #4

0800131c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800131c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800131e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001320:	d3f9      	bcc.n	8001316 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001322:	4a0b      	ldr	r2, [pc, #44]	; (8001350 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001324:	4c0b      	ldr	r4, [pc, #44]	; (8001354 <LoopForever+0x16>)
  movs r3, #0
 8001326:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001328:	e001      	b.n	800132e <LoopFillZerobss>

0800132a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800132a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800132c:	3204      	adds	r2, #4

0800132e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800132e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001330:	d3fb      	bcc.n	800132a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001332:	f7ff fd13 	bl	8000d5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001336:	f006 f8f5 	bl	8007524 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800133a:	f7ff fb5d 	bl	80009f8 <main>

0800133e <LoopForever>:

LoopForever:
    b LoopForever
 800133e:	e7fe      	b.n	800133e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001340:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001344:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001348:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800134c:	080076d4 	.word	0x080076d4
  ldr r2, =_sbss
 8001350:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001354:	200003b4 	.word	0x200003b4

08001358 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001358:	e7fe      	b.n	8001358 <ADC1_2_IRQHandler>
	...

0800135c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001360:	4b08      	ldr	r3, [pc, #32]	; (8001384 <HAL_Init+0x28>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a07      	ldr	r2, [pc, #28]	; (8001384 <HAL_Init+0x28>)
 8001366:	f043 0310 	orr.w	r3, r3, #16
 800136a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800136c:	2003      	movs	r0, #3
 800136e:	f000 ffcb 	bl	8002308 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001372:	2000      	movs	r0, #0
 8001374:	f000 f808 	bl	8001388 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001378:	f7ff fc3a 	bl	8000bf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40022000 	.word	0x40022000

08001388 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001390:	4b12      	ldr	r3, [pc, #72]	; (80013dc <HAL_InitTick+0x54>)
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <HAL_InitTick+0x58>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	4619      	mov	r1, r3
 800139a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800139e:	fbb3 f3f1 	udiv	r3, r3, r1
 80013a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013a6:	4618      	mov	r0, r3
 80013a8:	f000 ffe3 	bl	8002372 <HAL_SYSTICK_Config>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e00e      	b.n	80013d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2b0f      	cmp	r3, #15
 80013ba:	d80a      	bhi.n	80013d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013bc:	2200      	movs	r2, #0
 80013be:	6879      	ldr	r1, [r7, #4]
 80013c0:	f04f 30ff 	mov.w	r0, #4294967295
 80013c4:	f000 ffab 	bl	800231e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013c8:	4a06      	ldr	r2, [pc, #24]	; (80013e4 <HAL_InitTick+0x5c>)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80013ce:	2300      	movs	r3, #0
 80013d0:	e000      	b.n	80013d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	20000000 	.word	0x20000000
 80013e0:	20000008 	.word	0x20000008
 80013e4:	20000004 	.word	0x20000004

080013e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013ec:	4b06      	ldr	r3, [pc, #24]	; (8001408 <HAL_IncTick+0x20>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	461a      	mov	r2, r3
 80013f2:	4b06      	ldr	r3, [pc, #24]	; (800140c <HAL_IncTick+0x24>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4413      	add	r3, r2
 80013f8:	4a04      	ldr	r2, [pc, #16]	; (800140c <HAL_IncTick+0x24>)
 80013fa:	6013      	str	r3, [r2, #0]
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	20000008 	.word	0x20000008
 800140c:	200003a0 	.word	0x200003a0

08001410 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  return uwTick;  
 8001414:	4b03      	ldr	r3, [pc, #12]	; (8001424 <HAL_GetTick+0x14>)
 8001416:	681b      	ldr	r3, [r3, #0]
}
 8001418:	4618      	mov	r0, r3
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	200003a0 	.word	0x200003a0

08001428 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001430:	f7ff ffee 	bl	8001410 <HAL_GetTick>
 8001434:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001440:	d005      	beq.n	800144e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001442:	4b0a      	ldr	r3, [pc, #40]	; (800146c <HAL_Delay+0x44>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	461a      	mov	r2, r3
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	4413      	add	r3, r2
 800144c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800144e:	bf00      	nop
 8001450:	f7ff ffde 	bl	8001410 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	68fa      	ldr	r2, [r7, #12]
 800145c:	429a      	cmp	r2, r3
 800145e:	d8f7      	bhi.n	8001450 <HAL_Delay+0x28>
  {
  }
}
 8001460:	bf00      	nop
 8001462:	bf00      	nop
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20000008 	.word	0x20000008

08001470 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b09a      	sub	sp, #104	; 0x68
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001478:	2300      	movs	r3, #0
 800147a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800147e:	2300      	movs	r3, #0
 8001480:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001482:	2300      	movs	r3, #0
 8001484:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d101      	bne.n	8001490 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e172      	b.n	8001776 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	691b      	ldr	r3, [r3, #16]
 8001494:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149a:	f003 0310 	and.w	r3, r3, #16
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d176      	bne.n	8001590 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d152      	bne.n	8001550 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2200      	movs	r2, #0
 80014ae:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2200      	movs	r2, #0
 80014b4:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2200      	movs	r2, #0
 80014c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f7ff f82d 	bl	8000524 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d13b      	bne.n	8001550 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f000 fce3 	bl	8001ea4 <ADC_Disable>
 80014de:	4603      	mov	r3, r0
 80014e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e8:	f003 0310 	and.w	r3, r3, #16
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d12f      	bne.n	8001550 <HAL_ADC_Init+0xe0>
 80014f0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d12b      	bne.n	8001550 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001500:	f023 0302 	bic.w	r3, r3, #2
 8001504:	f043 0202 	orr.w	r2, r3, #2
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	689a      	ldr	r2, [r3, #8]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800151a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	689a      	ldr	r2, [r3, #8]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800152a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800152c:	4b94      	ldr	r3, [pc, #592]	; (8001780 <HAL_ADC_Init+0x310>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a94      	ldr	r2, [pc, #592]	; (8001784 <HAL_ADC_Init+0x314>)
 8001532:	fba2 2303 	umull	r2, r3, r2, r3
 8001536:	0c9a      	lsrs	r2, r3, #18
 8001538:	4613      	mov	r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	4413      	add	r3, r2
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001542:	e002      	b.n	800154a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	3b01      	subs	r3, #1
 8001548:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d1f9      	bne.n	8001544 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d007      	beq.n	800156e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001568:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800156c:	d110      	bne.n	8001590 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	f023 0312 	bic.w	r3, r3, #18
 8001576:	f043 0210 	orr.w	r2, r3, #16
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001582:	f043 0201 	orr.w	r2, r3, #1
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001594:	f003 0310 	and.w	r3, r3, #16
 8001598:	2b00      	cmp	r3, #0
 800159a:	f040 80df 	bne.w	800175c <HAL_ADC_Init+0x2ec>
 800159e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f040 80da 	bne.w	800175c <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	f040 80d2 	bne.w	800175c <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015bc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80015c0:	f043 0202 	orr.w	r2, r3, #2
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015c8:	4b6f      	ldr	r3, [pc, #444]	; (8001788 <HAL_ADC_Init+0x318>)
 80015ca:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015d4:	d102      	bne.n	80015dc <HAL_ADC_Init+0x16c>
 80015d6:	4b6d      	ldr	r3, [pc, #436]	; (800178c <HAL_ADC_Init+0x31c>)
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	e002      	b.n	80015e2 <HAL_ADC_Init+0x172>
 80015dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80015e0:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	f003 0303 	and.w	r3, r3, #3
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d108      	bne.n	8001602 <HAL_ADC_Init+0x192>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d101      	bne.n	8001602 <HAL_ADC_Init+0x192>
 80015fe:	2301      	movs	r3, #1
 8001600:	e000      	b.n	8001604 <HAL_ADC_Init+0x194>
 8001602:	2300      	movs	r3, #0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d11c      	bne.n	8001642 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001608:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800160a:	2b00      	cmp	r3, #0
 800160c:	d010      	beq.n	8001630 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f003 0303 	and.w	r3, r3, #3
 8001616:	2b01      	cmp	r3, #1
 8001618:	d107      	bne.n	800162a <HAL_ADC_Init+0x1ba>
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	2b01      	cmp	r3, #1
 8001624:	d101      	bne.n	800162a <HAL_ADC_Init+0x1ba>
 8001626:	2301      	movs	r3, #1
 8001628:	e000      	b.n	800162c <HAL_ADC_Init+0x1bc>
 800162a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800162c:	2b00      	cmp	r3, #0
 800162e:	d108      	bne.n	8001642 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001630:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	431a      	orrs	r2, r3
 800163e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001640:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	7e5b      	ldrb	r3, [r3, #25]
 8001646:	035b      	lsls	r3, r3, #13
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800164c:	2a01      	cmp	r2, #1
 800164e:	d002      	beq.n	8001656 <HAL_ADC_Init+0x1e6>
 8001650:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001654:	e000      	b.n	8001658 <HAL_ADC_Init+0x1e8>
 8001656:	2200      	movs	r2, #0
 8001658:	431a      	orrs	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	431a      	orrs	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	4313      	orrs	r3, r2
 8001666:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001668:	4313      	orrs	r3, r2
 800166a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d11b      	bne.n	80016ae <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	7e5b      	ldrb	r3, [r3, #25]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d109      	bne.n	8001692 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001682:	3b01      	subs	r3, #1
 8001684:	045a      	lsls	r2, r3, #17
 8001686:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001688:	4313      	orrs	r3, r2
 800168a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800168e:	663b      	str	r3, [r7, #96]	; 0x60
 8001690:	e00d      	b.n	80016ae <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800169a:	f043 0220 	orr.w	r2, r3, #32
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a6:	f043 0201 	orr.w	r2, r3, #1
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d007      	beq.n	80016c6 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016be:	4313      	orrs	r3, r2
 80016c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80016c2:	4313      	orrs	r3, r2
 80016c4:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	f003 030c 	and.w	r3, r3, #12
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d114      	bne.n	80016fe <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	6812      	ldr	r2, [r2, #0]
 80016de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80016e2:	f023 0302 	bic.w	r3, r3, #2
 80016e6:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	7e1b      	ldrb	r3, [r3, #24]
 80016ec:	039a      	lsls	r2, r3, #14
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	4313      	orrs	r3, r2
 80016f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80016fa:	4313      	orrs	r3, r2
 80016fc:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	68da      	ldr	r2, [r3, #12]
 8001704:	4b22      	ldr	r3, [pc, #136]	; (8001790 <HAL_ADC_Init+0x320>)
 8001706:	4013      	ands	r3, r2
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	6812      	ldr	r2, [r2, #0]
 800170c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800170e:	430b      	orrs	r3, r1
 8001710:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	691b      	ldr	r3, [r3, #16]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d10c      	bne.n	8001734 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001720:	f023 010f 	bic.w	r1, r3, #15
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	69db      	ldr	r3, [r3, #28]
 8001728:	1e5a      	subs	r2, r3, #1
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	430a      	orrs	r2, r1
 8001730:	631a      	str	r2, [r3, #48]	; 0x30
 8001732:	e007      	b.n	8001744 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f022 020f 	bic.w	r2, r2, #15
 8001742:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174e:	f023 0303 	bic.w	r3, r3, #3
 8001752:	f043 0201 	orr.w	r2, r3, #1
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	641a      	str	r2, [r3, #64]	; 0x40
 800175a:	e00a      	b.n	8001772 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001760:	f023 0312 	bic.w	r3, r3, #18
 8001764:	f043 0210 	orr.w	r2, r3, #16
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800176c:	2301      	movs	r3, #1
 800176e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001772:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001776:	4618      	mov	r0, r3
 8001778:	3768      	adds	r7, #104	; 0x68
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20000000 	.word	0x20000000
 8001784:	431bde83 	.word	0x431bde83
 8001788:	50000300 	.word	0x50000300
 800178c:	50000100 	.word	0x50000100
 8001790:	fff0c007 	.word	0xfff0c007

08001794 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001794:	b480      	push	{r7}
 8001796:	b09b      	sub	sp, #108	; 0x6c
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800179e:	2300      	movs	r3, #0
 80017a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80017a4:	2300      	movs	r3, #0
 80017a6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d101      	bne.n	80017b6 <HAL_ADC_ConfigChannel+0x22>
 80017b2:	2302      	movs	r3, #2
 80017b4:	e2a5      	b.n	8001d02 <HAL_ADC_ConfigChannel+0x56e>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2201      	movs	r2, #1
 80017ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f003 0304 	and.w	r3, r3, #4
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	f040 8289 	bne.w	8001ce0 <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	2b04      	cmp	r3, #4
 80017d4:	d81c      	bhi.n	8001810 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685a      	ldr	r2, [r3, #4]
 80017e0:	4613      	mov	r3, r2
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	4413      	add	r3, r2
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	461a      	mov	r2, r3
 80017ea:	231f      	movs	r3, #31
 80017ec:	4093      	lsls	r3, r2
 80017ee:	43db      	mvns	r3, r3
 80017f0:	4019      	ands	r1, r3
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	6818      	ldr	r0, [r3, #0]
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685a      	ldr	r2, [r3, #4]
 80017fa:	4613      	mov	r3, r2
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	4413      	add	r3, r2
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	fa00 f203 	lsl.w	r2, r0, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	430a      	orrs	r2, r1
 800180c:	631a      	str	r2, [r3, #48]	; 0x30
 800180e:	e063      	b.n	80018d8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	2b09      	cmp	r3, #9
 8001816:	d81e      	bhi.n	8001856 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685a      	ldr	r2, [r3, #4]
 8001822:	4613      	mov	r3, r2
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	4413      	add	r3, r2
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	3b1e      	subs	r3, #30
 800182c:	221f      	movs	r2, #31
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	43db      	mvns	r3, r3
 8001834:	4019      	ands	r1, r3
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	6818      	ldr	r0, [r3, #0]
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685a      	ldr	r2, [r3, #4]
 800183e:	4613      	mov	r3, r2
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	4413      	add	r3, r2
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	3b1e      	subs	r3, #30
 8001848:	fa00 f203 	lsl.w	r2, r0, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	430a      	orrs	r2, r1
 8001852:	635a      	str	r2, [r3, #52]	; 0x34
 8001854:	e040      	b.n	80018d8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	2b0e      	cmp	r3, #14
 800185c:	d81e      	bhi.n	800189c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685a      	ldr	r2, [r3, #4]
 8001868:	4613      	mov	r3, r2
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	4413      	add	r3, r2
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	3b3c      	subs	r3, #60	; 0x3c
 8001872:	221f      	movs	r2, #31
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	43db      	mvns	r3, r3
 800187a:	4019      	ands	r1, r3
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	6818      	ldr	r0, [r3, #0]
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685a      	ldr	r2, [r3, #4]
 8001884:	4613      	mov	r3, r2
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	4413      	add	r3, r2
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	3b3c      	subs	r3, #60	; 0x3c
 800188e:	fa00 f203 	lsl.w	r2, r0, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	430a      	orrs	r2, r1
 8001898:	639a      	str	r2, [r3, #56]	; 0x38
 800189a:	e01d      	b.n	80018d8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685a      	ldr	r2, [r3, #4]
 80018a6:	4613      	mov	r3, r2
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	4413      	add	r3, r2
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	3b5a      	subs	r3, #90	; 0x5a
 80018b0:	221f      	movs	r2, #31
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	43db      	mvns	r3, r3
 80018b8:	4019      	ands	r1, r3
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	6818      	ldr	r0, [r3, #0]
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685a      	ldr	r2, [r3, #4]
 80018c2:	4613      	mov	r3, r2
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	4413      	add	r3, r2
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	3b5a      	subs	r3, #90	; 0x5a
 80018cc:	fa00 f203 	lsl.w	r2, r0, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	430a      	orrs	r2, r1
 80018d6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f003 030c 	and.w	r3, r3, #12
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	f040 80e5 	bne.w	8001ab2 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2b09      	cmp	r3, #9
 80018ee:	d91c      	bls.n	800192a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6999      	ldr	r1, [r3, #24]
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	4613      	mov	r3, r2
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	4413      	add	r3, r2
 8001900:	3b1e      	subs	r3, #30
 8001902:	2207      	movs	r2, #7
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	43db      	mvns	r3, r3
 800190a:	4019      	ands	r1, r3
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	6898      	ldr	r0, [r3, #8]
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	4613      	mov	r3, r2
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	4413      	add	r3, r2
 800191a:	3b1e      	subs	r3, #30
 800191c:	fa00 f203 	lsl.w	r2, r0, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	430a      	orrs	r2, r1
 8001926:	619a      	str	r2, [r3, #24]
 8001928:	e019      	b.n	800195e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	6959      	ldr	r1, [r3, #20]
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	4613      	mov	r3, r2
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	4413      	add	r3, r2
 800193a:	2207      	movs	r2, #7
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	43db      	mvns	r3, r3
 8001942:	4019      	ands	r1, r3
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	6898      	ldr	r0, [r3, #8]
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	4613      	mov	r3, r2
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	4413      	add	r3, r2
 8001952:	fa00 f203 	lsl.w	r2, r0, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	430a      	orrs	r2, r1
 800195c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	695a      	ldr	r2, [r3, #20]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	08db      	lsrs	r3, r3, #3
 800196a:	f003 0303 	and.w	r3, r3, #3
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	691b      	ldr	r3, [r3, #16]
 800197a:	3b01      	subs	r3, #1
 800197c:	2b03      	cmp	r3, #3
 800197e:	d84f      	bhi.n	8001a20 <HAL_ADC_ConfigChannel+0x28c>
 8001980:	a201      	add	r2, pc, #4	; (adr r2, 8001988 <HAL_ADC_ConfigChannel+0x1f4>)
 8001982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001986:	bf00      	nop
 8001988:	08001999 	.word	0x08001999
 800198c:	080019bb 	.word	0x080019bb
 8001990:	080019dd 	.word	0x080019dd
 8001994:	080019ff 	.word	0x080019ff
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800199e:	4b9e      	ldr	r3, [pc, #632]	; (8001c18 <HAL_ADC_ConfigChannel+0x484>)
 80019a0:	4013      	ands	r3, r2
 80019a2:	683a      	ldr	r2, [r7, #0]
 80019a4:	6812      	ldr	r2, [r2, #0]
 80019a6:	0691      	lsls	r1, r2, #26
 80019a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80019aa:	430a      	orrs	r2, r1
 80019ac:	431a      	orrs	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80019b6:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80019b8:	e07e      	b.n	8001ab8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80019c0:	4b95      	ldr	r3, [pc, #596]	; (8001c18 <HAL_ADC_ConfigChannel+0x484>)
 80019c2:	4013      	ands	r3, r2
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	6812      	ldr	r2, [r2, #0]
 80019c8:	0691      	lsls	r1, r2, #26
 80019ca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80019cc:	430a      	orrs	r2, r1
 80019ce:	431a      	orrs	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80019d8:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80019da:	e06d      	b.n	8001ab8 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80019e2:	4b8d      	ldr	r3, [pc, #564]	; (8001c18 <HAL_ADC_ConfigChannel+0x484>)
 80019e4:	4013      	ands	r3, r2
 80019e6:	683a      	ldr	r2, [r7, #0]
 80019e8:	6812      	ldr	r2, [r2, #0]
 80019ea:	0691      	lsls	r1, r2, #26
 80019ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80019ee:	430a      	orrs	r2, r1
 80019f0:	431a      	orrs	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80019fa:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80019fc:	e05c      	b.n	8001ab8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001a04:	4b84      	ldr	r3, [pc, #528]	; (8001c18 <HAL_ADC_ConfigChannel+0x484>)
 8001a06:	4013      	ands	r3, r2
 8001a08:	683a      	ldr	r2, [r7, #0]
 8001a0a:	6812      	ldr	r2, [r2, #0]
 8001a0c:	0691      	lsls	r1, r2, #26
 8001a0e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a10:	430a      	orrs	r2, r1
 8001a12:	431a      	orrs	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a1c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001a1e:	e04b      	b.n	8001ab8 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a26:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	069b      	lsls	r3, r3, #26
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d107      	bne.n	8001a44 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001a42:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a4a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	069b      	lsls	r3, r3, #26
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d107      	bne.n	8001a68 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001a66:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001a6e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	069b      	lsls	r3, r3, #26
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d107      	bne.n	8001a8c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001a8a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a92:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	069b      	lsls	r3, r3, #26
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d10a      	bne.n	8001ab6 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001aae:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001ab0:	e001      	b.n	8001ab6 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001ab2:	bf00      	nop
 8001ab4:	e000      	b.n	8001ab8 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001ab6:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f003 0303 	and.w	r3, r3, #3
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d108      	bne.n	8001ad8 <HAL_ADC_ConfigChannel+0x344>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0301 	and.w	r3, r3, #1
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d101      	bne.n	8001ad8 <HAL_ADC_ConfigChannel+0x344>
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e000      	b.n	8001ada <HAL_ADC_ConfigChannel+0x346>
 8001ad8:	2300      	movs	r3, #0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	f040 810b 	bne.w	8001cf6 <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d00f      	beq.n	8001b08 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2201      	movs	r2, #1
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	43da      	mvns	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	400a      	ands	r2, r1
 8001b02:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001b06:	e049      	b.n	8001b9c <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2201      	movs	r2, #1
 8001b16:	409a      	lsls	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2b09      	cmp	r3, #9
 8001b28:	d91c      	bls.n	8001b64 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	6999      	ldr	r1, [r3, #24]
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	4613      	mov	r3, r2
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	4413      	add	r3, r2
 8001b3a:	3b1b      	subs	r3, #27
 8001b3c:	2207      	movs	r2, #7
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	43db      	mvns	r3, r3
 8001b44:	4019      	ands	r1, r3
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	6898      	ldr	r0, [r3, #8]
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	4613      	mov	r3, r2
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	4413      	add	r3, r2
 8001b54:	3b1b      	subs	r3, #27
 8001b56:	fa00 f203 	lsl.w	r2, r0, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	619a      	str	r2, [r3, #24]
 8001b62:	e01b      	b.n	8001b9c <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	6959      	ldr	r1, [r3, #20]
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	1c5a      	adds	r2, r3, #1
 8001b70:	4613      	mov	r3, r2
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	4413      	add	r3, r2
 8001b76:	2207      	movs	r2, #7
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	4019      	ands	r1, r3
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	6898      	ldr	r0, [r3, #8]
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	1c5a      	adds	r2, r3, #1
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	4413      	add	r3, r2
 8001b90:	fa00 f203 	lsl.w	r2, r0, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b9c:	4b1f      	ldr	r3, [pc, #124]	; (8001c1c <HAL_ADC_ConfigChannel+0x488>)
 8001b9e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2b10      	cmp	r3, #16
 8001ba6:	d105      	bne.n	8001bb4 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001ba8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d015      	beq.n	8001be0 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001bb8:	2b11      	cmp	r3, #17
 8001bba:	d105      	bne.n	8001bc8 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001bbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d00b      	beq.n	8001be0 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001bcc:	2b12      	cmp	r3, #18
 8001bce:	f040 8092 	bne.w	8001cf6 <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001bd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f040 808b 	bne.w	8001cf6 <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001be8:	d102      	bne.n	8001bf0 <HAL_ADC_ConfigChannel+0x45c>
 8001bea:	4b0d      	ldr	r3, [pc, #52]	; (8001c20 <HAL_ADC_ConfigChannel+0x48c>)
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	e002      	b.n	8001bf6 <HAL_ADC_ConfigChannel+0x462>
 8001bf0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001bf4:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f003 0303 	and.w	r3, r3, #3
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d10f      	bne.n	8001c24 <HAL_ADC_ConfigChannel+0x490>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d108      	bne.n	8001c24 <HAL_ADC_ConfigChannel+0x490>
 8001c12:	2301      	movs	r3, #1
 8001c14:	e007      	b.n	8001c26 <HAL_ADC_ConfigChannel+0x492>
 8001c16:	bf00      	nop
 8001c18:	83fff000 	.word	0x83fff000
 8001c1c:	50000300 	.word	0x50000300
 8001c20:	50000100 	.word	0x50000100
 8001c24:	2300      	movs	r3, #0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d150      	bne.n	8001ccc <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001c2a:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d010      	beq.n	8001c52 <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f003 0303 	and.w	r3, r3, #3
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d107      	bne.n	8001c4c <HAL_ADC_ConfigChannel+0x4b8>
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0301 	and.w	r3, r3, #1
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d101      	bne.n	8001c4c <HAL_ADC_ConfigChannel+0x4b8>
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e000      	b.n	8001c4e <HAL_ADC_ConfigChannel+0x4ba>
 8001c4c:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d13c      	bne.n	8001ccc <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2b10      	cmp	r3, #16
 8001c58:	d11d      	bne.n	8001c96 <HAL_ADC_ConfigChannel+0x502>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c62:	d118      	bne.n	8001c96 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001c64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001c6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c6e:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c70:	4b27      	ldr	r3, [pc, #156]	; (8001d10 <HAL_ADC_ConfigChannel+0x57c>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a27      	ldr	r2, [pc, #156]	; (8001d14 <HAL_ADC_ConfigChannel+0x580>)
 8001c76:	fba2 2303 	umull	r2, r3, r2, r3
 8001c7a:	0c9a      	lsrs	r2, r3, #18
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	4413      	add	r3, r2
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c86:	e002      	b.n	8001c8e <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d1f9      	bne.n	8001c88 <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c94:	e02e      	b.n	8001cf4 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2b11      	cmp	r3, #17
 8001c9c:	d10b      	bne.n	8001cb6 <HAL_ADC_ConfigChannel+0x522>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ca6:	d106      	bne.n	8001cb6 <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001ca8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001cb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cb2:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001cb4:	e01e      	b.n	8001cf4 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2b12      	cmp	r3, #18
 8001cbc:	d11a      	bne.n	8001cf4 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001cbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001cc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cc8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001cca:	e013      	b.n	8001cf4 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd0:	f043 0220 	orr.w	r2, r3, #32
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001cde:	e00a      	b.n	8001cf6 <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce4:	f043 0220 	orr.w	r2, r3, #32
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001cf2:	e000      	b.n	8001cf6 <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001cf4:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001cfe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	376c      	adds	r7, #108	; 0x6c
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	20000000 	.word	0x20000000
 8001d14:	431bde83 	.word	0x431bde83

08001d18 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b099      	sub	sp, #100	; 0x64
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d22:	2300      	movs	r3, #0
 8001d24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d30:	d102      	bne.n	8001d38 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001d32:	4b5a      	ldr	r3, [pc, #360]	; (8001e9c <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8001d34:	60bb      	str	r3, [r7, #8]
 8001d36:	e002      	b.n	8001d3e <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8001d38:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001d3c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d101      	bne.n	8001d48 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e0a2      	b.n	8001e8e <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d101      	bne.n	8001d56 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001d52:	2302      	movs	r3, #2
 8001d54:	e09b      	b.n	8001e8e <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2201      	movs	r2, #1
 8001d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f003 0304 	and.w	r3, r3, #4
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d17f      	bne.n	8001e6c <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f003 0304 	and.w	r3, r3, #4
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d179      	bne.n	8001e6c <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d78:	4b49      	ldr	r3, [pc, #292]	; (8001ea0 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8001d7a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d040      	beq.n	8001e06 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001d84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	6859      	ldr	r1, [r3, #4]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d96:	035b      	lsls	r3, r3, #13
 8001d98:	430b      	orrs	r3, r1
 8001d9a:	431a      	orrs	r2, r3
 8001d9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d9e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f003 0303 	and.w	r3, r3, #3
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d108      	bne.n	8001dc0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0301 	and.w	r3, r3, #1
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d101      	bne.n	8001dc0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e000      	b.n	8001dc2 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d15c      	bne.n	8001e80 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f003 0303 	and.w	r3, r3, #3
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d107      	bne.n	8001de2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d101      	bne.n	8001de2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001dde:	2301      	movs	r3, #1
 8001de0:	e000      	b.n	8001de4 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8001de2:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d14b      	bne.n	8001e80 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001de8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001df0:	f023 030f 	bic.w	r3, r3, #15
 8001df4:	683a      	ldr	r2, [r7, #0]
 8001df6:	6811      	ldr	r1, [r2, #0]
 8001df8:	683a      	ldr	r2, [r7, #0]
 8001dfa:	6892      	ldr	r2, [r2, #8]
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e02:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e04:	e03c      	b.n	8001e80 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001e06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e10:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f003 0303 	and.w	r3, r3, #3
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d108      	bne.n	8001e32 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d101      	bne.n	8001e32 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e000      	b.n	8001e34 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8001e32:	2300      	movs	r3, #0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d123      	bne.n	8001e80 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f003 0303 	and.w	r3, r3, #3
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d107      	bne.n	8001e54 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0301 	and.w	r3, r3, #1
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d101      	bne.n	8001e54 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001e50:	2301      	movs	r3, #1
 8001e52:	e000      	b.n	8001e56 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001e54:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d112      	bne.n	8001e80 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001e5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001e62:	f023 030f 	bic.w	r3, r3, #15
 8001e66:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e68:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e6a:	e009      	b.n	8001e80 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e70:	f043 0220 	orr.w	r2, r3, #32
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001e7e:	e000      	b.n	8001e82 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e80:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001e8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3764      	adds	r7, #100	; 0x64
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	50000100 	.word	0x50000100
 8001ea0:	50000300 	.word	0x50000300

08001ea4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001eac:	2300      	movs	r3, #0
 8001eae:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f003 0303 	and.w	r3, r3, #3
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d108      	bne.n	8001ed0 <ADC_Disable+0x2c>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d101      	bne.n	8001ed0 <ADC_Disable+0x2c>
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e000      	b.n	8001ed2 <ADC_Disable+0x2e>
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d047      	beq.n	8001f66 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f003 030d 	and.w	r3, r3, #13
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d10f      	bne.n	8001f04 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	689a      	ldr	r2, [r3, #8]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f042 0202 	orr.w	r2, r2, #2
 8001ef2:	609a      	str	r2, [r3, #8]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2203      	movs	r2, #3
 8001efa:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001efc:	f7ff fa88 	bl	8001410 <HAL_GetTick>
 8001f00:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001f02:	e029      	b.n	8001f58 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f08:	f043 0210 	orr.w	r2, r3, #16
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f14:	f043 0201 	orr.w	r2, r3, #1
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e023      	b.n	8001f68 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001f20:	f7ff fa76 	bl	8001410 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d914      	bls.n	8001f58 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f003 0301 	and.w	r3, r3, #1
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d10d      	bne.n	8001f58 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f40:	f043 0210 	orr.w	r2, r3, #16
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4c:	f043 0201 	orr.w	r2, r3, #1
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e007      	b.n	8001f68 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d0dc      	beq.n	8001f20 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3710      	adds	r7, #16
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e0ed      	b.n	800215e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d102      	bne.n	8001f94 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f7fe fb64 	bl	800065c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f042 0201 	orr.w	r2, r2, #1
 8001fa2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fa4:	f7ff fa34 	bl	8001410 <HAL_GetTick>
 8001fa8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001faa:	e012      	b.n	8001fd2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001fac:	f7ff fa30 	bl	8001410 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b0a      	cmp	r3, #10
 8001fb8:	d90b      	bls.n	8001fd2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fbe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2205      	movs	r2, #5
 8001fca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e0c5      	b.n	800215e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d0e5      	beq.n	8001fac <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f022 0202 	bic.w	r2, r2, #2
 8001fee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ff0:	f7ff fa0e 	bl	8001410 <HAL_GetTick>
 8001ff4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001ff6:	e012      	b.n	800201e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ff8:	f7ff fa0a 	bl	8001410 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b0a      	cmp	r3, #10
 8002004:	d90b      	bls.n	800201e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2205      	movs	r2, #5
 8002016:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e09f      	b.n	800215e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f003 0302 	and.w	r3, r3, #2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d1e5      	bne.n	8001ff8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	7e1b      	ldrb	r3, [r3, #24]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d108      	bne.n	8002046 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	e007      	b.n	8002056 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002054:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	7e5b      	ldrb	r3, [r3, #25]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d108      	bne.n	8002070 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800206c:	601a      	str	r2, [r3, #0]
 800206e:	e007      	b.n	8002080 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800207e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	7e9b      	ldrb	r3, [r3, #26]
 8002084:	2b01      	cmp	r3, #1
 8002086:	d108      	bne.n	800209a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f042 0220 	orr.w	r2, r2, #32
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	e007      	b.n	80020aa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f022 0220 	bic.w	r2, r2, #32
 80020a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	7edb      	ldrb	r3, [r3, #27]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d108      	bne.n	80020c4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f022 0210 	bic.w	r2, r2, #16
 80020c0:	601a      	str	r2, [r3, #0]
 80020c2:	e007      	b.n	80020d4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f042 0210 	orr.w	r2, r2, #16
 80020d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	7f1b      	ldrb	r3, [r3, #28]
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d108      	bne.n	80020ee <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f042 0208 	orr.w	r2, r2, #8
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	e007      	b.n	80020fe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f022 0208 	bic.w	r2, r2, #8
 80020fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	7f5b      	ldrb	r3, [r3, #29]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d108      	bne.n	8002118 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f042 0204 	orr.w	r2, r2, #4
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	e007      	b.n	8002128 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f022 0204 	bic.w	r2, r2, #4
 8002126:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	431a      	orrs	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	431a      	orrs	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	695b      	ldr	r3, [r3, #20]
 800213c:	ea42 0103 	orr.w	r1, r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	1e5a      	subs	r2, r3, #1
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	430a      	orrs	r2, r1
 800214c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
	...

08002168 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002178:	4b0c      	ldr	r3, [pc, #48]	; (80021ac <__NVIC_SetPriorityGrouping+0x44>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800217e:	68ba      	ldr	r2, [r7, #8]
 8002180:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002184:	4013      	ands	r3, r2
 8002186:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002190:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002194:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002198:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800219a:	4a04      	ldr	r2, [pc, #16]	; (80021ac <__NVIC_SetPriorityGrouping+0x44>)
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	60d3      	str	r3, [r2, #12]
}
 80021a0:	bf00      	nop
 80021a2:	3714      	adds	r7, #20
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	e000ed00 	.word	0xe000ed00

080021b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021b4:	4b04      	ldr	r3, [pc, #16]	; (80021c8 <__NVIC_GetPriorityGrouping+0x18>)
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	0a1b      	lsrs	r3, r3, #8
 80021ba:	f003 0307 	and.w	r3, r3, #7
}
 80021be:	4618      	mov	r0, r3
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	e000ed00 	.word	0xe000ed00

080021cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	4603      	mov	r3, r0
 80021d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	db0b      	blt.n	80021f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021de:	79fb      	ldrb	r3, [r7, #7]
 80021e0:	f003 021f 	and.w	r2, r3, #31
 80021e4:	4907      	ldr	r1, [pc, #28]	; (8002204 <__NVIC_EnableIRQ+0x38>)
 80021e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ea:	095b      	lsrs	r3, r3, #5
 80021ec:	2001      	movs	r0, #1
 80021ee:	fa00 f202 	lsl.w	r2, r0, r2
 80021f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021f6:	bf00      	nop
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	e000e100 	.word	0xe000e100

08002208 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	4603      	mov	r3, r0
 8002210:	6039      	str	r1, [r7, #0]
 8002212:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002218:	2b00      	cmp	r3, #0
 800221a:	db0a      	blt.n	8002232 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	b2da      	uxtb	r2, r3
 8002220:	490c      	ldr	r1, [pc, #48]	; (8002254 <__NVIC_SetPriority+0x4c>)
 8002222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002226:	0112      	lsls	r2, r2, #4
 8002228:	b2d2      	uxtb	r2, r2
 800222a:	440b      	add	r3, r1
 800222c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002230:	e00a      	b.n	8002248 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	b2da      	uxtb	r2, r3
 8002236:	4908      	ldr	r1, [pc, #32]	; (8002258 <__NVIC_SetPriority+0x50>)
 8002238:	79fb      	ldrb	r3, [r7, #7]
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	3b04      	subs	r3, #4
 8002240:	0112      	lsls	r2, r2, #4
 8002242:	b2d2      	uxtb	r2, r2
 8002244:	440b      	add	r3, r1
 8002246:	761a      	strb	r2, [r3, #24]
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr
 8002254:	e000e100 	.word	0xe000e100
 8002258:	e000ed00 	.word	0xe000ed00

0800225c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800225c:	b480      	push	{r7}
 800225e:	b089      	sub	sp, #36	; 0x24
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f003 0307 	and.w	r3, r3, #7
 800226e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	f1c3 0307 	rsb	r3, r3, #7
 8002276:	2b04      	cmp	r3, #4
 8002278:	bf28      	it	cs
 800227a:	2304      	movcs	r3, #4
 800227c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	3304      	adds	r3, #4
 8002282:	2b06      	cmp	r3, #6
 8002284:	d902      	bls.n	800228c <NVIC_EncodePriority+0x30>
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	3b03      	subs	r3, #3
 800228a:	e000      	b.n	800228e <NVIC_EncodePriority+0x32>
 800228c:	2300      	movs	r3, #0
 800228e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002290:	f04f 32ff 	mov.w	r2, #4294967295
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	43da      	mvns	r2, r3
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	401a      	ands	r2, r3
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022a4:	f04f 31ff 	mov.w	r1, #4294967295
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	fa01 f303 	lsl.w	r3, r1, r3
 80022ae:	43d9      	mvns	r1, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022b4:	4313      	orrs	r3, r2
         );
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3724      	adds	r7, #36	; 0x24
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
	...

080022c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	3b01      	subs	r3, #1
 80022d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022d4:	d301      	bcc.n	80022da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022d6:	2301      	movs	r3, #1
 80022d8:	e00f      	b.n	80022fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022da:	4a0a      	ldr	r2, [pc, #40]	; (8002304 <SysTick_Config+0x40>)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	3b01      	subs	r3, #1
 80022e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022e2:	210f      	movs	r1, #15
 80022e4:	f04f 30ff 	mov.w	r0, #4294967295
 80022e8:	f7ff ff8e 	bl	8002208 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022ec:	4b05      	ldr	r3, [pc, #20]	; (8002304 <SysTick_Config+0x40>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022f2:	4b04      	ldr	r3, [pc, #16]	; (8002304 <SysTick_Config+0x40>)
 80022f4:	2207      	movs	r2, #7
 80022f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	e000e010 	.word	0xe000e010

08002308 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f7ff ff29 	bl	8002168 <__NVIC_SetPriorityGrouping>
}
 8002316:	bf00      	nop
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b086      	sub	sp, #24
 8002322:	af00      	add	r7, sp, #0
 8002324:	4603      	mov	r3, r0
 8002326:	60b9      	str	r1, [r7, #8]
 8002328:	607a      	str	r2, [r7, #4]
 800232a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800232c:	2300      	movs	r3, #0
 800232e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002330:	f7ff ff3e 	bl	80021b0 <__NVIC_GetPriorityGrouping>
 8002334:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	68b9      	ldr	r1, [r7, #8]
 800233a:	6978      	ldr	r0, [r7, #20]
 800233c:	f7ff ff8e 	bl	800225c <NVIC_EncodePriority>
 8002340:	4602      	mov	r2, r0
 8002342:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002346:	4611      	mov	r1, r2
 8002348:	4618      	mov	r0, r3
 800234a:	f7ff ff5d 	bl	8002208 <__NVIC_SetPriority>
}
 800234e:	bf00      	nop
 8002350:	3718      	adds	r7, #24
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b082      	sub	sp, #8
 800235a:	af00      	add	r7, sp, #0
 800235c:	4603      	mov	r3, r0
 800235e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff ff31 	bl	80021cc <__NVIC_EnableIRQ>
}
 800236a:	bf00      	nop
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002372:	b580      	push	{r7, lr}
 8002374:	b082      	sub	sp, #8
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f7ff ffa2 	bl	80022c4 <SysTick_Config>
 8002380:	4603      	mov	r3, r0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}

0800238a <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800238a:	b580      	push	{r7, lr}
 800238c:	b084      	sub	sp, #16
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002392:	2300      	movs	r3, #0
 8002394:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d101      	bne.n	80023a0 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e037      	b.n	8002410 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2202      	movs	r2, #2
 80023a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80023b6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80023ba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80023c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	69db      	ldr	r3, [r3, #28]
 80023e2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80023e4:	68fa      	ldr	r2, [r7, #12]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f000 f98c 	bl	8002710 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2201      	movs	r2, #1
 8002402:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800240e:	2300      	movs	r3, #0
}  
 8002410:	4618      	mov	r0, r3
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b086      	sub	sp, #24
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	607a      	str	r2, [r7, #4]
 8002424:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002426:	2300      	movs	r3, #0
 8002428:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d101      	bne.n	8002438 <HAL_DMA_Start_IT+0x20>
 8002434:	2302      	movs	r3, #2
 8002436:	e04a      	b.n	80024ce <HAL_DMA_Start_IT+0xb6>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002446:	2b01      	cmp	r3, #1
 8002448:	d13a      	bne.n	80024c0 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2202      	movs	r2, #2
 800244e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2200      	movs	r2, #0
 8002456:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f022 0201 	bic.w	r2, r2, #1
 8002466:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	68b9      	ldr	r1, [r7, #8]
 800246e:	68f8      	ldr	r0, [r7, #12]
 8002470:	f000 f91f 	bl	80026b2 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002478:	2b00      	cmp	r3, #0
 800247a:	d008      	beq.n	800248e <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f042 020e 	orr.w	r2, r2, #14
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	e00f      	b.n	80024ae <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f042 020a 	orr.w	r2, r2, #10
 800249c:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f022 0204 	bic.w	r2, r2, #4
 80024ac:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f042 0201 	orr.w	r2, r2, #1
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	e005      	b.n	80024cc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80024c8:	2302      	movs	r3, #2
 80024ca:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80024cc:	7dfb      	ldrb	r3, [r7, #23]
} 
 80024ce:	4618      	mov	r0, r3
 80024d0:	3718      	adds	r7, #24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b084      	sub	sp, #16
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024de:	2300      	movs	r3, #0
 80024e0:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d005      	beq.n	80024f8 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2204      	movs	r2, #4
 80024f0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	73fb      	strb	r3, [r7, #15]
 80024f6:	e027      	b.n	8002548 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f022 020e 	bic.w	r2, r2, #14
 8002506:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f022 0201 	bic.w	r2, r2, #1
 8002516:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002520:	2101      	movs	r1, #1
 8002522:	fa01 f202 	lsl.w	r2, r1, r2
 8002526:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800253c:	2b00      	cmp	r3, #0
 800253e:	d003      	beq.n	8002548 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	4798      	blx	r3
    } 
  }
  return status;
 8002548:	7bfb      	ldrb	r3, [r7, #15]
}
 800254a:	4618      	mov	r0, r3
 800254c:	3710      	adds	r7, #16
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b084      	sub	sp, #16
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256e:	2204      	movs	r2, #4
 8002570:	409a      	lsls	r2, r3
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	4013      	ands	r3, r2
 8002576:	2b00      	cmp	r3, #0
 8002578:	d024      	beq.n	80025c4 <HAL_DMA_IRQHandler+0x72>
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	f003 0304 	and.w	r3, r3, #4
 8002580:	2b00      	cmp	r3, #0
 8002582:	d01f      	beq.n	80025c4 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0320 	and.w	r3, r3, #32
 800258e:	2b00      	cmp	r3, #0
 8002590:	d107      	bne.n	80025a2 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f022 0204 	bic.w	r2, r2, #4
 80025a0:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025aa:	2104      	movs	r1, #4
 80025ac:	fa01 f202 	lsl.w	r2, r1, r2
 80025b0:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d06a      	beq.n	8002690 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80025c2:	e065      	b.n	8002690 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c8:	2202      	movs	r2, #2
 80025ca:	409a      	lsls	r2, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	4013      	ands	r3, r2
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d02c      	beq.n	800262e <HAL_DMA_IRQHandler+0xdc>
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d027      	beq.n	800262e <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0320 	and.w	r3, r3, #32
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d10b      	bne.n	8002604 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f022 020a 	bic.w	r2, r2, #10
 80025fa:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800260c:	2102      	movs	r1, #2
 800260e:	fa01 f202 	lsl.w	r2, r1, r2
 8002612:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002620:	2b00      	cmp	r3, #0
 8002622:	d035      	beq.n	8002690 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800262c:	e030      	b.n	8002690 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	2208      	movs	r2, #8
 8002634:	409a      	lsls	r2, r3
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	4013      	ands	r3, r2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d028      	beq.n	8002690 <HAL_DMA_IRQHandler+0x13e>
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	f003 0308 	and.w	r3, r3, #8
 8002644:	2b00      	cmp	r3, #0
 8002646:	d023      	beq.n	8002690 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f022 020e 	bic.w	r2, r2, #14
 8002656:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002660:	2101      	movs	r1, #1
 8002662:	fa01 f202 	lsl.w	r2, r1, r2
 8002666:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2201      	movs	r2, #1
 8002672:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002682:	2b00      	cmp	r3, #0
 8002684:	d004      	beq.n	8002690 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	4798      	blx	r3
    }
  }
}  
 800268e:	e7ff      	b.n	8002690 <HAL_DMA_IRQHandler+0x13e>
 8002690:	bf00      	nop
 8002692:	3710      	adds	r7, #16
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr

080026b2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026b2:	b480      	push	{r7}
 80026b4:	b085      	sub	sp, #20
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	60f8      	str	r0, [r7, #12]
 80026ba:	60b9      	str	r1, [r7, #8]
 80026bc:	607a      	str	r2, [r7, #4]
 80026be:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c8:	2101      	movs	r1, #1
 80026ca:	fa01 f202 	lsl.w	r2, r1, r2
 80026ce:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	2b10      	cmp	r3, #16
 80026de:	d108      	bne.n	80026f2 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	68ba      	ldr	r2, [r7, #8]
 80026ee:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80026f0:	e007      	b.n	8002702 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68ba      	ldr	r2, [r7, #8]
 80026f8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	60da      	str	r2, [r3, #12]
}
 8002702:	bf00      	nop
 8002704:	3714      	adds	r7, #20
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
	...

08002710 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	461a      	mov	r2, r3
 800271e:	4b09      	ldr	r3, [pc, #36]	; (8002744 <DMA_CalcBaseAndBitshift+0x34>)
 8002720:	4413      	add	r3, r2
 8002722:	4a09      	ldr	r2, [pc, #36]	; (8002748 <DMA_CalcBaseAndBitshift+0x38>)
 8002724:	fba2 2303 	umull	r2, r3, r2, r3
 8002728:	091b      	lsrs	r3, r3, #4
 800272a:	009a      	lsls	r2, r3, #2
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4a06      	ldr	r2, [pc, #24]	; (800274c <DMA_CalcBaseAndBitshift+0x3c>)
 8002734:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002736:	bf00      	nop
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	bffdfff8 	.word	0xbffdfff8
 8002748:	cccccccd 	.word	0xcccccccd
 800274c:	40020000 	.word	0x40020000

08002750 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002750:	b480      	push	{r7}
 8002752:	b087      	sub	sp, #28
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800275a:	2300      	movs	r3, #0
 800275c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800275e:	e14e      	b.n	80029fe <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	2101      	movs	r1, #1
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	fa01 f303 	lsl.w	r3, r1, r3
 800276c:	4013      	ands	r3, r2
 800276e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2b00      	cmp	r3, #0
 8002774:	f000 8140 	beq.w	80029f8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f003 0303 	and.w	r3, r3, #3
 8002780:	2b01      	cmp	r3, #1
 8002782:	d005      	beq.n	8002790 <HAL_GPIO_Init+0x40>
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f003 0303 	and.w	r3, r3, #3
 800278c:	2b02      	cmp	r3, #2
 800278e:	d130      	bne.n	80027f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	2203      	movs	r2, #3
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	43db      	mvns	r3, r3
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	4013      	ands	r3, r2
 80027a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	68da      	ldr	r2, [r3, #12]
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	693a      	ldr	r2, [r7, #16]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027c6:	2201      	movs	r2, #1
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	43db      	mvns	r3, r3
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	4013      	ands	r3, r2
 80027d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	091b      	lsrs	r3, r3, #4
 80027dc:	f003 0201 	and.w	r2, r3, #1
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	fa02 f303 	lsl.w	r3, r2, r3
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f003 0303 	and.w	r3, r3, #3
 80027fa:	2b03      	cmp	r3, #3
 80027fc:	d017      	beq.n	800282e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	2203      	movs	r2, #3
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	43db      	mvns	r3, r3
 8002810:	693a      	ldr	r2, [r7, #16]
 8002812:	4013      	ands	r3, r2
 8002814:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	689a      	ldr	r2, [r3, #8]
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	4313      	orrs	r3, r2
 8002826:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f003 0303 	and.w	r3, r3, #3
 8002836:	2b02      	cmp	r3, #2
 8002838:	d123      	bne.n	8002882 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	08da      	lsrs	r2, r3, #3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	3208      	adds	r2, #8
 8002842:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002846:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	f003 0307 	and.w	r3, r3, #7
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	220f      	movs	r2, #15
 8002852:	fa02 f303 	lsl.w	r3, r2, r3
 8002856:	43db      	mvns	r3, r3
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	4013      	ands	r3, r2
 800285c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	691a      	ldr	r2, [r3, #16]
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	f003 0307 	and.w	r3, r3, #7
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	fa02 f303 	lsl.w	r3, r2, r3
 800286e:	693a      	ldr	r2, [r7, #16]
 8002870:	4313      	orrs	r3, r2
 8002872:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	08da      	lsrs	r2, r3, #3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	3208      	adds	r2, #8
 800287c:	6939      	ldr	r1, [r7, #16]
 800287e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	2203      	movs	r2, #3
 800288e:	fa02 f303 	lsl.w	r3, r2, r3
 8002892:	43db      	mvns	r3, r3
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	4013      	ands	r3, r2
 8002898:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f003 0203 	and.w	r2, r3, #3
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	fa02 f303 	lsl.w	r3, r2, r3
 80028aa:	693a      	ldr	r2, [r7, #16]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	f000 809a 	beq.w	80029f8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028c4:	4b55      	ldr	r3, [pc, #340]	; (8002a1c <HAL_GPIO_Init+0x2cc>)
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	4a54      	ldr	r2, [pc, #336]	; (8002a1c <HAL_GPIO_Init+0x2cc>)
 80028ca:	f043 0301 	orr.w	r3, r3, #1
 80028ce:	6193      	str	r3, [r2, #24]
 80028d0:	4b52      	ldr	r3, [pc, #328]	; (8002a1c <HAL_GPIO_Init+0x2cc>)
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	f003 0301 	and.w	r3, r3, #1
 80028d8:	60bb      	str	r3, [r7, #8]
 80028da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80028dc:	4a50      	ldr	r2, [pc, #320]	; (8002a20 <HAL_GPIO_Init+0x2d0>)
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	089b      	lsrs	r3, r3, #2
 80028e2:	3302      	adds	r3, #2
 80028e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	f003 0303 	and.w	r3, r3, #3
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	220f      	movs	r2, #15
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	43db      	mvns	r3, r3
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	4013      	ands	r3, r2
 80028fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002906:	d013      	beq.n	8002930 <HAL_GPIO_Init+0x1e0>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a46      	ldr	r2, [pc, #280]	; (8002a24 <HAL_GPIO_Init+0x2d4>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d00d      	beq.n	800292c <HAL_GPIO_Init+0x1dc>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a45      	ldr	r2, [pc, #276]	; (8002a28 <HAL_GPIO_Init+0x2d8>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d007      	beq.n	8002928 <HAL_GPIO_Init+0x1d8>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a44      	ldr	r2, [pc, #272]	; (8002a2c <HAL_GPIO_Init+0x2dc>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d101      	bne.n	8002924 <HAL_GPIO_Init+0x1d4>
 8002920:	2303      	movs	r3, #3
 8002922:	e006      	b.n	8002932 <HAL_GPIO_Init+0x1e2>
 8002924:	2305      	movs	r3, #5
 8002926:	e004      	b.n	8002932 <HAL_GPIO_Init+0x1e2>
 8002928:	2302      	movs	r3, #2
 800292a:	e002      	b.n	8002932 <HAL_GPIO_Init+0x1e2>
 800292c:	2301      	movs	r3, #1
 800292e:	e000      	b.n	8002932 <HAL_GPIO_Init+0x1e2>
 8002930:	2300      	movs	r3, #0
 8002932:	697a      	ldr	r2, [r7, #20]
 8002934:	f002 0203 	and.w	r2, r2, #3
 8002938:	0092      	lsls	r2, r2, #2
 800293a:	4093      	lsls	r3, r2
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	4313      	orrs	r3, r2
 8002940:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002942:	4937      	ldr	r1, [pc, #220]	; (8002a20 <HAL_GPIO_Init+0x2d0>)
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	089b      	lsrs	r3, r3, #2
 8002948:	3302      	adds	r3, #2
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002950:	4b37      	ldr	r3, [pc, #220]	; (8002a30 <HAL_GPIO_Init+0x2e0>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	43db      	mvns	r3, r3
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	4013      	ands	r3, r2
 800295e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d003      	beq.n	8002974 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	4313      	orrs	r3, r2
 8002972:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002974:	4a2e      	ldr	r2, [pc, #184]	; (8002a30 <HAL_GPIO_Init+0x2e0>)
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800297a:	4b2d      	ldr	r3, [pc, #180]	; (8002a30 <HAL_GPIO_Init+0x2e0>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	43db      	mvns	r3, r3
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	4013      	ands	r3, r2
 8002988:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d003      	beq.n	800299e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002996:	693a      	ldr	r2, [r7, #16]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	4313      	orrs	r3, r2
 800299c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800299e:	4a24      	ldr	r2, [pc, #144]	; (8002a30 <HAL_GPIO_Init+0x2e0>)
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029a4:	4b22      	ldr	r3, [pc, #136]	; (8002a30 <HAL_GPIO_Init+0x2e0>)
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	43db      	mvns	r3, r3
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	4013      	ands	r3, r2
 80029b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d003      	beq.n	80029c8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80029c0:	693a      	ldr	r2, [r7, #16]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80029c8:	4a19      	ldr	r2, [pc, #100]	; (8002a30 <HAL_GPIO_Init+0x2e0>)
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029ce:	4b18      	ldr	r3, [pc, #96]	; (8002a30 <HAL_GPIO_Init+0x2e0>)
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	43db      	mvns	r3, r3
 80029d8:	693a      	ldr	r2, [r7, #16]
 80029da:	4013      	ands	r3, r2
 80029dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d003      	beq.n	80029f2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80029ea:	693a      	ldr	r2, [r7, #16]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80029f2:	4a0f      	ldr	r2, [pc, #60]	; (8002a30 <HAL_GPIO_Init+0x2e0>)
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	3301      	adds	r3, #1
 80029fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	fa22 f303 	lsr.w	r3, r2, r3
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	f47f aea9 	bne.w	8002760 <HAL_GPIO_Init+0x10>
  }
}
 8002a0e:	bf00      	nop
 8002a10:	bf00      	nop
 8002a12:	371c      	adds	r7, #28
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr
 8002a1c:	40021000 	.word	0x40021000
 8002a20:	40010000 	.word	0x40010000
 8002a24:	48000400 	.word	0x48000400
 8002a28:	48000800 	.word	0x48000800
 8002a2c:	48000c00 	.word	0x48000c00
 8002a30:	40010400 	.word	0x40010400

08002a34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	807b      	strh	r3, [r7, #2]
 8002a40:	4613      	mov	r3, r2
 8002a42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a44:	787b      	ldrb	r3, [r7, #1]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a4a:	887a      	ldrh	r2, [r7, #2]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a50:	e002      	b.n	8002a58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a52:	887a      	ldrh	r2, [r7, #2]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e081      	b.n	8002b7a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d106      	bne.n	8002a90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f7fd ff2e 	bl	80008ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2224      	movs	r2, #36	; 0x24
 8002a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f022 0201 	bic.w	r2, r2, #1
 8002aa6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685a      	ldr	r2, [r3, #4]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ab4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	689a      	ldr	r2, [r3, #8]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ac4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d107      	bne.n	8002ade <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	689a      	ldr	r2, [r3, #8]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ada:	609a      	str	r2, [r3, #8]
 8002adc:	e006      	b.n	8002aec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	689a      	ldr	r2, [r3, #8]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002aea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d104      	bne.n	8002afe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002afc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	6812      	ldr	r2, [r2, #0]
 8002b08:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b10:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68da      	ldr	r2, [r3, #12]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b20:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	691a      	ldr	r2, [r3, #16]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	69d9      	ldr	r1, [r3, #28]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a1a      	ldr	r2, [r3, #32]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f042 0201 	orr.w	r2, r2, #1
 8002b5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2220      	movs	r2, #32
 8002b66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
	...

08002b84 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b088      	sub	sp, #32
 8002b88:	af02      	add	r7, sp, #8
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	4608      	mov	r0, r1
 8002b8e:	4611      	mov	r1, r2
 8002b90:	461a      	mov	r2, r3
 8002b92:	4603      	mov	r3, r0
 8002b94:	817b      	strh	r3, [r7, #10]
 8002b96:	460b      	mov	r3, r1
 8002b98:	813b      	strh	r3, [r7, #8]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b20      	cmp	r3, #32
 8002ba8:	f040 80f9 	bne.w	8002d9e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bac:	6a3b      	ldr	r3, [r7, #32]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d002      	beq.n	8002bb8 <HAL_I2C_Mem_Write+0x34>
 8002bb2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d105      	bne.n	8002bc4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bbe:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e0ed      	b.n	8002da0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d101      	bne.n	8002bd2 <HAL_I2C_Mem_Write+0x4e>
 8002bce:	2302      	movs	r3, #2
 8002bd0:	e0e6      	b.n	8002da0 <HAL_I2C_Mem_Write+0x21c>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002bda:	f7fe fc19 	bl	8001410 <HAL_GetTick>
 8002bde:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	9300      	str	r3, [sp, #0]
 8002be4:	2319      	movs	r3, #25
 8002be6:	2201      	movs	r2, #1
 8002be8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f001 fac6 	bl	800417e <I2C_WaitOnFlagUntilTimeout>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d001      	beq.n	8002bfc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e0d1      	b.n	8002da0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2221      	movs	r2, #33	; 0x21
 8002c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2240      	movs	r2, #64	; 0x40
 8002c08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6a3a      	ldr	r2, [r7, #32]
 8002c16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2200      	movs	r2, #0
 8002c22:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c24:	88f8      	ldrh	r0, [r7, #6]
 8002c26:	893a      	ldrh	r2, [r7, #8]
 8002c28:	8979      	ldrh	r1, [r7, #10]
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	9301      	str	r3, [sp, #4]
 8002c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c30:	9300      	str	r3, [sp, #0]
 8002c32:	4603      	mov	r3, r0
 8002c34:	68f8      	ldr	r0, [r7, #12]
 8002c36:	f000 fd69 	bl	800370c <I2C_RequestMemoryWrite>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d005      	beq.n	8002c4c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e0a9      	b.n	8002da0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	2bff      	cmp	r3, #255	; 0xff
 8002c54:	d90e      	bls.n	8002c74 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	22ff      	movs	r2, #255	; 0xff
 8002c5a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c60:	b2da      	uxtb	r2, r3
 8002c62:	8979      	ldrh	r1, [r7, #10]
 8002c64:	2300      	movs	r3, #0
 8002c66:	9300      	str	r3, [sp, #0]
 8002c68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f001 fbb9 	bl	80043e4 <I2C_TransferConfig>
 8002c72:	e00f      	b.n	8002c94 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c82:	b2da      	uxtb	r2, r3
 8002c84:	8979      	ldrh	r1, [r7, #10]
 8002c86:	2300      	movs	r3, #0
 8002c88:	9300      	str	r3, [sp, #0]
 8002c8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c8e:	68f8      	ldr	r0, [r7, #12]
 8002c90:	f001 fba8 	bl	80043e4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c94:	697a      	ldr	r2, [r7, #20]
 8002c96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c98:	68f8      	ldr	r0, [r7, #12]
 8002c9a:	f001 fab0 	bl	80041fe <I2C_WaitOnTXISFlagUntilTimeout>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e07b      	b.n	8002da0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cac:	781a      	ldrb	r2, [r3, #0]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb8:	1c5a      	adds	r2, r3, #1
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d034      	beq.n	8002d4c <HAL_I2C_Mem_Write+0x1c8>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d130      	bne.n	8002d4c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	9300      	str	r3, [sp, #0]
 8002cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	2180      	movs	r1, #128	; 0x80
 8002cf4:	68f8      	ldr	r0, [r7, #12]
 8002cf6:	f001 fa42 	bl	800417e <I2C_WaitOnFlagUntilTimeout>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e04d      	b.n	8002da0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	2bff      	cmp	r3, #255	; 0xff
 8002d0c:	d90e      	bls.n	8002d2c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	22ff      	movs	r2, #255	; 0xff
 8002d12:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d18:	b2da      	uxtb	r2, r3
 8002d1a:	8979      	ldrh	r1, [r7, #10]
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	9300      	str	r3, [sp, #0]
 8002d20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d24:	68f8      	ldr	r0, [r7, #12]
 8002d26:	f001 fb5d 	bl	80043e4 <I2C_TransferConfig>
 8002d2a:	e00f      	b.n	8002d4c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d30:	b29a      	uxth	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d3a:	b2da      	uxtb	r2, r3
 8002d3c:	8979      	ldrh	r1, [r7, #10]
 8002d3e:	2300      	movs	r3, #0
 8002d40:	9300      	str	r3, [sp, #0]
 8002d42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d46:	68f8      	ldr	r0, [r7, #12]
 8002d48:	f001 fb4c 	bl	80043e4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d19e      	bne.n	8002c94 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d56:	697a      	ldr	r2, [r7, #20]
 8002d58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f001 fa8f 	bl	800427e <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d001      	beq.n	8002d6a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e01a      	b.n	8002da0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2220      	movs	r2, #32
 8002d70:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	6859      	ldr	r1, [r3, #4]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	4b0a      	ldr	r3, [pc, #40]	; (8002da8 <HAL_I2C_Mem_Write+0x224>)
 8002d7e:	400b      	ands	r3, r1
 8002d80:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2220      	movs	r2, #32
 8002d86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	e000      	b.n	8002da0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002d9e:	2302      	movs	r3, #2
  }
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3718      	adds	r7, #24
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	fe00e800 	.word	0xfe00e800

08002dac <HAL_I2C_Mem_Write_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                        uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b08a      	sub	sp, #40	; 0x28
 8002db0:	af02      	add	r7, sp, #8
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	4608      	mov	r0, r1
 8002db6:	4611      	mov	r1, r2
 8002db8:	461a      	mov	r2, r3
 8002dba:	4603      	mov	r3, r0
 8002dbc:	817b      	strh	r3, [r7, #10]
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	813b      	strh	r3, [r7, #8]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b20      	cmp	r3, #32
 8002dd0:	f040 80d5 	bne.w	8002f7e <HAL_I2C_Mem_Write_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d002      	beq.n	8002de0 <HAL_I2C_Mem_Write_DMA+0x34>
 8002dda:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d105      	bne.n	8002dec <HAL_I2C_Mem_Write_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002de6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e0c9      	b.n	8002f80 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002df6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dfa:	d101      	bne.n	8002e00 <HAL_I2C_Mem_Write_DMA+0x54>
    {
      return HAL_BUSY;
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	e0bf      	b.n	8002f80 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d101      	bne.n	8002e0e <HAL_I2C_Mem_Write_DMA+0x62>
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	e0b8      	b.n	8002f80 <HAL_I2C_Mem_Write_DMA+0x1d4>
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2201      	movs	r2, #1
 8002e12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002e16:	f7fe fafb 	bl	8001410 <HAL_GetTick>
 8002e1a:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2221      	movs	r2, #33	; 0x21
 8002e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2240      	movs	r2, #64	; 0x40
 8002e28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8002e3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	4a51      	ldr	r2, [pc, #324]	; (8002f88 <HAL_I2C_Mem_Write_DMA+0x1dc>)
 8002e42:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	4a51      	ldr	r2, [pc, #324]	; (8002f8c <HAL_I2C_Mem_Write_DMA+0x1e0>)
 8002e48:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	2bff      	cmp	r3, #255	; 0xff
 8002e52:	d906      	bls.n	8002e62 <HAL_I2C_Mem_Write_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	22ff      	movs	r2, #255	; 0xff
 8002e58:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8002e5a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e5e:	61fb      	str	r3, [r7, #28]
 8002e60:	e007      	b.n	8002e72 <HAL_I2C_Mem_Write_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002e6c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e70:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart)
 8002e72:	88f8      	ldrh	r0, [r7, #6]
 8002e74:	893a      	ldrh	r2, [r7, #8]
 8002e76:	8979      	ldrh	r1, [r7, #10]
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	9301      	str	r3, [sp, #4]
 8002e7c:	2319      	movs	r3, #25
 8002e7e:	9300      	str	r3, [sp, #0]
 8002e80:	4603      	mov	r3, r0
 8002e82:	68f8      	ldr	r0, [r7, #12]
 8002e84:	f000 fc42 	bl	800370c <I2C_RequestMemoryWrite>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d005      	beq.n	8002e9a <HAL_I2C_Mem_Write_DMA+0xee>
        != HAL_OK)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e072      	b.n	8002f80 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }


    if (hi2c->hdmatx != NULL)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d020      	beq.n	8002ee4 <HAL_I2C_Mem_Write_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea6:	4a3a      	ldr	r2, [pc, #232]	; (8002f90 <HAL_I2C_Mem_Write_DMA+0x1e4>)
 8002ea8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eae:	4a39      	ldr	r2, [pc, #228]	; (8002f94 <HAL_I2C_Mem_Write_DMA+0x1e8>)
 8002eb0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->hdmatx->XferAbortCallback = NULL;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002ec6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	3328      	adds	r3, #40	; 0x28
 8002ece:	461a      	mov	r2, r3
                                       hi2c->XferSize);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8002ed4:	f7ff faa0 	bl	8002418 <HAL_DMA_Start_IT>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8002edc:	7dfb      	ldrb	r3, [r7, #23]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d139      	bne.n	8002f56 <HAL_I2C_Mem_Write_DMA+0x1aa>
 8002ee2:	e013      	b.n	8002f0c <HAL_I2C_Mem_Write_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2220      	movs	r2, #32
 8002ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e039      	b.n	8002f80 <HAL_I2C_Mem_Write_DMA+0x1d4>
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f10:	b2da      	uxtb	r2, r3
 8002f12:	8979      	ldrh	r1, [r7, #10]
 8002f14:	2300      	movs	r3, #0
 8002f16:	9300      	str	r3, [sp, #0]
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f001 fa62 	bl	80043e4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	b29a      	uxth	r2, r3
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002f3a:	2110      	movs	r1, #16
 8002f3c:	68f8      	ldr	r0, [r7, #12]
 8002f3e:	f001 fa7f 	bl	8004440 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f50:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8002f52:	2300      	movs	r3, #0
 8002f54:	e014      	b.n	8002f80 <HAL_I2C_Mem_Write_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2220      	movs	r2, #32
 8002f5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f6a:	f043 0210 	orr.w	r2, r3, #16
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e000      	b.n	8002f80 <HAL_I2C_Mem_Write_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 8002f7e:	2302      	movs	r3, #2
  }
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3720      	adds	r7, #32
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	ffff0000 	.word	0xffff0000
 8002f8c:	08003365 	.word	0x08003365
 8002f90:	0800407f 	.word	0x0800407f
 8002f94:	08004115 	.word	0x08004115

08002f98 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d005      	beq.n	8002fc4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fbc:	68ba      	ldr	r2, [r7, #8]
 8002fbe:	68f9      	ldr	r1, [r7, #12]
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	4798      	blx	r3
  }
}
 8002fc4:	bf00      	nop
 8002fc6:	3710      	adds	r7, #16
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b086      	sub	sp, #24
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	0a1b      	lsrs	r3, r3, #8
 8002fe8:	f003 0301 	and.w	r3, r3, #1
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d010      	beq.n	8003012 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	09db      	lsrs	r3, r3, #7
 8002ff4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d00a      	beq.n	8003012 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003000:	f043 0201 	orr.w	r2, r3, #1
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003010:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	0a9b      	lsrs	r3, r3, #10
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	2b00      	cmp	r3, #0
 800301c:	d010      	beq.n	8003040 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	09db      	lsrs	r3, r3, #7
 8003022:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00a      	beq.n	8003040 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800302e:	f043 0208 	orr.w	r2, r3, #8
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800303e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	0a5b      	lsrs	r3, r3, #9
 8003044:	f003 0301 	and.w	r3, r3, #1
 8003048:	2b00      	cmp	r3, #0
 800304a:	d010      	beq.n	800306e <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	09db      	lsrs	r3, r3, #7
 8003050:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003054:	2b00      	cmp	r3, #0
 8003056:	d00a      	beq.n	800306e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305c:	f043 0202 	orr.w	r2, r3, #2
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f44f 7200 	mov.w	r2, #512	; 0x200
 800306c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003072:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f003 030b 	and.w	r3, r3, #11
 800307a:	2b00      	cmp	r3, #0
 800307c:	d003      	beq.n	8003086 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800307e:	68f9      	ldr	r1, [r7, #12]
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f000 fee1 	bl	8003e48 <I2C_ITError>
  }
}
 8003086:	bf00      	nop
 8003088:	3718      	adds	r7, #24
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800308e:	b480      	push	{r7}
 8003090:	b083      	sub	sp, #12
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003096:	bf00      	nop
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80030a2:	b480      	push	{r7}
 80030a4:	b083      	sub	sp, #12
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80030aa:	bf00      	nop
 80030ac:	370c      	adds	r7, #12
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr

080030b6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80030b6:	b480      	push	{r7}
 80030b8:	b083      	sub	sp, #12
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80030be:	bf00      	nop
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr

080030ca <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80030ca:	b480      	push	{r7}
 80030cc:	b083      	sub	sp, #12
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80030d2:	bf00      	nop
 80030d4:	370c      	adds	r7, #12
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr

080030de <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80030de:	b480      	push	{r7}
 80030e0:	b083      	sub	sp, #12
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
 80030e6:	460b      	mov	r3, r1
 80030e8:	70fb      	strb	r3, [r7, #3]
 80030ea:	4613      	mov	r3, r2
 80030ec:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80030ee:	bf00      	nop
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr

080030fa <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80030fa:	b480      	push	{r7}
 80030fc:	b083      	sub	sp, #12
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003102:	bf00      	nop
 8003104:	370c      	adds	r7, #12
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr

0800310e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800310e:	b480      	push	{r7}
 8003110:	b083      	sub	sp, #12
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003116:	bf00      	nop
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr

08003122 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003122:	b480      	push	{r7}
 8003124:	b083      	sub	sp, #12
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800312a:	bf00      	nop
 800312c:	370c      	adds	r7, #12
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr

08003136 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003136:	b480      	push	{r7}
 8003138:	b083      	sub	sp, #12
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800313e:	bf00      	nop
 8003140:	370c      	adds	r7, #12
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr

0800314a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800314a:	b480      	push	{r7}
 800314c:	b083      	sub	sp, #12
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003152:	bf00      	nop
 8003154:	370c      	adds	r7, #12
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr

0800315e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800315e:	b580      	push	{r7, lr}
 8003160:	b086      	sub	sp, #24
 8003162:	af00      	add	r7, sp, #0
 8003164:	60f8      	str	r0, [r7, #12]
 8003166:	60b9      	str	r1, [r7, #8]
 8003168:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800317a:	2b01      	cmp	r3, #1
 800317c:	d101      	bne.n	8003182 <I2C_Slave_ISR_IT+0x24>
 800317e:	2302      	movs	r3, #2
 8003180:	e0ec      	b.n	800335c <I2C_Slave_ISR_IT+0x1fe>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2201      	movs	r2, #1
 8003186:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	095b      	lsrs	r3, r3, #5
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	2b00      	cmp	r3, #0
 8003194:	d009      	beq.n	80031aa <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	095b      	lsrs	r3, r3, #5
 800319a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d003      	beq.n	80031aa <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80031a2:	6939      	ldr	r1, [r7, #16]
 80031a4:	68f8      	ldr	r0, [r7, #12]
 80031a6:	f000 fcef 	bl	8003b88 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	091b      	lsrs	r3, r3, #4
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d04d      	beq.n	8003252 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	091b      	lsrs	r3, r3, #4
 80031ba:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d047      	beq.n	8003252 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d128      	bne.n	800321e <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	2b28      	cmp	r3, #40	; 0x28
 80031d6:	d108      	bne.n	80031ea <I2C_Slave_ISR_IT+0x8c>
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80031de:	d104      	bne.n	80031ea <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80031e0:	6939      	ldr	r1, [r7, #16]
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	f000 fdda 	bl	8003d9c <I2C_ITListenCplt>
 80031e8:	e032      	b.n	8003250 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b29      	cmp	r3, #41	; 0x29
 80031f4:	d10e      	bne.n	8003214 <I2C_Slave_ISR_IT+0xb6>
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031fc:	d00a      	beq.n	8003214 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2210      	movs	r2, #16
 8003204:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f000 ff15 	bl	8004036 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800320c:	68f8      	ldr	r0, [r7, #12]
 800320e:	f000 fb92 	bl	8003936 <I2C_ITSlaveSeqCplt>
 8003212:	e01d      	b.n	8003250 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2210      	movs	r2, #16
 800321a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800321c:	e096      	b.n	800334c <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2210      	movs	r2, #16
 8003224:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322a:	f043 0204 	orr.w	r2, r3, #4
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d004      	beq.n	8003242 <I2C_Slave_ISR_IT+0xe4>
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800323e:	f040 8085 	bne.w	800334c <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003246:	4619      	mov	r1, r3
 8003248:	68f8      	ldr	r0, [r7, #12]
 800324a:	f000 fdfd 	bl	8003e48 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800324e:	e07d      	b.n	800334c <I2C_Slave_ISR_IT+0x1ee>
 8003250:	e07c      	b.n	800334c <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	089b      	lsrs	r3, r3, #2
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b00      	cmp	r3, #0
 800325c:	d030      	beq.n	80032c0 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	089b      	lsrs	r3, r3, #2
 8003262:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003266:	2b00      	cmp	r3, #0
 8003268:	d02a      	beq.n	80032c0 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800326e:	b29b      	uxth	r3, r3
 8003270:	2b00      	cmp	r3, #0
 8003272:	d018      	beq.n	80032a6 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327e:	b2d2      	uxtb	r2, r2
 8003280:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003286:	1c5a      	adds	r2, r3, #1
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003290:	3b01      	subs	r3, #1
 8003292:	b29a      	uxth	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800329c:	b29b      	uxth	r3, r3
 800329e:	3b01      	subs	r3, #1
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d14f      	bne.n	8003350 <I2C_Slave_ISR_IT+0x1f2>
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80032b6:	d04b      	beq.n	8003350 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80032b8:	68f8      	ldr	r0, [r7, #12]
 80032ba:	f000 fb3c 	bl	8003936 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80032be:	e047      	b.n	8003350 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	08db      	lsrs	r3, r3, #3
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d00a      	beq.n	80032e2 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	08db      	lsrs	r3, r3, #3
 80032d0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d004      	beq.n	80032e2 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80032d8:	6939      	ldr	r1, [r7, #16]
 80032da:	68f8      	ldr	r0, [r7, #12]
 80032dc:	f000 fa6a 	bl	80037b4 <I2C_ITAddrCplt>
 80032e0:	e037      	b.n	8003352 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	085b      	lsrs	r3, r3, #1
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d031      	beq.n	8003352 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	085b      	lsrs	r3, r3, #1
 80032f2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d02b      	beq.n	8003352 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032fe:	b29b      	uxth	r3, r3
 8003300:	2b00      	cmp	r3, #0
 8003302:	d018      	beq.n	8003336 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003308:	781a      	ldrb	r2, [r3, #0]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003314:	1c5a      	adds	r2, r3, #1
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800331e:	b29b      	uxth	r3, r3
 8003320:	3b01      	subs	r3, #1
 8003322:	b29a      	uxth	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800332c:	3b01      	subs	r3, #1
 800332e:	b29a      	uxth	r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	851a      	strh	r2, [r3, #40]	; 0x28
 8003334:	e00d      	b.n	8003352 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800333c:	d002      	beq.n	8003344 <I2C_Slave_ISR_IT+0x1e6>
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d106      	bne.n	8003352 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003344:	68f8      	ldr	r0, [r7, #12]
 8003346:	f000 faf6 	bl	8003936 <I2C_ITSlaveSeqCplt>
 800334a:	e002      	b.n	8003352 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800334c:	bf00      	nop
 800334e:	e000      	b.n	8003352 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8003350:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	3718      	adds	r7, #24
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b088      	sub	sp, #32
 8003368:	af02      	add	r7, sp, #8
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003376:	2b01      	cmp	r3, #1
 8003378:	d101      	bne.n	800337e <I2C_Master_ISR_DMA+0x1a>
 800337a:	2302      	movs	r3, #2
 800337c:	e0e1      	b.n	8003542 <I2C_Master_ISR_DMA+0x1de>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2201      	movs	r2, #1
 8003382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	091b      	lsrs	r3, r3, #4
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	2b00      	cmp	r3, #0
 8003390:	d017      	beq.n	80033c2 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	091b      	lsrs	r3, r3, #4
 8003396:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800339a:	2b00      	cmp	r3, #0
 800339c:	d011      	beq.n	80033c2 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2210      	movs	r2, #16
 80033a4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033aa:	f043 0204 	orr.w	r2, r3, #4
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80033b2:	2120      	movs	r1, #32
 80033b4:	68f8      	ldr	r0, [r7, #12]
 80033b6:	f001 f843 	bl	8004440 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80033ba:	68f8      	ldr	r0, [r7, #12]
 80033bc:	f000 fe3b 	bl	8004036 <I2C_Flush_TXDR>
 80033c0:	e0ba      	b.n	8003538 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	09db      	lsrs	r3, r3, #7
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d072      	beq.n	80034b4 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	099b      	lsrs	r3, r3, #6
 80033d2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d06c      	beq.n	80034b4 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033e8:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d04e      	beq.n	8003492 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003400:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003406:	b29b      	uxth	r3, r3
 8003408:	2bff      	cmp	r3, #255	; 0xff
 800340a:	d906      	bls.n	800341a <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	22ff      	movs	r2, #255	; 0xff
 8003410:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8003412:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003416:	617b      	str	r3, [r7, #20]
 8003418:	e010      	b.n	800343c <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800341e:	b29a      	uxth	r2, r3
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003428:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800342c:	d003      	beq.n	8003436 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003432:	617b      	str	r3, [r7, #20]
 8003434:	e002      	b.n	800343c <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8003436:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800343a:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003440:	b2da      	uxtb	r2, r3
 8003442:	8a79      	ldrh	r1, [r7, #18]
 8003444:	2300      	movs	r3, #0
 8003446:	9300      	str	r3, [sp, #0]
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f000 ffca 	bl	80043e4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003454:	b29a      	uxth	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	b29a      	uxth	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b22      	cmp	r3, #34	; 0x22
 800346c:	d108      	bne.n	8003480 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800347c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800347e:	e05b      	b.n	8003538 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800348e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003490:	e052      	b.n	8003538 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800349c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80034a0:	d003      	beq.n	80034aa <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80034a2:	68f8      	ldr	r0, [r7, #12]
 80034a4:	f000 fa0a 	bl	80038bc <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80034a8:	e046      	b.n	8003538 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80034aa:	2140      	movs	r1, #64	; 0x40
 80034ac:	68f8      	ldr	r0, [r7, #12]
 80034ae:	f000 fccb 	bl	8003e48 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80034b2:	e041      	b.n	8003538 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	099b      	lsrs	r3, r3, #6
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d029      	beq.n	8003514 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	099b      	lsrs	r3, r3, #6
 80034c4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d023      	beq.n	8003514 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d119      	bne.n	800350a <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80034e4:	d027      	beq.n	8003536 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ea:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034ee:	d108      	bne.n	8003502 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	685a      	ldr	r2, [r3, #4]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034fe:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8003500:	e019      	b.n	8003536 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f000 f9da 	bl	80038bc <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8003508:	e015      	b.n	8003536 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800350a:	2140      	movs	r1, #64	; 0x40
 800350c:	68f8      	ldr	r0, [r7, #12]
 800350e:	f000 fc9b 	bl	8003e48 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003512:	e010      	b.n	8003536 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	095b      	lsrs	r3, r3, #5
 8003518:	f003 0301 	and.w	r3, r3, #1
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00b      	beq.n	8003538 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	095b      	lsrs	r3, r3, #5
 8003524:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003528:	2b00      	cmp	r3, #0
 800352a:	d005      	beq.n	8003538 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800352c:	68b9      	ldr	r1, [r7, #8]
 800352e:	68f8      	ldr	r0, [r7, #12]
 8003530:	f000 fa60 	bl	80039f4 <I2C_ITMasterCplt>
 8003534:	e000      	b.n	8003538 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8003536:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3718      	adds	r7, #24
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}

0800354a <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800354a:	b580      	push	{r7, lr}
 800354c:	b088      	sub	sp, #32
 800354e:	af00      	add	r7, sp, #0
 8003550:	60f8      	str	r0, [r7, #12]
 8003552:	60b9      	str	r1, [r7, #8]
 8003554:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355a:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800355c:	2300      	movs	r3, #0
 800355e:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003566:	2b01      	cmp	r3, #1
 8003568:	d101      	bne.n	800356e <I2C_Slave_ISR_DMA+0x24>
 800356a:	2302      	movs	r3, #2
 800356c:	e0c9      	b.n	8003702 <I2C_Slave_ISR_DMA+0x1b8>
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	095b      	lsrs	r3, r3, #5
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	2b00      	cmp	r3, #0
 8003580:	d009      	beq.n	8003596 <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	095b      	lsrs	r3, r3, #5
 8003586:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800358a:	2b00      	cmp	r3, #0
 800358c:	d003      	beq.n	8003596 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800358e:	68b9      	ldr	r1, [r7, #8]
 8003590:	68f8      	ldr	r0, [r7, #12]
 8003592:	f000 faf9 	bl	8003b88 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	091b      	lsrs	r3, r3, #4
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b00      	cmp	r3, #0
 80035a0:	f000 809a 	beq.w	80036d8 <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	091b      	lsrs	r3, r3, #4
 80035a8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	f000 8093 	beq.w	80036d8 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	0b9b      	lsrs	r3, r3, #14
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d105      	bne.n	80035ca <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	0bdb      	lsrs	r3, r3, #15
 80035c2:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d07f      	beq.n	80036ca <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00d      	beq.n	80035ee <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	0bdb      	lsrs	r3, r3, #15
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d007      	beq.n	80035ee <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 80035ea:	2301      	movs	r3, #1
 80035ec:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00d      	beq.n	8003612 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	0b9b      	lsrs	r3, r3, #14
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d007      	beq.n	8003612 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d101      	bne.n	8003612 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 800360e:	2301      	movs	r3, #1
 8003610:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	2b01      	cmp	r3, #1
 8003616:	d128      	bne.n	800366a <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800361e:	b2db      	uxtb	r3, r3
 8003620:	2b28      	cmp	r3, #40	; 0x28
 8003622:	d108      	bne.n	8003636 <I2C_Slave_ISR_DMA+0xec>
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800362a:	d104      	bne.n	8003636 <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800362c:	68b9      	ldr	r1, [r7, #8]
 800362e:	68f8      	ldr	r0, [r7, #12]
 8003630:	f000 fbb4 	bl	8003d9c <I2C_ITListenCplt>
 8003634:	e048      	b.n	80036c8 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2b29      	cmp	r3, #41	; 0x29
 8003640:	d10e      	bne.n	8003660 <I2C_Slave_ISR_DMA+0x116>
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003648:	d00a      	beq.n	8003660 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2210      	movs	r2, #16
 8003650:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8003652:	68f8      	ldr	r0, [r7, #12]
 8003654:	f000 fcef 	bl	8004036 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8003658:	68f8      	ldr	r0, [r7, #12]
 800365a:	f000 f96c 	bl	8003936 <I2C_ITSlaveSeqCplt>
 800365e:	e033      	b.n	80036c8 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2210      	movs	r2, #16
 8003666:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8003668:	e034      	b.n	80036d4 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2210      	movs	r2, #16
 8003670:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003676:	f043 0204 	orr.w	r2, r3, #4
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003684:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d003      	beq.n	8003694 <I2C_Slave_ISR_DMA+0x14a>
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003692:	d11f      	bne.n	80036d4 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003694:	7dfb      	ldrb	r3, [r7, #23]
 8003696:	2b21      	cmp	r3, #33	; 0x21
 8003698:	d002      	beq.n	80036a0 <I2C_Slave_ISR_DMA+0x156>
 800369a:	7dfb      	ldrb	r3, [r7, #23]
 800369c:	2b29      	cmp	r3, #41	; 0x29
 800369e:	d103      	bne.n	80036a8 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2221      	movs	r2, #33	; 0x21
 80036a4:	631a      	str	r2, [r3, #48]	; 0x30
 80036a6:	e008      	b.n	80036ba <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80036a8:	7dfb      	ldrb	r3, [r7, #23]
 80036aa:	2b22      	cmp	r3, #34	; 0x22
 80036ac:	d002      	beq.n	80036b4 <I2C_Slave_ISR_DMA+0x16a>
 80036ae:	7dfb      	ldrb	r3, [r7, #23]
 80036b0:	2b2a      	cmp	r3, #42	; 0x2a
 80036b2:	d102      	bne.n	80036ba <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2222      	movs	r2, #34	; 0x22
 80036b8:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036be:	4619      	mov	r1, r3
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	f000 fbc1 	bl	8003e48 <I2C_ITError>
      if (treatdmanack == 1U)
 80036c6:	e005      	b.n	80036d4 <I2C_Slave_ISR_DMA+0x18a>
 80036c8:	e004      	b.n	80036d4 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2210      	movs	r2, #16
 80036d0:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80036d2:	e011      	b.n	80036f8 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 80036d4:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80036d6:	e00f      	b.n	80036f8 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	08db      	lsrs	r3, r3, #3
 80036dc:	f003 0301 	and.w	r3, r3, #1
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d009      	beq.n	80036f8 <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	08db      	lsrs	r3, r3, #3
 80036e8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d003      	beq.n	80036f8 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80036f0:	68b9      	ldr	r1, [r7, #8]
 80036f2:	68f8      	ldr	r0, [r7, #12]
 80036f4:	f000 f85e 	bl	80037b4 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3720      	adds	r7, #32
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
	...

0800370c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b086      	sub	sp, #24
 8003710:	af02      	add	r7, sp, #8
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	4608      	mov	r0, r1
 8003716:	4611      	mov	r1, r2
 8003718:	461a      	mov	r2, r3
 800371a:	4603      	mov	r3, r0
 800371c:	817b      	strh	r3, [r7, #10]
 800371e:	460b      	mov	r3, r1
 8003720:	813b      	strh	r3, [r7, #8]
 8003722:	4613      	mov	r3, r2
 8003724:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003726:	88fb      	ldrh	r3, [r7, #6]
 8003728:	b2da      	uxtb	r2, r3
 800372a:	8979      	ldrh	r1, [r7, #10]
 800372c:	4b20      	ldr	r3, [pc, #128]	; (80037b0 <I2C_RequestMemoryWrite+0xa4>)
 800372e:	9300      	str	r3, [sp, #0]
 8003730:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003734:	68f8      	ldr	r0, [r7, #12]
 8003736:	f000 fe55 	bl	80043e4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800373a:	69fa      	ldr	r2, [r7, #28]
 800373c:	69b9      	ldr	r1, [r7, #24]
 800373e:	68f8      	ldr	r0, [r7, #12]
 8003740:	f000 fd5d 	bl	80041fe <I2C_WaitOnTXISFlagUntilTimeout>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d001      	beq.n	800374e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e02c      	b.n	80037a8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800374e:	88fb      	ldrh	r3, [r7, #6]
 8003750:	2b01      	cmp	r3, #1
 8003752:	d105      	bne.n	8003760 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003754:	893b      	ldrh	r3, [r7, #8]
 8003756:	b2da      	uxtb	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	629a      	str	r2, [r3, #40]	; 0x28
 800375e:	e015      	b.n	800378c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003760:	893b      	ldrh	r3, [r7, #8]
 8003762:	0a1b      	lsrs	r3, r3, #8
 8003764:	b29b      	uxth	r3, r3
 8003766:	b2da      	uxtb	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800376e:	69fa      	ldr	r2, [r7, #28]
 8003770:	69b9      	ldr	r1, [r7, #24]
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f000 fd43 	bl	80041fe <I2C_WaitOnTXISFlagUntilTimeout>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e012      	b.n	80037a8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003782:	893b      	ldrh	r3, [r7, #8]
 8003784:	b2da      	uxtb	r2, r3
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	9300      	str	r3, [sp, #0]
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	2200      	movs	r2, #0
 8003794:	2180      	movs	r1, #128	; 0x80
 8003796:	68f8      	ldr	r0, [r7, #12]
 8003798:	f000 fcf1 	bl	800417e <I2C_WaitOnFlagUntilTimeout>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d001      	beq.n	80037a6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e000      	b.n	80037a8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80037a6:	2300      	movs	r3, #0
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3710      	adds	r7, #16
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	80002000 	.word	0x80002000

080037b4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80037ca:	2b28      	cmp	r3, #40	; 0x28
 80037cc:	d16a      	bne.n	80038a4 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	699b      	ldr	r3, [r3, #24]
 80037d4:	0c1b      	lsrs	r3, r3, #16
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	f003 0301 	and.w	r3, r3, #1
 80037dc:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	0c1b      	lsrs	r3, r3, #16
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80037ec:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037fa:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	b29b      	uxth	r3, r3
 8003804:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003808:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	2b02      	cmp	r3, #2
 8003810:	d138      	bne.n	8003884 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003812:	897b      	ldrh	r3, [r7, #10]
 8003814:	09db      	lsrs	r3, r3, #7
 8003816:	b29a      	uxth	r2, r3
 8003818:	89bb      	ldrh	r3, [r7, #12]
 800381a:	4053      	eors	r3, r2
 800381c:	b29b      	uxth	r3, r3
 800381e:	f003 0306 	and.w	r3, r3, #6
 8003822:	2b00      	cmp	r3, #0
 8003824:	d11c      	bne.n	8003860 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003826:	897b      	ldrh	r3, [r7, #10]
 8003828:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800382e:	1c5a      	adds	r2, r3, #1
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003838:	2b02      	cmp	r3, #2
 800383a:	d13b      	bne.n	80038b4 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	2208      	movs	r2, #8
 8003848:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003852:	89ba      	ldrh	r2, [r7, #12]
 8003854:	7bfb      	ldrb	r3, [r7, #15]
 8003856:	4619      	mov	r1, r3
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f7ff fc40 	bl	80030de <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800385e:	e029      	b.n	80038b4 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003860:	893b      	ldrh	r3, [r7, #8]
 8003862:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003864:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f000 fe4d 	bl	8004508 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003876:	89ba      	ldrh	r2, [r7, #12]
 8003878:	7bfb      	ldrb	r3, [r7, #15]
 800387a:	4619      	mov	r1, r3
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f7ff fc2e 	bl	80030de <HAL_I2C_AddrCallback>
}
 8003882:	e017      	b.n	80038b4 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003884:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f000 fe3d 	bl	8004508 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003896:	89ba      	ldrh	r2, [r7, #12]
 8003898:	7bfb      	ldrb	r3, [r7, #15]
 800389a:	4619      	mov	r1, r3
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f7ff fc1e 	bl	80030de <HAL_I2C_AddrCallback>
}
 80038a2:	e007      	b.n	80038b4 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2208      	movs	r2, #8
 80038aa:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80038b4:	bf00      	nop
 80038b6:	3710      	adds	r7, #16
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	2b21      	cmp	r3, #33	; 0x21
 80038d6:	d115      	bne.n	8003904 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2220      	movs	r2, #32
 80038dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2211      	movs	r2, #17
 80038e4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80038ec:	2101      	movs	r1, #1
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 fe0a 	bl	8004508 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f7ff fbc6 	bl	800308e <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003902:	e014      	b.n	800392e <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2220      	movs	r2, #32
 8003908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2212      	movs	r2, #18
 8003910:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003918:	2102      	movs	r1, #2
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 fdf4 	bl	8004508 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f7ff fbba 	bl	80030a2 <HAL_I2C_MasterRxCpltCallback>
}
 800392e:	bf00      	nop
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003936:	b580      	push	{r7, lr}
 8003938:	b084      	sub	sp, #16
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	0b9b      	lsrs	r3, r3, #14
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b00      	cmp	r3, #0
 8003958:	d008      	beq.n	800396c <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003968:	601a      	str	r2, [r3, #0]
 800396a:	e00d      	b.n	8003988 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	0bdb      	lsrs	r3, r3, #15
 8003970:	f003 0301 	and.w	r3, r3, #1
 8003974:	2b00      	cmp	r3, #0
 8003976:	d007      	beq.n	8003988 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003986:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800398e:	b2db      	uxtb	r3, r3
 8003990:	2b29      	cmp	r3, #41	; 0x29
 8003992:	d112      	bne.n	80039ba <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2228      	movs	r2, #40	; 0x28
 8003998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2221      	movs	r2, #33	; 0x21
 80039a0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80039a2:	2101      	movs	r1, #1
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f000 fdaf 	bl	8004508 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f7ff fb7f 	bl	80030b6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80039b8:	e017      	b.n	80039ea <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2b2a      	cmp	r3, #42	; 0x2a
 80039c4:	d111      	bne.n	80039ea <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2228      	movs	r2, #40	; 0x28
 80039ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2222      	movs	r2, #34	; 0x22
 80039d2:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80039d4:	2102      	movs	r1, #2
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 fd96 	bl	8004508 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f7ff fb70 	bl	80030ca <HAL_I2C_SlaveRxCpltCallback>
}
 80039ea:	bf00      	nop
 80039ec:	3710      	adds	r7, #16
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
	...

080039f4 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b086      	sub	sp, #24
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2220      	movs	r2, #32
 8003a08:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b21      	cmp	r3, #33	; 0x21
 8003a14:	d107      	bne.n	8003a26 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003a16:	2101      	movs	r1, #1
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f000 fd75 	bl	8004508 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2211      	movs	r2, #17
 8003a22:	631a      	str	r2, [r3, #48]	; 0x30
 8003a24:	e00c      	b.n	8003a40 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	2b22      	cmp	r3, #34	; 0x22
 8003a30:	d106      	bne.n	8003a40 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003a32:	2102      	movs	r1, #2
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f000 fd67 	bl	8004508 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2212      	movs	r2, #18
 8003a3e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	6859      	ldr	r1, [r3, #4]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	4b4d      	ldr	r3, [pc, #308]	; (8003b80 <I2C_ITMasterCplt+0x18c>)
 8003a4c:	400b      	ands	r3, r1
 8003a4e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a4a      	ldr	r2, [pc, #296]	; (8003b84 <I2C_ITMasterCplt+0x190>)
 8003a5a:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	091b      	lsrs	r3, r3, #4
 8003a60:	f003 0301 	and.w	r3, r3, #1
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d009      	beq.n	8003a7c <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2210      	movs	r2, #16
 8003a6e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a74:	f043 0204 	orr.w	r2, r3, #4
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	2b60      	cmp	r3, #96	; 0x60
 8003a86:	d10b      	bne.n	8003aa0 <I2C_ITMasterCplt+0xac>
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	089b      	lsrs	r3, r3, #2
 8003a8c:	f003 0301 	and.w	r3, r3, #1
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d005      	beq.n	8003aa0 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f000 fac8 	bl	8004036 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aaa:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	2b60      	cmp	r3, #96	; 0x60
 8003ab6:	d002      	beq.n	8003abe <I2C_ITMasterCplt+0xca>
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d006      	beq.n	8003acc <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 f9bf 	bl	8003e48 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003aca:	e054      	b.n	8003b76 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	2b21      	cmp	r3, #33	; 0x21
 8003ad6:	d124      	bne.n	8003b22 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2220      	movs	r2, #32
 8003adc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b40      	cmp	r3, #64	; 0x40
 8003af0:	d10b      	bne.n	8003b0a <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f7ff fb03 	bl	800310e <HAL_I2C_MemTxCpltCallback>
}
 8003b08:	e035      	b.n	8003b76 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f7ff fab7 	bl	800308e <HAL_I2C_MasterTxCpltCallback>
}
 8003b20:	e029      	b.n	8003b76 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b22      	cmp	r3, #34	; 0x22
 8003b2c:	d123      	bne.n	8003b76 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2220      	movs	r2, #32
 8003b32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	2b40      	cmp	r3, #64	; 0x40
 8003b46:	d10b      	bne.n	8003b60 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f7ff fae2 	bl	8003122 <HAL_I2C_MemRxCpltCallback>
}
 8003b5e:	e00a      	b.n	8003b76 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f7ff fa96 	bl	80030a2 <HAL_I2C_MasterRxCpltCallback>
}
 8003b76:	bf00      	nop
 8003b78:	3718      	adds	r7, #24
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	fe00e800 	.word	0xfe00e800
 8003b84:	ffff0000 	.word	0xffff0000

08003b88 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b086      	sub	sp, #24
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ba4:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2220      	movs	r2, #32
 8003bac:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003bae:	7bfb      	ldrb	r3, [r7, #15]
 8003bb0:	2b21      	cmp	r3, #33	; 0x21
 8003bb2:	d002      	beq.n	8003bba <I2C_ITSlaveCplt+0x32>
 8003bb4:	7bfb      	ldrb	r3, [r7, #15]
 8003bb6:	2b29      	cmp	r3, #41	; 0x29
 8003bb8:	d108      	bne.n	8003bcc <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003bba:	f248 0101 	movw	r1, #32769	; 0x8001
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 fca2 	bl	8004508 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2221      	movs	r2, #33	; 0x21
 8003bc8:	631a      	str	r2, [r3, #48]	; 0x30
 8003bca:	e00d      	b.n	8003be8 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003bcc:	7bfb      	ldrb	r3, [r7, #15]
 8003bce:	2b22      	cmp	r3, #34	; 0x22
 8003bd0:	d002      	beq.n	8003bd8 <I2C_ITSlaveCplt+0x50>
 8003bd2:	7bfb      	ldrb	r3, [r7, #15]
 8003bd4:	2b2a      	cmp	r3, #42	; 0x2a
 8003bd6:	d107      	bne.n	8003be8 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003bd8:	f248 0102 	movw	r1, #32770	; 0x8002
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f000 fc93 	bl	8004508 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2222      	movs	r2, #34	; 0x22
 8003be6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	685a      	ldr	r2, [r3, #4]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bf6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	6859      	ldr	r1, [r3, #4]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	4b64      	ldr	r3, [pc, #400]	; (8003d94 <I2C_ITSlaveCplt+0x20c>)
 8003c04:	400b      	ands	r3, r1
 8003c06:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 fa14 	bl	8004036 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	0b9b      	lsrs	r3, r3, #14
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d013      	beq.n	8003c42 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003c28:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d020      	beq.n	8003c74 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c40:	e018      	b.n	8003c74 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	0bdb      	lsrs	r3, r3, #15
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d012      	beq.n	8003c74 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c5c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d006      	beq.n	8003c74 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	089b      	lsrs	r3, r3, #2
 8003c78:	f003 0301 	and.w	r3, r3, #1
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d020      	beq.n	8003cc2 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	f023 0304 	bic.w	r3, r3, #4
 8003c86:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c92:	b2d2      	uxtb	r2, r2
 8003c94:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9a:	1c5a      	adds	r2, r3, #1
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00c      	beq.n	8003cc2 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cac:	3b01      	subs	r3, #1
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	b29a      	uxth	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d005      	beq.n	8003cd8 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd0:	f043 0204 	orr.w	r2, r3, #4
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d010      	beq.n	8003d10 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 f8a7 	bl	8003e48 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	2b28      	cmp	r3, #40	; 0x28
 8003d04:	d141      	bne.n	8003d8a <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003d06:	6979      	ldr	r1, [r7, #20]
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f000 f847 	bl	8003d9c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003d0e:	e03c      	b.n	8003d8a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d14:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d18:	d014      	beq.n	8003d44 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f7ff fe0b 	bl	8003936 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a1d      	ldr	r2, [pc, #116]	; (8003d98 <I2C_ITSlaveCplt+0x210>)
 8003d24:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2220      	movs	r2, #32
 8003d2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f7ff f9dc 	bl	80030fa <HAL_I2C_ListenCpltCallback>
}
 8003d42:	e022      	b.n	8003d8a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	2b22      	cmp	r3, #34	; 0x22
 8003d4e:	d10e      	bne.n	8003d6e <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2220      	movs	r2, #32
 8003d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f7ff f9af 	bl	80030ca <HAL_I2C_SlaveRxCpltCallback>
}
 8003d6c:	e00d      	b.n	8003d8a <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2220      	movs	r2, #32
 8003d72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f7ff f996 	bl	80030b6 <HAL_I2C_SlaveTxCpltCallback>
}
 8003d8a:	bf00      	nop
 8003d8c:	3718      	adds	r7, #24
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	fe00e800 	.word	0xfe00e800
 8003d98:	ffff0000 	.word	0xffff0000

08003d9c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b082      	sub	sp, #8
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a26      	ldr	r2, [pc, #152]	; (8003e44 <I2C_ITListenCplt+0xa8>)
 8003daa:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2220      	movs	r2, #32
 8003db6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	089b      	lsrs	r3, r3, #2
 8003dcc:	f003 0301 	and.w	r3, r3, #1
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d022      	beq.n	8003e1a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dde:	b2d2      	uxtb	r2, r2
 8003de0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de6:	1c5a      	adds	r2, r3, #1
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d012      	beq.n	8003e1a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	b29a      	uxth	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	3b01      	subs	r3, #1
 8003e08:	b29a      	uxth	r2, r3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e12:	f043 0204 	orr.w	r2, r3, #4
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003e1a:	f248 0103 	movw	r1, #32771	; 0x8003
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 fb72 	bl	8004508 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2210      	movs	r2, #16
 8003e2a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f7ff f960 	bl	80030fa <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003e3a:	bf00      	nop
 8003e3c:	3708      	adds	r7, #8
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	ffff0000 	.word	0xffff0000

08003e48 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a5d      	ldr	r2, [pc, #372]	; (8003fdc <I2C_ITError+0x194>)
 8003e66:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	431a      	orrs	r2, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003e7a:	7bfb      	ldrb	r3, [r7, #15]
 8003e7c:	2b28      	cmp	r3, #40	; 0x28
 8003e7e:	d005      	beq.n	8003e8c <I2C_ITError+0x44>
 8003e80:	7bfb      	ldrb	r3, [r7, #15]
 8003e82:	2b29      	cmp	r3, #41	; 0x29
 8003e84:	d002      	beq.n	8003e8c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003e86:	7bfb      	ldrb	r3, [r7, #15]
 8003e88:	2b2a      	cmp	r3, #42	; 0x2a
 8003e8a:	d10b      	bne.n	8003ea4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003e8c:	2103      	movs	r1, #3
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 fb3a 	bl	8004508 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2228      	movs	r2, #40	; 0x28
 8003e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a50      	ldr	r2, [pc, #320]	; (8003fe0 <I2C_ITError+0x198>)
 8003ea0:	635a      	str	r2, [r3, #52]	; 0x34
 8003ea2:	e011      	b.n	8003ec8 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003ea4:	f248 0103 	movw	r1, #32771	; 0x8003
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f000 fb2d 	bl	8004508 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b60      	cmp	r3, #96	; 0x60
 8003eb8:	d003      	beq.n	8003ec2 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2220      	movs	r2, #32
 8003ebe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ecc:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d039      	beq.n	8003f4a <I2C_ITError+0x102>
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	2b11      	cmp	r3, #17
 8003eda:	d002      	beq.n	8003ee2 <I2C_ITError+0x9a>
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	2b21      	cmp	r3, #33	; 0x21
 8003ee0:	d133      	bne.n	8003f4a <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003eec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ef0:	d107      	bne.n	8003f02 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003f00:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f06:	4618      	mov	r0, r3
 8003f08:	f7fe fbc6 	bl	8002698 <HAL_DMA_GetState>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d017      	beq.n	8003f42 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f16:	4a33      	ldr	r2, [pc, #204]	; (8003fe4 <I2C_ITError+0x19c>)
 8003f18:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7fe fad5 	bl	80024d6 <HAL_DMA_Abort_IT>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d04d      	beq.n	8003fce <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f3c:	4610      	mov	r0, r2
 8003f3e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003f40:	e045      	b.n	8003fce <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 f850 	bl	8003fe8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003f48:	e041      	b.n	8003fce <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d039      	beq.n	8003fc6 <I2C_ITError+0x17e>
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	2b12      	cmp	r3, #18
 8003f56:	d002      	beq.n	8003f5e <I2C_ITError+0x116>
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	2b22      	cmp	r3, #34	; 0x22
 8003f5c:	d133      	bne.n	8003fc6 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f6c:	d107      	bne.n	8003f7e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f7c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7fe fb88 	bl	8002698 <HAL_DMA_GetState>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d017      	beq.n	8003fbe <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f92:	4a14      	ldr	r2, [pc, #80]	; (8003fe4 <I2C_ITError+0x19c>)
 8003f94:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7fe fa97 	bl	80024d6 <HAL_DMA_Abort_IT>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d011      	beq.n	8003fd2 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003fb8:	4610      	mov	r0, r2
 8003fba:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003fbc:	e009      	b.n	8003fd2 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 f812 	bl	8003fe8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003fc4:	e005      	b.n	8003fd2 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 f80e 	bl	8003fe8 <I2C_TreatErrorCallback>
  }
}
 8003fcc:	e002      	b.n	8003fd4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003fce:	bf00      	nop
 8003fd0:	e000      	b.n	8003fd4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003fd2:	bf00      	nop
}
 8003fd4:	bf00      	nop
 8003fd6:	3710      	adds	r7, #16
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	ffff0000 	.word	0xffff0000
 8003fe0:	0800315f 	.word	0x0800315f
 8003fe4:	08004143 	.word	0x08004143

08003fe8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	2b60      	cmp	r3, #96	; 0x60
 8003ffa:	d10e      	bne.n	800401a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2220      	movs	r2, #32
 8004000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f7ff f899 	bl	800314a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004018:	e009      	b.n	800402e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f7ff f884 	bl	8003136 <HAL_I2C_ErrorCallback>
}
 800402e:	bf00      	nop
 8004030:	3708      	adds	r7, #8
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004036:	b480      	push	{r7}
 8004038:	b083      	sub	sp, #12
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	f003 0302 	and.w	r3, r3, #2
 8004048:	2b02      	cmp	r3, #2
 800404a:	d103      	bne.n	8004054 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2200      	movs	r2, #0
 8004052:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	699b      	ldr	r3, [r3, #24]
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	2b01      	cmp	r3, #1
 8004060:	d007      	beq.n	8004072 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	699a      	ldr	r2, [r3, #24]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f042 0201 	orr.w	r2, r2, #1
 8004070:	619a      	str	r2, [r3, #24]
  }
}
 8004072:	bf00      	nop
 8004074:	370c      	adds	r7, #12
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr

0800407e <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800407e:	b580      	push	{r7, lr}
 8004080:	b084      	sub	sp, #16
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408a:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800409a:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d104      	bne.n	80040b0 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80040a6:	2120      	movs	r1, #32
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f000 f9c9 	bl	8004440 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80040ae:	e02d      	b.n	800410c <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80040b8:	441a      	add	r2, r3
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	2bff      	cmp	r3, #255	; 0xff
 80040c6:	d903      	bls.n	80040d0 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	22ff      	movs	r2, #255	; 0xff
 80040cc:	851a      	strh	r2, [r3, #40]	; 0x28
 80040ce:	e004      	b.n	80040da <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d4:	b29a      	uxth	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e2:	4619      	mov	r1, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	3328      	adds	r3, #40	; 0x28
 80040ea:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80040f0:	f7fe f992 	bl	8002418 <HAL_DMA_Start_IT>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d004      	beq.n	8004104 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80040fa:	2110      	movs	r1, #16
 80040fc:	68f8      	ldr	r0, [r7, #12]
 80040fe:	f7ff fea3 	bl	8003e48 <I2C_ITError>
}
 8004102:	e003      	b.n	800410c <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8004104:	2140      	movs	r1, #64	; 0x40
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	f000 f99a 	bl	8004440 <I2C_Enable_IRQ>
}
 800410c:	bf00      	nop
 800410e:	3710      	adds	r7, #16
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004120:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	685a      	ldr	r2, [r3, #4]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004130:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8004132:	2110      	movs	r1, #16
 8004134:	68f8      	ldr	r0, [r7, #12]
 8004136:	f7ff fe87 	bl	8003e48 <I2C_ITError>
}
 800413a:	bf00      	nop
 800413c:	3710      	adds	r7, #16
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}

08004142 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004142:	b580      	push	{r7, lr}
 8004144:	b084      	sub	sp, #16
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004154:	2b00      	cmp	r3, #0
 8004156:	d003      	beq.n	8004160 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415c:	2200      	movs	r2, #0
 800415e:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004164:	2b00      	cmp	r3, #0
 8004166:	d003      	beq.n	8004170 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800416c:	2200      	movs	r2, #0
 800416e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 8004170:	68f8      	ldr	r0, [r7, #12]
 8004172:	f7ff ff39 	bl	8003fe8 <I2C_TreatErrorCallback>
}
 8004176:	bf00      	nop
 8004178:	3710      	adds	r7, #16
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}

0800417e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800417e:	b580      	push	{r7, lr}
 8004180:	b084      	sub	sp, #16
 8004182:	af00      	add	r7, sp, #0
 8004184:	60f8      	str	r0, [r7, #12]
 8004186:	60b9      	str	r1, [r7, #8]
 8004188:	603b      	str	r3, [r7, #0]
 800418a:	4613      	mov	r3, r2
 800418c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800418e:	e022      	b.n	80041d6 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004196:	d01e      	beq.n	80041d6 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004198:	f7fd f93a 	bl	8001410 <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	683a      	ldr	r2, [r7, #0]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d302      	bcc.n	80041ae <I2C_WaitOnFlagUntilTimeout+0x30>
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d113      	bne.n	80041d6 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b2:	f043 0220 	orr.w	r2, r3, #32
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2220      	movs	r2, #32
 80041be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e00f      	b.n	80041f6 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	699a      	ldr	r2, [r3, #24]
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	4013      	ands	r3, r2
 80041e0:	68ba      	ldr	r2, [r7, #8]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	bf0c      	ite	eq
 80041e6:	2301      	moveq	r3, #1
 80041e8:	2300      	movne	r3, #0
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	461a      	mov	r2, r3
 80041ee:	79fb      	ldrb	r3, [r7, #7]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d0cd      	beq.n	8004190 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3710      	adds	r7, #16
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80041fe:	b580      	push	{r7, lr}
 8004200:	b084      	sub	sp, #16
 8004202:	af00      	add	r7, sp, #0
 8004204:	60f8      	str	r0, [r7, #12]
 8004206:	60b9      	str	r1, [r7, #8]
 8004208:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800420a:	e02c      	b.n	8004266 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	68b9      	ldr	r1, [r7, #8]
 8004210:	68f8      	ldr	r0, [r7, #12]
 8004212:	f000 f871 	bl	80042f8 <I2C_IsAcknowledgeFailed>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d001      	beq.n	8004220 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e02a      	b.n	8004276 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004226:	d01e      	beq.n	8004266 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004228:	f7fd f8f2 	bl	8001410 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	68ba      	ldr	r2, [r7, #8]
 8004234:	429a      	cmp	r2, r3
 8004236:	d302      	bcc.n	800423e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d113      	bne.n	8004266 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004242:	f043 0220 	orr.w	r2, r3, #32
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2220      	movs	r2, #32
 800424e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e007      	b.n	8004276 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	f003 0302 	and.w	r3, r3, #2
 8004270:	2b02      	cmp	r3, #2
 8004272:	d1cb      	bne.n	800420c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3710      	adds	r7, #16
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}

0800427e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800427e:	b580      	push	{r7, lr}
 8004280:	b084      	sub	sp, #16
 8004282:	af00      	add	r7, sp, #0
 8004284:	60f8      	str	r0, [r7, #12]
 8004286:	60b9      	str	r1, [r7, #8]
 8004288:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800428a:	e028      	b.n	80042de <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	68b9      	ldr	r1, [r7, #8]
 8004290:	68f8      	ldr	r0, [r7, #12]
 8004292:	f000 f831 	bl	80042f8 <I2C_IsAcknowledgeFailed>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d001      	beq.n	80042a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e026      	b.n	80042ee <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042a0:	f7fd f8b6 	bl	8001410 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	68ba      	ldr	r2, [r7, #8]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d302      	bcc.n	80042b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d113      	bne.n	80042de <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ba:	f043 0220 	orr.w	r2, r3, #32
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2220      	movs	r2, #32
 80042c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e007      	b.n	80042ee <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	f003 0320 	and.w	r3, r3, #32
 80042e8:	2b20      	cmp	r3, #32
 80042ea:	d1cf      	bne.n	800428c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3710      	adds	r7, #16
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
	...

080042f8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	f003 0310 	and.w	r3, r3, #16
 800430e:	2b10      	cmp	r3, #16
 8004310:	d161      	bne.n	80043d6 <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800431c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004320:	d02b      	beq.n	800437a <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	685a      	ldr	r2, [r3, #4]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004330:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004332:	e022      	b.n	800437a <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800433a:	d01e      	beq.n	800437a <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800433c:	f7fd f868 	bl	8001410 <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	68ba      	ldr	r2, [r7, #8]
 8004348:	429a      	cmp	r2, r3
 800434a:	d302      	bcc.n	8004352 <I2C_IsAcknowledgeFailed+0x5a>
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d113      	bne.n	800437a <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004356:	f043 0220 	orr.w	r2, r3, #32
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2220      	movs	r2, #32
 8004362:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e02e      	b.n	80043d8 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	699b      	ldr	r3, [r3, #24]
 8004380:	f003 0320 	and.w	r3, r3, #32
 8004384:	2b20      	cmp	r3, #32
 8004386:	d1d5      	bne.n	8004334 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2210      	movs	r2, #16
 800438e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2220      	movs	r2, #32
 8004396:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004398:	68f8      	ldr	r0, [r7, #12]
 800439a:	f7ff fe4c 	bl	8004036 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	6859      	ldr	r1, [r3, #4]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	4b0d      	ldr	r3, [pc, #52]	; (80043e0 <I2C_IsAcknowledgeFailed+0xe8>)
 80043aa:	400b      	ands	r3, r1
 80043ac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b2:	f043 0204 	orr.w	r2, r3, #4
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2220      	movs	r2, #32
 80043be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e000      	b.n	80043d8 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 80043d6:	2300      	movs	r3, #0
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3710      	adds	r7, #16
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	fe00e800 	.word	0xfe00e800

080043e4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b085      	sub	sp, #20
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	607b      	str	r3, [r7, #4]
 80043ee:	460b      	mov	r3, r1
 80043f0:	817b      	strh	r3, [r7, #10]
 80043f2:	4613      	mov	r3, r2
 80043f4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	685a      	ldr	r2, [r3, #4]
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	0d5b      	lsrs	r3, r3, #21
 8004400:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004404:	4b0d      	ldr	r3, [pc, #52]	; (800443c <I2C_TransferConfig+0x58>)
 8004406:	430b      	orrs	r3, r1
 8004408:	43db      	mvns	r3, r3
 800440a:	ea02 0103 	and.w	r1, r2, r3
 800440e:	897b      	ldrh	r3, [r7, #10]
 8004410:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004414:	7a7b      	ldrb	r3, [r7, #9]
 8004416:	041b      	lsls	r3, r3, #16
 8004418:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800441c:	431a      	orrs	r2, r3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	431a      	orrs	r2, r3
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	431a      	orrs	r2, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	430a      	orrs	r2, r1
 800442c:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800442e:	bf00      	nop
 8004430:	3714      	adds	r7, #20
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	03ff63ff 	.word	0x03ff63ff

08004440 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004440:	b480      	push	{r7}
 8004442:	b085      	sub	sp, #20
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	460b      	mov	r3, r1
 800444a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800444c:	2300      	movs	r3, #0
 800444e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004454:	4a2a      	ldr	r2, [pc, #168]	; (8004500 <I2C_Enable_IRQ+0xc0>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d004      	beq.n	8004464 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800445e:	4a29      	ldr	r2, [pc, #164]	; (8004504 <I2C_Enable_IRQ+0xc4>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d11d      	bne.n	80044a0 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004464:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004468:	2b00      	cmp	r3, #0
 800446a:	da03      	bge.n	8004474 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004472:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004474:	887b      	ldrh	r3, [r7, #2]
 8004476:	2b10      	cmp	r3, #16
 8004478:	d103      	bne.n	8004482 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004480:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004482:	887b      	ldrh	r3, [r7, #2]
 8004484:	2b20      	cmp	r3, #32
 8004486:	d103      	bne.n	8004490 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800448e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004490:	887b      	ldrh	r3, [r7, #2]
 8004492:	2b40      	cmp	r3, #64	; 0x40
 8004494:	d125      	bne.n	80044e2 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800449c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800449e:	e020      	b.n	80044e2 <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80044a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	da03      	bge.n	80044b0 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80044ae:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80044b0:	887b      	ldrh	r3, [r7, #2]
 80044b2:	f003 0301 	and.w	r3, r3, #1
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d003      	beq.n	80044c2 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80044c0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80044c2:	887b      	ldrh	r3, [r7, #2]
 80044c4:	f003 0302 	and.w	r3, r3, #2
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d003      	beq.n	80044d4 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 80044d2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80044d4:	887b      	ldrh	r3, [r7, #2]
 80044d6:	2b20      	cmp	r3, #32
 80044d8:	d103      	bne.n	80044e2 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f043 0320 	orr.w	r3, r3, #32
 80044e0:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	6819      	ldr	r1, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	430a      	orrs	r2, r1
 80044f0:	601a      	str	r2, [r3, #0]
}
 80044f2:	bf00      	nop
 80044f4:	3714      	adds	r7, #20
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	08003365 	.word	0x08003365
 8004504:	0800354b 	.word	0x0800354b

08004508 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004508:	b480      	push	{r7}
 800450a:	b085      	sub	sp, #20
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	460b      	mov	r3, r1
 8004512:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004514:	2300      	movs	r3, #0
 8004516:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004518:	887b      	ldrh	r3, [r7, #2]
 800451a:	f003 0301 	and.w	r3, r3, #1
 800451e:	2b00      	cmp	r3, #0
 8004520:	d00f      	beq.n	8004542 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8004528:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004530:	b2db      	uxtb	r3, r3
 8004532:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004536:	2b28      	cmp	r3, #40	; 0x28
 8004538:	d003      	beq.n	8004542 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004540:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004542:	887b      	ldrh	r3, [r7, #2]
 8004544:	f003 0302 	and.w	r3, r3, #2
 8004548:	2b00      	cmp	r3, #0
 800454a:	d00f      	beq.n	800456c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8004552:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800455a:	b2db      	uxtb	r3, r3
 800455c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004560:	2b28      	cmp	r3, #40	; 0x28
 8004562:	d003      	beq.n	800456c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800456a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800456c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004570:	2b00      	cmp	r3, #0
 8004572:	da03      	bge.n	800457c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800457a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800457c:	887b      	ldrh	r3, [r7, #2]
 800457e:	2b10      	cmp	r3, #16
 8004580:	d103      	bne.n	800458a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004588:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800458a:	887b      	ldrh	r3, [r7, #2]
 800458c:	2b20      	cmp	r3, #32
 800458e:	d103      	bne.n	8004598 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f043 0320 	orr.w	r3, r3, #32
 8004596:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004598:	887b      	ldrh	r3, [r7, #2]
 800459a:	2b40      	cmp	r3, #64	; 0x40
 800459c:	d103      	bne.n	80045a6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045a4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	6819      	ldr	r1, [r3, #0]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	43da      	mvns	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	400a      	ands	r2, r1
 80045b6:	601a      	str	r2, [r3, #0]
}
 80045b8:	bf00      	nop
 80045ba:	3714      	adds	r7, #20
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	2b20      	cmp	r3, #32
 80045d8:	d138      	bne.n	800464c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d101      	bne.n	80045e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80045e4:	2302      	movs	r3, #2
 80045e6:	e032      	b.n	800464e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2224      	movs	r2, #36	; 0x24
 80045f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f022 0201 	bic.w	r2, r2, #1
 8004606:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004616:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	6819      	ldr	r1, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	683a      	ldr	r2, [r7, #0]
 8004624:	430a      	orrs	r2, r1
 8004626:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f042 0201 	orr.w	r2, r2, #1
 8004636:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2220      	movs	r2, #32
 800463c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004648:	2300      	movs	r3, #0
 800464a:	e000      	b.n	800464e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800464c:	2302      	movs	r3, #2
  }
}
 800464e:	4618      	mov	r0, r3
 8004650:	370c      	adds	r7, #12
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr

0800465a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800465a:	b480      	push	{r7}
 800465c:	b085      	sub	sp, #20
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
 8004662:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800466a:	b2db      	uxtb	r3, r3
 800466c:	2b20      	cmp	r3, #32
 800466e:	d139      	bne.n	80046e4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004676:	2b01      	cmp	r3, #1
 8004678:	d101      	bne.n	800467e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800467a:	2302      	movs	r3, #2
 800467c:	e033      	b.n	80046e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2201      	movs	r2, #1
 8004682:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2224      	movs	r2, #36	; 0x24
 800468a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f022 0201 	bic.w	r2, r2, #1
 800469c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80046ac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	021b      	lsls	r3, r3, #8
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68fa      	ldr	r2, [r7, #12]
 80046be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f042 0201 	orr.w	r2, r2, #1
 80046ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2220      	movs	r2, #32
 80046d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80046e0:	2300      	movs	r3, #0
 80046e2:	e000      	b.n	80046e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80046e4:	2302      	movs	r3, #2
  }
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3714      	adds	r7, #20
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
	...

080046f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	1d3b      	adds	r3, r7, #4
 80046fe:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004700:	1d3b      	adds	r3, r7, #4
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d102      	bne.n	800470e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	f000 bef4 	b.w	80054f6 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800470e:	1d3b      	adds	r3, r7, #4
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0301 	and.w	r3, r3, #1
 8004718:	2b00      	cmp	r3, #0
 800471a:	f000 816a 	beq.w	80049f2 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800471e:	4bb3      	ldr	r3, [pc, #716]	; (80049ec <HAL_RCC_OscConfig+0x2f8>)
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f003 030c 	and.w	r3, r3, #12
 8004726:	2b04      	cmp	r3, #4
 8004728:	d00c      	beq.n	8004744 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800472a:	4bb0      	ldr	r3, [pc, #704]	; (80049ec <HAL_RCC_OscConfig+0x2f8>)
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f003 030c 	and.w	r3, r3, #12
 8004732:	2b08      	cmp	r3, #8
 8004734:	d159      	bne.n	80047ea <HAL_RCC_OscConfig+0xf6>
 8004736:	4bad      	ldr	r3, [pc, #692]	; (80049ec <HAL_RCC_OscConfig+0x2f8>)
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800473e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004742:	d152      	bne.n	80047ea <HAL_RCC_OscConfig+0xf6>
 8004744:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004748:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800474c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004750:	fa93 f3a3 	rbit	r3, r3
 8004754:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004758:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800475c:	fab3 f383 	clz	r3, r3
 8004760:	b2db      	uxtb	r3, r3
 8004762:	095b      	lsrs	r3, r3, #5
 8004764:	b2db      	uxtb	r3, r3
 8004766:	f043 0301 	orr.w	r3, r3, #1
 800476a:	b2db      	uxtb	r3, r3
 800476c:	2b01      	cmp	r3, #1
 800476e:	d102      	bne.n	8004776 <HAL_RCC_OscConfig+0x82>
 8004770:	4b9e      	ldr	r3, [pc, #632]	; (80049ec <HAL_RCC_OscConfig+0x2f8>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	e015      	b.n	80047a2 <HAL_RCC_OscConfig+0xae>
 8004776:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800477a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800477e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004782:	fa93 f3a3 	rbit	r3, r3
 8004786:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800478a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800478e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004792:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004796:	fa93 f3a3 	rbit	r3, r3
 800479a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800479e:	4b93      	ldr	r3, [pc, #588]	; (80049ec <HAL_RCC_OscConfig+0x2f8>)
 80047a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80047a6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80047aa:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80047ae:	fa92 f2a2 	rbit	r2, r2
 80047b2:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80047b6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80047ba:	fab2 f282 	clz	r2, r2
 80047be:	b2d2      	uxtb	r2, r2
 80047c0:	f042 0220 	orr.w	r2, r2, #32
 80047c4:	b2d2      	uxtb	r2, r2
 80047c6:	f002 021f 	and.w	r2, r2, #31
 80047ca:	2101      	movs	r1, #1
 80047cc:	fa01 f202 	lsl.w	r2, r1, r2
 80047d0:	4013      	ands	r3, r2
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	f000 810c 	beq.w	80049f0 <HAL_RCC_OscConfig+0x2fc>
 80047d8:	1d3b      	adds	r3, r7, #4
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	f040 8106 	bne.w	80049f0 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	f000 be86 	b.w	80054f6 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047ea:	1d3b      	adds	r3, r7, #4
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047f4:	d106      	bne.n	8004804 <HAL_RCC_OscConfig+0x110>
 80047f6:	4b7d      	ldr	r3, [pc, #500]	; (80049ec <HAL_RCC_OscConfig+0x2f8>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a7c      	ldr	r2, [pc, #496]	; (80049ec <HAL_RCC_OscConfig+0x2f8>)
 80047fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004800:	6013      	str	r3, [r2, #0]
 8004802:	e030      	b.n	8004866 <HAL_RCC_OscConfig+0x172>
 8004804:	1d3b      	adds	r3, r7, #4
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d10c      	bne.n	8004828 <HAL_RCC_OscConfig+0x134>
 800480e:	4b77      	ldr	r3, [pc, #476]	; (80049ec <HAL_RCC_OscConfig+0x2f8>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a76      	ldr	r2, [pc, #472]	; (80049ec <HAL_RCC_OscConfig+0x2f8>)
 8004814:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004818:	6013      	str	r3, [r2, #0]
 800481a:	4b74      	ldr	r3, [pc, #464]	; (80049ec <HAL_RCC_OscConfig+0x2f8>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a73      	ldr	r2, [pc, #460]	; (80049ec <HAL_RCC_OscConfig+0x2f8>)
 8004820:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004824:	6013      	str	r3, [r2, #0]
 8004826:	e01e      	b.n	8004866 <HAL_RCC_OscConfig+0x172>
 8004828:	1d3b      	adds	r3, r7, #4
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004832:	d10c      	bne.n	800484e <HAL_RCC_OscConfig+0x15a>
 8004834:	4b6d      	ldr	r3, [pc, #436]	; (80049ec <HAL_RCC_OscConfig+0x2f8>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a6c      	ldr	r2, [pc, #432]	; (80049ec <HAL_RCC_OscConfig+0x2f8>)
 800483a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800483e:	6013      	str	r3, [r2, #0]
 8004840:	4b6a      	ldr	r3, [pc, #424]	; (80049ec <HAL_RCC_OscConfig+0x2f8>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a69      	ldr	r2, [pc, #420]	; (80049ec <HAL_RCC_OscConfig+0x2f8>)
 8004846:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800484a:	6013      	str	r3, [r2, #0]
 800484c:	e00b      	b.n	8004866 <HAL_RCC_OscConfig+0x172>
 800484e:	4b67      	ldr	r3, [pc, #412]	; (80049ec <HAL_RCC_OscConfig+0x2f8>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a66      	ldr	r2, [pc, #408]	; (80049ec <HAL_RCC_OscConfig+0x2f8>)
 8004854:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004858:	6013      	str	r3, [r2, #0]
 800485a:	4b64      	ldr	r3, [pc, #400]	; (80049ec <HAL_RCC_OscConfig+0x2f8>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a63      	ldr	r2, [pc, #396]	; (80049ec <HAL_RCC_OscConfig+0x2f8>)
 8004860:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004864:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004866:	4b61      	ldr	r3, [pc, #388]	; (80049ec <HAL_RCC_OscConfig+0x2f8>)
 8004868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486a:	f023 020f 	bic.w	r2, r3, #15
 800486e:	1d3b      	adds	r3, r7, #4
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	495d      	ldr	r1, [pc, #372]	; (80049ec <HAL_RCC_OscConfig+0x2f8>)
 8004876:	4313      	orrs	r3, r2
 8004878:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800487a:	1d3b      	adds	r3, r7, #4
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d059      	beq.n	8004938 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004884:	f7fc fdc4 	bl	8001410 <HAL_GetTick>
 8004888:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800488c:	e00a      	b.n	80048a4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800488e:	f7fc fdbf 	bl	8001410 <HAL_GetTick>
 8004892:	4602      	mov	r2, r0
 8004894:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	2b64      	cmp	r3, #100	; 0x64
 800489c:	d902      	bls.n	80048a4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	f000 be29 	b.w	80054f6 <HAL_RCC_OscConfig+0xe02>
 80048a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048a8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ac:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80048b0:	fa93 f3a3 	rbit	r3, r3
 80048b4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80048b8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048bc:	fab3 f383 	clz	r3, r3
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	095b      	lsrs	r3, r3, #5
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	f043 0301 	orr.w	r3, r3, #1
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d102      	bne.n	80048d6 <HAL_RCC_OscConfig+0x1e2>
 80048d0:	4b46      	ldr	r3, [pc, #280]	; (80049ec <HAL_RCC_OscConfig+0x2f8>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	e015      	b.n	8004902 <HAL_RCC_OscConfig+0x20e>
 80048d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048da:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048de:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80048e2:	fa93 f3a3 	rbit	r3, r3
 80048e6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80048ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048ee:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80048f2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80048f6:	fa93 f3a3 	rbit	r3, r3
 80048fa:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80048fe:	4b3b      	ldr	r3, [pc, #236]	; (80049ec <HAL_RCC_OscConfig+0x2f8>)
 8004900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004902:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004906:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800490a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800490e:	fa92 f2a2 	rbit	r2, r2
 8004912:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004916:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800491a:	fab2 f282 	clz	r2, r2
 800491e:	b2d2      	uxtb	r2, r2
 8004920:	f042 0220 	orr.w	r2, r2, #32
 8004924:	b2d2      	uxtb	r2, r2
 8004926:	f002 021f 	and.w	r2, r2, #31
 800492a:	2101      	movs	r1, #1
 800492c:	fa01 f202 	lsl.w	r2, r1, r2
 8004930:	4013      	ands	r3, r2
 8004932:	2b00      	cmp	r3, #0
 8004934:	d0ab      	beq.n	800488e <HAL_RCC_OscConfig+0x19a>
 8004936:	e05c      	b.n	80049f2 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004938:	f7fc fd6a 	bl	8001410 <HAL_GetTick>
 800493c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004940:	e00a      	b.n	8004958 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004942:	f7fc fd65 	bl	8001410 <HAL_GetTick>
 8004946:	4602      	mov	r2, r0
 8004948:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	2b64      	cmp	r3, #100	; 0x64
 8004950:	d902      	bls.n	8004958 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	f000 bdcf 	b.w	80054f6 <HAL_RCC_OscConfig+0xe02>
 8004958:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800495c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004960:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004964:	fa93 f3a3 	rbit	r3, r3
 8004968:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800496c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004970:	fab3 f383 	clz	r3, r3
 8004974:	b2db      	uxtb	r3, r3
 8004976:	095b      	lsrs	r3, r3, #5
 8004978:	b2db      	uxtb	r3, r3
 800497a:	f043 0301 	orr.w	r3, r3, #1
 800497e:	b2db      	uxtb	r3, r3
 8004980:	2b01      	cmp	r3, #1
 8004982:	d102      	bne.n	800498a <HAL_RCC_OscConfig+0x296>
 8004984:	4b19      	ldr	r3, [pc, #100]	; (80049ec <HAL_RCC_OscConfig+0x2f8>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	e015      	b.n	80049b6 <HAL_RCC_OscConfig+0x2c2>
 800498a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800498e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004992:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004996:	fa93 f3a3 	rbit	r3, r3
 800499a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800499e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049a2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80049a6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80049aa:	fa93 f3a3 	rbit	r3, r3
 80049ae:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80049b2:	4b0e      	ldr	r3, [pc, #56]	; (80049ec <HAL_RCC_OscConfig+0x2f8>)
 80049b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80049ba:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80049be:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80049c2:	fa92 f2a2 	rbit	r2, r2
 80049c6:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80049ca:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80049ce:	fab2 f282 	clz	r2, r2
 80049d2:	b2d2      	uxtb	r2, r2
 80049d4:	f042 0220 	orr.w	r2, r2, #32
 80049d8:	b2d2      	uxtb	r2, r2
 80049da:	f002 021f 	and.w	r2, r2, #31
 80049de:	2101      	movs	r1, #1
 80049e0:	fa01 f202 	lsl.w	r2, r1, r2
 80049e4:	4013      	ands	r3, r2
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d1ab      	bne.n	8004942 <HAL_RCC_OscConfig+0x24e>
 80049ea:	e002      	b.n	80049f2 <HAL_RCC_OscConfig+0x2fe>
 80049ec:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049f2:	1d3b      	adds	r3, r7, #4
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0302 	and.w	r3, r3, #2
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	f000 816f 	beq.w	8004ce0 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004a02:	4bd0      	ldr	r3, [pc, #832]	; (8004d44 <HAL_RCC_OscConfig+0x650>)
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f003 030c 	and.w	r3, r3, #12
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d00b      	beq.n	8004a26 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004a0e:	4bcd      	ldr	r3, [pc, #820]	; (8004d44 <HAL_RCC_OscConfig+0x650>)
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	f003 030c 	and.w	r3, r3, #12
 8004a16:	2b08      	cmp	r3, #8
 8004a18:	d16c      	bne.n	8004af4 <HAL_RCC_OscConfig+0x400>
 8004a1a:	4bca      	ldr	r3, [pc, #808]	; (8004d44 <HAL_RCC_OscConfig+0x650>)
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d166      	bne.n	8004af4 <HAL_RCC_OscConfig+0x400>
 8004a26:	2302      	movs	r3, #2
 8004a28:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a2c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004a30:	fa93 f3a3 	rbit	r3, r3
 8004a34:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004a38:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a3c:	fab3 f383 	clz	r3, r3
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	095b      	lsrs	r3, r3, #5
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	f043 0301 	orr.w	r3, r3, #1
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d102      	bne.n	8004a56 <HAL_RCC_OscConfig+0x362>
 8004a50:	4bbc      	ldr	r3, [pc, #752]	; (8004d44 <HAL_RCC_OscConfig+0x650>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	e013      	b.n	8004a7e <HAL_RCC_OscConfig+0x38a>
 8004a56:	2302      	movs	r3, #2
 8004a58:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a5c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004a60:	fa93 f3a3 	rbit	r3, r3
 8004a64:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004a68:	2302      	movs	r3, #2
 8004a6a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004a6e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004a72:	fa93 f3a3 	rbit	r3, r3
 8004a76:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004a7a:	4bb2      	ldr	r3, [pc, #712]	; (8004d44 <HAL_RCC_OscConfig+0x650>)
 8004a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7e:	2202      	movs	r2, #2
 8004a80:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004a84:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004a88:	fa92 f2a2 	rbit	r2, r2
 8004a8c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004a90:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004a94:	fab2 f282 	clz	r2, r2
 8004a98:	b2d2      	uxtb	r2, r2
 8004a9a:	f042 0220 	orr.w	r2, r2, #32
 8004a9e:	b2d2      	uxtb	r2, r2
 8004aa0:	f002 021f 	and.w	r2, r2, #31
 8004aa4:	2101      	movs	r1, #1
 8004aa6:	fa01 f202 	lsl.w	r2, r1, r2
 8004aaa:	4013      	ands	r3, r2
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d007      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x3cc>
 8004ab0:	1d3b      	adds	r3, r7, #4
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d002      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	f000 bd1b 	b.w	80054f6 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ac0:	4ba0      	ldr	r3, [pc, #640]	; (8004d44 <HAL_RCC_OscConfig+0x650>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ac8:	1d3b      	adds	r3, r7, #4
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	695b      	ldr	r3, [r3, #20]
 8004ace:	21f8      	movs	r1, #248	; 0xf8
 8004ad0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ad4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004ad8:	fa91 f1a1 	rbit	r1, r1
 8004adc:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004ae0:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004ae4:	fab1 f181 	clz	r1, r1
 8004ae8:	b2c9      	uxtb	r1, r1
 8004aea:	408b      	lsls	r3, r1
 8004aec:	4995      	ldr	r1, [pc, #596]	; (8004d44 <HAL_RCC_OscConfig+0x650>)
 8004aee:	4313      	orrs	r3, r2
 8004af0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004af2:	e0f5      	b.n	8004ce0 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004af4:	1d3b      	adds	r3, r7, #4
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	f000 8085 	beq.w	8004c0a <HAL_RCC_OscConfig+0x516>
 8004b00:	2301      	movs	r3, #1
 8004b02:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b06:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004b0a:	fa93 f3a3 	rbit	r3, r3
 8004b0e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004b12:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b16:	fab3 f383 	clz	r3, r3
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004b20:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	461a      	mov	r2, r3
 8004b28:	2301      	movs	r3, #1
 8004b2a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b2c:	f7fc fc70 	bl	8001410 <HAL_GetTick>
 8004b30:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b34:	e00a      	b.n	8004b4c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b36:	f7fc fc6b 	bl	8001410 <HAL_GetTick>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d902      	bls.n	8004b4c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	f000 bcd5 	b.w	80054f6 <HAL_RCC_OscConfig+0xe02>
 8004b4c:	2302      	movs	r3, #2
 8004b4e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b52:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004b56:	fa93 f3a3 	rbit	r3, r3
 8004b5a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004b5e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b62:	fab3 f383 	clz	r3, r3
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	095b      	lsrs	r3, r3, #5
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	f043 0301 	orr.w	r3, r3, #1
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d102      	bne.n	8004b7c <HAL_RCC_OscConfig+0x488>
 8004b76:	4b73      	ldr	r3, [pc, #460]	; (8004d44 <HAL_RCC_OscConfig+0x650>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	e013      	b.n	8004ba4 <HAL_RCC_OscConfig+0x4b0>
 8004b7c:	2302      	movs	r3, #2
 8004b7e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b82:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004b86:	fa93 f3a3 	rbit	r3, r3
 8004b8a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004b8e:	2302      	movs	r3, #2
 8004b90:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004b94:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004b98:	fa93 f3a3 	rbit	r3, r3
 8004b9c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004ba0:	4b68      	ldr	r3, [pc, #416]	; (8004d44 <HAL_RCC_OscConfig+0x650>)
 8004ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba4:	2202      	movs	r2, #2
 8004ba6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004baa:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004bae:	fa92 f2a2 	rbit	r2, r2
 8004bb2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004bb6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004bba:	fab2 f282 	clz	r2, r2
 8004bbe:	b2d2      	uxtb	r2, r2
 8004bc0:	f042 0220 	orr.w	r2, r2, #32
 8004bc4:	b2d2      	uxtb	r2, r2
 8004bc6:	f002 021f 	and.w	r2, r2, #31
 8004bca:	2101      	movs	r1, #1
 8004bcc:	fa01 f202 	lsl.w	r2, r1, r2
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d0af      	beq.n	8004b36 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bd6:	4b5b      	ldr	r3, [pc, #364]	; (8004d44 <HAL_RCC_OscConfig+0x650>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bde:	1d3b      	adds	r3, r7, #4
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	695b      	ldr	r3, [r3, #20]
 8004be4:	21f8      	movs	r1, #248	; 0xf8
 8004be6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bea:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004bee:	fa91 f1a1 	rbit	r1, r1
 8004bf2:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004bf6:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004bfa:	fab1 f181 	clz	r1, r1
 8004bfe:	b2c9      	uxtb	r1, r1
 8004c00:	408b      	lsls	r3, r1
 8004c02:	4950      	ldr	r1, [pc, #320]	; (8004d44 <HAL_RCC_OscConfig+0x650>)
 8004c04:	4313      	orrs	r3, r2
 8004c06:	600b      	str	r3, [r1, #0]
 8004c08:	e06a      	b.n	8004ce0 <HAL_RCC_OscConfig+0x5ec>
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c10:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004c14:	fa93 f3a3 	rbit	r3, r3
 8004c18:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004c1c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c20:	fab3 f383 	clz	r3, r3
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004c2a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	461a      	mov	r2, r3
 8004c32:	2300      	movs	r3, #0
 8004c34:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c36:	f7fc fbeb 	bl	8001410 <HAL_GetTick>
 8004c3a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c3e:	e00a      	b.n	8004c56 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c40:	f7fc fbe6 	bl	8001410 <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d902      	bls.n	8004c56 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	f000 bc50 	b.w	80054f6 <HAL_RCC_OscConfig+0xe02>
 8004c56:	2302      	movs	r3, #2
 8004c58:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c5c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004c60:	fa93 f3a3 	rbit	r3, r3
 8004c64:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004c68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c6c:	fab3 f383 	clz	r3, r3
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	095b      	lsrs	r3, r3, #5
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	f043 0301 	orr.w	r3, r3, #1
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d102      	bne.n	8004c86 <HAL_RCC_OscConfig+0x592>
 8004c80:	4b30      	ldr	r3, [pc, #192]	; (8004d44 <HAL_RCC_OscConfig+0x650>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	e013      	b.n	8004cae <HAL_RCC_OscConfig+0x5ba>
 8004c86:	2302      	movs	r3, #2
 8004c88:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004c90:	fa93 f3a3 	rbit	r3, r3
 8004c94:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004c98:	2302      	movs	r3, #2
 8004c9a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004c9e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004ca2:	fa93 f3a3 	rbit	r3, r3
 8004ca6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004caa:	4b26      	ldr	r3, [pc, #152]	; (8004d44 <HAL_RCC_OscConfig+0x650>)
 8004cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cae:	2202      	movs	r2, #2
 8004cb0:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004cb4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004cb8:	fa92 f2a2 	rbit	r2, r2
 8004cbc:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004cc0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004cc4:	fab2 f282 	clz	r2, r2
 8004cc8:	b2d2      	uxtb	r2, r2
 8004cca:	f042 0220 	orr.w	r2, r2, #32
 8004cce:	b2d2      	uxtb	r2, r2
 8004cd0:	f002 021f 	and.w	r2, r2, #31
 8004cd4:	2101      	movs	r1, #1
 8004cd6:	fa01 f202 	lsl.w	r2, r1, r2
 8004cda:	4013      	ands	r3, r2
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d1af      	bne.n	8004c40 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ce0:	1d3b      	adds	r3, r7, #4
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0308 	and.w	r3, r3, #8
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	f000 80da 	beq.w	8004ea4 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004cf0:	1d3b      	adds	r3, r7, #4
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	699b      	ldr	r3, [r3, #24]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d069      	beq.n	8004dce <HAL_RCC_OscConfig+0x6da>
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d00:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004d04:	fa93 f3a3 	rbit	r3, r3
 8004d08:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004d0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d10:	fab3 f383 	clz	r3, r3
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	461a      	mov	r2, r3
 8004d18:	4b0b      	ldr	r3, [pc, #44]	; (8004d48 <HAL_RCC_OscConfig+0x654>)
 8004d1a:	4413      	add	r3, r2
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	461a      	mov	r2, r3
 8004d20:	2301      	movs	r3, #1
 8004d22:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d24:	f7fc fb74 	bl	8001410 <HAL_GetTick>
 8004d28:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d2c:	e00e      	b.n	8004d4c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d2e:	f7fc fb6f 	bl	8001410 <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	2b02      	cmp	r3, #2
 8004d3c:	d906      	bls.n	8004d4c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	e3d9      	b.n	80054f6 <HAL_RCC_OscConfig+0xe02>
 8004d42:	bf00      	nop
 8004d44:	40021000 	.word	0x40021000
 8004d48:	10908120 	.word	0x10908120
 8004d4c:	2302      	movs	r3, #2
 8004d4e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d52:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004d56:	fa93 f3a3 	rbit	r3, r3
 8004d5a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004d5e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004d62:	2202      	movs	r2, #2
 8004d64:	601a      	str	r2, [r3, #0]
 8004d66:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	fa93 f2a3 	rbit	r2, r3
 8004d70:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004d74:	601a      	str	r2, [r3, #0]
 8004d76:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004d7a:	2202      	movs	r2, #2
 8004d7c:	601a      	str	r2, [r3, #0]
 8004d7e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	fa93 f2a3 	rbit	r2, r3
 8004d88:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8004d8c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d8e:	4ba5      	ldr	r3, [pc, #660]	; (8005024 <HAL_RCC_OscConfig+0x930>)
 8004d90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d92:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004d96:	2102      	movs	r1, #2
 8004d98:	6019      	str	r1, [r3, #0]
 8004d9a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	fa93 f1a3 	rbit	r1, r3
 8004da4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004da8:	6019      	str	r1, [r3, #0]
  return result;
 8004daa:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	fab3 f383 	clz	r3, r3
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	f003 031f 	and.w	r3, r3, #31
 8004dc0:	2101      	movs	r1, #1
 8004dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d0b0      	beq.n	8004d2e <HAL_RCC_OscConfig+0x63a>
 8004dcc:	e06a      	b.n	8004ea4 <HAL_RCC_OscConfig+0x7b0>
 8004dce:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dd6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	fa93 f2a3 	rbit	r2, r3
 8004de0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004de4:	601a      	str	r2, [r3, #0]
  return result;
 8004de6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004dea:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004dec:	fab3 f383 	clz	r3, r3
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	461a      	mov	r2, r3
 8004df4:	4b8c      	ldr	r3, [pc, #560]	; (8005028 <HAL_RCC_OscConfig+0x934>)
 8004df6:	4413      	add	r3, r2
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e00:	f7fc fb06 	bl	8001410 <HAL_GetTick>
 8004e04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e08:	e009      	b.n	8004e1e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e0a:	f7fc fb01 	bl	8001410 <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	d901      	bls.n	8004e1e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e36b      	b.n	80054f6 <HAL_RCC_OscConfig+0xe02>
 8004e1e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004e22:	2202      	movs	r2, #2
 8004e24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e26:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	fa93 f2a3 	rbit	r2, r3
 8004e30:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004e34:	601a      	str	r2, [r3, #0]
 8004e36:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004e3a:	2202      	movs	r2, #2
 8004e3c:	601a      	str	r2, [r3, #0]
 8004e3e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	fa93 f2a3 	rbit	r2, r3
 8004e48:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004e4c:	601a      	str	r2, [r3, #0]
 8004e4e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004e52:	2202      	movs	r2, #2
 8004e54:	601a      	str	r2, [r3, #0]
 8004e56:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	fa93 f2a3 	rbit	r2, r3
 8004e60:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004e64:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e66:	4b6f      	ldr	r3, [pc, #444]	; (8005024 <HAL_RCC_OscConfig+0x930>)
 8004e68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e6a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004e6e:	2102      	movs	r1, #2
 8004e70:	6019      	str	r1, [r3, #0]
 8004e72:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	fa93 f1a3 	rbit	r1, r3
 8004e7c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004e80:	6019      	str	r1, [r3, #0]
  return result;
 8004e82:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	fab3 f383 	clz	r3, r3
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	f003 031f 	and.w	r3, r3, #31
 8004e98:	2101      	movs	r1, #1
 8004e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d1b2      	bne.n	8004e0a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ea4:	1d3b      	adds	r3, r7, #4
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0304 	and.w	r3, r3, #4
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	f000 8158 	beq.w	8005164 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004eba:	4b5a      	ldr	r3, [pc, #360]	; (8005024 <HAL_RCC_OscConfig+0x930>)
 8004ebc:	69db      	ldr	r3, [r3, #28]
 8004ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d112      	bne.n	8004eec <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ec6:	4b57      	ldr	r3, [pc, #348]	; (8005024 <HAL_RCC_OscConfig+0x930>)
 8004ec8:	69db      	ldr	r3, [r3, #28]
 8004eca:	4a56      	ldr	r2, [pc, #344]	; (8005024 <HAL_RCC_OscConfig+0x930>)
 8004ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ed0:	61d3      	str	r3, [r2, #28]
 8004ed2:	4b54      	ldr	r3, [pc, #336]	; (8005024 <HAL_RCC_OscConfig+0x930>)
 8004ed4:	69db      	ldr	r3, [r3, #28]
 8004ed6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004eda:	f107 0308 	add.w	r3, r7, #8
 8004ede:	601a      	str	r2, [r3, #0]
 8004ee0:	f107 0308 	add.w	r3, r7, #8
 8004ee4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eec:	4b4f      	ldr	r3, [pc, #316]	; (800502c <HAL_RCC_OscConfig+0x938>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d11a      	bne.n	8004f2e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ef8:	4b4c      	ldr	r3, [pc, #304]	; (800502c <HAL_RCC_OscConfig+0x938>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a4b      	ldr	r2, [pc, #300]	; (800502c <HAL_RCC_OscConfig+0x938>)
 8004efe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f02:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f04:	f7fc fa84 	bl	8001410 <HAL_GetTick>
 8004f08:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f0c:	e009      	b.n	8004f22 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f0e:	f7fc fa7f 	bl	8001410 <HAL_GetTick>
 8004f12:	4602      	mov	r2, r0
 8004f14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	2b64      	cmp	r3, #100	; 0x64
 8004f1c:	d901      	bls.n	8004f22 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e2e9      	b.n	80054f6 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f22:	4b42      	ldr	r3, [pc, #264]	; (800502c <HAL_RCC_OscConfig+0x938>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d0ef      	beq.n	8004f0e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f2e:	1d3b      	adds	r3, r7, #4
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d106      	bne.n	8004f46 <HAL_RCC_OscConfig+0x852>
 8004f38:	4b3a      	ldr	r3, [pc, #232]	; (8005024 <HAL_RCC_OscConfig+0x930>)
 8004f3a:	6a1b      	ldr	r3, [r3, #32]
 8004f3c:	4a39      	ldr	r2, [pc, #228]	; (8005024 <HAL_RCC_OscConfig+0x930>)
 8004f3e:	f043 0301 	orr.w	r3, r3, #1
 8004f42:	6213      	str	r3, [r2, #32]
 8004f44:	e02f      	b.n	8004fa6 <HAL_RCC_OscConfig+0x8b2>
 8004f46:	1d3b      	adds	r3, r7, #4
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d10c      	bne.n	8004f6a <HAL_RCC_OscConfig+0x876>
 8004f50:	4b34      	ldr	r3, [pc, #208]	; (8005024 <HAL_RCC_OscConfig+0x930>)
 8004f52:	6a1b      	ldr	r3, [r3, #32]
 8004f54:	4a33      	ldr	r2, [pc, #204]	; (8005024 <HAL_RCC_OscConfig+0x930>)
 8004f56:	f023 0301 	bic.w	r3, r3, #1
 8004f5a:	6213      	str	r3, [r2, #32]
 8004f5c:	4b31      	ldr	r3, [pc, #196]	; (8005024 <HAL_RCC_OscConfig+0x930>)
 8004f5e:	6a1b      	ldr	r3, [r3, #32]
 8004f60:	4a30      	ldr	r2, [pc, #192]	; (8005024 <HAL_RCC_OscConfig+0x930>)
 8004f62:	f023 0304 	bic.w	r3, r3, #4
 8004f66:	6213      	str	r3, [r2, #32]
 8004f68:	e01d      	b.n	8004fa6 <HAL_RCC_OscConfig+0x8b2>
 8004f6a:	1d3b      	adds	r3, r7, #4
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	2b05      	cmp	r3, #5
 8004f72:	d10c      	bne.n	8004f8e <HAL_RCC_OscConfig+0x89a>
 8004f74:	4b2b      	ldr	r3, [pc, #172]	; (8005024 <HAL_RCC_OscConfig+0x930>)
 8004f76:	6a1b      	ldr	r3, [r3, #32]
 8004f78:	4a2a      	ldr	r2, [pc, #168]	; (8005024 <HAL_RCC_OscConfig+0x930>)
 8004f7a:	f043 0304 	orr.w	r3, r3, #4
 8004f7e:	6213      	str	r3, [r2, #32]
 8004f80:	4b28      	ldr	r3, [pc, #160]	; (8005024 <HAL_RCC_OscConfig+0x930>)
 8004f82:	6a1b      	ldr	r3, [r3, #32]
 8004f84:	4a27      	ldr	r2, [pc, #156]	; (8005024 <HAL_RCC_OscConfig+0x930>)
 8004f86:	f043 0301 	orr.w	r3, r3, #1
 8004f8a:	6213      	str	r3, [r2, #32]
 8004f8c:	e00b      	b.n	8004fa6 <HAL_RCC_OscConfig+0x8b2>
 8004f8e:	4b25      	ldr	r3, [pc, #148]	; (8005024 <HAL_RCC_OscConfig+0x930>)
 8004f90:	6a1b      	ldr	r3, [r3, #32]
 8004f92:	4a24      	ldr	r2, [pc, #144]	; (8005024 <HAL_RCC_OscConfig+0x930>)
 8004f94:	f023 0301 	bic.w	r3, r3, #1
 8004f98:	6213      	str	r3, [r2, #32]
 8004f9a:	4b22      	ldr	r3, [pc, #136]	; (8005024 <HAL_RCC_OscConfig+0x930>)
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
 8004f9e:	4a21      	ldr	r2, [pc, #132]	; (8005024 <HAL_RCC_OscConfig+0x930>)
 8004fa0:	f023 0304 	bic.w	r3, r3, #4
 8004fa4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004fa6:	1d3b      	adds	r3, r7, #4
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d06b      	beq.n	8005088 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fb0:	f7fc fa2e 	bl	8001410 <HAL_GetTick>
 8004fb4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fb8:	e00b      	b.n	8004fd2 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fba:	f7fc fa29 	bl	8001410 <HAL_GetTick>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d901      	bls.n	8004fd2 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e291      	b.n	80054f6 <HAL_RCC_OscConfig+0xe02>
 8004fd2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004fd6:	2202      	movs	r2, #2
 8004fd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fda:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	fa93 f2a3 	rbit	r2, r3
 8004fe4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004fe8:	601a      	str	r2, [r3, #0]
 8004fea:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004fee:	2202      	movs	r2, #2
 8004ff0:	601a      	str	r2, [r3, #0]
 8004ff2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	fa93 f2a3 	rbit	r2, r3
 8004ffc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005000:	601a      	str	r2, [r3, #0]
  return result;
 8005002:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005006:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005008:	fab3 f383 	clz	r3, r3
 800500c:	b2db      	uxtb	r3, r3
 800500e:	095b      	lsrs	r3, r3, #5
 8005010:	b2db      	uxtb	r3, r3
 8005012:	f043 0302 	orr.w	r3, r3, #2
 8005016:	b2db      	uxtb	r3, r3
 8005018:	2b02      	cmp	r3, #2
 800501a:	d109      	bne.n	8005030 <HAL_RCC_OscConfig+0x93c>
 800501c:	4b01      	ldr	r3, [pc, #4]	; (8005024 <HAL_RCC_OscConfig+0x930>)
 800501e:	6a1b      	ldr	r3, [r3, #32]
 8005020:	e014      	b.n	800504c <HAL_RCC_OscConfig+0x958>
 8005022:	bf00      	nop
 8005024:	40021000 	.word	0x40021000
 8005028:	10908120 	.word	0x10908120
 800502c:	40007000 	.word	0x40007000
 8005030:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005034:	2202      	movs	r2, #2
 8005036:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005038:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	fa93 f2a3 	rbit	r2, r3
 8005042:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005046:	601a      	str	r2, [r3, #0]
 8005048:	4bbb      	ldr	r3, [pc, #748]	; (8005338 <HAL_RCC_OscConfig+0xc44>)
 800504a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005050:	2102      	movs	r1, #2
 8005052:	6011      	str	r1, [r2, #0]
 8005054:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005058:	6812      	ldr	r2, [r2, #0]
 800505a:	fa92 f1a2 	rbit	r1, r2
 800505e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005062:	6011      	str	r1, [r2, #0]
  return result;
 8005064:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005068:	6812      	ldr	r2, [r2, #0]
 800506a:	fab2 f282 	clz	r2, r2
 800506e:	b2d2      	uxtb	r2, r2
 8005070:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005074:	b2d2      	uxtb	r2, r2
 8005076:	f002 021f 	and.w	r2, r2, #31
 800507a:	2101      	movs	r1, #1
 800507c:	fa01 f202 	lsl.w	r2, r1, r2
 8005080:	4013      	ands	r3, r2
 8005082:	2b00      	cmp	r3, #0
 8005084:	d099      	beq.n	8004fba <HAL_RCC_OscConfig+0x8c6>
 8005086:	e063      	b.n	8005150 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005088:	f7fc f9c2 	bl	8001410 <HAL_GetTick>
 800508c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005090:	e00b      	b.n	80050aa <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005092:	f7fc f9bd 	bl	8001410 <HAL_GetTick>
 8005096:	4602      	mov	r2, r0
 8005098:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	f241 3288 	movw	r2, #5000	; 0x1388
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d901      	bls.n	80050aa <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e225      	b.n	80054f6 <HAL_RCC_OscConfig+0xe02>
 80050aa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80050ae:	2202      	movs	r2, #2
 80050b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050b2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	fa93 f2a3 	rbit	r2, r3
 80050bc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80050c0:	601a      	str	r2, [r3, #0]
 80050c2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80050c6:	2202      	movs	r2, #2
 80050c8:	601a      	str	r2, [r3, #0]
 80050ca:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	fa93 f2a3 	rbit	r2, r3
 80050d4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80050d8:	601a      	str	r2, [r3, #0]
  return result;
 80050da:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80050de:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050e0:	fab3 f383 	clz	r3, r3
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	095b      	lsrs	r3, r3, #5
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	f043 0302 	orr.w	r3, r3, #2
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	2b02      	cmp	r3, #2
 80050f2:	d102      	bne.n	80050fa <HAL_RCC_OscConfig+0xa06>
 80050f4:	4b90      	ldr	r3, [pc, #576]	; (8005338 <HAL_RCC_OscConfig+0xc44>)
 80050f6:	6a1b      	ldr	r3, [r3, #32]
 80050f8:	e00d      	b.n	8005116 <HAL_RCC_OscConfig+0xa22>
 80050fa:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80050fe:	2202      	movs	r2, #2
 8005100:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005102:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	fa93 f2a3 	rbit	r2, r3
 800510c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8005110:	601a      	str	r2, [r3, #0]
 8005112:	4b89      	ldr	r3, [pc, #548]	; (8005338 <HAL_RCC_OscConfig+0xc44>)
 8005114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005116:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800511a:	2102      	movs	r1, #2
 800511c:	6011      	str	r1, [r2, #0]
 800511e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005122:	6812      	ldr	r2, [r2, #0]
 8005124:	fa92 f1a2 	rbit	r1, r2
 8005128:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800512c:	6011      	str	r1, [r2, #0]
  return result;
 800512e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8005132:	6812      	ldr	r2, [r2, #0]
 8005134:	fab2 f282 	clz	r2, r2
 8005138:	b2d2      	uxtb	r2, r2
 800513a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800513e:	b2d2      	uxtb	r2, r2
 8005140:	f002 021f 	and.w	r2, r2, #31
 8005144:	2101      	movs	r1, #1
 8005146:	fa01 f202 	lsl.w	r2, r1, r2
 800514a:	4013      	ands	r3, r2
 800514c:	2b00      	cmp	r3, #0
 800514e:	d1a0      	bne.n	8005092 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005150:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8005154:	2b01      	cmp	r3, #1
 8005156:	d105      	bne.n	8005164 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005158:	4b77      	ldr	r3, [pc, #476]	; (8005338 <HAL_RCC_OscConfig+0xc44>)
 800515a:	69db      	ldr	r3, [r3, #28]
 800515c:	4a76      	ldr	r2, [pc, #472]	; (8005338 <HAL_RCC_OscConfig+0xc44>)
 800515e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005162:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005164:	1d3b      	adds	r3, r7, #4
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	69db      	ldr	r3, [r3, #28]
 800516a:	2b00      	cmp	r3, #0
 800516c:	f000 81c2 	beq.w	80054f4 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005170:	4b71      	ldr	r3, [pc, #452]	; (8005338 <HAL_RCC_OscConfig+0xc44>)
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	f003 030c 	and.w	r3, r3, #12
 8005178:	2b08      	cmp	r3, #8
 800517a:	f000 819c 	beq.w	80054b6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800517e:	1d3b      	adds	r3, r7, #4
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	69db      	ldr	r3, [r3, #28]
 8005184:	2b02      	cmp	r3, #2
 8005186:	f040 8114 	bne.w	80053b2 <HAL_RCC_OscConfig+0xcbe>
 800518a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800518e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005192:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005194:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	fa93 f2a3 	rbit	r2, r3
 800519e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80051a2:	601a      	str	r2, [r3, #0]
  return result;
 80051a4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80051a8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051aa:	fab3 f383 	clz	r3, r3
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80051b4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	461a      	mov	r2, r3
 80051bc:	2300      	movs	r3, #0
 80051be:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051c0:	f7fc f926 	bl	8001410 <HAL_GetTick>
 80051c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051c8:	e009      	b.n	80051de <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051ca:	f7fc f921 	bl	8001410 <HAL_GetTick>
 80051ce:	4602      	mov	r2, r0
 80051d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	d901      	bls.n	80051de <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	e18b      	b.n	80054f6 <HAL_RCC_OscConfig+0xe02>
 80051de:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80051e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80051e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051e8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	fa93 f2a3 	rbit	r2, r3
 80051f2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80051f6:	601a      	str	r2, [r3, #0]
  return result;
 80051f8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80051fc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051fe:	fab3 f383 	clz	r3, r3
 8005202:	b2db      	uxtb	r3, r3
 8005204:	095b      	lsrs	r3, r3, #5
 8005206:	b2db      	uxtb	r3, r3
 8005208:	f043 0301 	orr.w	r3, r3, #1
 800520c:	b2db      	uxtb	r3, r3
 800520e:	2b01      	cmp	r3, #1
 8005210:	d102      	bne.n	8005218 <HAL_RCC_OscConfig+0xb24>
 8005212:	4b49      	ldr	r3, [pc, #292]	; (8005338 <HAL_RCC_OscConfig+0xc44>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	e01b      	b.n	8005250 <HAL_RCC_OscConfig+0xb5c>
 8005218:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800521c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005220:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005222:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	fa93 f2a3 	rbit	r2, r3
 800522c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005230:	601a      	str	r2, [r3, #0]
 8005232:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005236:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800523a:	601a      	str	r2, [r3, #0]
 800523c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	fa93 f2a3 	rbit	r2, r3
 8005246:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800524a:	601a      	str	r2, [r3, #0]
 800524c:	4b3a      	ldr	r3, [pc, #232]	; (8005338 <HAL_RCC_OscConfig+0xc44>)
 800524e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005250:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005254:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005258:	6011      	str	r1, [r2, #0]
 800525a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800525e:	6812      	ldr	r2, [r2, #0]
 8005260:	fa92 f1a2 	rbit	r1, r2
 8005264:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005268:	6011      	str	r1, [r2, #0]
  return result;
 800526a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800526e:	6812      	ldr	r2, [r2, #0]
 8005270:	fab2 f282 	clz	r2, r2
 8005274:	b2d2      	uxtb	r2, r2
 8005276:	f042 0220 	orr.w	r2, r2, #32
 800527a:	b2d2      	uxtb	r2, r2
 800527c:	f002 021f 	and.w	r2, r2, #31
 8005280:	2101      	movs	r1, #1
 8005282:	fa01 f202 	lsl.w	r2, r1, r2
 8005286:	4013      	ands	r3, r2
 8005288:	2b00      	cmp	r3, #0
 800528a:	d19e      	bne.n	80051ca <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800528c:	4b2a      	ldr	r3, [pc, #168]	; (8005338 <HAL_RCC_OscConfig+0xc44>)
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005294:	1d3b      	adds	r3, r7, #4
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800529a:	1d3b      	adds	r3, r7, #4
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	6a1b      	ldr	r3, [r3, #32]
 80052a0:	430b      	orrs	r3, r1
 80052a2:	4925      	ldr	r1, [pc, #148]	; (8005338 <HAL_RCC_OscConfig+0xc44>)
 80052a4:	4313      	orrs	r3, r2
 80052a6:	604b      	str	r3, [r1, #4]
 80052a8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80052ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80052b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052b2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	fa93 f2a3 	rbit	r2, r3
 80052bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80052c0:	601a      	str	r2, [r3, #0]
  return result;
 80052c2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80052c6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052c8:	fab3 f383 	clz	r3, r3
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80052d2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	461a      	mov	r2, r3
 80052da:	2301      	movs	r3, #1
 80052dc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052de:	f7fc f897 	bl	8001410 <HAL_GetTick>
 80052e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80052e6:	e009      	b.n	80052fc <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052e8:	f7fc f892 	bl	8001410 <HAL_GetTick>
 80052ec:	4602      	mov	r2, r0
 80052ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80052f2:	1ad3      	subs	r3, r2, r3
 80052f4:	2b02      	cmp	r3, #2
 80052f6:	d901      	bls.n	80052fc <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80052f8:	2303      	movs	r3, #3
 80052fa:	e0fc      	b.n	80054f6 <HAL_RCC_OscConfig+0xe02>
 80052fc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005300:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005304:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005306:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	fa93 f2a3 	rbit	r2, r3
 8005310:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005314:	601a      	str	r2, [r3, #0]
  return result;
 8005316:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800531a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800531c:	fab3 f383 	clz	r3, r3
 8005320:	b2db      	uxtb	r3, r3
 8005322:	095b      	lsrs	r3, r3, #5
 8005324:	b2db      	uxtb	r3, r3
 8005326:	f043 0301 	orr.w	r3, r3, #1
 800532a:	b2db      	uxtb	r3, r3
 800532c:	2b01      	cmp	r3, #1
 800532e:	d105      	bne.n	800533c <HAL_RCC_OscConfig+0xc48>
 8005330:	4b01      	ldr	r3, [pc, #4]	; (8005338 <HAL_RCC_OscConfig+0xc44>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	e01e      	b.n	8005374 <HAL_RCC_OscConfig+0xc80>
 8005336:	bf00      	nop
 8005338:	40021000 	.word	0x40021000
 800533c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005340:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005344:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005346:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	fa93 f2a3 	rbit	r2, r3
 8005350:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005354:	601a      	str	r2, [r3, #0]
 8005356:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800535a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800535e:	601a      	str	r2, [r3, #0]
 8005360:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	fa93 f2a3 	rbit	r2, r3
 800536a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800536e:	601a      	str	r2, [r3, #0]
 8005370:	4b63      	ldr	r3, [pc, #396]	; (8005500 <HAL_RCC_OscConfig+0xe0c>)
 8005372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005374:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005378:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800537c:	6011      	str	r1, [r2, #0]
 800537e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005382:	6812      	ldr	r2, [r2, #0]
 8005384:	fa92 f1a2 	rbit	r1, r2
 8005388:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800538c:	6011      	str	r1, [r2, #0]
  return result;
 800538e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005392:	6812      	ldr	r2, [r2, #0]
 8005394:	fab2 f282 	clz	r2, r2
 8005398:	b2d2      	uxtb	r2, r2
 800539a:	f042 0220 	orr.w	r2, r2, #32
 800539e:	b2d2      	uxtb	r2, r2
 80053a0:	f002 021f 	and.w	r2, r2, #31
 80053a4:	2101      	movs	r1, #1
 80053a6:	fa01 f202 	lsl.w	r2, r1, r2
 80053aa:	4013      	ands	r3, r2
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d09b      	beq.n	80052e8 <HAL_RCC_OscConfig+0xbf4>
 80053b0:	e0a0      	b.n	80054f4 <HAL_RCC_OscConfig+0xe00>
 80053b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80053b6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80053ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	fa93 f2a3 	rbit	r2, r3
 80053c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80053ca:	601a      	str	r2, [r3, #0]
  return result;
 80053cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80053d0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053d2:	fab3 f383 	clz	r3, r3
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80053dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	461a      	mov	r2, r3
 80053e4:	2300      	movs	r3, #0
 80053e6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053e8:	f7fc f812 	bl	8001410 <HAL_GetTick>
 80053ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053f0:	e009      	b.n	8005406 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053f2:	f7fc f80d 	bl	8001410 <HAL_GetTick>
 80053f6:	4602      	mov	r2, r0
 80053f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80053fc:	1ad3      	subs	r3, r2, r3
 80053fe:	2b02      	cmp	r3, #2
 8005400:	d901      	bls.n	8005406 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8005402:	2303      	movs	r3, #3
 8005404:	e077      	b.n	80054f6 <HAL_RCC_OscConfig+0xe02>
 8005406:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800540a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800540e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005410:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	fa93 f2a3 	rbit	r2, r3
 800541a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800541e:	601a      	str	r2, [r3, #0]
  return result;
 8005420:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005424:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005426:	fab3 f383 	clz	r3, r3
 800542a:	b2db      	uxtb	r3, r3
 800542c:	095b      	lsrs	r3, r3, #5
 800542e:	b2db      	uxtb	r3, r3
 8005430:	f043 0301 	orr.w	r3, r3, #1
 8005434:	b2db      	uxtb	r3, r3
 8005436:	2b01      	cmp	r3, #1
 8005438:	d102      	bne.n	8005440 <HAL_RCC_OscConfig+0xd4c>
 800543a:	4b31      	ldr	r3, [pc, #196]	; (8005500 <HAL_RCC_OscConfig+0xe0c>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	e01b      	b.n	8005478 <HAL_RCC_OscConfig+0xd84>
 8005440:	f107 0320 	add.w	r3, r7, #32
 8005444:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005448:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800544a:	f107 0320 	add.w	r3, r7, #32
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	fa93 f2a3 	rbit	r2, r3
 8005454:	f107 031c 	add.w	r3, r7, #28
 8005458:	601a      	str	r2, [r3, #0]
 800545a:	f107 0318 	add.w	r3, r7, #24
 800545e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005462:	601a      	str	r2, [r3, #0]
 8005464:	f107 0318 	add.w	r3, r7, #24
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	fa93 f2a3 	rbit	r2, r3
 800546e:	f107 0314 	add.w	r3, r7, #20
 8005472:	601a      	str	r2, [r3, #0]
 8005474:	4b22      	ldr	r3, [pc, #136]	; (8005500 <HAL_RCC_OscConfig+0xe0c>)
 8005476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005478:	f107 0210 	add.w	r2, r7, #16
 800547c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005480:	6011      	str	r1, [r2, #0]
 8005482:	f107 0210 	add.w	r2, r7, #16
 8005486:	6812      	ldr	r2, [r2, #0]
 8005488:	fa92 f1a2 	rbit	r1, r2
 800548c:	f107 020c 	add.w	r2, r7, #12
 8005490:	6011      	str	r1, [r2, #0]
  return result;
 8005492:	f107 020c 	add.w	r2, r7, #12
 8005496:	6812      	ldr	r2, [r2, #0]
 8005498:	fab2 f282 	clz	r2, r2
 800549c:	b2d2      	uxtb	r2, r2
 800549e:	f042 0220 	orr.w	r2, r2, #32
 80054a2:	b2d2      	uxtb	r2, r2
 80054a4:	f002 021f 	and.w	r2, r2, #31
 80054a8:	2101      	movs	r1, #1
 80054aa:	fa01 f202 	lsl.w	r2, r1, r2
 80054ae:	4013      	ands	r3, r2
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d19e      	bne.n	80053f2 <HAL_RCC_OscConfig+0xcfe>
 80054b4:	e01e      	b.n	80054f4 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054b6:	1d3b      	adds	r3, r7, #4
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	69db      	ldr	r3, [r3, #28]
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d101      	bne.n	80054c4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e018      	b.n	80054f6 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80054c4:	4b0e      	ldr	r3, [pc, #56]	; (8005500 <HAL_RCC_OscConfig+0xe0c>)
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80054cc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80054d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80054d4:	1d3b      	adds	r3, r7, #4
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	6a1b      	ldr	r3, [r3, #32]
 80054da:	429a      	cmp	r2, r3
 80054dc:	d108      	bne.n	80054f0 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80054de:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80054e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80054e6:	1d3b      	adds	r3, r7, #4
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d001      	beq.n	80054f4 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e000      	b.n	80054f6 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	40021000 	.word	0x40021000

08005504 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b09e      	sub	sp, #120	; 0x78
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800550e:	2300      	movs	r3, #0
 8005510:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d101      	bne.n	800551c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e162      	b.n	80057e2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800551c:	4b90      	ldr	r3, [pc, #576]	; (8005760 <HAL_RCC_ClockConfig+0x25c>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0307 	and.w	r3, r3, #7
 8005524:	683a      	ldr	r2, [r7, #0]
 8005526:	429a      	cmp	r2, r3
 8005528:	d910      	bls.n	800554c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800552a:	4b8d      	ldr	r3, [pc, #564]	; (8005760 <HAL_RCC_ClockConfig+0x25c>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f023 0207 	bic.w	r2, r3, #7
 8005532:	498b      	ldr	r1, [pc, #556]	; (8005760 <HAL_RCC_ClockConfig+0x25c>)
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	4313      	orrs	r3, r2
 8005538:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800553a:	4b89      	ldr	r3, [pc, #548]	; (8005760 <HAL_RCC_ClockConfig+0x25c>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 0307 	and.w	r3, r3, #7
 8005542:	683a      	ldr	r2, [r7, #0]
 8005544:	429a      	cmp	r2, r3
 8005546:	d001      	beq.n	800554c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e14a      	b.n	80057e2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 0302 	and.w	r3, r3, #2
 8005554:	2b00      	cmp	r3, #0
 8005556:	d008      	beq.n	800556a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005558:	4b82      	ldr	r3, [pc, #520]	; (8005764 <HAL_RCC_ClockConfig+0x260>)
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	497f      	ldr	r1, [pc, #508]	; (8005764 <HAL_RCC_ClockConfig+0x260>)
 8005566:	4313      	orrs	r3, r2
 8005568:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 0301 	and.w	r3, r3, #1
 8005572:	2b00      	cmp	r3, #0
 8005574:	f000 80dc 	beq.w	8005730 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	2b01      	cmp	r3, #1
 800557e:	d13c      	bne.n	80055fa <HAL_RCC_ClockConfig+0xf6>
 8005580:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005584:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005586:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005588:	fa93 f3a3 	rbit	r3, r3
 800558c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800558e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005590:	fab3 f383 	clz	r3, r3
 8005594:	b2db      	uxtb	r3, r3
 8005596:	095b      	lsrs	r3, r3, #5
 8005598:	b2db      	uxtb	r3, r3
 800559a:	f043 0301 	orr.w	r3, r3, #1
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d102      	bne.n	80055aa <HAL_RCC_ClockConfig+0xa6>
 80055a4:	4b6f      	ldr	r3, [pc, #444]	; (8005764 <HAL_RCC_ClockConfig+0x260>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	e00f      	b.n	80055ca <HAL_RCC_ClockConfig+0xc6>
 80055aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80055ae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80055b2:	fa93 f3a3 	rbit	r3, r3
 80055b6:	667b      	str	r3, [r7, #100]	; 0x64
 80055b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80055bc:	663b      	str	r3, [r7, #96]	; 0x60
 80055be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055c0:	fa93 f3a3 	rbit	r3, r3
 80055c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055c6:	4b67      	ldr	r3, [pc, #412]	; (8005764 <HAL_RCC_ClockConfig+0x260>)
 80055c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80055ce:	65ba      	str	r2, [r7, #88]	; 0x58
 80055d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80055d2:	fa92 f2a2 	rbit	r2, r2
 80055d6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80055d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80055da:	fab2 f282 	clz	r2, r2
 80055de:	b2d2      	uxtb	r2, r2
 80055e0:	f042 0220 	orr.w	r2, r2, #32
 80055e4:	b2d2      	uxtb	r2, r2
 80055e6:	f002 021f 	and.w	r2, r2, #31
 80055ea:	2101      	movs	r1, #1
 80055ec:	fa01 f202 	lsl.w	r2, r1, r2
 80055f0:	4013      	ands	r3, r2
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d17b      	bne.n	80056ee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e0f3      	b.n	80057e2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	2b02      	cmp	r3, #2
 8005600:	d13c      	bne.n	800567c <HAL_RCC_ClockConfig+0x178>
 8005602:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005606:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005608:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800560a:	fa93 f3a3 	rbit	r3, r3
 800560e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005610:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005612:	fab3 f383 	clz	r3, r3
 8005616:	b2db      	uxtb	r3, r3
 8005618:	095b      	lsrs	r3, r3, #5
 800561a:	b2db      	uxtb	r3, r3
 800561c:	f043 0301 	orr.w	r3, r3, #1
 8005620:	b2db      	uxtb	r3, r3
 8005622:	2b01      	cmp	r3, #1
 8005624:	d102      	bne.n	800562c <HAL_RCC_ClockConfig+0x128>
 8005626:	4b4f      	ldr	r3, [pc, #316]	; (8005764 <HAL_RCC_ClockConfig+0x260>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	e00f      	b.n	800564c <HAL_RCC_ClockConfig+0x148>
 800562c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005630:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005632:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005634:	fa93 f3a3 	rbit	r3, r3
 8005638:	647b      	str	r3, [r7, #68]	; 0x44
 800563a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800563e:	643b      	str	r3, [r7, #64]	; 0x40
 8005640:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005642:	fa93 f3a3 	rbit	r3, r3
 8005646:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005648:	4b46      	ldr	r3, [pc, #280]	; (8005764 <HAL_RCC_ClockConfig+0x260>)
 800564a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005650:	63ba      	str	r2, [r7, #56]	; 0x38
 8005652:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005654:	fa92 f2a2 	rbit	r2, r2
 8005658:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800565a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800565c:	fab2 f282 	clz	r2, r2
 8005660:	b2d2      	uxtb	r2, r2
 8005662:	f042 0220 	orr.w	r2, r2, #32
 8005666:	b2d2      	uxtb	r2, r2
 8005668:	f002 021f 	and.w	r2, r2, #31
 800566c:	2101      	movs	r1, #1
 800566e:	fa01 f202 	lsl.w	r2, r1, r2
 8005672:	4013      	ands	r3, r2
 8005674:	2b00      	cmp	r3, #0
 8005676:	d13a      	bne.n	80056ee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	e0b2      	b.n	80057e2 <HAL_RCC_ClockConfig+0x2de>
 800567c:	2302      	movs	r3, #2
 800567e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005682:	fa93 f3a3 	rbit	r3, r3
 8005686:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800568a:	fab3 f383 	clz	r3, r3
 800568e:	b2db      	uxtb	r3, r3
 8005690:	095b      	lsrs	r3, r3, #5
 8005692:	b2db      	uxtb	r3, r3
 8005694:	f043 0301 	orr.w	r3, r3, #1
 8005698:	b2db      	uxtb	r3, r3
 800569a:	2b01      	cmp	r3, #1
 800569c:	d102      	bne.n	80056a4 <HAL_RCC_ClockConfig+0x1a0>
 800569e:	4b31      	ldr	r3, [pc, #196]	; (8005764 <HAL_RCC_ClockConfig+0x260>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	e00d      	b.n	80056c0 <HAL_RCC_ClockConfig+0x1bc>
 80056a4:	2302      	movs	r3, #2
 80056a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056aa:	fa93 f3a3 	rbit	r3, r3
 80056ae:	627b      	str	r3, [r7, #36]	; 0x24
 80056b0:	2302      	movs	r3, #2
 80056b2:	623b      	str	r3, [r7, #32]
 80056b4:	6a3b      	ldr	r3, [r7, #32]
 80056b6:	fa93 f3a3 	rbit	r3, r3
 80056ba:	61fb      	str	r3, [r7, #28]
 80056bc:	4b29      	ldr	r3, [pc, #164]	; (8005764 <HAL_RCC_ClockConfig+0x260>)
 80056be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c0:	2202      	movs	r2, #2
 80056c2:	61ba      	str	r2, [r7, #24]
 80056c4:	69ba      	ldr	r2, [r7, #24]
 80056c6:	fa92 f2a2 	rbit	r2, r2
 80056ca:	617a      	str	r2, [r7, #20]
  return result;
 80056cc:	697a      	ldr	r2, [r7, #20]
 80056ce:	fab2 f282 	clz	r2, r2
 80056d2:	b2d2      	uxtb	r2, r2
 80056d4:	f042 0220 	orr.w	r2, r2, #32
 80056d8:	b2d2      	uxtb	r2, r2
 80056da:	f002 021f 	and.w	r2, r2, #31
 80056de:	2101      	movs	r1, #1
 80056e0:	fa01 f202 	lsl.w	r2, r1, r2
 80056e4:	4013      	ands	r3, r2
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d101      	bne.n	80056ee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e079      	b.n	80057e2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056ee:	4b1d      	ldr	r3, [pc, #116]	; (8005764 <HAL_RCC_ClockConfig+0x260>)
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	f023 0203 	bic.w	r2, r3, #3
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	491a      	ldr	r1, [pc, #104]	; (8005764 <HAL_RCC_ClockConfig+0x260>)
 80056fc:	4313      	orrs	r3, r2
 80056fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005700:	f7fb fe86 	bl	8001410 <HAL_GetTick>
 8005704:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005706:	e00a      	b.n	800571e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005708:	f7fb fe82 	bl	8001410 <HAL_GetTick>
 800570c:	4602      	mov	r2, r0
 800570e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	f241 3288 	movw	r2, #5000	; 0x1388
 8005716:	4293      	cmp	r3, r2
 8005718:	d901      	bls.n	800571e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800571a:	2303      	movs	r3, #3
 800571c:	e061      	b.n	80057e2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800571e:	4b11      	ldr	r3, [pc, #68]	; (8005764 <HAL_RCC_ClockConfig+0x260>)
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	f003 020c 	and.w	r2, r3, #12
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	429a      	cmp	r2, r3
 800572e:	d1eb      	bne.n	8005708 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005730:	4b0b      	ldr	r3, [pc, #44]	; (8005760 <HAL_RCC_ClockConfig+0x25c>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 0307 	and.w	r3, r3, #7
 8005738:	683a      	ldr	r2, [r7, #0]
 800573a:	429a      	cmp	r2, r3
 800573c:	d214      	bcs.n	8005768 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800573e:	4b08      	ldr	r3, [pc, #32]	; (8005760 <HAL_RCC_ClockConfig+0x25c>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f023 0207 	bic.w	r2, r3, #7
 8005746:	4906      	ldr	r1, [pc, #24]	; (8005760 <HAL_RCC_ClockConfig+0x25c>)
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	4313      	orrs	r3, r2
 800574c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800574e:	4b04      	ldr	r3, [pc, #16]	; (8005760 <HAL_RCC_ClockConfig+0x25c>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 0307 	and.w	r3, r3, #7
 8005756:	683a      	ldr	r2, [r7, #0]
 8005758:	429a      	cmp	r2, r3
 800575a:	d005      	beq.n	8005768 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e040      	b.n	80057e2 <HAL_RCC_ClockConfig+0x2de>
 8005760:	40022000 	.word	0x40022000
 8005764:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 0304 	and.w	r3, r3, #4
 8005770:	2b00      	cmp	r3, #0
 8005772:	d008      	beq.n	8005786 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005774:	4b1d      	ldr	r3, [pc, #116]	; (80057ec <HAL_RCC_ClockConfig+0x2e8>)
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	491a      	ldr	r1, [pc, #104]	; (80057ec <HAL_RCC_ClockConfig+0x2e8>)
 8005782:	4313      	orrs	r3, r2
 8005784:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 0308 	and.w	r3, r3, #8
 800578e:	2b00      	cmp	r3, #0
 8005790:	d009      	beq.n	80057a6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005792:	4b16      	ldr	r3, [pc, #88]	; (80057ec <HAL_RCC_ClockConfig+0x2e8>)
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	00db      	lsls	r3, r3, #3
 80057a0:	4912      	ldr	r1, [pc, #72]	; (80057ec <HAL_RCC_ClockConfig+0x2e8>)
 80057a2:	4313      	orrs	r3, r2
 80057a4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80057a6:	f000 f829 	bl	80057fc <HAL_RCC_GetSysClockFreq>
 80057aa:	4601      	mov	r1, r0
 80057ac:	4b0f      	ldr	r3, [pc, #60]	; (80057ec <HAL_RCC_ClockConfig+0x2e8>)
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057b4:	22f0      	movs	r2, #240	; 0xf0
 80057b6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	fa92 f2a2 	rbit	r2, r2
 80057be:	60fa      	str	r2, [r7, #12]
  return result;
 80057c0:	68fa      	ldr	r2, [r7, #12]
 80057c2:	fab2 f282 	clz	r2, r2
 80057c6:	b2d2      	uxtb	r2, r2
 80057c8:	40d3      	lsrs	r3, r2
 80057ca:	4a09      	ldr	r2, [pc, #36]	; (80057f0 <HAL_RCC_ClockConfig+0x2ec>)
 80057cc:	5cd3      	ldrb	r3, [r2, r3]
 80057ce:	fa21 f303 	lsr.w	r3, r1, r3
 80057d2:	4a08      	ldr	r2, [pc, #32]	; (80057f4 <HAL_RCC_ClockConfig+0x2f0>)
 80057d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80057d6:	4b08      	ldr	r3, [pc, #32]	; (80057f8 <HAL_RCC_ClockConfig+0x2f4>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4618      	mov	r0, r3
 80057dc:	f7fb fdd4 	bl	8001388 <HAL_InitTick>
  
  return HAL_OK;
 80057e0:	2300      	movs	r3, #0
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3778      	adds	r7, #120	; 0x78
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	bf00      	nop
 80057ec:	40021000 	.word	0x40021000
 80057f0:	08007694 	.word	0x08007694
 80057f4:	20000000 	.word	0x20000000
 80057f8:	20000004 	.word	0x20000004

080057fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b08b      	sub	sp, #44	; 0x2c
 8005800:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005802:	2300      	movs	r3, #0
 8005804:	61fb      	str	r3, [r7, #28]
 8005806:	2300      	movs	r3, #0
 8005808:	61bb      	str	r3, [r7, #24]
 800580a:	2300      	movs	r3, #0
 800580c:	627b      	str	r3, [r7, #36]	; 0x24
 800580e:	2300      	movs	r3, #0
 8005810:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005812:	2300      	movs	r3, #0
 8005814:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005816:	4b29      	ldr	r3, [pc, #164]	; (80058bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	f003 030c 	and.w	r3, r3, #12
 8005822:	2b04      	cmp	r3, #4
 8005824:	d002      	beq.n	800582c <HAL_RCC_GetSysClockFreq+0x30>
 8005826:	2b08      	cmp	r3, #8
 8005828:	d003      	beq.n	8005832 <HAL_RCC_GetSysClockFreq+0x36>
 800582a:	e03c      	b.n	80058a6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800582c:	4b24      	ldr	r3, [pc, #144]	; (80058c0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800582e:	623b      	str	r3, [r7, #32]
      break;
 8005830:	e03c      	b.n	80058ac <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005838:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800583c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800583e:	68ba      	ldr	r2, [r7, #8]
 8005840:	fa92 f2a2 	rbit	r2, r2
 8005844:	607a      	str	r2, [r7, #4]
  return result;
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	fab2 f282 	clz	r2, r2
 800584c:	b2d2      	uxtb	r2, r2
 800584e:	40d3      	lsrs	r3, r2
 8005850:	4a1c      	ldr	r2, [pc, #112]	; (80058c4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005852:	5cd3      	ldrb	r3, [r2, r3]
 8005854:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005856:	4b19      	ldr	r3, [pc, #100]	; (80058bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8005858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800585a:	f003 030f 	and.w	r3, r3, #15
 800585e:	220f      	movs	r2, #15
 8005860:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005862:	693a      	ldr	r2, [r7, #16]
 8005864:	fa92 f2a2 	rbit	r2, r2
 8005868:	60fa      	str	r2, [r7, #12]
  return result;
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	fab2 f282 	clz	r2, r2
 8005870:	b2d2      	uxtb	r2, r2
 8005872:	40d3      	lsrs	r3, r2
 8005874:	4a14      	ldr	r2, [pc, #80]	; (80058c8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005876:	5cd3      	ldrb	r3, [r2, r3]
 8005878:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005880:	2b00      	cmp	r3, #0
 8005882:	d008      	beq.n	8005896 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005884:	4a0e      	ldr	r2, [pc, #56]	; (80058c0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	fbb2 f2f3 	udiv	r2, r2, r3
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	fb02 f303 	mul.w	r3, r2, r3
 8005892:	627b      	str	r3, [r7, #36]	; 0x24
 8005894:	e004      	b.n	80058a0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	4a0c      	ldr	r2, [pc, #48]	; (80058cc <HAL_RCC_GetSysClockFreq+0xd0>)
 800589a:	fb02 f303 	mul.w	r3, r2, r3
 800589e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80058a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a2:	623b      	str	r3, [r7, #32]
      break;
 80058a4:	e002      	b.n	80058ac <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80058a6:	4b06      	ldr	r3, [pc, #24]	; (80058c0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80058a8:	623b      	str	r3, [r7, #32]
      break;
 80058aa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80058ac:	6a3b      	ldr	r3, [r7, #32]
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	372c      	adds	r7, #44	; 0x2c
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	40021000 	.word	0x40021000
 80058c0:	007a1200 	.word	0x007a1200
 80058c4:	080076ac 	.word	0x080076ac
 80058c8:	080076bc 	.word	0x080076bc
 80058cc:	003d0900 	.word	0x003d0900

080058d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058d0:	b480      	push	{r7}
 80058d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058d4:	4b03      	ldr	r3, [pc, #12]	; (80058e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80058d6:	681b      	ldr	r3, [r3, #0]
}
 80058d8:	4618      	mov	r0, r3
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr
 80058e2:	bf00      	nop
 80058e4:	20000000 	.word	0x20000000

080058e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80058ee:	f7ff ffef 	bl	80058d0 <HAL_RCC_GetHCLKFreq>
 80058f2:	4601      	mov	r1, r0
 80058f4:	4b0b      	ldr	r3, [pc, #44]	; (8005924 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80058fc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005900:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	fa92 f2a2 	rbit	r2, r2
 8005908:	603a      	str	r2, [r7, #0]
  return result;
 800590a:	683a      	ldr	r2, [r7, #0]
 800590c:	fab2 f282 	clz	r2, r2
 8005910:	b2d2      	uxtb	r2, r2
 8005912:	40d3      	lsrs	r3, r2
 8005914:	4a04      	ldr	r2, [pc, #16]	; (8005928 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005916:	5cd3      	ldrb	r3, [r2, r3]
 8005918:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800591c:	4618      	mov	r0, r3
 800591e:	3708      	adds	r7, #8
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}
 8005924:	40021000 	.word	0x40021000
 8005928:	080076a4 	.word	0x080076a4

0800592c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b082      	sub	sp, #8
 8005930:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005932:	f7ff ffcd 	bl	80058d0 <HAL_RCC_GetHCLKFreq>
 8005936:	4601      	mov	r1, r0
 8005938:	4b0b      	ldr	r3, [pc, #44]	; (8005968 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005940:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005944:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	fa92 f2a2 	rbit	r2, r2
 800594c:	603a      	str	r2, [r7, #0]
  return result;
 800594e:	683a      	ldr	r2, [r7, #0]
 8005950:	fab2 f282 	clz	r2, r2
 8005954:	b2d2      	uxtb	r2, r2
 8005956:	40d3      	lsrs	r3, r2
 8005958:	4a04      	ldr	r2, [pc, #16]	; (800596c <HAL_RCC_GetPCLK2Freq+0x40>)
 800595a:	5cd3      	ldrb	r3, [r2, r3]
 800595c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005960:	4618      	mov	r0, r3
 8005962:	3708      	adds	r7, #8
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}
 8005968:	40021000 	.word	0x40021000
 800596c:	080076a4 	.word	0x080076a4

08005970 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b092      	sub	sp, #72	; 0x48
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005978:	2300      	movs	r3, #0
 800597a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800597c:	2300      	movs	r3, #0
 800597e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005980:	2300      	movs	r3, #0
 8005982:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800598e:	2b00      	cmp	r3, #0
 8005990:	f000 80cd 	beq.w	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005994:	4b86      	ldr	r3, [pc, #536]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005996:	69db      	ldr	r3, [r3, #28]
 8005998:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800599c:	2b00      	cmp	r3, #0
 800599e:	d10e      	bne.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059a0:	4b83      	ldr	r3, [pc, #524]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80059a2:	69db      	ldr	r3, [r3, #28]
 80059a4:	4a82      	ldr	r2, [pc, #520]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80059a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059aa:	61d3      	str	r3, [r2, #28]
 80059ac:	4b80      	ldr	r3, [pc, #512]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80059ae:	69db      	ldr	r3, [r3, #28]
 80059b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059b4:	60bb      	str	r3, [r7, #8]
 80059b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059b8:	2301      	movs	r3, #1
 80059ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059be:	4b7d      	ldr	r3, [pc, #500]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d118      	bne.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059ca:	4b7a      	ldr	r3, [pc, #488]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a79      	ldr	r2, [pc, #484]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80059d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059d4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059d6:	f7fb fd1b 	bl	8001410 <HAL_GetTick>
 80059da:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059dc:	e008      	b.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059de:	f7fb fd17 	bl	8001410 <HAL_GetTick>
 80059e2:	4602      	mov	r2, r0
 80059e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	2b64      	cmp	r3, #100	; 0x64
 80059ea:	d901      	bls.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80059ec:	2303      	movs	r3, #3
 80059ee:	e0db      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059f0:	4b70      	ldr	r3, [pc, #448]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d0f0      	beq.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80059fc:	4b6c      	ldr	r3, [pc, #432]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80059fe:	6a1b      	ldr	r3, [r3, #32]
 8005a00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a04:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005a06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d07d      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d076      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005a1a:	4b65      	ldr	r3, [pc, #404]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005a1c:	6a1b      	ldr	r3, [r3, #32]
 8005a1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005a28:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a2c:	fa93 f3a3 	rbit	r3, r3
 8005a30:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005a34:	fab3 f383 	clz	r3, r3
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	4b5e      	ldr	r3, [pc, #376]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005a3e:	4413      	add	r3, r2
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	461a      	mov	r2, r3
 8005a44:	2301      	movs	r3, #1
 8005a46:	6013      	str	r3, [r2, #0]
 8005a48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005a4c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a50:	fa93 f3a3 	rbit	r3, r3
 8005a54:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005a58:	fab3 f383 	clz	r3, r3
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	461a      	mov	r2, r3
 8005a60:	4b55      	ldr	r3, [pc, #340]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005a62:	4413      	add	r3, r2
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	461a      	mov	r2, r3
 8005a68:	2300      	movs	r3, #0
 8005a6a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005a6c:	4a50      	ldr	r2, [pc, #320]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005a6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a70:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005a72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a74:	f003 0301 	and.w	r3, r3, #1
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d045      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a7c:	f7fb fcc8 	bl	8001410 <HAL_GetTick>
 8005a80:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a82:	e00a      	b.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a84:	f7fb fcc4 	bl	8001410 <HAL_GetTick>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a8c:	1ad3      	subs	r3, r2, r3
 8005a8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d901      	bls.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8005a96:	2303      	movs	r3, #3
 8005a98:	e086      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8005a9a:	2302      	movs	r3, #2
 8005a9c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa0:	fa93 f3a3 	rbit	r3, r3
 8005aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8005aa6:	2302      	movs	r3, #2
 8005aa8:	623b      	str	r3, [r7, #32]
 8005aaa:	6a3b      	ldr	r3, [r7, #32]
 8005aac:	fa93 f3a3 	rbit	r3, r3
 8005ab0:	61fb      	str	r3, [r7, #28]
  return result;
 8005ab2:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ab4:	fab3 f383 	clz	r3, r3
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	095b      	lsrs	r3, r3, #5
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	f043 0302 	orr.w	r3, r3, #2
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	2b02      	cmp	r3, #2
 8005ac6:	d102      	bne.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005ac8:	4b39      	ldr	r3, [pc, #228]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005aca:	6a1b      	ldr	r3, [r3, #32]
 8005acc:	e007      	b.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8005ace:	2302      	movs	r3, #2
 8005ad0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	fa93 f3a3 	rbit	r3, r3
 8005ad8:	617b      	str	r3, [r7, #20]
 8005ada:	4b35      	ldr	r3, [pc, #212]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ade:	2202      	movs	r2, #2
 8005ae0:	613a      	str	r2, [r7, #16]
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	fa92 f2a2 	rbit	r2, r2
 8005ae8:	60fa      	str	r2, [r7, #12]
  return result;
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	fab2 f282 	clz	r2, r2
 8005af0:	b2d2      	uxtb	r2, r2
 8005af2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005af6:	b2d2      	uxtb	r2, r2
 8005af8:	f002 021f 	and.w	r2, r2, #31
 8005afc:	2101      	movs	r1, #1
 8005afe:	fa01 f202 	lsl.w	r2, r1, r2
 8005b02:	4013      	ands	r3, r2
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d0bd      	beq.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005b08:	4b29      	ldr	r3, [pc, #164]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005b0a:	6a1b      	ldr	r3, [r3, #32]
 8005b0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	4926      	ldr	r1, [pc, #152]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005b16:	4313      	orrs	r3, r2
 8005b18:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005b1a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d105      	bne.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b22:	4b23      	ldr	r3, [pc, #140]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005b24:	69db      	ldr	r3, [r3, #28]
 8005b26:	4a22      	ldr	r2, [pc, #136]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005b28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b2c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f003 0301 	and.w	r3, r3, #1
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d008      	beq.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005b3a:	4b1d      	ldr	r3, [pc, #116]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b3e:	f023 0203 	bic.w	r2, r3, #3
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	491a      	ldr	r1, [pc, #104]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 0320 	and.w	r3, r3, #32
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d008      	beq.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005b58:	4b15      	ldr	r3, [pc, #84]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b5c:	f023 0210 	bic.w	r2, r3, #16
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	4912      	ldr	r1, [pc, #72]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005b66:	4313      	orrs	r3, r2
 8005b68:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d008      	beq.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005b76:	4b0e      	ldr	r3, [pc, #56]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b7a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	490b      	ldr	r1, [pc, #44]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005b84:	4313      	orrs	r3, r2
 8005b86:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d008      	beq.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005b94:	4b06      	ldr	r3, [pc, #24]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b98:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	695b      	ldr	r3, [r3, #20]
 8005ba0:	4903      	ldr	r1, [pc, #12]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005ba6:	2300      	movs	r3, #0
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3748      	adds	r7, #72	; 0x48
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}
 8005bb0:	40021000 	.word	0x40021000
 8005bb4:	40007000 	.word	0x40007000
 8005bb8:	10908100 	.word	0x10908100

08005bbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b082      	sub	sp, #8
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d101      	bne.n	8005bce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e049      	b.n	8005c62 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d106      	bne.n	8005be8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f7fb fa16 	bl	8001014 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2202      	movs	r2, #2
 8005bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	3304      	adds	r3, #4
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	4610      	mov	r0, r2
 8005bfc:	f000 fc94 	bl	8006528 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3708      	adds	r7, #8
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}

08005c6a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005c6a:	b580      	push	{r7, lr}
 8005c6c:	b082      	sub	sp, #8
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d101      	bne.n	8005c7c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e049      	b.n	8005d10 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d106      	bne.n	8005c96 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f000 f841 	bl	8005d18 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2202      	movs	r2, #2
 8005c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	3304      	adds	r3, #4
 8005ca6:	4619      	mov	r1, r3
 8005ca8:	4610      	mov	r0, r2
 8005caa:	f000 fc3d 	bl	8006528 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2201      	movs	r2, #1
 8005cba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2201      	movs	r2, #1
 8005cca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2201      	movs	r2, #1
 8005cda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2201      	movs	r2, #1
 8005d02:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2201      	movs	r2, #1
 8005d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d0e:	2300      	movs	r3, #0
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3708      	adds	r7, #8
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b083      	sub	sp, #12
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005d20:	bf00      	nop
 8005d22:	370c      	adds	r7, #12
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr

08005d2c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d109      	bne.n	8005d50 <HAL_TIM_PWM_Start+0x24>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	bf14      	ite	ne
 8005d48:	2301      	movne	r3, #1
 8005d4a:	2300      	moveq	r3, #0
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	e03c      	b.n	8005dca <HAL_TIM_PWM_Start+0x9e>
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	2b04      	cmp	r3, #4
 8005d54:	d109      	bne.n	8005d6a <HAL_TIM_PWM_Start+0x3e>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	bf14      	ite	ne
 8005d62:	2301      	movne	r3, #1
 8005d64:	2300      	moveq	r3, #0
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	e02f      	b.n	8005dca <HAL_TIM_PWM_Start+0x9e>
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	2b08      	cmp	r3, #8
 8005d6e:	d109      	bne.n	8005d84 <HAL_TIM_PWM_Start+0x58>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	bf14      	ite	ne
 8005d7c:	2301      	movne	r3, #1
 8005d7e:	2300      	moveq	r3, #0
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	e022      	b.n	8005dca <HAL_TIM_PWM_Start+0x9e>
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	2b0c      	cmp	r3, #12
 8005d88:	d109      	bne.n	8005d9e <HAL_TIM_PWM_Start+0x72>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	bf14      	ite	ne
 8005d96:	2301      	movne	r3, #1
 8005d98:	2300      	moveq	r3, #0
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	e015      	b.n	8005dca <HAL_TIM_PWM_Start+0x9e>
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	2b10      	cmp	r3, #16
 8005da2:	d109      	bne.n	8005db8 <HAL_TIM_PWM_Start+0x8c>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	bf14      	ite	ne
 8005db0:	2301      	movne	r3, #1
 8005db2:	2300      	moveq	r3, #0
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	e008      	b.n	8005dca <HAL_TIM_PWM_Start+0x9e>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	bf14      	ite	ne
 8005dc4:	2301      	movne	r3, #1
 8005dc6:	2300      	moveq	r3, #0
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d001      	beq.n	8005dd2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e088      	b.n	8005ee4 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d104      	bne.n	8005de2 <HAL_TIM_PWM_Start+0xb6>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2202      	movs	r2, #2
 8005ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005de0:	e023      	b.n	8005e2a <HAL_TIM_PWM_Start+0xfe>
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	2b04      	cmp	r3, #4
 8005de6:	d104      	bne.n	8005df2 <HAL_TIM_PWM_Start+0xc6>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2202      	movs	r2, #2
 8005dec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005df0:	e01b      	b.n	8005e2a <HAL_TIM_PWM_Start+0xfe>
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	2b08      	cmp	r3, #8
 8005df6:	d104      	bne.n	8005e02 <HAL_TIM_PWM_Start+0xd6>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2202      	movs	r2, #2
 8005dfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e00:	e013      	b.n	8005e2a <HAL_TIM_PWM_Start+0xfe>
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	2b0c      	cmp	r3, #12
 8005e06:	d104      	bne.n	8005e12 <HAL_TIM_PWM_Start+0xe6>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2202      	movs	r2, #2
 8005e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e10:	e00b      	b.n	8005e2a <HAL_TIM_PWM_Start+0xfe>
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	2b10      	cmp	r3, #16
 8005e16:	d104      	bne.n	8005e22 <HAL_TIM_PWM_Start+0xf6>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2202      	movs	r2, #2
 8005e1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e20:	e003      	b.n	8005e2a <HAL_TIM_PWM_Start+0xfe>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2202      	movs	r2, #2
 8005e26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	6839      	ldr	r1, [r7, #0]
 8005e32:	4618      	mov	r0, r3
 8005e34:	f000 ff30 	bl	8006c98 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a2b      	ldr	r2, [pc, #172]	; (8005eec <HAL_TIM_PWM_Start+0x1c0>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d00e      	beq.n	8005e60 <HAL_TIM_PWM_Start+0x134>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a2a      	ldr	r2, [pc, #168]	; (8005ef0 <HAL_TIM_PWM_Start+0x1c4>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d009      	beq.n	8005e60 <HAL_TIM_PWM_Start+0x134>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a28      	ldr	r2, [pc, #160]	; (8005ef4 <HAL_TIM_PWM_Start+0x1c8>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d004      	beq.n	8005e60 <HAL_TIM_PWM_Start+0x134>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a27      	ldr	r2, [pc, #156]	; (8005ef8 <HAL_TIM_PWM_Start+0x1cc>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d101      	bne.n	8005e64 <HAL_TIM_PWM_Start+0x138>
 8005e60:	2301      	movs	r3, #1
 8005e62:	e000      	b.n	8005e66 <HAL_TIM_PWM_Start+0x13a>
 8005e64:	2300      	movs	r3, #0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d007      	beq.n	8005e7a <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e78:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a1b      	ldr	r2, [pc, #108]	; (8005eec <HAL_TIM_PWM_Start+0x1c0>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d00e      	beq.n	8005ea2 <HAL_TIM_PWM_Start+0x176>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e8c:	d009      	beq.n	8005ea2 <HAL_TIM_PWM_Start+0x176>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a1a      	ldr	r2, [pc, #104]	; (8005efc <HAL_TIM_PWM_Start+0x1d0>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d004      	beq.n	8005ea2 <HAL_TIM_PWM_Start+0x176>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a14      	ldr	r2, [pc, #80]	; (8005ef0 <HAL_TIM_PWM_Start+0x1c4>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d115      	bne.n	8005ece <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	689a      	ldr	r2, [r3, #8]
 8005ea8:	4b15      	ldr	r3, [pc, #84]	; (8005f00 <HAL_TIM_PWM_Start+0x1d4>)
 8005eaa:	4013      	ands	r3, r2
 8005eac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2b06      	cmp	r3, #6
 8005eb2:	d015      	beq.n	8005ee0 <HAL_TIM_PWM_Start+0x1b4>
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005eba:	d011      	beq.n	8005ee0 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f042 0201 	orr.w	r2, r2, #1
 8005eca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ecc:	e008      	b.n	8005ee0 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f042 0201 	orr.w	r2, r2, #1
 8005edc:	601a      	str	r2, [r3, #0]
 8005ede:	e000      	b.n	8005ee2 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ee0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005ee2:	2300      	movs	r3, #0
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3710      	adds	r7, #16
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	40012c00 	.word	0x40012c00
 8005ef0:	40014000 	.word	0x40014000
 8005ef4:	40014400 	.word	0x40014400
 8005ef8:	40014800 	.word	0x40014800
 8005efc:	40000400 	.word	0x40000400
 8005f00:	00010007 	.word	0x00010007

08005f04 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b086      	sub	sp, #24
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d101      	bne.n	8005f18 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	e097      	b.n	8006048 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d106      	bne.n	8005f32 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f7fb f8db 	bl	80010e8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2202      	movs	r2, #2
 8005f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	6812      	ldr	r2, [r2, #0]
 8005f44:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8005f48:	f023 0307 	bic.w	r3, r3, #7
 8005f4c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	3304      	adds	r3, #4
 8005f56:	4619      	mov	r1, r3
 8005f58:	4610      	mov	r0, r2
 8005f5a:	f000 fae5 	bl	8006528 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	699b      	ldr	r3, [r3, #24]
 8005f6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	6a1b      	ldr	r3, [r3, #32]
 8005f74:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	697a      	ldr	r2, [r7, #20]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f86:	f023 0303 	bic.w	r3, r3, #3
 8005f8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	689a      	ldr	r2, [r3, #8]
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	699b      	ldr	r3, [r3, #24]
 8005f94:	021b      	lsls	r3, r3, #8
 8005f96:	4313      	orrs	r3, r2
 8005f98:	693a      	ldr	r2, [r7, #16]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005fa4:	f023 030c 	bic.w	r3, r3, #12
 8005fa8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005fb0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	68da      	ldr	r2, [r3, #12]
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	69db      	ldr	r3, [r3, #28]
 8005fbe:	021b      	lsls	r3, r3, #8
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	693a      	ldr	r2, [r7, #16]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	011a      	lsls	r2, r3, #4
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	6a1b      	ldr	r3, [r3, #32]
 8005fd2:	031b      	lsls	r3, r3, #12
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	693a      	ldr	r2, [r7, #16]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005fe2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005fea:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	685a      	ldr	r2, [r3, #4]
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	695b      	ldr	r3, [r3, #20]
 8005ff4:	011b      	lsls	r3, r3, #4
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	68fa      	ldr	r2, [r7, #12]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	697a      	ldr	r2, [r7, #20]
 8006004:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	693a      	ldr	r2, [r7, #16]
 800600c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	68fa      	ldr	r2, [r7, #12]
 8006014:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2201      	movs	r2, #1
 800601a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2201      	movs	r2, #1
 8006022:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2201      	movs	r2, #1
 800602a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2201      	movs	r2, #1
 8006032:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2201      	movs	r2, #1
 800603a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2201      	movs	r2, #1
 8006042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006046:	2300      	movs	r3, #0
}
 8006048:	4618      	mov	r0, r3
 800604a:	3718      	adds	r7, #24
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b084      	sub	sp, #16
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006060:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006068:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006070:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006078:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d110      	bne.n	80060a2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006080:	7bfb      	ldrb	r3, [r7, #15]
 8006082:	2b01      	cmp	r3, #1
 8006084:	d102      	bne.n	800608c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006086:	7b7b      	ldrb	r3, [r7, #13]
 8006088:	2b01      	cmp	r3, #1
 800608a:	d001      	beq.n	8006090 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	e069      	b.n	8006164 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2202      	movs	r2, #2
 8006094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2202      	movs	r2, #2
 800609c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060a0:	e031      	b.n	8006106 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	2b04      	cmp	r3, #4
 80060a6:	d110      	bne.n	80060ca <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80060a8:	7bbb      	ldrb	r3, [r7, #14]
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d102      	bne.n	80060b4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80060ae:	7b3b      	ldrb	r3, [r7, #12]
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d001      	beq.n	80060b8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	e055      	b.n	8006164 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2202      	movs	r2, #2
 80060bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2202      	movs	r2, #2
 80060c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060c8:	e01d      	b.n	8006106 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80060ca:	7bfb      	ldrb	r3, [r7, #15]
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d108      	bne.n	80060e2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80060d0:	7bbb      	ldrb	r3, [r7, #14]
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d105      	bne.n	80060e2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80060d6:	7b7b      	ldrb	r3, [r7, #13]
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d102      	bne.n	80060e2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80060dc:	7b3b      	ldrb	r3, [r7, #12]
 80060de:	2b01      	cmp	r3, #1
 80060e0:	d001      	beq.n	80060e6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	e03e      	b.n	8006164 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2202      	movs	r2, #2
 80060ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2202      	movs	r2, #2
 80060f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2202      	movs	r2, #2
 80060fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2202      	movs	r2, #2
 8006102:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d003      	beq.n	8006114 <HAL_TIM_Encoder_Start+0xc4>
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	2b04      	cmp	r3, #4
 8006110:	d008      	beq.n	8006124 <HAL_TIM_Encoder_Start+0xd4>
 8006112:	e00f      	b.n	8006134 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	2201      	movs	r2, #1
 800611a:	2100      	movs	r1, #0
 800611c:	4618      	mov	r0, r3
 800611e:	f000 fdbb 	bl	8006c98 <TIM_CCxChannelCmd>
      break;
 8006122:	e016      	b.n	8006152 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	2201      	movs	r2, #1
 800612a:	2104      	movs	r1, #4
 800612c:	4618      	mov	r0, r3
 800612e:	f000 fdb3 	bl	8006c98 <TIM_CCxChannelCmd>
      break;
 8006132:	e00e      	b.n	8006152 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2201      	movs	r2, #1
 800613a:	2100      	movs	r1, #0
 800613c:	4618      	mov	r0, r3
 800613e:	f000 fdab 	bl	8006c98 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	2201      	movs	r2, #1
 8006148:	2104      	movs	r1, #4
 800614a:	4618      	mov	r0, r3
 800614c:	f000 fda4 	bl	8006c98 <TIM_CCxChannelCmd>
      break;
 8006150:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f042 0201 	orr.w	r2, r2, #1
 8006160:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006162:	2300      	movs	r3, #0
}
 8006164:	4618      	mov	r0, r3
 8006166:	3710      	adds	r7, #16
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}

0800616c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b086      	sub	sp, #24
 8006170:	af00      	add	r7, sp, #0
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	60b9      	str	r1, [r7, #8]
 8006176:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006178:	2300      	movs	r3, #0
 800617a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006182:	2b01      	cmp	r3, #1
 8006184:	d101      	bne.n	800618a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006186:	2302      	movs	r3, #2
 8006188:	e0ff      	b.n	800638a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2201      	movs	r2, #1
 800618e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2b14      	cmp	r3, #20
 8006196:	f200 80f0 	bhi.w	800637a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800619a:	a201      	add	r2, pc, #4	; (adr r2, 80061a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800619c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a0:	080061f5 	.word	0x080061f5
 80061a4:	0800637b 	.word	0x0800637b
 80061a8:	0800637b 	.word	0x0800637b
 80061ac:	0800637b 	.word	0x0800637b
 80061b0:	08006235 	.word	0x08006235
 80061b4:	0800637b 	.word	0x0800637b
 80061b8:	0800637b 	.word	0x0800637b
 80061bc:	0800637b 	.word	0x0800637b
 80061c0:	08006277 	.word	0x08006277
 80061c4:	0800637b 	.word	0x0800637b
 80061c8:	0800637b 	.word	0x0800637b
 80061cc:	0800637b 	.word	0x0800637b
 80061d0:	080062b7 	.word	0x080062b7
 80061d4:	0800637b 	.word	0x0800637b
 80061d8:	0800637b 	.word	0x0800637b
 80061dc:	0800637b 	.word	0x0800637b
 80061e0:	080062f9 	.word	0x080062f9
 80061e4:	0800637b 	.word	0x0800637b
 80061e8:	0800637b 	.word	0x0800637b
 80061ec:	0800637b 	.word	0x0800637b
 80061f0:	08006339 	.word	0x08006339
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68b9      	ldr	r1, [r7, #8]
 80061fa:	4618      	mov	r0, r3
 80061fc:	f000 fa0c 	bl	8006618 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	699a      	ldr	r2, [r3, #24]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f042 0208 	orr.w	r2, r2, #8
 800620e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	699a      	ldr	r2, [r3, #24]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f022 0204 	bic.w	r2, r2, #4
 800621e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	6999      	ldr	r1, [r3, #24]
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	691a      	ldr	r2, [r3, #16]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	430a      	orrs	r2, r1
 8006230:	619a      	str	r2, [r3, #24]
      break;
 8006232:	e0a5      	b.n	8006380 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	68b9      	ldr	r1, [r7, #8]
 800623a:	4618      	mov	r0, r3
 800623c:	f000 fa72 	bl	8006724 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	699a      	ldr	r2, [r3, #24]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800624e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	699a      	ldr	r2, [r3, #24]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800625e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	6999      	ldr	r1, [r3, #24]
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	021a      	lsls	r2, r3, #8
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	430a      	orrs	r2, r1
 8006272:	619a      	str	r2, [r3, #24]
      break;
 8006274:	e084      	b.n	8006380 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	68b9      	ldr	r1, [r7, #8]
 800627c:	4618      	mov	r0, r3
 800627e:	f000 fad1 	bl	8006824 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	69da      	ldr	r2, [r3, #28]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f042 0208 	orr.w	r2, r2, #8
 8006290:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	69da      	ldr	r2, [r3, #28]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f022 0204 	bic.w	r2, r2, #4
 80062a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	69d9      	ldr	r1, [r3, #28]
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	691a      	ldr	r2, [r3, #16]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	430a      	orrs	r2, r1
 80062b2:	61da      	str	r2, [r3, #28]
      break;
 80062b4:	e064      	b.n	8006380 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	68b9      	ldr	r1, [r7, #8]
 80062bc:	4618      	mov	r0, r3
 80062be:	f000 fb2f 	bl	8006920 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	69da      	ldr	r2, [r3, #28]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	69da      	ldr	r2, [r3, #28]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	69d9      	ldr	r1, [r3, #28]
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	691b      	ldr	r3, [r3, #16]
 80062ec:	021a      	lsls	r2, r3, #8
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	430a      	orrs	r2, r1
 80062f4:	61da      	str	r2, [r3, #28]
      break;
 80062f6:	e043      	b.n	8006380 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	68b9      	ldr	r1, [r7, #8]
 80062fe:	4618      	mov	r0, r3
 8006300:	f000 fb72 	bl	80069e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f042 0208 	orr.w	r2, r2, #8
 8006312:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f022 0204 	bic.w	r2, r2, #4
 8006322:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	691a      	ldr	r2, [r3, #16]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	430a      	orrs	r2, r1
 8006334:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006336:	e023      	b.n	8006380 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	68b9      	ldr	r1, [r7, #8]
 800633e:	4618      	mov	r0, r3
 8006340:	f000 fbb0 	bl	8006aa4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006352:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006362:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	021a      	lsls	r2, r3, #8
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	430a      	orrs	r2, r1
 8006376:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006378:	e002      	b.n	8006380 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	75fb      	strb	r3, [r7, #23]
      break;
 800637e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2200      	movs	r2, #0
 8006384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006388:	7dfb      	ldrb	r3, [r7, #23]
}
 800638a:	4618      	mov	r0, r3
 800638c:	3718      	adds	r7, #24
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
 8006392:	bf00      	nop

08006394 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b084      	sub	sp, #16
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800639e:	2300      	movs	r3, #0
 80063a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d101      	bne.n	80063b0 <HAL_TIM_ConfigClockSource+0x1c>
 80063ac:	2302      	movs	r3, #2
 80063ae:	e0b6      	b.n	800651e <HAL_TIM_ConfigClockSource+0x18a>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2201      	movs	r2, #1
 80063b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2202      	movs	r2, #2
 80063bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80063d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	68ba      	ldr	r2, [r7, #8]
 80063e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063ec:	d03e      	beq.n	800646c <HAL_TIM_ConfigClockSource+0xd8>
 80063ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063f2:	f200 8087 	bhi.w	8006504 <HAL_TIM_ConfigClockSource+0x170>
 80063f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063fa:	f000 8086 	beq.w	800650a <HAL_TIM_ConfigClockSource+0x176>
 80063fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006402:	d87f      	bhi.n	8006504 <HAL_TIM_ConfigClockSource+0x170>
 8006404:	2b70      	cmp	r3, #112	; 0x70
 8006406:	d01a      	beq.n	800643e <HAL_TIM_ConfigClockSource+0xaa>
 8006408:	2b70      	cmp	r3, #112	; 0x70
 800640a:	d87b      	bhi.n	8006504 <HAL_TIM_ConfigClockSource+0x170>
 800640c:	2b60      	cmp	r3, #96	; 0x60
 800640e:	d050      	beq.n	80064b2 <HAL_TIM_ConfigClockSource+0x11e>
 8006410:	2b60      	cmp	r3, #96	; 0x60
 8006412:	d877      	bhi.n	8006504 <HAL_TIM_ConfigClockSource+0x170>
 8006414:	2b50      	cmp	r3, #80	; 0x50
 8006416:	d03c      	beq.n	8006492 <HAL_TIM_ConfigClockSource+0xfe>
 8006418:	2b50      	cmp	r3, #80	; 0x50
 800641a:	d873      	bhi.n	8006504 <HAL_TIM_ConfigClockSource+0x170>
 800641c:	2b40      	cmp	r3, #64	; 0x40
 800641e:	d058      	beq.n	80064d2 <HAL_TIM_ConfigClockSource+0x13e>
 8006420:	2b40      	cmp	r3, #64	; 0x40
 8006422:	d86f      	bhi.n	8006504 <HAL_TIM_ConfigClockSource+0x170>
 8006424:	2b30      	cmp	r3, #48	; 0x30
 8006426:	d064      	beq.n	80064f2 <HAL_TIM_ConfigClockSource+0x15e>
 8006428:	2b30      	cmp	r3, #48	; 0x30
 800642a:	d86b      	bhi.n	8006504 <HAL_TIM_ConfigClockSource+0x170>
 800642c:	2b20      	cmp	r3, #32
 800642e:	d060      	beq.n	80064f2 <HAL_TIM_ConfigClockSource+0x15e>
 8006430:	2b20      	cmp	r3, #32
 8006432:	d867      	bhi.n	8006504 <HAL_TIM_ConfigClockSource+0x170>
 8006434:	2b00      	cmp	r3, #0
 8006436:	d05c      	beq.n	80064f2 <HAL_TIM_ConfigClockSource+0x15e>
 8006438:	2b10      	cmp	r3, #16
 800643a:	d05a      	beq.n	80064f2 <HAL_TIM_ConfigClockSource+0x15e>
 800643c:	e062      	b.n	8006504 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6818      	ldr	r0, [r3, #0]
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	6899      	ldr	r1, [r3, #8]
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	685a      	ldr	r2, [r3, #4]
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	f000 fc03 	bl	8006c58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006460:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	68ba      	ldr	r2, [r7, #8]
 8006468:	609a      	str	r2, [r3, #8]
      break;
 800646a:	e04f      	b.n	800650c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6818      	ldr	r0, [r3, #0]
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	6899      	ldr	r1, [r3, #8]
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	685a      	ldr	r2, [r3, #4]
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	f000 fbec 	bl	8006c58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	689a      	ldr	r2, [r3, #8]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800648e:	609a      	str	r2, [r3, #8]
      break;
 8006490:	e03c      	b.n	800650c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6818      	ldr	r0, [r3, #0]
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	6859      	ldr	r1, [r3, #4]
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	68db      	ldr	r3, [r3, #12]
 800649e:	461a      	mov	r2, r3
 80064a0:	f000 fb60 	bl	8006b64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	2150      	movs	r1, #80	; 0x50
 80064aa:	4618      	mov	r0, r3
 80064ac:	f000 fbb9 	bl	8006c22 <TIM_ITRx_SetConfig>
      break;
 80064b0:	e02c      	b.n	800650c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6818      	ldr	r0, [r3, #0]
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	6859      	ldr	r1, [r3, #4]
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	461a      	mov	r2, r3
 80064c0:	f000 fb7f 	bl	8006bc2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	2160      	movs	r1, #96	; 0x60
 80064ca:	4618      	mov	r0, r3
 80064cc:	f000 fba9 	bl	8006c22 <TIM_ITRx_SetConfig>
      break;
 80064d0:	e01c      	b.n	800650c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6818      	ldr	r0, [r3, #0]
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	6859      	ldr	r1, [r3, #4]
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	68db      	ldr	r3, [r3, #12]
 80064de:	461a      	mov	r2, r3
 80064e0:	f000 fb40 	bl	8006b64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2140      	movs	r1, #64	; 0x40
 80064ea:	4618      	mov	r0, r3
 80064ec:	f000 fb99 	bl	8006c22 <TIM_ITRx_SetConfig>
      break;
 80064f0:	e00c      	b.n	800650c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4619      	mov	r1, r3
 80064fc:	4610      	mov	r0, r2
 80064fe:	f000 fb90 	bl	8006c22 <TIM_ITRx_SetConfig>
      break;
 8006502:	e003      	b.n	800650c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	73fb      	strb	r3, [r7, #15]
      break;
 8006508:	e000      	b.n	800650c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800650a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800651c:	7bfb      	ldrb	r3, [r7, #15]
}
 800651e:	4618      	mov	r0, r3
 8006520:	3710      	adds	r7, #16
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
	...

08006528 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006528:	b480      	push	{r7}
 800652a:	b085      	sub	sp, #20
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	4a32      	ldr	r2, [pc, #200]	; (8006604 <TIM_Base_SetConfig+0xdc>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d007      	beq.n	8006550 <TIM_Base_SetConfig+0x28>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006546:	d003      	beq.n	8006550 <TIM_Base_SetConfig+0x28>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4a2f      	ldr	r2, [pc, #188]	; (8006608 <TIM_Base_SetConfig+0xe0>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d108      	bne.n	8006562 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006556:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	68fa      	ldr	r2, [r7, #12]
 800655e:	4313      	orrs	r3, r2
 8006560:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4a27      	ldr	r2, [pc, #156]	; (8006604 <TIM_Base_SetConfig+0xdc>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d013      	beq.n	8006592 <TIM_Base_SetConfig+0x6a>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006570:	d00f      	beq.n	8006592 <TIM_Base_SetConfig+0x6a>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4a24      	ldr	r2, [pc, #144]	; (8006608 <TIM_Base_SetConfig+0xe0>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d00b      	beq.n	8006592 <TIM_Base_SetConfig+0x6a>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4a23      	ldr	r2, [pc, #140]	; (800660c <TIM_Base_SetConfig+0xe4>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d007      	beq.n	8006592 <TIM_Base_SetConfig+0x6a>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	4a22      	ldr	r2, [pc, #136]	; (8006610 <TIM_Base_SetConfig+0xe8>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d003      	beq.n	8006592 <TIM_Base_SetConfig+0x6a>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4a21      	ldr	r2, [pc, #132]	; (8006614 <TIM_Base_SetConfig+0xec>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d108      	bne.n	80065a4 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006598:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	68db      	ldr	r3, [r3, #12]
 800659e:	68fa      	ldr	r2, [r7, #12]
 80065a0:	4313      	orrs	r3, r2
 80065a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	695b      	ldr	r3, [r3, #20]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	68fa      	ldr	r2, [r7, #12]
 80065b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	689a      	ldr	r2, [r3, #8]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4a0e      	ldr	r2, [pc, #56]	; (8006604 <TIM_Base_SetConfig+0xdc>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d00b      	beq.n	80065e8 <TIM_Base_SetConfig+0xc0>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4a0e      	ldr	r2, [pc, #56]	; (800660c <TIM_Base_SetConfig+0xe4>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d007      	beq.n	80065e8 <TIM_Base_SetConfig+0xc0>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	4a0d      	ldr	r2, [pc, #52]	; (8006610 <TIM_Base_SetConfig+0xe8>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d003      	beq.n	80065e8 <TIM_Base_SetConfig+0xc0>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4a0c      	ldr	r2, [pc, #48]	; (8006614 <TIM_Base_SetConfig+0xec>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d103      	bne.n	80065f0 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	691a      	ldr	r2, [r3, #16]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2201      	movs	r2, #1
 80065f4:	615a      	str	r2, [r3, #20]
}
 80065f6:	bf00      	nop
 80065f8:	3714      	adds	r7, #20
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr
 8006602:	bf00      	nop
 8006604:	40012c00 	.word	0x40012c00
 8006608:	40000400 	.word	0x40000400
 800660c:	40014000 	.word	0x40014000
 8006610:	40014400 	.word	0x40014400
 8006614:	40014800 	.word	0x40014800

08006618 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006618:	b480      	push	{r7}
 800661a:	b087      	sub	sp, #28
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6a1b      	ldr	r3, [r3, #32]
 8006626:	f023 0201 	bic.w	r2, r3, #1
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6a1b      	ldr	r3, [r3, #32]
 8006632:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	699b      	ldr	r3, [r3, #24]
 800663e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800664a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f023 0303 	bic.w	r3, r3, #3
 8006652:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	68fa      	ldr	r2, [r7, #12]
 800665a:	4313      	orrs	r3, r2
 800665c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	f023 0302 	bic.w	r3, r3, #2
 8006664:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	697a      	ldr	r2, [r7, #20]
 800666c:	4313      	orrs	r3, r2
 800666e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	4a28      	ldr	r2, [pc, #160]	; (8006714 <TIM_OC1_SetConfig+0xfc>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d00b      	beq.n	8006690 <TIM_OC1_SetConfig+0x78>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	4a27      	ldr	r2, [pc, #156]	; (8006718 <TIM_OC1_SetConfig+0x100>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d007      	beq.n	8006690 <TIM_OC1_SetConfig+0x78>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	4a26      	ldr	r2, [pc, #152]	; (800671c <TIM_OC1_SetConfig+0x104>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d003      	beq.n	8006690 <TIM_OC1_SetConfig+0x78>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4a25      	ldr	r2, [pc, #148]	; (8006720 <TIM_OC1_SetConfig+0x108>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d10c      	bne.n	80066aa <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	f023 0308 	bic.w	r3, r3, #8
 8006696:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	697a      	ldr	r2, [r7, #20]
 800669e:	4313      	orrs	r3, r2
 80066a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	f023 0304 	bic.w	r3, r3, #4
 80066a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4a19      	ldr	r2, [pc, #100]	; (8006714 <TIM_OC1_SetConfig+0xfc>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d00b      	beq.n	80066ca <TIM_OC1_SetConfig+0xb2>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4a18      	ldr	r2, [pc, #96]	; (8006718 <TIM_OC1_SetConfig+0x100>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d007      	beq.n	80066ca <TIM_OC1_SetConfig+0xb2>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4a17      	ldr	r2, [pc, #92]	; (800671c <TIM_OC1_SetConfig+0x104>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d003      	beq.n	80066ca <TIM_OC1_SetConfig+0xb2>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4a16      	ldr	r2, [pc, #88]	; (8006720 <TIM_OC1_SetConfig+0x108>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d111      	bne.n	80066ee <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	695b      	ldr	r3, [r3, #20]
 80066de:	693a      	ldr	r2, [r7, #16]
 80066e0:	4313      	orrs	r3, r2
 80066e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	699b      	ldr	r3, [r3, #24]
 80066e8:	693a      	ldr	r2, [r7, #16]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	693a      	ldr	r2, [r7, #16]
 80066f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	68fa      	ldr	r2, [r7, #12]
 80066f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	685a      	ldr	r2, [r3, #4]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	697a      	ldr	r2, [r7, #20]
 8006706:	621a      	str	r2, [r3, #32]
}
 8006708:	bf00      	nop
 800670a:	371c      	adds	r7, #28
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr
 8006714:	40012c00 	.word	0x40012c00
 8006718:	40014000 	.word	0x40014000
 800671c:	40014400 	.word	0x40014400
 8006720:	40014800 	.word	0x40014800

08006724 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006724:	b480      	push	{r7}
 8006726:	b087      	sub	sp, #28
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6a1b      	ldr	r3, [r3, #32]
 8006732:	f023 0210 	bic.w	r2, r3, #16
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a1b      	ldr	r3, [r3, #32]
 800673e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	699b      	ldr	r3, [r3, #24]
 800674a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006752:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006756:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800675e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	021b      	lsls	r3, r3, #8
 8006766:	68fa      	ldr	r2, [r7, #12]
 8006768:	4313      	orrs	r3, r2
 800676a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	f023 0320 	bic.w	r3, r3, #32
 8006772:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	011b      	lsls	r3, r3, #4
 800677a:	697a      	ldr	r2, [r7, #20]
 800677c:	4313      	orrs	r3, r2
 800677e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	4a24      	ldr	r2, [pc, #144]	; (8006814 <TIM_OC2_SetConfig+0xf0>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d10d      	bne.n	80067a4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800678e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	011b      	lsls	r3, r3, #4
 8006796:	697a      	ldr	r2, [r7, #20]
 8006798:	4313      	orrs	r3, r2
 800679a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	4a1b      	ldr	r2, [pc, #108]	; (8006814 <TIM_OC2_SetConfig+0xf0>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d00b      	beq.n	80067c4 <TIM_OC2_SetConfig+0xa0>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	4a1a      	ldr	r2, [pc, #104]	; (8006818 <TIM_OC2_SetConfig+0xf4>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d007      	beq.n	80067c4 <TIM_OC2_SetConfig+0xa0>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	4a19      	ldr	r2, [pc, #100]	; (800681c <TIM_OC2_SetConfig+0xf8>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d003      	beq.n	80067c4 <TIM_OC2_SetConfig+0xa0>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4a18      	ldr	r2, [pc, #96]	; (8006820 <TIM_OC2_SetConfig+0xfc>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d113      	bne.n	80067ec <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80067ca:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80067d2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	695b      	ldr	r3, [r3, #20]
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	693a      	ldr	r2, [r7, #16]
 80067dc:	4313      	orrs	r3, r2
 80067de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	699b      	ldr	r3, [r3, #24]
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	693a      	ldr	r2, [r7, #16]
 80067e8:	4313      	orrs	r3, r2
 80067ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	693a      	ldr	r2, [r7, #16]
 80067f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	68fa      	ldr	r2, [r7, #12]
 80067f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	685a      	ldr	r2, [r3, #4]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	697a      	ldr	r2, [r7, #20]
 8006804:	621a      	str	r2, [r3, #32]
}
 8006806:	bf00      	nop
 8006808:	371c      	adds	r7, #28
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr
 8006812:	bf00      	nop
 8006814:	40012c00 	.word	0x40012c00
 8006818:	40014000 	.word	0x40014000
 800681c:	40014400 	.word	0x40014400
 8006820:	40014800 	.word	0x40014800

08006824 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006824:	b480      	push	{r7}
 8006826:	b087      	sub	sp, #28
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6a1b      	ldr	r3, [r3, #32]
 8006832:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6a1b      	ldr	r3, [r3, #32]
 800683e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	69db      	ldr	r3, [r3, #28]
 800684a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f023 0303 	bic.w	r3, r3, #3
 800685e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	68fa      	ldr	r2, [r7, #12]
 8006866:	4313      	orrs	r3, r2
 8006868:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006870:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	021b      	lsls	r3, r3, #8
 8006878:	697a      	ldr	r2, [r7, #20]
 800687a:	4313      	orrs	r3, r2
 800687c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	4a23      	ldr	r2, [pc, #140]	; (8006910 <TIM_OC3_SetConfig+0xec>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d10d      	bne.n	80068a2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800688c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	68db      	ldr	r3, [r3, #12]
 8006892:	021b      	lsls	r3, r3, #8
 8006894:	697a      	ldr	r2, [r7, #20]
 8006896:	4313      	orrs	r3, r2
 8006898:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80068a0:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	4a1a      	ldr	r2, [pc, #104]	; (8006910 <TIM_OC3_SetConfig+0xec>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d00b      	beq.n	80068c2 <TIM_OC3_SetConfig+0x9e>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4a19      	ldr	r2, [pc, #100]	; (8006914 <TIM_OC3_SetConfig+0xf0>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d007      	beq.n	80068c2 <TIM_OC3_SetConfig+0x9e>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4a18      	ldr	r2, [pc, #96]	; (8006918 <TIM_OC3_SetConfig+0xf4>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d003      	beq.n	80068c2 <TIM_OC3_SetConfig+0x9e>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	4a17      	ldr	r2, [pc, #92]	; (800691c <TIM_OC3_SetConfig+0xf8>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d113      	bne.n	80068ea <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	695b      	ldr	r3, [r3, #20]
 80068d6:	011b      	lsls	r3, r3, #4
 80068d8:	693a      	ldr	r2, [r7, #16]
 80068da:	4313      	orrs	r3, r2
 80068dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	699b      	ldr	r3, [r3, #24]
 80068e2:	011b      	lsls	r3, r3, #4
 80068e4:	693a      	ldr	r2, [r7, #16]
 80068e6:	4313      	orrs	r3, r2
 80068e8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	693a      	ldr	r2, [r7, #16]
 80068ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	68fa      	ldr	r2, [r7, #12]
 80068f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	685a      	ldr	r2, [r3, #4]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	697a      	ldr	r2, [r7, #20]
 8006902:	621a      	str	r2, [r3, #32]
}
 8006904:	bf00      	nop
 8006906:	371c      	adds	r7, #28
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr
 8006910:	40012c00 	.word	0x40012c00
 8006914:	40014000 	.word	0x40014000
 8006918:	40014400 	.word	0x40014400
 800691c:	40014800 	.word	0x40014800

08006920 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006920:	b480      	push	{r7}
 8006922:	b087      	sub	sp, #28
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a1b      	ldr	r3, [r3, #32]
 800692e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6a1b      	ldr	r3, [r3, #32]
 800693a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	69db      	ldr	r3, [r3, #28]
 8006946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800694e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006952:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800695a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	021b      	lsls	r3, r3, #8
 8006962:	68fa      	ldr	r2, [r7, #12]
 8006964:	4313      	orrs	r3, r2
 8006966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800696e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	031b      	lsls	r3, r3, #12
 8006976:	693a      	ldr	r2, [r7, #16]
 8006978:	4313      	orrs	r3, r2
 800697a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4a16      	ldr	r2, [pc, #88]	; (80069d8 <TIM_OC4_SetConfig+0xb8>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d00b      	beq.n	800699c <TIM_OC4_SetConfig+0x7c>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	4a15      	ldr	r2, [pc, #84]	; (80069dc <TIM_OC4_SetConfig+0xbc>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d007      	beq.n	800699c <TIM_OC4_SetConfig+0x7c>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	4a14      	ldr	r2, [pc, #80]	; (80069e0 <TIM_OC4_SetConfig+0xc0>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d003      	beq.n	800699c <TIM_OC4_SetConfig+0x7c>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	4a13      	ldr	r2, [pc, #76]	; (80069e4 <TIM_OC4_SetConfig+0xc4>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d109      	bne.n	80069b0 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	695b      	ldr	r3, [r3, #20]
 80069a8:	019b      	lsls	r3, r3, #6
 80069aa:	697a      	ldr	r2, [r7, #20]
 80069ac:	4313      	orrs	r3, r2
 80069ae:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	697a      	ldr	r2, [r7, #20]
 80069b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	68fa      	ldr	r2, [r7, #12]
 80069ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	685a      	ldr	r2, [r3, #4]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	693a      	ldr	r2, [r7, #16]
 80069c8:	621a      	str	r2, [r3, #32]
}
 80069ca:	bf00      	nop
 80069cc:	371c      	adds	r7, #28
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr
 80069d6:	bf00      	nop
 80069d8:	40012c00 	.word	0x40012c00
 80069dc:	40014000 	.word	0x40014000
 80069e0:	40014400 	.word	0x40014400
 80069e4:	40014800 	.word	0x40014800

080069e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b087      	sub	sp, #28
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6a1b      	ldr	r3, [r3, #32]
 80069f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6a1b      	ldr	r3, [r3, #32]
 8006a02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	68fa      	ldr	r2, [r7, #12]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006a2c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	041b      	lsls	r3, r3, #16
 8006a34:	693a      	ldr	r2, [r7, #16]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	4a15      	ldr	r2, [pc, #84]	; (8006a94 <TIM_OC5_SetConfig+0xac>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d00b      	beq.n	8006a5a <TIM_OC5_SetConfig+0x72>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	4a14      	ldr	r2, [pc, #80]	; (8006a98 <TIM_OC5_SetConfig+0xb0>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d007      	beq.n	8006a5a <TIM_OC5_SetConfig+0x72>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	4a13      	ldr	r2, [pc, #76]	; (8006a9c <TIM_OC5_SetConfig+0xb4>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d003      	beq.n	8006a5a <TIM_OC5_SetConfig+0x72>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	4a12      	ldr	r2, [pc, #72]	; (8006aa0 <TIM_OC5_SetConfig+0xb8>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d109      	bne.n	8006a6e <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a60:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	695b      	ldr	r3, [r3, #20]
 8006a66:	021b      	lsls	r3, r3, #8
 8006a68:	697a      	ldr	r2, [r7, #20]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	697a      	ldr	r2, [r7, #20]
 8006a72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	68fa      	ldr	r2, [r7, #12]
 8006a78:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	685a      	ldr	r2, [r3, #4]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	693a      	ldr	r2, [r7, #16]
 8006a86:	621a      	str	r2, [r3, #32]
}
 8006a88:	bf00      	nop
 8006a8a:	371c      	adds	r7, #28
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr
 8006a94:	40012c00 	.word	0x40012c00
 8006a98:	40014000 	.word	0x40014000
 8006a9c:	40014400 	.word	0x40014400
 8006aa0:	40014800 	.word	0x40014800

08006aa4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b087      	sub	sp, #28
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6a1b      	ldr	r3, [r3, #32]
 8006ab2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6a1b      	ldr	r3, [r3, #32]
 8006abe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ad2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ad6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	021b      	lsls	r3, r3, #8
 8006ade:	68fa      	ldr	r2, [r7, #12]
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006aea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	051b      	lsls	r3, r3, #20
 8006af2:	693a      	ldr	r2, [r7, #16]
 8006af4:	4313      	orrs	r3, r2
 8006af6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	4a16      	ldr	r2, [pc, #88]	; (8006b54 <TIM_OC6_SetConfig+0xb0>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d00b      	beq.n	8006b18 <TIM_OC6_SetConfig+0x74>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	4a15      	ldr	r2, [pc, #84]	; (8006b58 <TIM_OC6_SetConfig+0xb4>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d007      	beq.n	8006b18 <TIM_OC6_SetConfig+0x74>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	4a14      	ldr	r2, [pc, #80]	; (8006b5c <TIM_OC6_SetConfig+0xb8>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d003      	beq.n	8006b18 <TIM_OC6_SetConfig+0x74>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	4a13      	ldr	r2, [pc, #76]	; (8006b60 <TIM_OC6_SetConfig+0xbc>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d109      	bne.n	8006b2c <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b1e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	695b      	ldr	r3, [r3, #20]
 8006b24:	029b      	lsls	r3, r3, #10
 8006b26:	697a      	ldr	r2, [r7, #20]
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	697a      	ldr	r2, [r7, #20]
 8006b30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	68fa      	ldr	r2, [r7, #12]
 8006b36:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	685a      	ldr	r2, [r3, #4]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	693a      	ldr	r2, [r7, #16]
 8006b44:	621a      	str	r2, [r3, #32]
}
 8006b46:	bf00      	nop
 8006b48:	371c      	adds	r7, #28
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr
 8006b52:	bf00      	nop
 8006b54:	40012c00 	.word	0x40012c00
 8006b58:	40014000 	.word	0x40014000
 8006b5c:	40014400 	.word	0x40014400
 8006b60:	40014800 	.word	0x40014800

08006b64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b087      	sub	sp, #28
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	60f8      	str	r0, [r7, #12]
 8006b6c:	60b9      	str	r1, [r7, #8]
 8006b6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6a1b      	ldr	r3, [r3, #32]
 8006b74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	6a1b      	ldr	r3, [r3, #32]
 8006b7a:	f023 0201 	bic.w	r2, r3, #1
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	699b      	ldr	r3, [r3, #24]
 8006b86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	011b      	lsls	r3, r3, #4
 8006b94:	693a      	ldr	r2, [r7, #16]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	f023 030a 	bic.w	r3, r3, #10
 8006ba0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006ba2:	697a      	ldr	r2, [r7, #20]
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	693a      	ldr	r2, [r7, #16]
 8006bae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	697a      	ldr	r2, [r7, #20]
 8006bb4:	621a      	str	r2, [r3, #32]
}
 8006bb6:	bf00      	nop
 8006bb8:	371c      	adds	r7, #28
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr

08006bc2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bc2:	b480      	push	{r7}
 8006bc4:	b087      	sub	sp, #28
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	60f8      	str	r0, [r7, #12]
 8006bca:	60b9      	str	r1, [r7, #8]
 8006bcc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	6a1b      	ldr	r3, [r3, #32]
 8006bd2:	f023 0210 	bic.w	r2, r3, #16
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	699b      	ldr	r3, [r3, #24]
 8006bde:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	6a1b      	ldr	r3, [r3, #32]
 8006be4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006bec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	031b      	lsls	r3, r3, #12
 8006bf2:	697a      	ldr	r2, [r7, #20]
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006bfe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	011b      	lsls	r3, r3, #4
 8006c04:	693a      	ldr	r2, [r7, #16]
 8006c06:	4313      	orrs	r3, r2
 8006c08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	697a      	ldr	r2, [r7, #20]
 8006c0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	693a      	ldr	r2, [r7, #16]
 8006c14:	621a      	str	r2, [r3, #32]
}
 8006c16:	bf00      	nop
 8006c18:	371c      	adds	r7, #28
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr

08006c22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c22:	b480      	push	{r7}
 8006c24:	b085      	sub	sp, #20
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	6078      	str	r0, [r7, #4]
 8006c2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c3a:	683a      	ldr	r2, [r7, #0]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	f043 0307 	orr.w	r3, r3, #7
 8006c44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	68fa      	ldr	r2, [r7, #12]
 8006c4a:	609a      	str	r2, [r3, #8]
}
 8006c4c:	bf00      	nop
 8006c4e:	3714      	adds	r7, #20
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr

08006c58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b087      	sub	sp, #28
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	60f8      	str	r0, [r7, #12]
 8006c60:	60b9      	str	r1, [r7, #8]
 8006c62:	607a      	str	r2, [r7, #4]
 8006c64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	021a      	lsls	r2, r3, #8
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	431a      	orrs	r2, r3
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	697a      	ldr	r2, [r7, #20]
 8006c82:	4313      	orrs	r3, r2
 8006c84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	697a      	ldr	r2, [r7, #20]
 8006c8a:	609a      	str	r2, [r3, #8]
}
 8006c8c:	bf00      	nop
 8006c8e:	371c      	adds	r7, #28
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b087      	sub	sp, #28
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	60b9      	str	r1, [r7, #8]
 8006ca2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	f003 031f 	and.w	r3, r3, #31
 8006caa:	2201      	movs	r2, #1
 8006cac:	fa02 f303 	lsl.w	r3, r2, r3
 8006cb0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	6a1a      	ldr	r2, [r3, #32]
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	43db      	mvns	r3, r3
 8006cba:	401a      	ands	r2, r3
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	6a1a      	ldr	r2, [r3, #32]
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	f003 031f 	and.w	r3, r3, #31
 8006cca:	6879      	ldr	r1, [r7, #4]
 8006ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8006cd0:	431a      	orrs	r2, r3
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	621a      	str	r2, [r3, #32]
}
 8006cd6:	bf00      	nop
 8006cd8:	371c      	adds	r7, #28
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr
	...

08006ce4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b085      	sub	sp, #20
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d101      	bne.n	8006cfc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006cf8:	2302      	movs	r3, #2
 8006cfa:	e054      	b.n	8006da6 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2202      	movs	r2, #2
 8006d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a24      	ldr	r2, [pc, #144]	; (8006db4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d108      	bne.n	8006d38 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006d2c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	68fa      	ldr	r2, [r7, #12]
 8006d34:	4313      	orrs	r3, r2
 8006d36:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	68fa      	ldr	r2, [r7, #12]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	68fa      	ldr	r2, [r7, #12]
 8006d50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a17      	ldr	r2, [pc, #92]	; (8006db4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d00e      	beq.n	8006d7a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d64:	d009      	beq.n	8006d7a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a13      	ldr	r2, [pc, #76]	; (8006db8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d004      	beq.n	8006d7a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a11      	ldr	r2, [pc, #68]	; (8006dbc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d10c      	bne.n	8006d94 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	68ba      	ldr	r2, [r7, #8]
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	68ba      	ldr	r2, [r7, #8]
 8006d92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2201      	movs	r2, #1
 8006d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006da4:	2300      	movs	r3, #0
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3714      	adds	r7, #20
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr
 8006db2:	bf00      	nop
 8006db4:	40012c00 	.word	0x40012c00
 8006db8:	40000400 	.word	0x40000400
 8006dbc:	40014000 	.word	0x40014000

08006dc0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b085      	sub	sp, #20
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d101      	bne.n	8006ddc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006dd8:	2302      	movs	r3, #2
 8006dda:	e060      	b.n	8006e9e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2201      	movs	r2, #1
 8006de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	68db      	ldr	r3, [r3, #12]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	691b      	ldr	r3, [r3, #16]
 8006e26:	4313      	orrs	r3, r2
 8006e28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	695b      	ldr	r3, [r3, #20]
 8006e34:	4313      	orrs	r3, r2
 8006e36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e42:	4313      	orrs	r3, r2
 8006e44:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	699b      	ldr	r3, [r3, #24]
 8006e50:	041b      	lsls	r3, r3, #16
 8006e52:	4313      	orrs	r3, r2
 8006e54:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a14      	ldr	r2, [pc, #80]	; (8006eac <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d115      	bne.n	8006e8c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e6a:	051b      	lsls	r3, r3, #20
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	69db      	ldr	r3, [r3, #28]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	6a1b      	ldr	r3, [r3, #32]
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	68fa      	ldr	r2, [r7, #12]
 8006e92:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2200      	movs	r2, #0
 8006e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e9c:	2300      	movs	r3, #0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3714      	adds	r7, #20
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr
 8006eaa:	bf00      	nop
 8006eac:	40012c00 	.word	0x40012c00

08006eb0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b082      	sub	sp, #8
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d101      	bne.n	8006ec2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e040      	b.n	8006f44 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d106      	bne.n	8006ed8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f7fa f9d4 	bl	8001280 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2224      	movs	r2, #36	; 0x24
 8006edc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f022 0201 	bic.w	r2, r2, #1
 8006eec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 f82c 	bl	8006f4c <UART_SetConfig>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d101      	bne.n	8006efe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006efa:	2301      	movs	r3, #1
 8006efc:	e022      	b.n	8006f44 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d002      	beq.n	8006f0c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 f956 	bl	80071b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	685a      	ldr	r2, [r3, #4]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	689a      	ldr	r2, [r3, #8]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f042 0201 	orr.w	r2, r2, #1
 8006f3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f000 f9dd 	bl	80072fc <UART_CheckIdleState>
 8006f42:	4603      	mov	r3, r0
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3708      	adds	r7, #8
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b088      	sub	sp, #32
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f54:	2300      	movs	r3, #0
 8006f56:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	689a      	ldr	r2, [r3, #8]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	691b      	ldr	r3, [r3, #16]
 8006f60:	431a      	orrs	r2, r3
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	695b      	ldr	r3, [r3, #20]
 8006f66:	431a      	orrs	r2, r3
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	69db      	ldr	r3, [r3, #28]
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	4b8a      	ldr	r3, [pc, #552]	; (80071a0 <UART_SetConfig+0x254>)
 8006f78:	4013      	ands	r3, r2
 8006f7a:	687a      	ldr	r2, [r7, #4]
 8006f7c:	6812      	ldr	r2, [r2, #0]
 8006f7e:	6979      	ldr	r1, [r7, #20]
 8006f80:	430b      	orrs	r3, r1
 8006f82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	68da      	ldr	r2, [r3, #12]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	430a      	orrs	r2, r1
 8006f98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	699b      	ldr	r3, [r3, #24]
 8006f9e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6a1b      	ldr	r3, [r3, #32]
 8006fa4:	697a      	ldr	r2, [r7, #20]
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	697a      	ldr	r2, [r7, #20]
 8006fba:	430a      	orrs	r2, r1
 8006fbc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a78      	ldr	r2, [pc, #480]	; (80071a4 <UART_SetConfig+0x258>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d120      	bne.n	800700a <UART_SetConfig+0xbe>
 8006fc8:	4b77      	ldr	r3, [pc, #476]	; (80071a8 <UART_SetConfig+0x25c>)
 8006fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fcc:	f003 0303 	and.w	r3, r3, #3
 8006fd0:	2b03      	cmp	r3, #3
 8006fd2:	d817      	bhi.n	8007004 <UART_SetConfig+0xb8>
 8006fd4:	a201      	add	r2, pc, #4	; (adr r2, 8006fdc <UART_SetConfig+0x90>)
 8006fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fda:	bf00      	nop
 8006fdc:	08006fed 	.word	0x08006fed
 8006fe0:	08006ff9 	.word	0x08006ff9
 8006fe4:	08006fff 	.word	0x08006fff
 8006fe8:	08006ff3 	.word	0x08006ff3
 8006fec:	2300      	movs	r3, #0
 8006fee:	77fb      	strb	r3, [r7, #31]
 8006ff0:	e01d      	b.n	800702e <UART_SetConfig+0xe2>
 8006ff2:	2302      	movs	r3, #2
 8006ff4:	77fb      	strb	r3, [r7, #31]
 8006ff6:	e01a      	b.n	800702e <UART_SetConfig+0xe2>
 8006ff8:	2304      	movs	r3, #4
 8006ffa:	77fb      	strb	r3, [r7, #31]
 8006ffc:	e017      	b.n	800702e <UART_SetConfig+0xe2>
 8006ffe:	2308      	movs	r3, #8
 8007000:	77fb      	strb	r3, [r7, #31]
 8007002:	e014      	b.n	800702e <UART_SetConfig+0xe2>
 8007004:	2310      	movs	r3, #16
 8007006:	77fb      	strb	r3, [r7, #31]
 8007008:	e011      	b.n	800702e <UART_SetConfig+0xe2>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a67      	ldr	r2, [pc, #412]	; (80071ac <UART_SetConfig+0x260>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d102      	bne.n	800701a <UART_SetConfig+0xce>
 8007014:	2300      	movs	r3, #0
 8007016:	77fb      	strb	r3, [r7, #31]
 8007018:	e009      	b.n	800702e <UART_SetConfig+0xe2>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a64      	ldr	r2, [pc, #400]	; (80071b0 <UART_SetConfig+0x264>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d102      	bne.n	800702a <UART_SetConfig+0xde>
 8007024:	2300      	movs	r3, #0
 8007026:	77fb      	strb	r3, [r7, #31]
 8007028:	e001      	b.n	800702e <UART_SetConfig+0xe2>
 800702a:	2310      	movs	r3, #16
 800702c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	69db      	ldr	r3, [r3, #28]
 8007032:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007036:	d15b      	bne.n	80070f0 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8007038:	7ffb      	ldrb	r3, [r7, #31]
 800703a:	2b08      	cmp	r3, #8
 800703c:	d827      	bhi.n	800708e <UART_SetConfig+0x142>
 800703e:	a201      	add	r2, pc, #4	; (adr r2, 8007044 <UART_SetConfig+0xf8>)
 8007040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007044:	08007069 	.word	0x08007069
 8007048:	08007071 	.word	0x08007071
 800704c:	08007079 	.word	0x08007079
 8007050:	0800708f 	.word	0x0800708f
 8007054:	0800707f 	.word	0x0800707f
 8007058:	0800708f 	.word	0x0800708f
 800705c:	0800708f 	.word	0x0800708f
 8007060:	0800708f 	.word	0x0800708f
 8007064:	08007087 	.word	0x08007087
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007068:	f7fe fc3e 	bl	80058e8 <HAL_RCC_GetPCLK1Freq>
 800706c:	61b8      	str	r0, [r7, #24]
        break;
 800706e:	e013      	b.n	8007098 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007070:	f7fe fc5c 	bl	800592c <HAL_RCC_GetPCLK2Freq>
 8007074:	61b8      	str	r0, [r7, #24]
        break;
 8007076:	e00f      	b.n	8007098 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007078:	4b4e      	ldr	r3, [pc, #312]	; (80071b4 <UART_SetConfig+0x268>)
 800707a:	61bb      	str	r3, [r7, #24]
        break;
 800707c:	e00c      	b.n	8007098 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800707e:	f7fe fbbd 	bl	80057fc <HAL_RCC_GetSysClockFreq>
 8007082:	61b8      	str	r0, [r7, #24]
        break;
 8007084:	e008      	b.n	8007098 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007086:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800708a:	61bb      	str	r3, [r7, #24]
        break;
 800708c:	e004      	b.n	8007098 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800708e:	2300      	movs	r3, #0
 8007090:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007092:	2301      	movs	r3, #1
 8007094:	77bb      	strb	r3, [r7, #30]
        break;
 8007096:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007098:	69bb      	ldr	r3, [r7, #24]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d074      	beq.n	8007188 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800709e:	69bb      	ldr	r3, [r7, #24]
 80070a0:	005a      	lsls	r2, r3, #1
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	085b      	lsrs	r3, r3, #1
 80070a8:	441a      	add	r2, r3
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	2b0f      	cmp	r3, #15
 80070ba:	d916      	bls.n	80070ea <UART_SetConfig+0x19e>
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070c2:	d212      	bcs.n	80070ea <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	b29b      	uxth	r3, r3
 80070c8:	f023 030f 	bic.w	r3, r3, #15
 80070cc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	085b      	lsrs	r3, r3, #1
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	f003 0307 	and.w	r3, r3, #7
 80070d8:	b29a      	uxth	r2, r3
 80070da:	89fb      	ldrh	r3, [r7, #14]
 80070dc:	4313      	orrs	r3, r2
 80070de:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	89fa      	ldrh	r2, [r7, #14]
 80070e6:	60da      	str	r2, [r3, #12]
 80070e8:	e04e      	b.n	8007188 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	77bb      	strb	r3, [r7, #30]
 80070ee:	e04b      	b.n	8007188 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80070f0:	7ffb      	ldrb	r3, [r7, #31]
 80070f2:	2b08      	cmp	r3, #8
 80070f4:	d827      	bhi.n	8007146 <UART_SetConfig+0x1fa>
 80070f6:	a201      	add	r2, pc, #4	; (adr r2, 80070fc <UART_SetConfig+0x1b0>)
 80070f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070fc:	08007121 	.word	0x08007121
 8007100:	08007129 	.word	0x08007129
 8007104:	08007131 	.word	0x08007131
 8007108:	08007147 	.word	0x08007147
 800710c:	08007137 	.word	0x08007137
 8007110:	08007147 	.word	0x08007147
 8007114:	08007147 	.word	0x08007147
 8007118:	08007147 	.word	0x08007147
 800711c:	0800713f 	.word	0x0800713f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007120:	f7fe fbe2 	bl	80058e8 <HAL_RCC_GetPCLK1Freq>
 8007124:	61b8      	str	r0, [r7, #24]
        break;
 8007126:	e013      	b.n	8007150 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007128:	f7fe fc00 	bl	800592c <HAL_RCC_GetPCLK2Freq>
 800712c:	61b8      	str	r0, [r7, #24]
        break;
 800712e:	e00f      	b.n	8007150 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007130:	4b20      	ldr	r3, [pc, #128]	; (80071b4 <UART_SetConfig+0x268>)
 8007132:	61bb      	str	r3, [r7, #24]
        break;
 8007134:	e00c      	b.n	8007150 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007136:	f7fe fb61 	bl	80057fc <HAL_RCC_GetSysClockFreq>
 800713a:	61b8      	str	r0, [r7, #24]
        break;
 800713c:	e008      	b.n	8007150 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800713e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007142:	61bb      	str	r3, [r7, #24]
        break;
 8007144:	e004      	b.n	8007150 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8007146:	2300      	movs	r3, #0
 8007148:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800714a:	2301      	movs	r3, #1
 800714c:	77bb      	strb	r3, [r7, #30]
        break;
 800714e:	bf00      	nop
    }

    if (pclk != 0U)
 8007150:	69bb      	ldr	r3, [r7, #24]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d018      	beq.n	8007188 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	085a      	lsrs	r2, r3, #1
 800715c:	69bb      	ldr	r3, [r7, #24]
 800715e:	441a      	add	r2, r3
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	fbb2 f3f3 	udiv	r3, r2, r3
 8007168:	b29b      	uxth	r3, r3
 800716a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	2b0f      	cmp	r3, #15
 8007170:	d908      	bls.n	8007184 <UART_SetConfig+0x238>
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007178:	d204      	bcs.n	8007184 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	693a      	ldr	r2, [r7, #16]
 8007180:	60da      	str	r2, [r3, #12]
 8007182:	e001      	b.n	8007188 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8007184:	2301      	movs	r3, #1
 8007186:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2200      	movs	r2, #0
 800718c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007194:	7fbb      	ldrb	r3, [r7, #30]
}
 8007196:	4618      	mov	r0, r3
 8007198:	3720      	adds	r7, #32
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
 800719e:	bf00      	nop
 80071a0:	efff69f3 	.word	0xefff69f3
 80071a4:	40013800 	.word	0x40013800
 80071a8:	40021000 	.word	0x40021000
 80071ac:	40004400 	.word	0x40004400
 80071b0:	40004800 	.word	0x40004800
 80071b4:	007a1200 	.word	0x007a1200

080071b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b083      	sub	sp, #12
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c4:	f003 0301 	and.w	r3, r3, #1
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d00a      	beq.n	80071e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	430a      	orrs	r2, r1
 80071e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e6:	f003 0302 	and.w	r3, r3, #2
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d00a      	beq.n	8007204 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	430a      	orrs	r2, r1
 8007202:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007208:	f003 0304 	and.w	r3, r3, #4
 800720c:	2b00      	cmp	r3, #0
 800720e:	d00a      	beq.n	8007226 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	430a      	orrs	r2, r1
 8007224:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800722a:	f003 0308 	and.w	r3, r3, #8
 800722e:	2b00      	cmp	r3, #0
 8007230:	d00a      	beq.n	8007248 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	430a      	orrs	r2, r1
 8007246:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800724c:	f003 0310 	and.w	r3, r3, #16
 8007250:	2b00      	cmp	r3, #0
 8007252:	d00a      	beq.n	800726a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	430a      	orrs	r2, r1
 8007268:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800726e:	f003 0320 	and.w	r3, r3, #32
 8007272:	2b00      	cmp	r3, #0
 8007274:	d00a      	beq.n	800728c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	430a      	orrs	r2, r1
 800728a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007294:	2b00      	cmp	r3, #0
 8007296:	d01a      	beq.n	80072ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	430a      	orrs	r2, r1
 80072ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072b6:	d10a      	bne.n	80072ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	430a      	orrs	r2, r1
 80072cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d00a      	beq.n	80072f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	430a      	orrs	r2, r1
 80072ee:	605a      	str	r2, [r3, #4]
  }
}
 80072f0:	bf00      	nop
 80072f2:	370c      	adds	r7, #12
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr

080072fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b086      	sub	sp, #24
 8007300:	af02      	add	r7, sp, #8
 8007302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800730c:	f7fa f880 	bl	8001410 <HAL_GetTick>
 8007310:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f003 0308 	and.w	r3, r3, #8
 800731c:	2b08      	cmp	r3, #8
 800731e:	d10e      	bne.n	800733e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007320:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007324:	9300      	str	r3, [sp, #0]
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2200      	movs	r2, #0
 800732a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f000 f82d 	bl	800738e <UART_WaitOnFlagUntilTimeout>
 8007334:	4603      	mov	r3, r0
 8007336:	2b00      	cmp	r3, #0
 8007338:	d001      	beq.n	800733e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800733a:	2303      	movs	r3, #3
 800733c:	e023      	b.n	8007386 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f003 0304 	and.w	r3, r3, #4
 8007348:	2b04      	cmp	r3, #4
 800734a:	d10e      	bne.n	800736a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800734c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007350:	9300      	str	r3, [sp, #0]
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2200      	movs	r2, #0
 8007356:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 f817 	bl	800738e <UART_WaitOnFlagUntilTimeout>
 8007360:	4603      	mov	r3, r0
 8007362:	2b00      	cmp	r3, #0
 8007364:	d001      	beq.n	800736a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007366:	2303      	movs	r3, #3
 8007368:	e00d      	b.n	8007386 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2220      	movs	r2, #32
 800736e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2220      	movs	r2, #32
 8007374:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2200      	movs	r2, #0
 800737a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2200      	movs	r2, #0
 8007380:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007384:	2300      	movs	r3, #0
}
 8007386:	4618      	mov	r0, r3
 8007388:	3710      	adds	r7, #16
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}

0800738e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800738e:	b580      	push	{r7, lr}
 8007390:	b09c      	sub	sp, #112	; 0x70
 8007392:	af00      	add	r7, sp, #0
 8007394:	60f8      	str	r0, [r7, #12]
 8007396:	60b9      	str	r1, [r7, #8]
 8007398:	603b      	str	r3, [r7, #0]
 800739a:	4613      	mov	r3, r2
 800739c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800739e:	e0a5      	b.n	80074ec <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073a6:	f000 80a1 	beq.w	80074ec <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073aa:	f7fa f831 	bl	8001410 <HAL_GetTick>
 80073ae:	4602      	mov	r2, r0
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	1ad3      	subs	r3, r2, r3
 80073b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d302      	bcc.n	80073c0 <UART_WaitOnFlagUntilTimeout+0x32>
 80073ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d13e      	bne.n	800743e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073c8:	e853 3f00 	ldrex	r3, [r3]
 80073cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80073ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80073d4:	667b      	str	r3, [r7, #100]	; 0x64
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	461a      	mov	r2, r3
 80073dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80073e0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80073e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80073e6:	e841 2300 	strex	r3, r2, [r1]
 80073ea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80073ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d1e6      	bne.n	80073c0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	3308      	adds	r3, #8
 80073f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073fc:	e853 3f00 	ldrex	r3, [r3]
 8007400:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007404:	f023 0301 	bic.w	r3, r3, #1
 8007408:	663b      	str	r3, [r7, #96]	; 0x60
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	3308      	adds	r3, #8
 8007410:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007412:	64ba      	str	r2, [r7, #72]	; 0x48
 8007414:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007416:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007418:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800741a:	e841 2300 	strex	r3, r2, [r1]
 800741e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007420:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007422:	2b00      	cmp	r3, #0
 8007424:	d1e5      	bne.n	80073f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2220      	movs	r2, #32
 800742a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2220      	movs	r2, #32
 8007430:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2200      	movs	r2, #0
 8007436:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800743a:	2303      	movs	r3, #3
 800743c:	e067      	b.n	800750e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f003 0304 	and.w	r3, r3, #4
 8007448:	2b00      	cmp	r3, #0
 800744a:	d04f      	beq.n	80074ec <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	69db      	ldr	r3, [r3, #28]
 8007452:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007456:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800745a:	d147      	bne.n	80074ec <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007464:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800746c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800746e:	e853 3f00 	ldrex	r3, [r3]
 8007472:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007476:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800747a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	461a      	mov	r2, r3
 8007482:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007484:	637b      	str	r3, [r7, #52]	; 0x34
 8007486:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007488:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800748a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800748c:	e841 2300 	strex	r3, r2, [r1]
 8007490:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007494:	2b00      	cmp	r3, #0
 8007496:	d1e6      	bne.n	8007466 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	3308      	adds	r3, #8
 800749e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	e853 3f00 	ldrex	r3, [r3]
 80074a6:	613b      	str	r3, [r7, #16]
   return(result);
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	f023 0301 	bic.w	r3, r3, #1
 80074ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	3308      	adds	r3, #8
 80074b6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80074b8:	623a      	str	r2, [r7, #32]
 80074ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074bc:	69f9      	ldr	r1, [r7, #28]
 80074be:	6a3a      	ldr	r2, [r7, #32]
 80074c0:	e841 2300 	strex	r3, r2, [r1]
 80074c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80074c6:	69bb      	ldr	r3, [r7, #24]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d1e5      	bne.n	8007498 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2220      	movs	r2, #32
 80074d0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2220      	movs	r2, #32
 80074d6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2220      	movs	r2, #32
 80074dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2200      	movs	r2, #0
 80074e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80074e8:	2303      	movs	r3, #3
 80074ea:	e010      	b.n	800750e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	69da      	ldr	r2, [r3, #28]
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	4013      	ands	r3, r2
 80074f6:	68ba      	ldr	r2, [r7, #8]
 80074f8:	429a      	cmp	r2, r3
 80074fa:	bf0c      	ite	eq
 80074fc:	2301      	moveq	r3, #1
 80074fe:	2300      	movne	r3, #0
 8007500:	b2db      	uxtb	r3, r3
 8007502:	461a      	mov	r2, r3
 8007504:	79fb      	ldrb	r3, [r7, #7]
 8007506:	429a      	cmp	r2, r3
 8007508:	f43f af4a 	beq.w	80073a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800750c:	2300      	movs	r3, #0
}
 800750e:	4618      	mov	r0, r3
 8007510:	3770      	adds	r7, #112	; 0x70
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}
	...

08007518 <__errno>:
 8007518:	4b01      	ldr	r3, [pc, #4]	; (8007520 <__errno+0x8>)
 800751a:	6818      	ldr	r0, [r3, #0]
 800751c:	4770      	bx	lr
 800751e:	bf00      	nop
 8007520:	2000000c 	.word	0x2000000c

08007524 <__libc_init_array>:
 8007524:	b570      	push	{r4, r5, r6, lr}
 8007526:	4d0d      	ldr	r5, [pc, #52]	; (800755c <__libc_init_array+0x38>)
 8007528:	4c0d      	ldr	r4, [pc, #52]	; (8007560 <__libc_init_array+0x3c>)
 800752a:	1b64      	subs	r4, r4, r5
 800752c:	10a4      	asrs	r4, r4, #2
 800752e:	2600      	movs	r6, #0
 8007530:	42a6      	cmp	r6, r4
 8007532:	d109      	bne.n	8007548 <__libc_init_array+0x24>
 8007534:	4d0b      	ldr	r5, [pc, #44]	; (8007564 <__libc_init_array+0x40>)
 8007536:	4c0c      	ldr	r4, [pc, #48]	; (8007568 <__libc_init_array+0x44>)
 8007538:	f000 f8a0 	bl	800767c <_init>
 800753c:	1b64      	subs	r4, r4, r5
 800753e:	10a4      	asrs	r4, r4, #2
 8007540:	2600      	movs	r6, #0
 8007542:	42a6      	cmp	r6, r4
 8007544:	d105      	bne.n	8007552 <__libc_init_array+0x2e>
 8007546:	bd70      	pop	{r4, r5, r6, pc}
 8007548:	f855 3b04 	ldr.w	r3, [r5], #4
 800754c:	4798      	blx	r3
 800754e:	3601      	adds	r6, #1
 8007550:	e7ee      	b.n	8007530 <__libc_init_array+0xc>
 8007552:	f855 3b04 	ldr.w	r3, [r5], #4
 8007556:	4798      	blx	r3
 8007558:	3601      	adds	r6, #1
 800755a:	e7f2      	b.n	8007542 <__libc_init_array+0x1e>
 800755c:	080076cc 	.word	0x080076cc
 8007560:	080076cc 	.word	0x080076cc
 8007564:	080076cc 	.word	0x080076cc
 8007568:	080076d0 	.word	0x080076d0

0800756c <malloc>:
 800756c:	4b02      	ldr	r3, [pc, #8]	; (8007578 <malloc+0xc>)
 800756e:	4601      	mov	r1, r0
 8007570:	6818      	ldr	r0, [r3, #0]
 8007572:	f000 b80b 	b.w	800758c <_malloc_r>
 8007576:	bf00      	nop
 8007578:	2000000c 	.word	0x2000000c

0800757c <memset>:
 800757c:	4402      	add	r2, r0
 800757e:	4603      	mov	r3, r0
 8007580:	4293      	cmp	r3, r2
 8007582:	d100      	bne.n	8007586 <memset+0xa>
 8007584:	4770      	bx	lr
 8007586:	f803 1b01 	strb.w	r1, [r3], #1
 800758a:	e7f9      	b.n	8007580 <memset+0x4>

0800758c <_malloc_r>:
 800758c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800758e:	1ccd      	adds	r5, r1, #3
 8007590:	f025 0503 	bic.w	r5, r5, #3
 8007594:	3508      	adds	r5, #8
 8007596:	2d0c      	cmp	r5, #12
 8007598:	bf38      	it	cc
 800759a:	250c      	movcc	r5, #12
 800759c:	2d00      	cmp	r5, #0
 800759e:	4606      	mov	r6, r0
 80075a0:	db01      	blt.n	80075a6 <_malloc_r+0x1a>
 80075a2:	42a9      	cmp	r1, r5
 80075a4:	d903      	bls.n	80075ae <_malloc_r+0x22>
 80075a6:	230c      	movs	r3, #12
 80075a8:	6033      	str	r3, [r6, #0]
 80075aa:	2000      	movs	r0, #0
 80075ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075ae:	f000 f857 	bl	8007660 <__malloc_lock>
 80075b2:	4921      	ldr	r1, [pc, #132]	; (8007638 <_malloc_r+0xac>)
 80075b4:	680a      	ldr	r2, [r1, #0]
 80075b6:	4614      	mov	r4, r2
 80075b8:	b99c      	cbnz	r4, 80075e2 <_malloc_r+0x56>
 80075ba:	4f20      	ldr	r7, [pc, #128]	; (800763c <_malloc_r+0xb0>)
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	b923      	cbnz	r3, 80075ca <_malloc_r+0x3e>
 80075c0:	4621      	mov	r1, r4
 80075c2:	4630      	mov	r0, r6
 80075c4:	f000 f83c 	bl	8007640 <_sbrk_r>
 80075c8:	6038      	str	r0, [r7, #0]
 80075ca:	4629      	mov	r1, r5
 80075cc:	4630      	mov	r0, r6
 80075ce:	f000 f837 	bl	8007640 <_sbrk_r>
 80075d2:	1c43      	adds	r3, r0, #1
 80075d4:	d123      	bne.n	800761e <_malloc_r+0x92>
 80075d6:	230c      	movs	r3, #12
 80075d8:	6033      	str	r3, [r6, #0]
 80075da:	4630      	mov	r0, r6
 80075dc:	f000 f846 	bl	800766c <__malloc_unlock>
 80075e0:	e7e3      	b.n	80075aa <_malloc_r+0x1e>
 80075e2:	6823      	ldr	r3, [r4, #0]
 80075e4:	1b5b      	subs	r3, r3, r5
 80075e6:	d417      	bmi.n	8007618 <_malloc_r+0x8c>
 80075e8:	2b0b      	cmp	r3, #11
 80075ea:	d903      	bls.n	80075f4 <_malloc_r+0x68>
 80075ec:	6023      	str	r3, [r4, #0]
 80075ee:	441c      	add	r4, r3
 80075f0:	6025      	str	r5, [r4, #0]
 80075f2:	e004      	b.n	80075fe <_malloc_r+0x72>
 80075f4:	6863      	ldr	r3, [r4, #4]
 80075f6:	42a2      	cmp	r2, r4
 80075f8:	bf0c      	ite	eq
 80075fa:	600b      	streq	r3, [r1, #0]
 80075fc:	6053      	strne	r3, [r2, #4]
 80075fe:	4630      	mov	r0, r6
 8007600:	f000 f834 	bl	800766c <__malloc_unlock>
 8007604:	f104 000b 	add.w	r0, r4, #11
 8007608:	1d23      	adds	r3, r4, #4
 800760a:	f020 0007 	bic.w	r0, r0, #7
 800760e:	1ac2      	subs	r2, r0, r3
 8007610:	d0cc      	beq.n	80075ac <_malloc_r+0x20>
 8007612:	1a1b      	subs	r3, r3, r0
 8007614:	50a3      	str	r3, [r4, r2]
 8007616:	e7c9      	b.n	80075ac <_malloc_r+0x20>
 8007618:	4622      	mov	r2, r4
 800761a:	6864      	ldr	r4, [r4, #4]
 800761c:	e7cc      	b.n	80075b8 <_malloc_r+0x2c>
 800761e:	1cc4      	adds	r4, r0, #3
 8007620:	f024 0403 	bic.w	r4, r4, #3
 8007624:	42a0      	cmp	r0, r4
 8007626:	d0e3      	beq.n	80075f0 <_malloc_r+0x64>
 8007628:	1a21      	subs	r1, r4, r0
 800762a:	4630      	mov	r0, r6
 800762c:	f000 f808 	bl	8007640 <_sbrk_r>
 8007630:	3001      	adds	r0, #1
 8007632:	d1dd      	bne.n	80075f0 <_malloc_r+0x64>
 8007634:	e7cf      	b.n	80075d6 <_malloc_r+0x4a>
 8007636:	bf00      	nop
 8007638:	20000098 	.word	0x20000098
 800763c:	2000009c 	.word	0x2000009c

08007640 <_sbrk_r>:
 8007640:	b538      	push	{r3, r4, r5, lr}
 8007642:	4d06      	ldr	r5, [pc, #24]	; (800765c <_sbrk_r+0x1c>)
 8007644:	2300      	movs	r3, #0
 8007646:	4604      	mov	r4, r0
 8007648:	4608      	mov	r0, r1
 800764a:	602b      	str	r3, [r5, #0]
 800764c:	f7f9 fb50 	bl	8000cf0 <_sbrk>
 8007650:	1c43      	adds	r3, r0, #1
 8007652:	d102      	bne.n	800765a <_sbrk_r+0x1a>
 8007654:	682b      	ldr	r3, [r5, #0]
 8007656:	b103      	cbz	r3, 800765a <_sbrk_r+0x1a>
 8007658:	6023      	str	r3, [r4, #0]
 800765a:	bd38      	pop	{r3, r4, r5, pc}
 800765c:	200003a4 	.word	0x200003a4

08007660 <__malloc_lock>:
 8007660:	4801      	ldr	r0, [pc, #4]	; (8007668 <__malloc_lock+0x8>)
 8007662:	f000 b809 	b.w	8007678 <__retarget_lock_acquire_recursive>
 8007666:	bf00      	nop
 8007668:	200003ac 	.word	0x200003ac

0800766c <__malloc_unlock>:
 800766c:	4801      	ldr	r0, [pc, #4]	; (8007674 <__malloc_unlock+0x8>)
 800766e:	f000 b804 	b.w	800767a <__retarget_lock_release_recursive>
 8007672:	bf00      	nop
 8007674:	200003ac 	.word	0x200003ac

08007678 <__retarget_lock_acquire_recursive>:
 8007678:	4770      	bx	lr

0800767a <__retarget_lock_release_recursive>:
 800767a:	4770      	bx	lr

0800767c <_init>:
 800767c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800767e:	bf00      	nop
 8007680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007682:	bc08      	pop	{r3}
 8007684:	469e      	mov	lr, r3
 8007686:	4770      	bx	lr

08007688 <_fini>:
 8007688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800768a:	bf00      	nop
 800768c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800768e:	bc08      	pop	{r3}
 8007690:	469e      	mov	lr, r3
 8007692:	4770      	bx	lr
