
tester.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074cc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08007654  08007654  00017654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800769c  0800769c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800769c  0800769c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800769c  0800769c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800769c  0800769c  0001769c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080076a0  080076a0  000176a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080076a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000344  20000070  08007714  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003b4  08007714  000203b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a49d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035d7  00000000  00000000  0003a53d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f8  00000000  00000000  0003db18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001280  00000000  00000000  0003ef10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003dba  00000000  00000000  00040190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ad40  00000000  00000000  00043f4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000afb58  00000000  00000000  0005ec8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010e7e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054e0  00000000  00000000  0010e838  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800763c 	.word	0x0800763c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	0800763c 	.word	0x0800763c

080001c8 <platform_write>:

static uint8_t * buffer;
static uint8_t rotation;

static uint8_t platform_write(uint8_t reg, uint8_t *bufp, uint16_t len)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b086      	sub	sp, #24
 80001cc:	af04      	add	r7, sp, #16
 80001ce:	4603      	mov	r3, r0
 80001d0:	6039      	str	r1, [r7, #0]
 80001d2:	71fb      	strb	r3, [r7, #7]
 80001d4:	4613      	mov	r3, r2
 80001d6:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write(&SSD1306_I2C_BUS, SSD1306_I2C_ADDRESS, reg, 1, bufp, len, 100);
 80001d8:	79fb      	ldrb	r3, [r7, #7]
 80001da:	b29a      	uxth	r2, r3
 80001dc:	2364      	movs	r3, #100	; 0x64
 80001de:	9302      	str	r3, [sp, #8]
 80001e0:	88bb      	ldrh	r3, [r7, #4]
 80001e2:	9301      	str	r3, [sp, #4]
 80001e4:	683b      	ldr	r3, [r7, #0]
 80001e6:	9300      	str	r3, [sp, #0]
 80001e8:	2301      	movs	r3, #1
 80001ea:	2178      	movs	r1, #120	; 0x78
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <platform_write+0x34>)
 80001ee:	f002 fe47 	bl	8002e80 <HAL_I2C_Mem_Write>
	return 0;
 80001f2:	2300      	movs	r3, #0
}
 80001f4:	4618      	mov	r0, r3
 80001f6:	3708      	adds	r7, #8
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bd80      	pop	{r7, pc}
 80001fc:	200001a0 	.word	0x200001a0

08000200 <platform_write_dma>:

static uint8_t platform_write_dma(uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b084      	sub	sp, #16
 8000204:	af02      	add	r7, sp, #8
 8000206:	4603      	mov	r3, r0
 8000208:	6039      	str	r1, [r7, #0]
 800020a:	71fb      	strb	r3, [r7, #7]
 800020c:	4613      	mov	r3, r2
 800020e:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_BUS, SSD1306_I2C_ADDRESS, reg, 1, bufp, len);
 8000210:	79fb      	ldrb	r3, [r7, #7]
 8000212:	b29a      	uxth	r2, r3
 8000214:	88bb      	ldrh	r3, [r7, #4]
 8000216:	9301      	str	r3, [sp, #4]
 8000218:	683b      	ldr	r3, [r7, #0]
 800021a:	9300      	str	r3, [sp, #0]
 800021c:	2301      	movs	r3, #1
 800021e:	2178      	movs	r1, #120	; 0x78
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <platform_write_dma+0x30>)
 8000222:	f002 ff41 	bl	80030a8 <HAL_I2C_Mem_Write_DMA>
	//HAL_I2C_Mem_Write(&SSD1306_I2C_BUS, SSD1306_I2C_ADDRESS, reg, 1, bufp, len,100);
	return 0;
 8000226:	2300      	movs	r3, #0
}
 8000228:	4618      	mov	r0, r3
 800022a:	3708      	adds	r7, #8
 800022c:	46bd      	mov	sp, r7
 800022e:	bd80      	pop	{r7, pc}
 8000230:	200001a0 	.word	0x200001a0

08000234 <SSD1306_send_com>:

static void SSD1306_send_com(uint8_t c)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	4603      	mov	r3, r0
 800023c:	71fb      	strb	r3, [r7, #7]
	platform_write(0x00, &c, 1);
 800023e:	1dfb      	adds	r3, r7, #7
 8000240:	2201      	movs	r2, #1
 8000242:	4619      	mov	r1, r3
 8000244:	2000      	movs	r0, #0
 8000246:	f7ff ffbf 	bl	80001c8 <platform_write>
}
 800024a:	bf00      	nop
 800024c:	3708      	adds	r7, #8
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
	...

08000254 <SSD1306_init>:

bool SSD1306_init(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b082      	sub	sp, #8
 8000258:	af00      	add	r7, sp, #0
  uint8_t comPins = 0x02, contrast = 0x8F, vccstate = SSD1306_SWITCHCAPVCC;
 800025a:	2302      	movs	r3, #2
 800025c:	71fb      	strb	r3, [r7, #7]
 800025e:	238f      	movs	r3, #143	; 0x8f
 8000260:	71bb      	strb	r3, [r7, #6]
 8000262:	2302      	movs	r3, #2
 8000264:	717b      	strb	r3, [r7, #5]
  size_t q= SSD1306_WIDTH * ((SSD1306_HEIGHT + 7) / 8);
 8000266:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800026a:	603b      	str	r3, [r7, #0]
  if ((!buffer) && !(buffer = (uint8_t *)malloc(q)))
 800026c:	4b3f      	ldr	r3, [pc, #252]	; (800036c <SSD1306_init+0x118>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	2b00      	cmp	r3, #0
 8000272:	d10c      	bne.n	800028e <SSD1306_init+0x3a>
 8000274:	6838      	ldr	r0, [r7, #0]
 8000276:	f007 f959 	bl	800752c <malloc>
 800027a:	4603      	mov	r3, r0
 800027c:	461a      	mov	r2, r3
 800027e:	4b3b      	ldr	r3, [pc, #236]	; (800036c <SSD1306_init+0x118>)
 8000280:	601a      	str	r2, [r3, #0]
 8000282:	4b3a      	ldr	r3, [pc, #232]	; (800036c <SSD1306_init+0x118>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	2b00      	cmp	r3, #0
 8000288:	d101      	bne.n	800028e <SSD1306_init+0x3a>
  {
    return false;
 800028a:	2300      	movs	r3, #0
 800028c:	e06a      	b.n	8000364 <SSD1306_init+0x110>
  }

  SSD1306_display_clear();
 800028e:	f000 f86f 	bl	8000370 <SSD1306_display_clear>

  // Init sequence
  SSD1306_send_com(SSD1306_DISPLAYOFF);
 8000292:	20ae      	movs	r0, #174	; 0xae
 8000294:	f7ff ffce 	bl	8000234 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETDISPLAYCLOCKDIV);
 8000298:	20d5      	movs	r0, #213	; 0xd5
 800029a:	f7ff ffcb 	bl	8000234 <SSD1306_send_com>
  SSD1306_send_com(0xE0);
 800029e:	20e0      	movs	r0, #224	; 0xe0
 80002a0:	f7ff ffc8 	bl	8000234 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETMULTIPLEX);
 80002a4:	20a8      	movs	r0, #168	; 0xa8
 80002a6:	f7ff ffc5 	bl	8000234 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_HEIGHT - 1);
 80002aa:	203f      	movs	r0, #63	; 0x3f
 80002ac:	f7ff ffc2 	bl	8000234 <SSD1306_send_com>

  SSD1306_send_com(SSD1306_SETDISPLAYOFFSET);
 80002b0:	20d3      	movs	r0, #211	; 0xd3
 80002b2:	f7ff ffbf 	bl	8000234 <SSD1306_send_com>
  SSD1306_send_com(0x00);
 80002b6:	2000      	movs	r0, #0
 80002b8:	f7ff ffbc 	bl	8000234 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETSTARTLINE | 0x00);
 80002bc:	2040      	movs	r0, #64	; 0x40
 80002be:	f7ff ffb9 	bl	8000234 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_CHARGEPUMP);
 80002c2:	208d      	movs	r0, #141	; 0x8d
 80002c4:	f7ff ffb6 	bl	8000234 <SSD1306_send_com>

  SSD1306_send_com((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
 80002c8:	797b      	ldrb	r3, [r7, #5]
 80002ca:	2b01      	cmp	r3, #1
 80002cc:	d101      	bne.n	80002d2 <SSD1306_init+0x7e>
 80002ce:	2310      	movs	r3, #16
 80002d0:	e000      	b.n	80002d4 <SSD1306_init+0x80>
 80002d2:	2314      	movs	r3, #20
 80002d4:	4618      	mov	r0, r3
 80002d6:	f7ff ffad 	bl	8000234 <SSD1306_send_com>

  SSD1306_send_com(SSD1306_MEMORYMODE);
 80002da:	2020      	movs	r0, #32
 80002dc:	f7ff ffaa 	bl	8000234 <SSD1306_send_com>
  SSD1306_send_com(0x00);
 80002e0:	2000      	movs	r0, #0
 80002e2:	f7ff ffa7 	bl	8000234 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SEGREMAP | 0x10);
 80002e6:	20b0      	movs	r0, #176	; 0xb0
 80002e8:	f7ff ffa4 	bl	8000234 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_COMSCANDEC);
 80002ec:	20c8      	movs	r0, #200	; 0xc8
 80002ee:	f7ff ffa1 	bl	8000234 <SSD1306_send_com>
    comPins = 0x02;
    contrast = 0x8F;
  }
  else if ((SSD1306_WIDTH == 128) && (SSD1306_HEIGHT == 64))
  {
    comPins = 0x12;
 80002f2:	2312      	movs	r3, #18
 80002f4:	71fb      	strb	r3, [r7, #7]
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF;
 80002f6:	797b      	ldrb	r3, [r7, #5]
 80002f8:	2b01      	cmp	r3, #1
 80002fa:	d101      	bne.n	8000300 <SSD1306_init+0xac>
 80002fc:	239f      	movs	r3, #159	; 0x9f
 80002fe:	e000      	b.n	8000302 <SSD1306_init+0xae>
 8000300:	23cf      	movs	r3, #207	; 0xcf
 8000302:	71bb      	strb	r3, [r7, #6]
  {
    comPins = 0x2; // ada x12
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF;
  }

  SSD1306_send_com(SSD1306_SETCOMPINS);
 8000304:	20da      	movs	r0, #218	; 0xda
 8000306:	f7ff ff95 	bl	8000234 <SSD1306_send_com>
  SSD1306_send_com(comPins);
 800030a:	79fb      	ldrb	r3, [r7, #7]
 800030c:	4618      	mov	r0, r3
 800030e:	f7ff ff91 	bl	8000234 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETCONTRAST);
 8000312:	2081      	movs	r0, #129	; 0x81
 8000314:	f7ff ff8e 	bl	8000234 <SSD1306_send_com>
  SSD1306_send_com(contrast);
 8000318:	79bb      	ldrb	r3, [r7, #6]
 800031a:	4618      	mov	r0, r3
 800031c:	f7ff ff8a 	bl	8000234 <SSD1306_send_com>

  SSD1306_send_com(SSD1306_SETPRECHARGE);
 8000320:	20d9      	movs	r0, #217	; 0xd9
 8000322:	f7ff ff87 	bl	8000234 <SSD1306_send_com>
  SSD1306_send_com((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
 8000326:	797b      	ldrb	r3, [r7, #5]
 8000328:	2b01      	cmp	r3, #1
 800032a:	d101      	bne.n	8000330 <SSD1306_init+0xdc>
 800032c:	2322      	movs	r3, #34	; 0x22
 800032e:	e000      	b.n	8000332 <SSD1306_init+0xde>
 8000330:	23f1      	movs	r3, #241	; 0xf1
 8000332:	4618      	mov	r0, r3
 8000334:	f7ff ff7e 	bl	8000234 <SSD1306_send_com>

  SSD1306_send_com(SSD1306_SETVCOMDETECT);
 8000338:	20db      	movs	r0, #219	; 0xdb
 800033a:	f7ff ff7b 	bl	8000234 <SSD1306_send_com>
  SSD1306_send_com(0x40);
 800033e:	2040      	movs	r0, #64	; 0x40
 8000340:	f7ff ff78 	bl	8000234 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_DISPLAYALLON_RESUME);
 8000344:	20a4      	movs	r0, #164	; 0xa4
 8000346:	f7ff ff75 	bl	8000234 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_NORMALDISPLAY);
 800034a:	20a6      	movs	r0, #166	; 0xa6
 800034c:	f7ff ff72 	bl	8000234 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_DEACTIVATE_SCROLL);
 8000350:	202e      	movs	r0, #46	; 0x2e
 8000352:	f7ff ff6f 	bl	8000234 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_DISPLAYON);
 8000356:	20af      	movs	r0, #175	; 0xaf
 8000358:	f7ff ff6c 	bl	8000234 <SSD1306_send_com>

  SSD1306_set_rotation(SSD1306_HORIZONTAL_MODE2);
 800035c:	2002      	movs	r0, #2
 800035e:	f000 fa3f 	bl	80007e0 <SSD1306_set_rotation>
  return true;
 8000362:	2301      	movs	r3, #1
}
 8000364:	4618      	mov	r0, r3
 8000366:	3708      	adds	r7, #8
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}
 800036c:	2000008c 	.word	0x2000008c

08000370 <SSD1306_display_clear>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void SSD1306_display_clear(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
	memset(buffer, 0, SSD1306_WIDTH * ((SSD1306_HEIGHT + 7) / 8));
 8000374:	4b04      	ldr	r3, [pc, #16]	; (8000388 <SSD1306_display_clear+0x18>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800037c:	2100      	movs	r1, #0
 800037e:	4618      	mov	r0, r3
 8000380:	f007 f8dc 	bl	800753c <memset>
}
 8000384:	bf00      	nop
 8000386:	bd80      	pop	{r7, pc}
 8000388:	2000008c 	.word	0x2000008c

0800038c <SSD1306_draw_fast_hline>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void SSD1306_draw_fast_hline(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 800038c:	b590      	push	{r4, r7, lr}
 800038e:	b085      	sub	sp, #20
 8000390:	af00      	add	r7, sp, #0
 8000392:	4604      	mov	r4, r0
 8000394:	4608      	mov	r0, r1
 8000396:	4611      	mov	r1, r2
 8000398:	461a      	mov	r2, r3
 800039a:	4623      	mov	r3, r4
 800039c:	80fb      	strh	r3, [r7, #6]
 800039e:	4603      	mov	r3, r0
 80003a0:	80bb      	strh	r3, [r7, #4]
 80003a2:	460b      	mov	r3, r1
 80003a4:	807b      	strh	r3, [r7, #2]
 80003a6:	4613      	mov	r3, r2
 80003a8:	803b      	strh	r3, [r7, #0]
	bool bSwap = false;
 80003aa:	2300      	movs	r3, #0
 80003ac:	73fb      	strb	r3, [r7, #15]

	switch (SSD1306_get_rotation())
 80003ae:	f000 fa27 	bl	8000800 <SSD1306_get_rotation>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b03      	cmp	r3, #3
 80003b6:	d02c      	beq.n	8000412 <SSD1306_draw_fast_hline+0x86>
 80003b8:	2b03      	cmp	r3, #3
 80003ba:	dc45      	bgt.n	8000448 <SSD1306_draw_fast_hline+0xbc>
 80003bc:	2b01      	cmp	r3, #1
 80003be:	d002      	beq.n	80003c6 <SSD1306_draw_fast_hline+0x3a>
 80003c0:	2b02      	cmp	r3, #2
 80003c2:	d014      	beq.n	80003ee <SSD1306_draw_fast_hline+0x62>
 80003c4:	e040      	b.n	8000448 <SSD1306_draw_fast_hline+0xbc>
	{
		case 1:
			// 90 degree rotation, swap x & y for rotation, then invert x
			bSwap = true;
 80003c6:	2301      	movs	r3, #1
 80003c8:	73fb      	strb	r3, [r7, #15]
			ssd1306_swap(x, y);
 80003ca:	88fa      	ldrh	r2, [r7, #6]
 80003cc:	88bb      	ldrh	r3, [r7, #4]
 80003ce:	4053      	eors	r3, r2
 80003d0:	80fb      	strh	r3, [r7, #6]
 80003d2:	88ba      	ldrh	r2, [r7, #4]
 80003d4:	88fb      	ldrh	r3, [r7, #6]
 80003d6:	4053      	eors	r3, r2
 80003d8:	80bb      	strh	r3, [r7, #4]
 80003da:	88fa      	ldrh	r2, [r7, #6]
 80003dc:	88bb      	ldrh	r3, [r7, #4]
 80003de:	4053      	eors	r3, r2
 80003e0:	80fb      	strh	r3, [r7, #6]
			x = SSD1306_WIDTH - x - 1;
 80003e2:	88fb      	ldrh	r3, [r7, #6]
 80003e4:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80003e8:	b29b      	uxth	r3, r3
 80003ea:	80fb      	strh	r3, [r7, #6]
			break;
 80003ec:	e02c      	b.n	8000448 <SSD1306_draw_fast_hline+0xbc>
		case 2:
			// 180 degree rotation, invert x and y, then shift y around for height.
			x = SSD1306_WIDTH - x - 1;
 80003ee:	88fb      	ldrh	r3, [r7, #6]
 80003f0:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80003f4:	b29b      	uxth	r3, r3
 80003f6:	80fb      	strh	r3, [r7, #6]
			y = SSD1306_HEIGHT - y - 1;
 80003f8:	88bb      	ldrh	r3, [r7, #4]
 80003fa:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80003fe:	b29b      	uxth	r3, r3
 8000400:	80bb      	strh	r3, [r7, #4]
			x -= (w - 1);
 8000402:	88fa      	ldrh	r2, [r7, #6]
 8000404:	887b      	ldrh	r3, [r7, #2]
 8000406:	1ad3      	subs	r3, r2, r3
 8000408:	b29b      	uxth	r3, r3
 800040a:	3301      	adds	r3, #1
 800040c:	b29b      	uxth	r3, r3
 800040e:	80fb      	strh	r3, [r7, #6]
			break;
 8000410:	e01a      	b.n	8000448 <SSD1306_draw_fast_hline+0xbc>
		case 3:
			// 270 degree rotation, swap x & y for rotation,
			// then invert y and adjust y for w (not to become h)
			bSwap = true;
 8000412:	2301      	movs	r3, #1
 8000414:	73fb      	strb	r3, [r7, #15]
			ssd1306_swap(x, y);
 8000416:	88fa      	ldrh	r2, [r7, #6]
 8000418:	88bb      	ldrh	r3, [r7, #4]
 800041a:	4053      	eors	r3, r2
 800041c:	80fb      	strh	r3, [r7, #6]
 800041e:	88ba      	ldrh	r2, [r7, #4]
 8000420:	88fb      	ldrh	r3, [r7, #6]
 8000422:	4053      	eors	r3, r2
 8000424:	80bb      	strh	r3, [r7, #4]
 8000426:	88fa      	ldrh	r2, [r7, #6]
 8000428:	88bb      	ldrh	r3, [r7, #4]
 800042a:	4053      	eors	r3, r2
 800042c:	80fb      	strh	r3, [r7, #6]
			y = SSD1306_HEIGHT - y - 1;
 800042e:	88bb      	ldrh	r3, [r7, #4]
 8000430:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8000434:	b29b      	uxth	r3, r3
 8000436:	80bb      	strh	r3, [r7, #4]
			y -= (w - 1);
 8000438:	88ba      	ldrh	r2, [r7, #4]
 800043a:	887b      	ldrh	r3, [r7, #2]
 800043c:	1ad3      	subs	r3, r2, r3
 800043e:	b29b      	uxth	r3, r3
 8000440:	3301      	adds	r3, #1
 8000442:	b29b      	uxth	r3, r3
 8000444:	80bb      	strh	r3, [r7, #4]
			break;
 8000446:	bf00      	nop
	}

	if (bSwap)
 8000448:	7bfb      	ldrb	r3, [r7, #15]
 800044a:	2b00      	cmp	r3, #0
 800044c:	d009      	beq.n	8000462 <SSD1306_draw_fast_hline+0xd6>
	{
		SSD1306_draw_fast_vline_internal(x, y, w, color);
 800044e:	883b      	ldrh	r3, [r7, #0]
 8000450:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000454:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000458:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800045c:	f000 f8a0 	bl	80005a0 <SSD1306_draw_fast_vline_internal>
	}
	else
	{
		SSD1306_draw_fast_hline_internal(x, y, w, color);
	}
}
 8000460:	e008      	b.n	8000474 <SSD1306_draw_fast_hline+0xe8>
		SSD1306_draw_fast_hline_internal(x, y, w, color);
 8000462:	883b      	ldrh	r3, [r7, #0]
 8000464:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000468:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800046c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000470:	f000 f804 	bl	800047c <SSD1306_draw_fast_hline_internal>
}
 8000474:	bf00      	nop
 8000476:	3714      	adds	r7, #20
 8000478:	46bd      	mov	sp, r7
 800047a:	bd90      	pop	{r4, r7, pc}

0800047c <SSD1306_draw_fast_hline_internal>:

void SSD1306_draw_fast_hline_internal(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 800047c:	b490      	push	{r4, r7}
 800047e:	b084      	sub	sp, #16
 8000480:	af00      	add	r7, sp, #0
 8000482:	4604      	mov	r4, r0
 8000484:	4608      	mov	r0, r1
 8000486:	4611      	mov	r1, r2
 8000488:	461a      	mov	r2, r3
 800048a:	4623      	mov	r3, r4
 800048c:	80fb      	strh	r3, [r7, #6]
 800048e:	4603      	mov	r3, r0
 8000490:	80bb      	strh	r3, [r7, #4]
 8000492:	460b      	mov	r3, r1
 8000494:	807b      	strh	r3, [r7, #2]
 8000496:	4613      	mov	r3, r2
 8000498:	803b      	strh	r3, [r7, #0]
	if ((y >= 0) && (y < SSD1306_HEIGHT))
 800049a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800049e:	2b00      	cmp	r3, #0
 80004a0:	db75      	blt.n	800058e <SSD1306_draw_fast_hline_internal+0x112>
 80004a2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80004a6:	2b3f      	cmp	r3, #63	; 0x3f
 80004a8:	dc71      	bgt.n	800058e <SSD1306_draw_fast_hline_internal+0x112>
	{
		// Y coord in bounds?
		if (x < 0)
 80004aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	da06      	bge.n	80004c0 <SSD1306_draw_fast_hline_internal+0x44>
		{
			// Clip left
			w += x;
 80004b2:	887a      	ldrh	r2, [r7, #2]
 80004b4:	88fb      	ldrh	r3, [r7, #6]
 80004b6:	4413      	add	r3, r2
 80004b8:	b29b      	uxth	r3, r3
 80004ba:	807b      	strh	r3, [r7, #2]
			x = 0;
 80004bc:	2300      	movs	r3, #0
 80004be:	80fb      	strh	r3, [r7, #6]
		}
		if ((x + w) > SSD1306_WIDTH)
 80004c0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80004c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80004c8:	4413      	add	r3, r2
 80004ca:	2b80      	cmp	r3, #128	; 0x80
 80004cc:	dd04      	ble.n	80004d8 <SSD1306_draw_fast_hline_internal+0x5c>
		{
			// Clip right
			w = (SSD1306_WIDTH - x);
 80004ce:	88fb      	ldrh	r3, [r7, #6]
 80004d0:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80004d4:	b29b      	uxth	r3, r3
 80004d6:	807b      	strh	r3, [r7, #2]
		}
		if (w > 0)
 80004d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	dd56      	ble.n	800058e <SSD1306_draw_fast_hline_internal+0x112>
		{
			// Proceed only if width is positive
			uint8_t *pBuf = &buffer[(y / 8) * SSD1306_WIDTH + x], mask = 1 << (y & 7);
 80004e0:	4b2e      	ldr	r3, [pc, #184]	; (800059c <SSD1306_draw_fast_hline_internal+0x120>)
 80004e2:	681a      	ldr	r2, [r3, #0]
 80004e4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	da00      	bge.n	80004ee <SSD1306_draw_fast_hline_internal+0x72>
 80004ec:	3307      	adds	r3, #7
 80004ee:	10db      	asrs	r3, r3, #3
 80004f0:	b21b      	sxth	r3, r3
 80004f2:	01d9      	lsls	r1, r3, #7
 80004f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004f8:	440b      	add	r3, r1
 80004fa:	4413      	add	r3, r2
 80004fc:	60fb      	str	r3, [r7, #12]
 80004fe:	88bb      	ldrh	r3, [r7, #4]
 8000500:	f003 0307 	and.w	r3, r3, #7
 8000504:	2201      	movs	r2, #1
 8000506:	fa02 f303 	lsl.w	r3, r2, r3
 800050a:	72fb      	strb	r3, [r7, #11]
			switch (color)
 800050c:	883b      	ldrh	r3, [r7, #0]
 800050e:	2b02      	cmp	r3, #2
 8000510:	d034      	beq.n	800057c <SSD1306_draw_fast_hline_internal+0x100>
 8000512:	2b02      	cmp	r3, #2
 8000514:	dc3c      	bgt.n	8000590 <SSD1306_draw_fast_hline_internal+0x114>
 8000516:	2b00      	cmp	r3, #0
 8000518:	d013      	beq.n	8000542 <SSD1306_draw_fast_hline_internal+0xc6>
 800051a:	2b01      	cmp	r3, #1
 800051c:	d138      	bne.n	8000590 <SSD1306_draw_fast_hline_internal+0x114>
			{
				case SSD1306_WHITE:
					while (w--)
 800051e:	e007      	b.n	8000530 <SSD1306_draw_fast_hline_internal+0xb4>
					{
						*pBuf++ |= mask;
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	1c5a      	adds	r2, r3, #1
 8000524:	60fa      	str	r2, [r7, #12]
 8000526:	7819      	ldrb	r1, [r3, #0]
 8000528:	7afa      	ldrb	r2, [r7, #11]
 800052a:	430a      	orrs	r2, r1
 800052c:	b2d2      	uxtb	r2, r2
 800052e:	701a      	strb	r2, [r3, #0]
					while (w--)
 8000530:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000534:	b29a      	uxth	r2, r3
 8000536:	3a01      	subs	r2, #1
 8000538:	b292      	uxth	r2, r2
 800053a:	807a      	strh	r2, [r7, #2]
 800053c:	2b00      	cmp	r3, #0
 800053e:	d1ef      	bne.n	8000520 <SSD1306_draw_fast_hline_internal+0xa4>
					};
					break;
 8000540:	e026      	b.n	8000590 <SSD1306_draw_fast_hline_internal+0x114>
				case SSD1306_BLACK:
					mask = ~mask;
 8000542:	7afb      	ldrb	r3, [r7, #11]
 8000544:	43db      	mvns	r3, r3
 8000546:	72fb      	strb	r3, [r7, #11]
					while (w--)
 8000548:	e007      	b.n	800055a <SSD1306_draw_fast_hline_internal+0xde>
					{
						*pBuf++ &= mask;
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	1c5a      	adds	r2, r3, #1
 800054e:	60fa      	str	r2, [r7, #12]
 8000550:	7819      	ldrb	r1, [r3, #0]
 8000552:	7afa      	ldrb	r2, [r7, #11]
 8000554:	400a      	ands	r2, r1
 8000556:	b2d2      	uxtb	r2, r2
 8000558:	701a      	strb	r2, [r3, #0]
					while (w--)
 800055a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800055e:	b29a      	uxth	r2, r3
 8000560:	3a01      	subs	r2, #1
 8000562:	b292      	uxth	r2, r2
 8000564:	807a      	strh	r2, [r7, #2]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d1ef      	bne.n	800054a <SSD1306_draw_fast_hline_internal+0xce>
					};
					break;
 800056a:	e011      	b.n	8000590 <SSD1306_draw_fast_hline_internal+0x114>
				case SSD1306_INVERSE:
					while (w--)
					{
						*pBuf++ ^= mask;
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	1c5a      	adds	r2, r3, #1
 8000570:	60fa      	str	r2, [r7, #12]
 8000572:	7819      	ldrb	r1, [r3, #0]
 8000574:	7afa      	ldrb	r2, [r7, #11]
 8000576:	404a      	eors	r2, r1
 8000578:	b2d2      	uxtb	r2, r2
 800057a:	701a      	strb	r2, [r3, #0]
					while (w--)
 800057c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000580:	b29a      	uxth	r2, r3
 8000582:	3a01      	subs	r2, #1
 8000584:	b292      	uxth	r2, r2
 8000586:	807a      	strh	r2, [r7, #2]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d1ef      	bne.n	800056c <SSD1306_draw_fast_hline_internal+0xf0>
					};
					break;
 800058c:	e000      	b.n	8000590 <SSD1306_draw_fast_hline_internal+0x114>
			}
		}
 800058e:	bf00      	nop
	}
}
 8000590:	bf00      	nop
 8000592:	3710      	adds	r7, #16
 8000594:	46bd      	mov	sp, r7
 8000596:	bc90      	pop	{r4, r7}
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	2000008c 	.word	0x2000008c

080005a0 <SSD1306_draw_fast_vline_internal>:
		SSD1306_draw_fast_vline_internal(x, y, h, color);
	}
}

void SSD1306_draw_fast_vline_internal(int16_t x, int16_t __y, int16_t __h, uint16_t color)
{
 80005a0:	b490      	push	{r4, r7}
 80005a2:	b086      	sub	sp, #24
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4604      	mov	r4, r0
 80005a8:	4608      	mov	r0, r1
 80005aa:	4611      	mov	r1, r2
 80005ac:	461a      	mov	r2, r3
 80005ae:	4623      	mov	r3, r4
 80005b0:	80fb      	strh	r3, [r7, #6]
 80005b2:	4603      	mov	r3, r0
 80005b4:	80bb      	strh	r3, [r7, #4]
 80005b6:	460b      	mov	r3, r1
 80005b8:	807b      	strh	r3, [r7, #2]
 80005ba:	4613      	mov	r3, r2
 80005bc:	803b      	strh	r3, [r7, #0]
	if ((x >= 0) && (x < SSD1306_WIDTH))
 80005be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	f2c0 80da 	blt.w	800077c <SSD1306_draw_fast_vline_internal+0x1dc>
 80005c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005cc:	2b7f      	cmp	r3, #127	; 0x7f
 80005ce:	f300 80d5 	bgt.w	800077c <SSD1306_draw_fast_vline_internal+0x1dc>
	{
		// X coord in bounds?
		if (__y < 0)
 80005d2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	da06      	bge.n	80005e8 <SSD1306_draw_fast_vline_internal+0x48>
		{
			// Clip top
			__h += __y;
 80005da:	887a      	ldrh	r2, [r7, #2]
 80005dc:	88bb      	ldrh	r3, [r7, #4]
 80005de:	4413      	add	r3, r2
 80005e0:	b29b      	uxth	r3, r3
 80005e2:	807b      	strh	r3, [r7, #2]
			__y = 0;
 80005e4:	2300      	movs	r3, #0
 80005e6:	80bb      	strh	r3, [r7, #4]
		}
		if ((__y + __h) > SSD1306_HEIGHT)
 80005e8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80005ec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80005f0:	4413      	add	r3, r2
 80005f2:	2b40      	cmp	r3, #64	; 0x40
 80005f4:	dd04      	ble.n	8000600 <SSD1306_draw_fast_vline_internal+0x60>
		{
			// Clip bottom
			__h = (SSD1306_HEIGHT - __y);
 80005f6:	88bb      	ldrh	r3, [r7, #4]
 80005f8:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80005fc:	b29b      	uxth	r3, r3
 80005fe:	807b      	strh	r3, [r7, #2]
		}
		if (__h > 0)
 8000600:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000604:	2b00      	cmp	r3, #0
 8000606:	f340 80b9 	ble.w	800077c <SSD1306_draw_fast_vline_internal+0x1dc>
		{
			// Proceed only if height is now positive
			// this display doesn't need ints for coordinates,
			// use local byte registers for faster juggling
			uint8_t y = __y, h = __h;
 800060a:	88bb      	ldrh	r3, [r7, #4]
 800060c:	737b      	strb	r3, [r7, #13]
 800060e:	887b      	ldrh	r3, [r7, #2]
 8000610:	75fb      	strb	r3, [r7, #23]
			uint8_t *pBuf = &buffer[(y / 8) * SSD1306_WIDTH + x];
 8000612:	4b5d      	ldr	r3, [pc, #372]	; (8000788 <SSD1306_draw_fast_vline_internal+0x1e8>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	7b7a      	ldrb	r2, [r7, #13]
 8000618:	08d2      	lsrs	r2, r2, #3
 800061a:	b2d2      	uxtb	r2, r2
 800061c:	01d1      	lsls	r1, r2, #7
 800061e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000622:	440a      	add	r2, r1
 8000624:	4413      	add	r3, r2
 8000626:	613b      	str	r3, [r7, #16]

			// do the first partial byte, if necessary - this requires some masking
			uint8_t mod = (y & 7);
 8000628:	7b7b      	ldrb	r3, [r7, #13]
 800062a:	f003 0307 	and.w	r3, r3, #7
 800062e:	73fb      	strb	r3, [r7, #15]
			if (mod)
 8000630:	7bfb      	ldrb	r3, [r7, #15]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d040      	beq.n	80006b8 <SSD1306_draw_fast_vline_internal+0x118>
			{
				// mask off the high n bits we want to set
				mod = 8 - mod;
 8000636:	7bfb      	ldrb	r3, [r7, #15]
 8000638:	f1c3 0308 	rsb	r3, r3, #8
 800063c:	73fb      	strb	r3, [r7, #15]
				// note - lookup table results in a nearly 10% performance
				// improvement in fill* functions
				// uint8_t mask = ~(0xFF >> mod);
				static const uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE};
				uint8_t mask = (*(const unsigned char *)(&premask[mod]));
 800063e:	7bfb      	ldrb	r3, [r7, #15]
 8000640:	4a52      	ldr	r2, [pc, #328]	; (800078c <SSD1306_draw_fast_vline_internal+0x1ec>)
 8000642:	5cd3      	ldrb	r3, [r2, r3]
 8000644:	73bb      	strb	r3, [r7, #14]
				// adjust the mask if we're not going to reach the end of this byte
				if (h < mod)
 8000646:	7dfa      	ldrb	r2, [r7, #23]
 8000648:	7bfb      	ldrb	r3, [r7, #15]
 800064a:	429a      	cmp	r2, r3
 800064c:	d20b      	bcs.n	8000666 <SSD1306_draw_fast_vline_internal+0xc6>
				{
					mask &= (0XFF >> (mod - h));
 800064e:	7bfa      	ldrb	r2, [r7, #15]
 8000650:	7dfb      	ldrb	r3, [r7, #23]
 8000652:	1ad3      	subs	r3, r2, r3
 8000654:	22ff      	movs	r2, #255	; 0xff
 8000656:	fa42 f303 	asr.w	r3, r2, r3
 800065a:	b25a      	sxtb	r2, r3
 800065c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000660:	4013      	ands	r3, r2
 8000662:	b25b      	sxtb	r3, r3
 8000664:	73bb      	strb	r3, [r7, #14]
				}

				switch (color)
 8000666:	883b      	ldrh	r3, [r7, #0]
 8000668:	2b02      	cmp	r3, #2
 800066a:	d01a      	beq.n	80006a2 <SSD1306_draw_fast_vline_internal+0x102>
 800066c:	2b02      	cmp	r3, #2
 800066e:	dc20      	bgt.n	80006b2 <SSD1306_draw_fast_vline_internal+0x112>
 8000670:	2b00      	cmp	r3, #0
 8000672:	d009      	beq.n	8000688 <SSD1306_draw_fast_vline_internal+0xe8>
 8000674:	2b01      	cmp	r3, #1
 8000676:	d11c      	bne.n	80006b2 <SSD1306_draw_fast_vline_internal+0x112>
				{
					case SSD1306_WHITE:
						*pBuf |= mask;
 8000678:	693b      	ldr	r3, [r7, #16]
 800067a:	781a      	ldrb	r2, [r3, #0]
 800067c:	7bbb      	ldrb	r3, [r7, #14]
 800067e:	4313      	orrs	r3, r2
 8000680:	b2da      	uxtb	r2, r3
 8000682:	693b      	ldr	r3, [r7, #16]
 8000684:	701a      	strb	r2, [r3, #0]
						break;
 8000686:	e014      	b.n	80006b2 <SSD1306_draw_fast_vline_internal+0x112>
					case SSD1306_BLACK:
						*pBuf &= ~mask;
 8000688:	693b      	ldr	r3, [r7, #16]
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	b25a      	sxtb	r2, r3
 800068e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000692:	43db      	mvns	r3, r3
 8000694:	b25b      	sxtb	r3, r3
 8000696:	4013      	ands	r3, r2
 8000698:	b25b      	sxtb	r3, r3
 800069a:	b2da      	uxtb	r2, r3
 800069c:	693b      	ldr	r3, [r7, #16]
 800069e:	701a      	strb	r2, [r3, #0]
						break;
 80006a0:	e007      	b.n	80006b2 <SSD1306_draw_fast_vline_internal+0x112>
					case SSD1306_INVERSE:
						*pBuf ^= mask;
 80006a2:	693b      	ldr	r3, [r7, #16]
 80006a4:	781a      	ldrb	r2, [r3, #0]
 80006a6:	7bbb      	ldrb	r3, [r7, #14]
 80006a8:	4053      	eors	r3, r2
 80006aa:	b2da      	uxtb	r2, r3
 80006ac:	693b      	ldr	r3, [r7, #16]
 80006ae:	701a      	strb	r2, [r3, #0]
						break;
 80006b0:	bf00      	nop
				}
				pBuf += SSD1306_WIDTH;
 80006b2:	693b      	ldr	r3, [r7, #16]
 80006b4:	3380      	adds	r3, #128	; 0x80
 80006b6:	613b      	str	r3, [r7, #16]
			}

			if (h >= mod)
 80006b8:	7dfa      	ldrb	r2, [r7, #23]
 80006ba:	7bfb      	ldrb	r3, [r7, #15]
 80006bc:	429a      	cmp	r2, r3
 80006be:	d35d      	bcc.n	800077c <SSD1306_draw_fast_vline_internal+0x1dc>
			{
				// More to go?
				h -= mod;
 80006c0:	7dfa      	ldrb	r2, [r7, #23]
 80006c2:	7bfb      	ldrb	r3, [r7, #15]
 80006c4:	1ad3      	subs	r3, r2, r3
 80006c6:	75fb      	strb	r3, [r7, #23]
				// Write solid bytes while we can - effectively 8 rows at a time
				if (h >= 8)
 80006c8:	7dfb      	ldrb	r3, [r7, #23]
 80006ca:	2b07      	cmp	r3, #7
 80006cc:	d925      	bls.n	800071a <SSD1306_draw_fast_vline_internal+0x17a>
				{
					if (color == SSD1306_INVERSE)
 80006ce:	883b      	ldrh	r3, [r7, #0]
 80006d0:	2b02      	cmp	r3, #2
 80006d2:	d10f      	bne.n	80006f4 <SSD1306_draw_fast_vline_internal+0x154>
					{
						// separate copy of the code so we don't impact performance of
						// black/white write version with an extra comparison per loop
						do
						{
							*pBuf ^= 0xFF; // Invert byte
 80006d4:	693b      	ldr	r3, [r7, #16]
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	43db      	mvns	r3, r3
 80006da:	b2da      	uxtb	r2, r3
 80006dc:	693b      	ldr	r3, [r7, #16]
 80006de:	701a      	strb	r2, [r3, #0]
							pBuf += SSD1306_WIDTH; // Advance pointer 8 rows
 80006e0:	693b      	ldr	r3, [r7, #16]
 80006e2:	3380      	adds	r3, #128	; 0x80
 80006e4:	613b      	str	r3, [r7, #16]
							h -= 8;        // Subtract 8 rows from height
 80006e6:	7dfb      	ldrb	r3, [r7, #23]
 80006e8:	3b08      	subs	r3, #8
 80006ea:	75fb      	strb	r3, [r7, #23]
						} while (h >= 8);
 80006ec:	7dfb      	ldrb	r3, [r7, #23]
 80006ee:	2b07      	cmp	r3, #7
 80006f0:	d8f0      	bhi.n	80006d4 <SSD1306_draw_fast_vline_internal+0x134>
 80006f2:	e012      	b.n	800071a <SSD1306_draw_fast_vline_internal+0x17a>
					}
					else
					{
						// store a local value to work with
						uint8_t val = (color != SSD1306_BLACK) ? 255 : 0;
 80006f4:	883b      	ldrh	r3, [r7, #0]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SSD1306_draw_fast_vline_internal+0x15e>
 80006fa:	23ff      	movs	r3, #255	; 0xff
 80006fc:	e000      	b.n	8000700 <SSD1306_draw_fast_vline_internal+0x160>
 80006fe:	2300      	movs	r3, #0
 8000700:	733b      	strb	r3, [r7, #12]
						do
						{
							*pBuf = val;   // Set byte
 8000702:	693b      	ldr	r3, [r7, #16]
 8000704:	7b3a      	ldrb	r2, [r7, #12]
 8000706:	701a      	strb	r2, [r3, #0]
							pBuf += SSD1306_WIDTH; // Advance pointer 8 rows
 8000708:	693b      	ldr	r3, [r7, #16]
 800070a:	3380      	adds	r3, #128	; 0x80
 800070c:	613b      	str	r3, [r7, #16]
							h -= 8;        // Subtract 8 rows from height
 800070e:	7dfb      	ldrb	r3, [r7, #23]
 8000710:	3b08      	subs	r3, #8
 8000712:	75fb      	strb	r3, [r7, #23]
						} while (h >= 8);
 8000714:	7dfb      	ldrb	r3, [r7, #23]
 8000716:	2b07      	cmp	r3, #7
 8000718:	d8f3      	bhi.n	8000702 <SSD1306_draw_fast_vline_internal+0x162>
					}
				}

				if (h)
 800071a:	7dfb      	ldrb	r3, [r7, #23]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d02d      	beq.n	800077c <SSD1306_draw_fast_vline_internal+0x1dc>
				{
					// Do the final partial byte, if necessary
					mod = h & 7;
 8000720:	7dfb      	ldrb	r3, [r7, #23]
 8000722:	f003 0307 	and.w	r3, r3, #7
 8000726:	73fb      	strb	r3, [r7, #15]
					// uint8_t mask = (1 << mod) - 1;
					// note - lookup table results in a nearly 10% performance
					// improvement in fill* functions
					static const uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07,
                                                      0x0F, 0x1F, 0x3F, 0x7F};
					uint8_t mask = (*(const unsigned char *)(&postmask[mod]));
 8000728:	7bfb      	ldrb	r3, [r7, #15]
 800072a:	4a19      	ldr	r2, [pc, #100]	; (8000790 <SSD1306_draw_fast_vline_internal+0x1f0>)
 800072c:	5cd3      	ldrb	r3, [r2, r3]
 800072e:	72fb      	strb	r3, [r7, #11]
					switch (color)
 8000730:	883b      	ldrh	r3, [r7, #0]
 8000732:	2b02      	cmp	r3, #2
 8000734:	d01a      	beq.n	800076c <SSD1306_draw_fast_vline_internal+0x1cc>
 8000736:	2b02      	cmp	r3, #2
 8000738:	dc21      	bgt.n	800077e <SSD1306_draw_fast_vline_internal+0x1de>
 800073a:	2b00      	cmp	r3, #0
 800073c:	d009      	beq.n	8000752 <SSD1306_draw_fast_vline_internal+0x1b2>
 800073e:	2b01      	cmp	r3, #1
 8000740:	d11d      	bne.n	800077e <SSD1306_draw_fast_vline_internal+0x1de>
					{
						case SSD1306_WHITE:
							*pBuf |= mask;
 8000742:	693b      	ldr	r3, [r7, #16]
 8000744:	781a      	ldrb	r2, [r3, #0]
 8000746:	7afb      	ldrb	r3, [r7, #11]
 8000748:	4313      	orrs	r3, r2
 800074a:	b2da      	uxtb	r2, r3
 800074c:	693b      	ldr	r3, [r7, #16]
 800074e:	701a      	strb	r2, [r3, #0]
							break;
 8000750:	e015      	b.n	800077e <SSD1306_draw_fast_vline_internal+0x1de>
						case SSD1306_BLACK:
							*pBuf &= ~mask;
 8000752:	693b      	ldr	r3, [r7, #16]
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	b25a      	sxtb	r2, r3
 8000758:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800075c:	43db      	mvns	r3, r3
 800075e:	b25b      	sxtb	r3, r3
 8000760:	4013      	ands	r3, r2
 8000762:	b25b      	sxtb	r3, r3
 8000764:	b2da      	uxtb	r2, r3
 8000766:	693b      	ldr	r3, [r7, #16]
 8000768:	701a      	strb	r2, [r3, #0]
							break;
 800076a:	e008      	b.n	800077e <SSD1306_draw_fast_vline_internal+0x1de>
						case SSD1306_INVERSE:
							*pBuf ^= mask;
 800076c:	693b      	ldr	r3, [r7, #16]
 800076e:	781a      	ldrb	r2, [r3, #0]
 8000770:	7afb      	ldrb	r3, [r7, #11]
 8000772:	4053      	eors	r3, r2
 8000774:	b2da      	uxtb	r2, r3
 8000776:	693b      	ldr	r3, [r7, #16]
 8000778:	701a      	strb	r2, [r3, #0]
							break;
 800077a:	e000      	b.n	800077e <SSD1306_draw_fast_vline_internal+0x1de>
					}
				}
 800077c:	bf00      	nop
			}
		} // endif positive height
	}   // endif x in bounds
}
 800077e:	bf00      	nop
 8000780:	3718      	adds	r7, #24
 8000782:	46bd      	mov	sp, r7
 8000784:	bc90      	pop	{r4, r7}
 8000786:	4770      	bx	lr
 8000788:	2000008c 	.word	0x2000008c
 800078c:	08007654 	.word	0x08007654
 8000790:	0800765c 	.word	0x0800765c

08000794 <SSD1306_display_repaint>:
    @note   Drawing operations are not visible until this function is
            called. Call after each graphics command, or after a whole set
            of graphics commands, as best needed by one's own application.
*/
void SSD1306_display_repaint(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
	uint16_t buf_len = SSD1306_WIDTH * ((SSD1306_HEIGHT + 7) / 8);
 800079a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800079e:	80fb      	strh	r3, [r7, #6]

	SSD1306_send_com(SSD1306_PAGEADDR);
 80007a0:	2022      	movs	r0, #34	; 0x22
 80007a2:	f7ff fd47 	bl	8000234 <SSD1306_send_com>
	SSD1306_send_com(0x00);
 80007a6:	2000      	movs	r0, #0
 80007a8:	f7ff fd44 	bl	8000234 <SSD1306_send_com>
	SSD1306_send_com(0xFF);
 80007ac:	20ff      	movs	r0, #255	; 0xff
 80007ae:	f7ff fd41 	bl	8000234 <SSD1306_send_com>
	SSD1306_send_com(SSD1306_COLUMNADDR);
 80007b2:	2021      	movs	r0, #33	; 0x21
 80007b4:	f7ff fd3e 	bl	8000234 <SSD1306_send_com>
	SSD1306_send_com(0x00);
 80007b8:	2000      	movs	r0, #0
 80007ba:	f7ff fd3b 	bl	8000234 <SSD1306_send_com>

	SSD1306_send_com(SSD1306_WIDTH - 1); // Column end address
 80007be:	207f      	movs	r0, #127	; 0x7f
 80007c0:	f7ff fd38 	bl	8000234 <SSD1306_send_com>

	platform_write_dma(SSD1306_SETSTARTLINE, buffer, buf_len);
 80007c4:	4b05      	ldr	r3, [pc, #20]	; (80007dc <SSD1306_display_repaint+0x48>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	88fa      	ldrh	r2, [r7, #6]
 80007ca:	4619      	mov	r1, r3
 80007cc:	2040      	movs	r0, #64	; 0x40
 80007ce:	f7ff fd17 	bl	8000200 <platform_write_dma>
}
 80007d2:	bf00      	nop
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	2000008c 	.word	0x2000008c

080007e0 <SSD1306_set_rotation>:
    SSD1306_send_com(SSD1306_SETCONTRAST);
    SSD1306_send_com(contrast);
}

void SSD1306_set_rotation(uint8_t rot)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	71fb      	strb	r3, [r7, #7]
	rotation = rot;
 80007ea:	4a04      	ldr	r2, [pc, #16]	; (80007fc <SSD1306_set_rotation+0x1c>)
 80007ec:	79fb      	ldrb	r3, [r7, #7]
 80007ee:	7013      	strb	r3, [r2, #0]
}
 80007f0:	bf00      	nop
 80007f2:	370c      	adds	r7, #12
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr
 80007fc:	20000090 	.word	0x20000090

08000800 <SSD1306_get_rotation>:

uint8_t SSD1306_get_rotation(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
	return rotation;
 8000804:	4b03      	ldr	r3, [pc, #12]	; (8000814 <SSD1306_get_rotation+0x14>)
 8000806:	781b      	ldrb	r3, [r3, #0]
}
 8000808:	4618      	mov	r0, r3
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	20000090 	.word	0x20000090

08000818 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08a      	sub	sp, #40	; 0x28
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800081e:	f107 031c 	add.w	r3, r7, #28
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
 8000836:	611a      	str	r2, [r3, #16]
 8000838:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800083a:	4b2e      	ldr	r3, [pc, #184]	; (80008f4 <MX_ADC1_Init+0xdc>)
 800083c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000840:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000842:	4b2c      	ldr	r3, [pc, #176]	; (80008f4 <MX_ADC1_Init+0xdc>)
 8000844:	2200      	movs	r2, #0
 8000846:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000848:	4b2a      	ldr	r3, [pc, #168]	; (80008f4 <MX_ADC1_Init+0xdc>)
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800084e:	4b29      	ldr	r3, [pc, #164]	; (80008f4 <MX_ADC1_Init+0xdc>)
 8000850:	2200      	movs	r2, #0
 8000852:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000854:	4b27      	ldr	r3, [pc, #156]	; (80008f4 <MX_ADC1_Init+0xdc>)
 8000856:	2200      	movs	r2, #0
 8000858:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800085a:	4b26      	ldr	r3, [pc, #152]	; (80008f4 <MX_ADC1_Init+0xdc>)
 800085c:	2200      	movs	r2, #0
 800085e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000862:	4b24      	ldr	r3, [pc, #144]	; (80008f4 <MX_ADC1_Init+0xdc>)
 8000864:	2200      	movs	r2, #0
 8000866:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000868:	4b22      	ldr	r3, [pc, #136]	; (80008f4 <MX_ADC1_Init+0xdc>)
 800086a:	2201      	movs	r2, #1
 800086c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800086e:	4b21      	ldr	r3, [pc, #132]	; (80008f4 <MX_ADC1_Init+0xdc>)
 8000870:	2200      	movs	r2, #0
 8000872:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000874:	4b1f      	ldr	r3, [pc, #124]	; (80008f4 <MX_ADC1_Init+0xdc>)
 8000876:	2201      	movs	r2, #1
 8000878:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800087a:	4b1e      	ldr	r3, [pc, #120]	; (80008f4 <MX_ADC1_Init+0xdc>)
 800087c:	2200      	movs	r2, #0
 800087e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000882:	4b1c      	ldr	r3, [pc, #112]	; (80008f4 <MX_ADC1_Init+0xdc>)
 8000884:	2204      	movs	r2, #4
 8000886:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000888:	4b1a      	ldr	r3, [pc, #104]	; (80008f4 <MX_ADC1_Init+0xdc>)
 800088a:	2200      	movs	r2, #0
 800088c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800088e:	4b19      	ldr	r3, [pc, #100]	; (80008f4 <MX_ADC1_Init+0xdc>)
 8000890:	2200      	movs	r2, #0
 8000892:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000894:	4817      	ldr	r0, [pc, #92]	; (80008f4 <MX_ADC1_Init+0xdc>)
 8000896:	f000 ff69 	bl	800176c <HAL_ADC_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80008a0:	f000 fb0b 	bl	8000eba <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80008a8:	f107 031c 	add.w	r3, r7, #28
 80008ac:	4619      	mov	r1, r3
 80008ae:	4811      	ldr	r0, [pc, #68]	; (80008f4 <MX_ADC1_Init+0xdc>)
 80008b0:	f001 fbb0 	bl	8002014 <HAL_ADCEx_MultiModeConfigChannel>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80008ba:	f000 fafe 	bl	8000eba <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80008be:	2301      	movs	r3, #1
 80008c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008c2:	2301      	movs	r3, #1
 80008c4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008c6:	2300      	movs	r3, #0
 80008c8:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80008ca:	2300      	movs	r3, #0
 80008cc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ce:	2300      	movs	r3, #0
 80008d0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	4619      	mov	r1, r3
 80008da:	4806      	ldr	r0, [pc, #24]	; (80008f4 <MX_ADC1_Init+0xdc>)
 80008dc:	f001 f8d8 	bl	8001a90 <HAL_ADC_ConfigChannel>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80008e6:	f000 fae8 	bl	8000eba <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008ea:	bf00      	nop
 80008ec:	3728      	adds	r7, #40	; 0x28
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	200000a0 	.word	0x200000a0

080008f8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b08a      	sub	sp, #40	; 0x28
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000918:	d14c      	bne.n	80009b4 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800091a:	4b28      	ldr	r3, [pc, #160]	; (80009bc <HAL_ADC_MspInit+0xc4>)
 800091c:	695b      	ldr	r3, [r3, #20]
 800091e:	4a27      	ldr	r2, [pc, #156]	; (80009bc <HAL_ADC_MspInit+0xc4>)
 8000920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000924:	6153      	str	r3, [r2, #20]
 8000926:	4b25      	ldr	r3, [pc, #148]	; (80009bc <HAL_ADC_MspInit+0xc4>)
 8000928:	695b      	ldr	r3, [r3, #20]
 800092a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800092e:	613b      	str	r3, [r7, #16]
 8000930:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000932:	4b22      	ldr	r3, [pc, #136]	; (80009bc <HAL_ADC_MspInit+0xc4>)
 8000934:	695b      	ldr	r3, [r3, #20]
 8000936:	4a21      	ldr	r2, [pc, #132]	; (80009bc <HAL_ADC_MspInit+0xc4>)
 8000938:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800093c:	6153      	str	r3, [r2, #20]
 800093e:	4b1f      	ldr	r3, [pc, #124]	; (80009bc <HAL_ADC_MspInit+0xc4>)
 8000940:	695b      	ldr	r3, [r3, #20]
 8000942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800094a:	2303      	movs	r3, #3
 800094c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800094e:	2303      	movs	r3, #3
 8000950:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000956:	f107 0314 	add.w	r3, r7, #20
 800095a:	4619      	mov	r1, r3
 800095c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000960:	f002 f874 	bl	8002a4c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000964:	4b16      	ldr	r3, [pc, #88]	; (80009c0 <HAL_ADC_MspInit+0xc8>)
 8000966:	4a17      	ldr	r2, [pc, #92]	; (80009c4 <HAL_ADC_MspInit+0xcc>)
 8000968:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800096a:	4b15      	ldr	r3, [pc, #84]	; (80009c0 <HAL_ADC_MspInit+0xc8>)
 800096c:	2200      	movs	r2, #0
 800096e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000970:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <HAL_ADC_MspInit+0xc8>)
 8000972:	2200      	movs	r2, #0
 8000974:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000976:	4b12      	ldr	r3, [pc, #72]	; (80009c0 <HAL_ADC_MspInit+0xc8>)
 8000978:	2280      	movs	r2, #128	; 0x80
 800097a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800097c:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <HAL_ADC_MspInit+0xc8>)
 800097e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000982:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000984:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <HAL_ADC_MspInit+0xc8>)
 8000986:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800098a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800098c:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <HAL_ADC_MspInit+0xc8>)
 800098e:	2200      	movs	r2, #0
 8000990:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000992:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <HAL_ADC_MspInit+0xc8>)
 8000994:	2200      	movs	r2, #0
 8000996:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000998:	4809      	ldr	r0, [pc, #36]	; (80009c0 <HAL_ADC_MspInit+0xc8>)
 800099a:	f001 fe74 	bl	8002686 <HAL_DMA_Init>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 80009a4:	f000 fa89 	bl	8000eba <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	4a05      	ldr	r2, [pc, #20]	; (80009c0 <HAL_ADC_MspInit+0xc8>)
 80009ac:	639a      	str	r2, [r3, #56]	; 0x38
 80009ae:	4a04      	ldr	r2, [pc, #16]	; (80009c0 <HAL_ADC_MspInit+0xc8>)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80009b4:	bf00      	nop
 80009b6:	3728      	adds	r7, #40	; 0x28
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	40021000 	.word	0x40021000
 80009c0:	200000f0 	.word	0x200000f0
 80009c4:	40020008 	.word	0x40020008

080009c8 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80009cc:	4b16      	ldr	r3, [pc, #88]	; (8000a28 <MX_CAN_Init+0x60>)
 80009ce:	4a17      	ldr	r2, [pc, #92]	; (8000a2c <MX_CAN_Init+0x64>)
 80009d0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80009d2:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <MX_CAN_Init+0x60>)
 80009d4:	2210      	movs	r2, #16
 80009d6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80009d8:	4b13      	ldr	r3, [pc, #76]	; (8000a28 <MX_CAN_Init+0x60>)
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80009de:	4b12      	ldr	r3, [pc, #72]	; (8000a28 <MX_CAN_Init+0x60>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80009e4:	4b10      	ldr	r3, [pc, #64]	; (8000a28 <MX_CAN_Init+0x60>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80009ea:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <MX_CAN_Init+0x60>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80009f0:	4b0d      	ldr	r3, [pc, #52]	; (8000a28 <MX_CAN_Init+0x60>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80009f6:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <MX_CAN_Init+0x60>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80009fc:	4b0a      	ldr	r3, [pc, #40]	; (8000a28 <MX_CAN_Init+0x60>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000a02:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <MX_CAN_Init+0x60>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000a08:	4b07      	ldr	r3, [pc, #28]	; (8000a28 <MX_CAN_Init+0x60>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000a0e:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <MX_CAN_Init+0x60>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000a14:	4804      	ldr	r0, [pc, #16]	; (8000a28 <MX_CAN_Init+0x60>)
 8000a16:	f001 fc29 	bl	800226c <HAL_CAN_Init>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8000a20:	f000 fa4b 	bl	8000eba <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20000134 	.word	0x20000134
 8000a2c:	40006400 	.word	0x40006400

08000a30 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08a      	sub	sp, #40	; 0x28
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a18      	ldr	r2, [pc, #96]	; (8000ab0 <HAL_CAN_MspInit+0x80>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d129      	bne.n	8000aa6 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000a52:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <HAL_CAN_MspInit+0x84>)
 8000a54:	69db      	ldr	r3, [r3, #28]
 8000a56:	4a17      	ldr	r2, [pc, #92]	; (8000ab4 <HAL_CAN_MspInit+0x84>)
 8000a58:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a5c:	61d3      	str	r3, [r2, #28]
 8000a5e:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <HAL_CAN_MspInit+0x84>)
 8000a60:	69db      	ldr	r3, [r3, #28]
 8000a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a66:	613b      	str	r3, [r7, #16]
 8000a68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6a:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <HAL_CAN_MspInit+0x84>)
 8000a6c:	695b      	ldr	r3, [r3, #20]
 8000a6e:	4a11      	ldr	r2, [pc, #68]	; (8000ab4 <HAL_CAN_MspInit+0x84>)
 8000a70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a74:	6153      	str	r3, [r2, #20]
 8000a76:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <HAL_CAN_MspInit+0x84>)
 8000a78:	695b      	ldr	r3, [r3, #20]
 8000a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000a82:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a90:	2303      	movs	r3, #3
 8000a92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000a94:	2309      	movs	r3, #9
 8000a96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa2:	f001 ffd3 	bl	8002a4c <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 8000aa6:	bf00      	nop
 8000aa8:	3728      	adds	r7, #40	; 0x28
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40006400 	.word	0x40006400
 8000ab4:	40021000 	.word	0x40021000

08000ab8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000abe:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <MX_DMA_Init+0x48>)
 8000ac0:	695b      	ldr	r3, [r3, #20]
 8000ac2:	4a0f      	ldr	r2, [pc, #60]	; (8000b00 <MX_DMA_Init+0x48>)
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	6153      	str	r3, [r2, #20]
 8000aca:	4b0d      	ldr	r3, [pc, #52]	; (8000b00 <MX_DMA_Init+0x48>)
 8000acc:	695b      	ldr	r3, [r3, #20]
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2100      	movs	r1, #0
 8000ada:	200b      	movs	r0, #11
 8000adc:	f001 fd9d 	bl	800261a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ae0:	200b      	movs	r0, #11
 8000ae2:	f001 fdb6 	bl	8002652 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2100      	movs	r1, #0
 8000aea:	200c      	movs	r0, #12
 8000aec:	f001 fd95 	bl	800261a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000af0:	200c      	movs	r0, #12
 8000af2:	f001 fdae 	bl	8002652 <HAL_NVIC_EnableIRQ>

}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40021000 	.word	0x40021000

08000b04 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b088      	sub	sp, #32
 8000b08:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0a:	f107 030c 	add.w	r3, r7, #12
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]
 8000b18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b1a:	4b35      	ldr	r3, [pc, #212]	; (8000bf0 <MX_GPIO_Init+0xec>)
 8000b1c:	695b      	ldr	r3, [r3, #20]
 8000b1e:	4a34      	ldr	r2, [pc, #208]	; (8000bf0 <MX_GPIO_Init+0xec>)
 8000b20:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b24:	6153      	str	r3, [r2, #20]
 8000b26:	4b32      	ldr	r3, [pc, #200]	; (8000bf0 <MX_GPIO_Init+0xec>)
 8000b28:	695b      	ldr	r3, [r3, #20]
 8000b2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b2e:	60bb      	str	r3, [r7, #8]
 8000b30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b32:	4b2f      	ldr	r3, [pc, #188]	; (8000bf0 <MX_GPIO_Init+0xec>)
 8000b34:	695b      	ldr	r3, [r3, #20]
 8000b36:	4a2e      	ldr	r2, [pc, #184]	; (8000bf0 <MX_GPIO_Init+0xec>)
 8000b38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b3c:	6153      	str	r3, [r2, #20]
 8000b3e:	4b2c      	ldr	r3, [pc, #176]	; (8000bf0 <MX_GPIO_Init+0xec>)
 8000b40:	695b      	ldr	r3, [r3, #20]
 8000b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4a:	4b29      	ldr	r3, [pc, #164]	; (8000bf0 <MX_GPIO_Init+0xec>)
 8000b4c:	695b      	ldr	r3, [r3, #20]
 8000b4e:	4a28      	ldr	r2, [pc, #160]	; (8000bf0 <MX_GPIO_Init+0xec>)
 8000b50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b54:	6153      	str	r3, [r2, #20]
 8000b56:	4b26      	ldr	r3, [pc, #152]	; (8000bf0 <MX_GPIO_Init+0xec>)
 8000b58:	695b      	ldr	r3, [r3, #20]
 8000b5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b5e:	603b      	str	r3, [r7, #0]
 8000b60:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M2_INB_Pin|M1_INB_Pin|M1_INA_Pin|M1_ENA_Pin, GPIO_PIN_RESET);
 8000b62:	2200      	movs	r2, #0
 8000b64:	f44f 61e2 	mov.w	r1, #1808	; 0x710
 8000b68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b6c:	f002 f8e0 	bl	8002d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M2_ENA_Pin|M2_INA_Pin, GPIO_PIN_RESET);
 8000b70:	2200      	movs	r2, #0
 8000b72:	2103      	movs	r1, #3
 8000b74:	481f      	ldr	r0, [pc, #124]	; (8000bf4 <MX_GPIO_Init+0xf0>)
 8000b76:	f002 f8db 	bl	8002d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HX_DOUT_Pin;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HX_DOUT_GPIO_Port, &GPIO_InitStruct);
 8000b86:	f107 030c 	add.w	r3, r7, #12
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	481a      	ldr	r0, [pc, #104]	; (8000bf8 <MX_GPIO_Init+0xf4>)
 8000b8e:	f001 ff5d 	bl	8002a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = M2_INB_Pin|M1_INB_Pin|M1_INA_Pin|M1_ENA_Pin;
 8000b92:	f44f 63e2 	mov.w	r3, #1808	; 0x710
 8000b96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba4:	f107 030c 	add.w	r3, r7, #12
 8000ba8:	4619      	mov	r1, r3
 8000baa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bae:	f001 ff4d 	bl	8002a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_SW_Pin;
 8000bb2:	2320      	movs	r3, #32
 8000bb4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ENC_SW_GPIO_Port, &GPIO_InitStruct);
 8000bbe:	f107 030c 	add.w	r3, r7, #12
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bc8:	f001 ff40 	bl	8002a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = M2_ENA_Pin|M2_INA_Pin;
 8000bcc:	2303      	movs	r3, #3
 8000bce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bdc:	f107 030c 	add.w	r3, r7, #12
 8000be0:	4619      	mov	r1, r3
 8000be2:	4804      	ldr	r0, [pc, #16]	; (8000bf4 <MX_GPIO_Init+0xf0>)
 8000be4:	f001 ff32 	bl	8002a4c <HAL_GPIO_Init>

}
 8000be8:	bf00      	nop
 8000bea:	3720      	adds	r7, #32
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40021000 	.word	0x40021000
 8000bf4:	48000400 	.word	0x48000400
 8000bf8:	48001400 	.word	0x48001400

08000bfc <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c00:	4b1b      	ldr	r3, [pc, #108]	; (8000c70 <MX_I2C1_Init+0x74>)
 8000c02:	4a1c      	ldr	r2, [pc, #112]	; (8000c74 <MX_I2C1_Init+0x78>)
 8000c04:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8000c06:	4b1a      	ldr	r3, [pc, #104]	; (8000c70 <MX_I2C1_Init+0x74>)
 8000c08:	f240 220b 	movw	r2, #523	; 0x20b
 8000c0c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c0e:	4b18      	ldr	r3, [pc, #96]	; (8000c70 <MX_I2C1_Init+0x74>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c14:	4b16      	ldr	r3, [pc, #88]	; (8000c70 <MX_I2C1_Init+0x74>)
 8000c16:	2201      	movs	r2, #1
 8000c18:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c1a:	4b15      	ldr	r3, [pc, #84]	; (8000c70 <MX_I2C1_Init+0x74>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c20:	4b13      	ldr	r3, [pc, #76]	; (8000c70 <MX_I2C1_Init+0x74>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c26:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <MX_I2C1_Init+0x74>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c2c:	4b10      	ldr	r3, [pc, #64]	; (8000c70 <MX_I2C1_Init+0x74>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c32:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <MX_I2C1_Init+0x74>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c38:	480d      	ldr	r0, [pc, #52]	; (8000c70 <MX_I2C1_Init+0x74>)
 8000c3a:	f002 f891 	bl	8002d60 <HAL_I2C_Init>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c44:	f000 f939 	bl	8000eba <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4809      	ldr	r0, [pc, #36]	; (8000c70 <MX_I2C1_Init+0x74>)
 8000c4c:	f003 fe38 	bl	80048c0 <HAL_I2CEx_ConfigAnalogFilter>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000c56:	f000 f930 	bl	8000eba <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	4804      	ldr	r0, [pc, #16]	; (8000c70 <MX_I2C1_Init+0x74>)
 8000c5e:	f003 fe7a 	bl	8004956 <HAL_I2CEx_ConfigDigitalFilter>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000c68:	f000 f927 	bl	8000eba <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c6c:	bf00      	nop
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	200001a0 	.word	0x200001a0
 8000c74:	40005400 	.word	0x40005400

08000c78 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08a      	sub	sp, #40	; 0x28
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c80:	f107 0314 	add.w	r3, r7, #20
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a35      	ldr	r2, [pc, #212]	; (8000d6c <HAL_I2C_MspInit+0xf4>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d164      	bne.n	8000d64 <HAL_I2C_MspInit+0xec>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9a:	4b35      	ldr	r3, [pc, #212]	; (8000d70 <HAL_I2C_MspInit+0xf8>)
 8000c9c:	695b      	ldr	r3, [r3, #20]
 8000c9e:	4a34      	ldr	r2, [pc, #208]	; (8000d70 <HAL_I2C_MspInit+0xf8>)
 8000ca0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ca4:	6153      	str	r3, [r2, #20]
 8000ca6:	4b32      	ldr	r3, [pc, #200]	; (8000d70 <HAL_I2C_MspInit+0xf8>)
 8000ca8:	695b      	ldr	r3, [r3, #20]
 8000caa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cae:	613b      	str	r3, [r7, #16]
 8000cb0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 8000cb2:	23c0      	movs	r3, #192	; 0xc0
 8000cb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cb6:	2312      	movs	r3, #18
 8000cb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cc2:	2304      	movs	r3, #4
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc6:	f107 0314 	add.w	r3, r7, #20
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4829      	ldr	r0, [pc, #164]	; (8000d74 <HAL_I2C_MspInit+0xfc>)
 8000cce:	f001 febd 	bl	8002a4c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cd2:	4b27      	ldr	r3, [pc, #156]	; (8000d70 <HAL_I2C_MspInit+0xf8>)
 8000cd4:	69db      	ldr	r3, [r3, #28]
 8000cd6:	4a26      	ldr	r2, [pc, #152]	; (8000d70 <HAL_I2C_MspInit+0xf8>)
 8000cd8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cdc:	61d3      	str	r3, [r2, #28]
 8000cde:	4b24      	ldr	r3, [pc, #144]	; (8000d70 <HAL_I2C_MspInit+0xf8>)
 8000ce0:	69db      	ldr	r3, [r3, #28]
 8000ce2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8000cea:	4b23      	ldr	r3, [pc, #140]	; (8000d78 <HAL_I2C_MspInit+0x100>)
 8000cec:	4a23      	ldr	r2, [pc, #140]	; (8000d7c <HAL_I2C_MspInit+0x104>)
 8000cee:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000cf0:	4b21      	ldr	r3, [pc, #132]	; (8000d78 <HAL_I2C_MspInit+0x100>)
 8000cf2:	2210      	movs	r2, #16
 8000cf4:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cf6:	4b20      	ldr	r3, [pc, #128]	; (8000d78 <HAL_I2C_MspInit+0x100>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000cfc:	4b1e      	ldr	r3, [pc, #120]	; (8000d78 <HAL_I2C_MspInit+0x100>)
 8000cfe:	2280      	movs	r2, #128	; 0x80
 8000d00:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d02:	4b1d      	ldr	r3, [pc, #116]	; (8000d78 <HAL_I2C_MspInit+0x100>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d08:	4b1b      	ldr	r3, [pc, #108]	; (8000d78 <HAL_I2C_MspInit+0x100>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000d0e:	4b1a      	ldr	r3, [pc, #104]	; (8000d78 <HAL_I2C_MspInit+0x100>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000d14:	4b18      	ldr	r3, [pc, #96]	; (8000d78 <HAL_I2C_MspInit+0x100>)
 8000d16:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d1a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000d1c:	4816      	ldr	r0, [pc, #88]	; (8000d78 <HAL_I2C_MspInit+0x100>)
 8000d1e:	f001 fcb2 	bl	8002686 <HAL_DMA_Init>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <HAL_I2C_MspInit+0xb4>
    {
      Error_Handler();
 8000d28:	f000 f8c7 	bl	8000eba <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_I2C1_TX_DMA1_CH2);
 8000d2c:	4b14      	ldr	r3, [pc, #80]	; (8000d80 <HAL_I2C_MspInit+0x108>)
 8000d2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000d30:	4a13      	ldr	r2, [pc, #76]	; (8000d80 <HAL_I2C_MspInit+0x108>)
 8000d32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d36:	6513      	str	r3, [r2, #80]	; 0x50

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	4a0f      	ldr	r2, [pc, #60]	; (8000d78 <HAL_I2C_MspInit+0x100>)
 8000d3c:	639a      	str	r2, [r3, #56]	; 0x38
 8000d3e:	4a0e      	ldr	r2, [pc, #56]	; (8000d78 <HAL_I2C_MspInit+0x100>)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000d44:	2200      	movs	r2, #0
 8000d46:	2100      	movs	r1, #0
 8000d48:	201f      	movs	r0, #31
 8000d4a:	f001 fc66 	bl	800261a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000d4e:	201f      	movs	r0, #31
 8000d50:	f001 fc7f 	bl	8002652 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000d54:	2200      	movs	r2, #0
 8000d56:	2100      	movs	r1, #0
 8000d58:	2020      	movs	r0, #32
 8000d5a:	f001 fc5e 	bl	800261a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000d5e:	2020      	movs	r0, #32
 8000d60:	f001 fc77 	bl	8002652 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000d64:	bf00      	nop
 8000d66:	3728      	adds	r7, #40	; 0x28
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40005400 	.word	0x40005400
 8000d70:	40021000 	.word	0x40021000
 8000d74:	48000400 	.word	0x48000400
 8000d78:	2000015c 	.word	0x2000015c
 8000d7c:	4002001c 	.word	0x4002001c
 8000d80:	40010000 	.word	0x40010000

08000d84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d8a:	f000 fc65 	bl	8001658 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d8e:	f000 f837 	bl	8000e00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d92:	f7ff feb7 	bl	8000b04 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d96:	f7ff fe8f 	bl	8000ab8 <MX_DMA_Init>
  MX_I2C1_Init();
 8000d9a:	f7ff ff2f 	bl	8000bfc <MX_I2C1_Init>
  MX_TIM2_Init();
 8000d9e:	f000 f9ed 	bl	800117c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000da2:	f000 fa45 	bl	8001230 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000da6:	f7ff fd37 	bl	8000818 <MX_ADC1_Init>
  MX_CAN_Init();
 8000daa:	f7ff fe0d 	bl	80009c8 <MX_CAN_Init>
  MX_TIM1_Init();
 8000dae:	f000 f955 	bl	800105c <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000db2:	f000 fbb3 	bl	800151c <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8000db6:	f000 fa91 	bl	80012dc <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(100);
 8000dba:	2064      	movs	r0, #100	; 0x64
 8000dbc:	f000 fcb2 	bl	8001724 <HAL_Delay>
  SSD1306_init();
 8000dc0:	f7ff fa48 	bl	8000254 <SSD1306_init>
  int d=0;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	607b      	str	r3, [r7, #4]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(1000);
 8000dc8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dcc:	f000 fcaa 	bl	8001724 <HAL_Delay>
	  SSD1306_display_clear();
 8000dd0:	f7ff face 	bl	8000370 <SSD1306_display_clear>


	  SSD1306_draw_fast_hline(1, 1, d, SSD1306_INVERSE);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	b21a      	sxth	r2, r3
 8000dd8:	2302      	movs	r3, #2
 8000dda:	2101      	movs	r1, #1
 8000ddc:	2001      	movs	r0, #1
 8000dde:	f7ff fad5 	bl	800038c <SSD1306_draw_fast_hline>
	  HAL_Delay(500);
 8000de2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000de6:	f000 fc9d 	bl	8001724 <HAL_Delay>
	  d++;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	3301      	adds	r3, #1
 8000dee:	607b      	str	r3, [r7, #4]
	  if (d>(8)) d=0;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2b08      	cmp	r3, #8
 8000df4:	dd01      	ble.n	8000dfa <main+0x76>
 8000df6:	2300      	movs	r3, #0
 8000df8:	607b      	str	r3, [r7, #4]


	  SSD1306_display_repaint();
 8000dfa:	f7ff fccb 	bl	8000794 <SSD1306_display_repaint>
	  HAL_Delay(1000);
 8000dfe:	e7e3      	b.n	8000dc8 <main+0x44>

08000e00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b096      	sub	sp, #88	; 0x58
 8000e04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e06:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e0a:	2228      	movs	r2, #40	; 0x28
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f006 fb94 	bl	800753c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e14:	f107 031c 	add.w	r3, r7, #28
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e24:	1d3b      	adds	r3, r7, #4
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]
 8000e2c:	609a      	str	r2, [r3, #8]
 8000e2e:	60da      	str	r2, [r3, #12]
 8000e30:	611a      	str	r2, [r3, #16]
 8000e32:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e34:	2302      	movs	r3, #2
 8000e36:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e3c:	2310      	movs	r3, #16
 8000e3e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e40:	2302      	movs	r3, #2
 8000e42:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e44:	2300      	movs	r3, #0
 8000e46:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000e48:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000e4c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e4e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e52:	4618      	mov	r0, r3
 8000e54:	f003 fdcc 	bl	80049f0 <HAL_RCC_OscConfig>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000e5e:	f000 f82c 	bl	8000eba <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e62:	230f      	movs	r3, #15
 8000e64:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e66:	2300      	movs	r3, #0
 8000e68:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e72:	2300      	movs	r3, #0
 8000e74:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e76:	f107 031c 	add.w	r3, r7, #28
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f004 fcbf 	bl	8005800 <HAL_RCC_ClockConfig>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000e88:	f000 f817 	bl	8000eba <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1
 8000e8c:	f44f 5385 	mov.w	r3, #4256	; 0x10a0
 8000e90:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000e92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e96:	617b      	str	r3, [r7, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ea0:	1d3b      	adds	r3, r7, #4
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f004 fee2 	bl	8005c6c <HAL_RCCEx_PeriphCLKConfig>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000eae:	f000 f804 	bl	8000eba <Error_Handler>
  }
}
 8000eb2:	bf00      	nop
 8000eb4:	3758      	adds	r7, #88	; 0x58
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ebe:	b672      	cpsid	i
}
 8000ec0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ec2:	e7fe      	b.n	8000ec2 <Error_Handler+0x8>

08000ec4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eca:	4b0f      	ldr	r3, [pc, #60]	; (8000f08 <HAL_MspInit+0x44>)
 8000ecc:	699b      	ldr	r3, [r3, #24]
 8000ece:	4a0e      	ldr	r2, [pc, #56]	; (8000f08 <HAL_MspInit+0x44>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	6193      	str	r3, [r2, #24]
 8000ed6:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <HAL_MspInit+0x44>)
 8000ed8:	699b      	ldr	r3, [r3, #24]
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	607b      	str	r3, [r7, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee2:	4b09      	ldr	r3, [pc, #36]	; (8000f08 <HAL_MspInit+0x44>)
 8000ee4:	69db      	ldr	r3, [r3, #28]
 8000ee6:	4a08      	ldr	r2, [pc, #32]	; (8000f08 <HAL_MspInit+0x44>)
 8000ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eec:	61d3      	str	r3, [r2, #28]
 8000eee:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <HAL_MspInit+0x44>)
 8000ef0:	69db      	ldr	r3, [r3, #28]
 8000ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef6:	603b      	str	r3, [r7, #0]
 8000ef8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000efa:	bf00      	nop
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	40021000 	.word	0x40021000

08000f0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f10:	e7fe      	b.n	8000f10 <NMI_Handler+0x4>

08000f12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f16:	e7fe      	b.n	8000f16 <HardFault_Handler+0x4>

08000f18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <MemManage_Handler+0x4>

08000f1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f22:	e7fe      	b.n	8000f22 <BusFault_Handler+0x4>

08000f24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f28:	e7fe      	b.n	8000f28 <UsageFault_Handler+0x4>

08000f2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f58:	f000 fbc4 	bl	80016e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f5c:	bf00      	nop
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000f64:	4802      	ldr	r0, [pc, #8]	; (8000f70 <DMA1_Channel1_IRQHandler+0x10>)
 8000f66:	f001 fc72 	bl	800284e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	200000f0 	.word	0x200000f0

08000f74 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000f78:	4802      	ldr	r0, [pc, #8]	; (8000f84 <DMA1_Channel2_IRQHandler+0x10>)
 8000f7a:	f001 fc68 	bl	800284e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	2000015c 	.word	0x2000015c

08000f88 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f8c:	4803      	ldr	r0, [pc, #12]	; (8000f9c <TIM1_UP_TIM16_IRQHandler+0x14>)
 8000f8e:	f005 f8e7 	bl	8006160 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8000f92:	4803      	ldr	r0, [pc, #12]	; (8000fa0 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8000f94:	f005 f8e4 	bl	8006160 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000f98:	bf00      	nop
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20000238 	.word	0x20000238
 8000fa0:	200002d0 	.word	0x200002d0

08000fa4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXT line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000fa8:	4802      	ldr	r0, [pc, #8]	; (8000fb4 <I2C1_EV_IRQHandler+0x10>)
 8000faa:	f002 f973 	bl	8003294 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	200001a0 	.word	0x200001a0

08000fb8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000fbc:	4802      	ldr	r0, [pc, #8]	; (8000fc8 <I2C1_ER_IRQHandler+0x10>)
 8000fbe:	f002 f983 	bl	80032c8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	200001a0 	.word	0x200001a0

08000fcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fd4:	4a14      	ldr	r2, [pc, #80]	; (8001028 <_sbrk+0x5c>)
 8000fd6:	4b15      	ldr	r3, [pc, #84]	; (800102c <_sbrk+0x60>)
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fe0:	4b13      	ldr	r3, [pc, #76]	; (8001030 <_sbrk+0x64>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d102      	bne.n	8000fee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fe8:	4b11      	ldr	r3, [pc, #68]	; (8001030 <_sbrk+0x64>)
 8000fea:	4a12      	ldr	r2, [pc, #72]	; (8001034 <_sbrk+0x68>)
 8000fec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fee:	4b10      	ldr	r3, [pc, #64]	; (8001030 <_sbrk+0x64>)
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d207      	bcs.n	800100c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ffc:	f006 fa6c 	bl	80074d8 <__errno>
 8001000:	4603      	mov	r3, r0
 8001002:	220c      	movs	r2, #12
 8001004:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001006:	f04f 33ff 	mov.w	r3, #4294967295
 800100a:	e009      	b.n	8001020 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800100c:	4b08      	ldr	r3, [pc, #32]	; (8001030 <_sbrk+0x64>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001012:	4b07      	ldr	r3, [pc, #28]	; (8001030 <_sbrk+0x64>)
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4413      	add	r3, r2
 800101a:	4a05      	ldr	r2, [pc, #20]	; (8001030 <_sbrk+0x64>)
 800101c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800101e:	68fb      	ldr	r3, [r7, #12]
}
 8001020:	4618      	mov	r0, r3
 8001022:	3718      	adds	r7, #24
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20003000 	.word	0x20003000
 800102c:	00000400 	.word	0x00000400
 8001030:	20000094 	.word	0x20000094
 8001034:	200003b8 	.word	0x200003b8

08001038 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800103c:	4b06      	ldr	r3, [pc, #24]	; (8001058 <SystemInit+0x20>)
 800103e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001042:	4a05      	ldr	r2, [pc, #20]	; (8001058 <SystemInit+0x20>)
 8001044:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001048:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	e000ed00 	.word	0xe000ed00

0800105c <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b096      	sub	sp, #88	; 0x58
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001062:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	605a      	str	r2, [r3, #4]
 800106c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800106e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	609a      	str	r2, [r3, #8]
 800107a:	60da      	str	r2, [r3, #12]
 800107c:	611a      	str	r2, [r3, #16]
 800107e:	615a      	str	r2, [r3, #20]
 8001080:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001082:	1d3b      	adds	r3, r7, #4
 8001084:	222c      	movs	r2, #44	; 0x2c
 8001086:	2100      	movs	r1, #0
 8001088:	4618      	mov	r0, r3
 800108a:	f006 fa57 	bl	800753c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800108e:	4b39      	ldr	r3, [pc, #228]	; (8001174 <MX_TIM1_Init+0x118>)
 8001090:	4a39      	ldr	r2, [pc, #228]	; (8001178 <MX_TIM1_Init+0x11c>)
 8001092:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001094:	4b37      	ldr	r3, [pc, #220]	; (8001174 <MX_TIM1_Init+0x118>)
 8001096:	2200      	movs	r2, #0
 8001098:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800109a:	4b36      	ldr	r3, [pc, #216]	; (8001174 <MX_TIM1_Init+0x118>)
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80010a0:	4b34      	ldr	r3, [pc, #208]	; (8001174 <MX_TIM1_Init+0x118>)
 80010a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010a6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010a8:	4b32      	ldr	r3, [pc, #200]	; (8001174 <MX_TIM1_Init+0x118>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010ae:	4b31      	ldr	r3, [pc, #196]	; (8001174 <MX_TIM1_Init+0x118>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010b4:	4b2f      	ldr	r3, [pc, #188]	; (8001174 <MX_TIM1_Init+0x118>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80010ba:	482e      	ldr	r0, [pc, #184]	; (8001174 <MX_TIM1_Init+0x118>)
 80010bc:	f004 ff53 	bl	8005f66 <HAL_TIM_PWM_Init>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80010c6:	f7ff fef8 	bl	8000eba <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ca:	2300      	movs	r3, #0
 80010cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80010ce:	2300      	movs	r3, #0
 80010d0:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010d2:	2300      	movs	r3, #0
 80010d4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010d6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010da:	4619      	mov	r1, r3
 80010dc:	4825      	ldr	r0, [pc, #148]	; (8001174 <MX_TIM1_Init+0x118>)
 80010de:	f005 fdc3 	bl	8006c68 <HAL_TIMEx_MasterConfigSynchronization>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80010e8:	f7ff fee7 	bl	8000eba <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010ec:	2360      	movs	r3, #96	; 0x60
 80010ee:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010f4:	2300      	movs	r3, #0
 80010f6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010f8:	2300      	movs	r3, #0
 80010fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010fc:	2300      	movs	r3, #0
 80010fe:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001100:	2300      	movs	r3, #0
 8001102:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001104:	2300      	movs	r3, #0
 8001106:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001108:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800110c:	2208      	movs	r2, #8
 800110e:	4619      	mov	r1, r3
 8001110:	4818      	ldr	r0, [pc, #96]	; (8001174 <MX_TIM1_Init+0x118>)
 8001112:	f005 f945 	bl	80063a0 <HAL_TIM_PWM_ConfigChannel>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800111c:	f7ff fecd 	bl	8000eba <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001120:	2300      	movs	r3, #0
 8001122:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001124:	2300      	movs	r3, #0
 8001126:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001128:	2300      	movs	r3, #0
 800112a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800112c:	2300      	movs	r3, #0
 800112e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001130:	2300      	movs	r3, #0
 8001132:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001134:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001138:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800113a:	2300      	movs	r3, #0
 800113c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800113e:	2300      	movs	r3, #0
 8001140:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001142:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001146:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001148:	2300      	movs	r3, #0
 800114a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800114c:	2300      	movs	r3, #0
 800114e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001150:	1d3b      	adds	r3, r7, #4
 8001152:	4619      	mov	r1, r3
 8001154:	4807      	ldr	r0, [pc, #28]	; (8001174 <MX_TIM1_Init+0x118>)
 8001156:	f005 fdf5 	bl	8006d44 <HAL_TIMEx_ConfigBreakDeadTime>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001160:	f7ff feab 	bl	8000eba <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001164:	4803      	ldr	r0, [pc, #12]	; (8001174 <MX_TIM1_Init+0x118>)
 8001166:	f000 f97f 	bl	8001468 <HAL_TIM_MspPostInit>

}
 800116a:	bf00      	nop
 800116c:	3758      	adds	r7, #88	; 0x58
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20000238 	.word	0x20000238
 8001178:	40012c00 	.word	0x40012c00

0800117c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08a      	sub	sp, #40	; 0x28
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001182:	f107 031c 	add.w	r3, r7, #28
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800118e:	463b      	mov	r3, r7
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]
 800119c:	615a      	str	r2, [r3, #20]
 800119e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011a0:	4b22      	ldr	r3, [pc, #136]	; (800122c <MX_TIM2_Init+0xb0>)
 80011a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80011a8:	4b20      	ldr	r3, [pc, #128]	; (800122c <MX_TIM2_Init+0xb0>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ae:	4b1f      	ldr	r3, [pc, #124]	; (800122c <MX_TIM2_Init+0xb0>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80011b4:	4b1d      	ldr	r3, [pc, #116]	; (800122c <MX_TIM2_Init+0xb0>)
 80011b6:	f04f 32ff 	mov.w	r2, #4294967295
 80011ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011bc:	4b1b      	ldr	r3, [pc, #108]	; (800122c <MX_TIM2_Init+0xb0>)
 80011be:	2200      	movs	r2, #0
 80011c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c2:	4b1a      	ldr	r3, [pc, #104]	; (800122c <MX_TIM2_Init+0xb0>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80011c8:	4818      	ldr	r0, [pc, #96]	; (800122c <MX_TIM2_Init+0xb0>)
 80011ca:	f004 fecc 	bl	8005f66 <HAL_TIM_PWM_Init>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80011d4:	f7ff fe71 	bl	8000eba <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011d8:	2300      	movs	r3, #0
 80011da:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011dc:	2300      	movs	r3, #0
 80011de:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011e0:	f107 031c 	add.w	r3, r7, #28
 80011e4:	4619      	mov	r1, r3
 80011e6:	4811      	ldr	r0, [pc, #68]	; (800122c <MX_TIM2_Init+0xb0>)
 80011e8:	f005 fd3e 	bl	8006c68 <HAL_TIMEx_MasterConfigSynchronization>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80011f2:	f7ff fe62 	bl	8000eba <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011f6:	2360      	movs	r3, #96	; 0x60
 80011f8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011fe:	2300      	movs	r3, #0
 8001200:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001202:	2300      	movs	r3, #0
 8001204:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001206:	463b      	mov	r3, r7
 8001208:	220c      	movs	r2, #12
 800120a:	4619      	mov	r1, r3
 800120c:	4807      	ldr	r0, [pc, #28]	; (800122c <MX_TIM2_Init+0xb0>)
 800120e:	f005 f8c7 	bl	80063a0 <HAL_TIM_PWM_ConfigChannel>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001218:	f7ff fe4f 	bl	8000eba <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800121c:	4803      	ldr	r0, [pc, #12]	; (800122c <MX_TIM2_Init+0xb0>)
 800121e:	f000 f923 	bl	8001468 <HAL_TIM_MspPostInit>

}
 8001222:	bf00      	nop
 8001224:	3728      	adds	r7, #40	; 0x28
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20000284 	.word	0x20000284

08001230 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08c      	sub	sp, #48	; 0x30
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001236:	f107 030c 	add.w	r3, r7, #12
 800123a:	2224      	movs	r2, #36	; 0x24
 800123c:	2100      	movs	r1, #0
 800123e:	4618      	mov	r0, r3
 8001240:	f006 f97c 	bl	800753c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001244:	463b      	mov	r3, r7
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800124e:	4b21      	ldr	r3, [pc, #132]	; (80012d4 <MX_TIM3_Init+0xa4>)
 8001250:	4a21      	ldr	r2, [pc, #132]	; (80012d8 <MX_TIM3_Init+0xa8>)
 8001252:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001254:	4b1f      	ldr	r3, [pc, #124]	; (80012d4 <MX_TIM3_Init+0xa4>)
 8001256:	2200      	movs	r2, #0
 8001258:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800125a:	4b1e      	ldr	r3, [pc, #120]	; (80012d4 <MX_TIM3_Init+0xa4>)
 800125c:	2200      	movs	r2, #0
 800125e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001260:	4b1c      	ldr	r3, [pc, #112]	; (80012d4 <MX_TIM3_Init+0xa4>)
 8001262:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001266:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001268:	4b1a      	ldr	r3, [pc, #104]	; (80012d4 <MX_TIM3_Init+0xa4>)
 800126a:	2200      	movs	r2, #0
 800126c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800126e:	4b19      	ldr	r3, [pc, #100]	; (80012d4 <MX_TIM3_Init+0xa4>)
 8001270:	2200      	movs	r2, #0
 8001272:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001274:	2301      	movs	r3, #1
 8001276:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001278:	2300      	movs	r3, #0
 800127a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800127c:	2301      	movs	r3, #1
 800127e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001280:	2300      	movs	r3, #0
 8001282:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001288:	2300      	movs	r3, #0
 800128a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800128c:	2301      	movs	r3, #1
 800128e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001290:	2300      	movs	r3, #0
 8001292:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001294:	2300      	movs	r3, #0
 8001296:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001298:	f107 030c 	add.w	r3, r7, #12
 800129c:	4619      	mov	r1, r3
 800129e:	480d      	ldr	r0, [pc, #52]	; (80012d4 <MX_TIM3_Init+0xa4>)
 80012a0:	f004 feb8 	bl	8006014 <HAL_TIM_Encoder_Init>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80012aa:	f7ff fe06 	bl	8000eba <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ae:	2300      	movs	r3, #0
 80012b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b2:	2300      	movs	r3, #0
 80012b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012b6:	463b      	mov	r3, r7
 80012b8:	4619      	mov	r1, r3
 80012ba:	4806      	ldr	r0, [pc, #24]	; (80012d4 <MX_TIM3_Init+0xa4>)
 80012bc:	f005 fcd4 	bl	8006c68 <HAL_TIMEx_MasterConfigSynchronization>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80012c6:	f7ff fdf8 	bl	8000eba <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80012ca:	bf00      	nop
 80012cc:	3730      	adds	r7, #48	; 0x30
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	200001ec 	.word	0x200001ec
 80012d8:	40000400 	.word	0x40000400

080012dc <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80012e0:	4b0f      	ldr	r3, [pc, #60]	; (8001320 <MX_TIM16_Init+0x44>)
 80012e2:	4a10      	ldr	r2, [pc, #64]	; (8001324 <MX_TIM16_Init+0x48>)
 80012e4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80012e6:	4b0e      	ldr	r3, [pc, #56]	; (8001320 <MX_TIM16_Init+0x44>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ec:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <MX_TIM16_Init+0x44>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80012f2:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <MX_TIM16_Init+0x44>)
 80012f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012f8:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012fa:	4b09      	ldr	r3, [pc, #36]	; (8001320 <MX_TIM16_Init+0x44>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001300:	4b07      	ldr	r3, [pc, #28]	; (8001320 <MX_TIM16_Init+0x44>)
 8001302:	2200      	movs	r2, #0
 8001304:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001306:	4b06      	ldr	r3, [pc, #24]	; (8001320 <MX_TIM16_Init+0x44>)
 8001308:	2200      	movs	r2, #0
 800130a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800130c:	4804      	ldr	r0, [pc, #16]	; (8001320 <MX_TIM16_Init+0x44>)
 800130e:	f004 fdd3 	bl	8005eb8 <HAL_TIM_Base_Init>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001318:	f7ff fdcf 	bl	8000eba <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800131c:	bf00      	nop
 800131e:	bd80      	pop	{r7, pc}
 8001320:	200002d0 	.word	0x200002d0
 8001324:	40014400 	.word	0x40014400

08001328 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a16      	ldr	r2, [pc, #88]	; (8001390 <HAL_TIM_PWM_MspInit+0x68>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d114      	bne.n	8001364 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800133a:	4b16      	ldr	r3, [pc, #88]	; (8001394 <HAL_TIM_PWM_MspInit+0x6c>)
 800133c:	699b      	ldr	r3, [r3, #24]
 800133e:	4a15      	ldr	r2, [pc, #84]	; (8001394 <HAL_TIM_PWM_MspInit+0x6c>)
 8001340:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001344:	6193      	str	r3, [r2, #24]
 8001346:	4b13      	ldr	r3, [pc, #76]	; (8001394 <HAL_TIM_PWM_MspInit+0x6c>)
 8001348:	699b      	ldr	r3, [r3, #24]
 800134a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001352:	2200      	movs	r2, #0
 8001354:	2100      	movs	r1, #0
 8001356:	2019      	movs	r0, #25
 8001358:	f001 f95f 	bl	800261a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800135c:	2019      	movs	r0, #25
 800135e:	f001 f978 	bl	8002652 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001362:	e010      	b.n	8001386 <HAL_TIM_PWM_MspInit+0x5e>
  else if(tim_pwmHandle->Instance==TIM2)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800136c:	d10b      	bne.n	8001386 <HAL_TIM_PWM_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800136e:	4b09      	ldr	r3, [pc, #36]	; (8001394 <HAL_TIM_PWM_MspInit+0x6c>)
 8001370:	69db      	ldr	r3, [r3, #28]
 8001372:	4a08      	ldr	r2, [pc, #32]	; (8001394 <HAL_TIM_PWM_MspInit+0x6c>)
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	61d3      	str	r3, [r2, #28]
 800137a:	4b06      	ldr	r3, [pc, #24]	; (8001394 <HAL_TIM_PWM_MspInit+0x6c>)
 800137c:	69db      	ldr	r3, [r3, #28]
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	60bb      	str	r3, [r7, #8]
 8001384:	68bb      	ldr	r3, [r7, #8]
}
 8001386:	bf00      	nop
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40012c00 	.word	0x40012c00
 8001394:	40021000 	.word	0x40021000

08001398 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b08a      	sub	sp, #40	; 0x28
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a0:	f107 0314 	add.w	r3, r7, #20
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
 80013ae:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a17      	ldr	r2, [pc, #92]	; (8001414 <HAL_TIM_Encoder_MspInit+0x7c>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d128      	bne.n	800140c <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013ba:	4b17      	ldr	r3, [pc, #92]	; (8001418 <HAL_TIM_Encoder_MspInit+0x80>)
 80013bc:	69db      	ldr	r3, [r3, #28]
 80013be:	4a16      	ldr	r2, [pc, #88]	; (8001418 <HAL_TIM_Encoder_MspInit+0x80>)
 80013c0:	f043 0302 	orr.w	r3, r3, #2
 80013c4:	61d3      	str	r3, [r2, #28]
 80013c6:	4b14      	ldr	r3, [pc, #80]	; (8001418 <HAL_TIM_Encoder_MspInit+0x80>)
 80013c8:	69db      	ldr	r3, [r3, #28]
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	613b      	str	r3, [r7, #16]
 80013d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d2:	4b11      	ldr	r3, [pc, #68]	; (8001418 <HAL_TIM_Encoder_MspInit+0x80>)
 80013d4:	695b      	ldr	r3, [r3, #20]
 80013d6:	4a10      	ldr	r2, [pc, #64]	; (8001418 <HAL_TIM_Encoder_MspInit+0x80>)
 80013d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013dc:	6153      	str	r3, [r2, #20]
 80013de:	4b0e      	ldr	r3, [pc, #56]	; (8001418 <HAL_TIM_Encoder_MspInit+0x80>)
 80013e0:	695b      	ldr	r3, [r3, #20]
 80013e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_B_Pin|ENC_A_Pin;
 80013ea:	23c0      	movs	r3, #192	; 0xc0
 80013ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ee:	2302      	movs	r3, #2
 80013f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f2:	2300      	movs	r3, #0
 80013f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f6:	2300      	movs	r3, #0
 80013f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80013fa:	2302      	movs	r3, #2
 80013fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fe:	f107 0314 	add.w	r3, r7, #20
 8001402:	4619      	mov	r1, r3
 8001404:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001408:	f001 fb20 	bl	8002a4c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800140c:	bf00      	nop
 800140e:	3728      	adds	r7, #40	; 0x28
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40000400 	.word	0x40000400
 8001418:	40021000 	.word	0x40021000

0800141c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a0d      	ldr	r2, [pc, #52]	; (8001460 <HAL_TIM_Base_MspInit+0x44>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d113      	bne.n	8001456 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800142e:	4b0d      	ldr	r3, [pc, #52]	; (8001464 <HAL_TIM_Base_MspInit+0x48>)
 8001430:	699b      	ldr	r3, [r3, #24]
 8001432:	4a0c      	ldr	r2, [pc, #48]	; (8001464 <HAL_TIM_Base_MspInit+0x48>)
 8001434:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001438:	6193      	str	r3, [r2, #24]
 800143a:	4b0a      	ldr	r3, [pc, #40]	; (8001464 <HAL_TIM_Base_MspInit+0x48>)
 800143c:	699b      	ldr	r3, [r3, #24]
 800143e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	68fb      	ldr	r3, [r7, #12]

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001446:	2200      	movs	r2, #0
 8001448:	2100      	movs	r1, #0
 800144a:	2019      	movs	r0, #25
 800144c:	f001 f8e5 	bl	800261a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001450:	2019      	movs	r0, #25
 8001452:	f001 f8fe 	bl	8002652 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8001456:	bf00      	nop
 8001458:	3710      	adds	r7, #16
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40014400 	.word	0x40014400
 8001464:	40021000 	.word	0x40021000

08001468 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b08a      	sub	sp, #40	; 0x28
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001470:	f107 0314 	add.w	r3, r7, #20
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	605a      	str	r2, [r3, #4]
 800147a:	609a      	str	r2, [r3, #8]
 800147c:	60da      	str	r2, [r3, #12]
 800147e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a22      	ldr	r2, [pc, #136]	; (8001510 <HAL_TIM_MspPostInit+0xa8>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d11c      	bne.n	80014c4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800148a:	4b22      	ldr	r3, [pc, #136]	; (8001514 <HAL_TIM_MspPostInit+0xac>)
 800148c:	695b      	ldr	r3, [r3, #20]
 800148e:	4a21      	ldr	r2, [pc, #132]	; (8001514 <HAL_TIM_MspPostInit+0xac>)
 8001490:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001494:	6153      	str	r3, [r2, #20]
 8001496:	4b1f      	ldr	r3, [pc, #124]	; (8001514 <HAL_TIM_MspPostInit+0xac>)
 8001498:	695b      	ldr	r3, [r3, #20]
 800149a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800149e:	613b      	str	r3, [r7, #16]
 80014a0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PF0 / OSC_IN     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = HX_PD_SCK_Pin;
 80014a2:	2301      	movs	r3, #1
 80014a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a6:	2302      	movs	r3, #2
 80014a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ae:	2300      	movs	r3, #0
 80014b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80014b2:	2306      	movs	r3, #6
 80014b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HX_PD_SCK_GPIO_Port, &GPIO_InitStruct);
 80014b6:	f107 0314 	add.w	r3, r7, #20
 80014ba:	4619      	mov	r1, r3
 80014bc:	4816      	ldr	r0, [pc, #88]	; (8001518 <HAL_TIM_MspPostInit+0xb0>)
 80014be:	f001 fac5 	bl	8002a4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80014c2:	e021      	b.n	8001508 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM2)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014cc:	d11c      	bne.n	8001508 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ce:	4b11      	ldr	r3, [pc, #68]	; (8001514 <HAL_TIM_MspPostInit+0xac>)
 80014d0:	695b      	ldr	r3, [r3, #20]
 80014d2:	4a10      	ldr	r2, [pc, #64]	; (8001514 <HAL_TIM_MspPostInit+0xac>)
 80014d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014d8:	6153      	str	r3, [r2, #20]
 80014da:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <HAL_TIM_MspPostInit+0xac>)
 80014dc:	695b      	ldr	r3, [r3, #20]
 80014de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M2_PWM_Pin;
 80014e6:	2308      	movs	r3, #8
 80014e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ea:	2302      	movs	r3, #2
 80014ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f2:	2300      	movs	r3, #0
 80014f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014f6:	2301      	movs	r3, #1
 80014f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(M2_PWM_GPIO_Port, &GPIO_InitStruct);
 80014fa:	f107 0314 	add.w	r3, r7, #20
 80014fe:	4619      	mov	r1, r3
 8001500:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001504:	f001 faa2 	bl	8002a4c <HAL_GPIO_Init>
}
 8001508:	bf00      	nop
 800150a:	3728      	adds	r7, #40	; 0x28
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40012c00 	.word	0x40012c00
 8001514:	40021000 	.word	0x40021000
 8001518:	48001400 	.word	0x48001400

0800151c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001520:	4b14      	ldr	r3, [pc, #80]	; (8001574 <MX_USART2_UART_Init+0x58>)
 8001522:	4a15      	ldr	r2, [pc, #84]	; (8001578 <MX_USART2_UART_Init+0x5c>)
 8001524:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001526:	4b13      	ldr	r3, [pc, #76]	; (8001574 <MX_USART2_UART_Init+0x58>)
 8001528:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800152c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800152e:	4b11      	ldr	r3, [pc, #68]	; (8001574 <MX_USART2_UART_Init+0x58>)
 8001530:	2200      	movs	r2, #0
 8001532:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001534:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <MX_USART2_UART_Init+0x58>)
 8001536:	2200      	movs	r2, #0
 8001538:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800153a:	4b0e      	ldr	r3, [pc, #56]	; (8001574 <MX_USART2_UART_Init+0x58>)
 800153c:	2200      	movs	r2, #0
 800153e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001540:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <MX_USART2_UART_Init+0x58>)
 8001542:	220c      	movs	r2, #12
 8001544:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001546:	4b0b      	ldr	r3, [pc, #44]	; (8001574 <MX_USART2_UART_Init+0x58>)
 8001548:	2200      	movs	r2, #0
 800154a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800154c:	4b09      	ldr	r3, [pc, #36]	; (8001574 <MX_USART2_UART_Init+0x58>)
 800154e:	2200      	movs	r2, #0
 8001550:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001552:	4b08      	ldr	r3, [pc, #32]	; (8001574 <MX_USART2_UART_Init+0x58>)
 8001554:	2200      	movs	r2, #0
 8001556:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001558:	4b06      	ldr	r3, [pc, #24]	; (8001574 <MX_USART2_UART_Init+0x58>)
 800155a:	2200      	movs	r2, #0
 800155c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800155e:	4805      	ldr	r0, [pc, #20]	; (8001574 <MX_USART2_UART_Init+0x58>)
 8001560:	f005 fc86 	bl	8006e70 <HAL_UART_Init>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800156a:	f7ff fca6 	bl	8000eba <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	2000031c 	.word	0x2000031c
 8001578:	40004400 	.word	0x40004400

0800157c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b08a      	sub	sp, #40	; 0x28
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	60da      	str	r2, [r3, #12]
 8001592:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a17      	ldr	r2, [pc, #92]	; (80015f8 <HAL_UART_MspInit+0x7c>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d127      	bne.n	80015ee <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800159e:	4b17      	ldr	r3, [pc, #92]	; (80015fc <HAL_UART_MspInit+0x80>)
 80015a0:	69db      	ldr	r3, [r3, #28]
 80015a2:	4a16      	ldr	r2, [pc, #88]	; (80015fc <HAL_UART_MspInit+0x80>)
 80015a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015a8:	61d3      	str	r3, [r2, #28]
 80015aa:	4b14      	ldr	r3, [pc, #80]	; (80015fc <HAL_UART_MspInit+0x80>)
 80015ac:	69db      	ldr	r3, [r3, #28]
 80015ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b2:	613b      	str	r3, [r7, #16]
 80015b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b6:	4b11      	ldr	r3, [pc, #68]	; (80015fc <HAL_UART_MspInit+0x80>)
 80015b8:	695b      	ldr	r3, [r3, #20]
 80015ba:	4a10      	ldr	r2, [pc, #64]	; (80015fc <HAL_UART_MspInit+0x80>)
 80015bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015c0:	6153      	str	r3, [r2, #20]
 80015c2:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <HAL_UART_MspInit+0x80>)
 80015c4:	695b      	ldr	r3, [r3, #20]
 80015c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80015ce:	2318      	movs	r3, #24
 80015d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d2:	2302      	movs	r3, #2
 80015d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015da:	2303      	movs	r3, #3
 80015dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015de:	2307      	movs	r3, #7
 80015e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e2:	f107 0314 	add.w	r3, r7, #20
 80015e6:	4619      	mov	r1, r3
 80015e8:	4805      	ldr	r0, [pc, #20]	; (8001600 <HAL_UART_MspInit+0x84>)
 80015ea:	f001 fa2f 	bl	8002a4c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80015ee:	bf00      	nop
 80015f0:	3728      	adds	r7, #40	; 0x28
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40004400 	.word	0x40004400
 80015fc:	40021000 	.word	0x40021000
 8001600:	48000400 	.word	0x48000400

08001604 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001604:	f8df d034 	ldr.w	sp, [pc, #52]	; 800163c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001608:	480d      	ldr	r0, [pc, #52]	; (8001640 <LoopForever+0x6>)
  ldr r1, =_edata
 800160a:	490e      	ldr	r1, [pc, #56]	; (8001644 <LoopForever+0xa>)
  ldr r2, =_sidata
 800160c:	4a0e      	ldr	r2, [pc, #56]	; (8001648 <LoopForever+0xe>)
  movs r3, #0
 800160e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001610:	e002      	b.n	8001618 <LoopCopyDataInit>

08001612 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001612:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001614:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001616:	3304      	adds	r3, #4

08001618 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001618:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800161a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800161c:	d3f9      	bcc.n	8001612 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800161e:	4a0b      	ldr	r2, [pc, #44]	; (800164c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001620:	4c0b      	ldr	r4, [pc, #44]	; (8001650 <LoopForever+0x16>)
  movs r3, #0
 8001622:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001624:	e001      	b.n	800162a <LoopFillZerobss>

08001626 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001626:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001628:	3204      	adds	r2, #4

0800162a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800162a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800162c:	d3fb      	bcc.n	8001626 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800162e:	f7ff fd03 	bl	8001038 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001632:	f005 ff57 	bl	80074e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001636:	f7ff fba5 	bl	8000d84 <main>

0800163a <LoopForever>:

LoopForever:
    b LoopForever
 800163a:	e7fe      	b.n	800163a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800163c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001640:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001644:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001648:	080076a4 	.word	0x080076a4
  ldr r2, =_sbss
 800164c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001650:	200003b4 	.word	0x200003b4

08001654 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001654:	e7fe      	b.n	8001654 <ADC1_2_IRQHandler>
	...

08001658 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800165c:	4b08      	ldr	r3, [pc, #32]	; (8001680 <HAL_Init+0x28>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a07      	ldr	r2, [pc, #28]	; (8001680 <HAL_Init+0x28>)
 8001662:	f043 0310 	orr.w	r3, r3, #16
 8001666:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001668:	2003      	movs	r0, #3
 800166a:	f000 ffcb 	bl	8002604 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800166e:	2000      	movs	r0, #0
 8001670:	f000 f808 	bl	8001684 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001674:	f7ff fc26 	bl	8000ec4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40022000 	.word	0x40022000

08001684 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800168c:	4b12      	ldr	r3, [pc, #72]	; (80016d8 <HAL_InitTick+0x54>)
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	4b12      	ldr	r3, [pc, #72]	; (80016dc <HAL_InitTick+0x58>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	4619      	mov	r1, r3
 8001696:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800169a:	fbb3 f3f1 	udiv	r3, r3, r1
 800169e:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a2:	4618      	mov	r0, r3
 80016a4:	f000 ffe3 	bl	800266e <HAL_SYSTICK_Config>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e00e      	b.n	80016d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2b0f      	cmp	r3, #15
 80016b6:	d80a      	bhi.n	80016ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016b8:	2200      	movs	r2, #0
 80016ba:	6879      	ldr	r1, [r7, #4]
 80016bc:	f04f 30ff 	mov.w	r0, #4294967295
 80016c0:	f000 ffab 	bl	800261a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016c4:	4a06      	ldr	r2, [pc, #24]	; (80016e0 <HAL_InitTick+0x5c>)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80016ca:	2300      	movs	r3, #0
 80016cc:	e000      	b.n	80016d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	20000000 	.word	0x20000000
 80016dc:	20000008 	.word	0x20000008
 80016e0:	20000004 	.word	0x20000004

080016e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016e8:	4b06      	ldr	r3, [pc, #24]	; (8001704 <HAL_IncTick+0x20>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	461a      	mov	r2, r3
 80016ee:	4b06      	ldr	r3, [pc, #24]	; (8001708 <HAL_IncTick+0x24>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4413      	add	r3, r2
 80016f4:	4a04      	ldr	r2, [pc, #16]	; (8001708 <HAL_IncTick+0x24>)
 80016f6:	6013      	str	r3, [r2, #0]
}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	20000008 	.word	0x20000008
 8001708:	200003a0 	.word	0x200003a0

0800170c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001710:	4b03      	ldr	r3, [pc, #12]	; (8001720 <HAL_GetTick+0x14>)
 8001712:	681b      	ldr	r3, [r3, #0]
}
 8001714:	4618      	mov	r0, r3
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	200003a0 	.word	0x200003a0

08001724 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800172c:	f7ff ffee 	bl	800170c <HAL_GetTick>
 8001730:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800173c:	d005      	beq.n	800174a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800173e:	4b0a      	ldr	r3, [pc, #40]	; (8001768 <HAL_Delay+0x44>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	461a      	mov	r2, r3
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	4413      	add	r3, r2
 8001748:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800174a:	bf00      	nop
 800174c:	f7ff ffde 	bl	800170c <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	68fa      	ldr	r2, [r7, #12]
 8001758:	429a      	cmp	r2, r3
 800175a:	d8f7      	bhi.n	800174c <HAL_Delay+0x28>
  {
  }
}
 800175c:	bf00      	nop
 800175e:	bf00      	nop
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	20000008 	.word	0x20000008

0800176c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b09a      	sub	sp, #104	; 0x68
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001774:	2300      	movs	r3, #0
 8001776:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800177a:	2300      	movs	r3, #0
 800177c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800177e:	2300      	movs	r3, #0
 8001780:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d101      	bne.n	800178c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e172      	b.n	8001a72 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	691b      	ldr	r3, [r3, #16]
 8001790:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	f003 0310 	and.w	r3, r3, #16
 800179a:	2b00      	cmp	r3, #0
 800179c:	d176      	bne.n	800188c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d152      	bne.n	800184c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2200      	movs	r2, #0
 80017b0:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f7ff f899 	bl	80008f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d13b      	bne.n	800184c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f000 fce3 	bl	80021a0 <ADC_Disable>
 80017da:	4603      	mov	r3, r0
 80017dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e4:	f003 0310 	and.w	r3, r3, #16
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d12f      	bne.n	800184c <HAL_ADC_Init+0xe0>
 80017ec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d12b      	bne.n	800184c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80017fc:	f023 0302 	bic.w	r3, r3, #2
 8001800:	f043 0202 	orr.w	r2, r3, #2
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	689a      	ldr	r2, [r3, #8]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001816:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	689a      	ldr	r2, [r3, #8]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001826:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001828:	4b94      	ldr	r3, [pc, #592]	; (8001a7c <HAL_ADC_Init+0x310>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a94      	ldr	r2, [pc, #592]	; (8001a80 <HAL_ADC_Init+0x314>)
 800182e:	fba2 2303 	umull	r2, r3, r2, r3
 8001832:	0c9a      	lsrs	r2, r3, #18
 8001834:	4613      	mov	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	4413      	add	r3, r2
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800183e:	e002      	b.n	8001846 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	3b01      	subs	r3, #1
 8001844:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d1f9      	bne.n	8001840 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d007      	beq.n	800186a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001864:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001868:	d110      	bne.n	800188c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	f023 0312 	bic.w	r3, r3, #18
 8001872:	f043 0210 	orr.w	r2, r3, #16
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187e:	f043 0201 	orr.w	r2, r3, #1
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001890:	f003 0310 	and.w	r3, r3, #16
 8001894:	2b00      	cmp	r3, #0
 8001896:	f040 80df 	bne.w	8001a58 <HAL_ADC_Init+0x2ec>
 800189a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800189e:	2b00      	cmp	r3, #0
 80018a0:	f040 80da 	bne.w	8001a58 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	f040 80d2 	bne.w	8001a58 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80018bc:	f043 0202 	orr.w	r2, r3, #2
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018c4:	4b6f      	ldr	r3, [pc, #444]	; (8001a84 <HAL_ADC_Init+0x318>)
 80018c6:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018d0:	d102      	bne.n	80018d8 <HAL_ADC_Init+0x16c>
 80018d2:	4b6d      	ldr	r3, [pc, #436]	; (8001a88 <HAL_ADC_Init+0x31c>)
 80018d4:	60fb      	str	r3, [r7, #12]
 80018d6:	e002      	b.n	80018de <HAL_ADC_Init+0x172>
 80018d8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80018dc:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	f003 0303 	and.w	r3, r3, #3
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d108      	bne.n	80018fe <HAL_ADC_Init+0x192>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d101      	bne.n	80018fe <HAL_ADC_Init+0x192>
 80018fa:	2301      	movs	r3, #1
 80018fc:	e000      	b.n	8001900 <HAL_ADC_Init+0x194>
 80018fe:	2300      	movs	r3, #0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d11c      	bne.n	800193e <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001904:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001906:	2b00      	cmp	r3, #0
 8001908:	d010      	beq.n	800192c <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f003 0303 	and.w	r3, r3, #3
 8001912:	2b01      	cmp	r3, #1
 8001914:	d107      	bne.n	8001926 <HAL_ADC_Init+0x1ba>
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	2b01      	cmp	r3, #1
 8001920:	d101      	bne.n	8001926 <HAL_ADC_Init+0x1ba>
 8001922:	2301      	movs	r3, #1
 8001924:	e000      	b.n	8001928 <HAL_ADC_Init+0x1bc>
 8001926:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001928:	2b00      	cmp	r3, #0
 800192a:	d108      	bne.n	800193e <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800192c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	431a      	orrs	r2, r3
 800193a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800193c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	7e5b      	ldrb	r3, [r3, #25]
 8001942:	035b      	lsls	r3, r3, #13
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001948:	2a01      	cmp	r2, #1
 800194a:	d002      	beq.n	8001952 <HAL_ADC_Init+0x1e6>
 800194c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001950:	e000      	b.n	8001954 <HAL_ADC_Init+0x1e8>
 8001952:	2200      	movs	r2, #0
 8001954:	431a      	orrs	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	431a      	orrs	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	4313      	orrs	r3, r2
 8001962:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001964:	4313      	orrs	r3, r2
 8001966:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800196e:	2b01      	cmp	r3, #1
 8001970:	d11b      	bne.n	80019aa <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	7e5b      	ldrb	r3, [r3, #25]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d109      	bne.n	800198e <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197e:	3b01      	subs	r3, #1
 8001980:	045a      	lsls	r2, r3, #17
 8001982:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001984:	4313      	orrs	r3, r2
 8001986:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800198a:	663b      	str	r3, [r7, #96]	; 0x60
 800198c:	e00d      	b.n	80019aa <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001996:	f043 0220 	orr.w	r2, r3, #32
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a2:	f043 0201 	orr.w	r2, r3, #1
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d007      	beq.n	80019c2 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ba:	4313      	orrs	r3, r2
 80019bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80019be:	4313      	orrs	r3, r2
 80019c0:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f003 030c 	and.w	r3, r3, #12
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d114      	bne.n	80019fa <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	6812      	ldr	r2, [r2, #0]
 80019da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80019de:	f023 0302 	bic.w	r3, r3, #2
 80019e2:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	7e1b      	ldrb	r3, [r3, #24]
 80019e8:	039a      	lsls	r2, r3, #14
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	4313      	orrs	r3, r2
 80019f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80019f6:	4313      	orrs	r3, r2
 80019f8:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	68da      	ldr	r2, [r3, #12]
 8001a00:	4b22      	ldr	r3, [pc, #136]	; (8001a8c <HAL_ADC_Init+0x320>)
 8001a02:	4013      	ands	r3, r2
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	6812      	ldr	r2, [r2, #0]
 8001a08:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001a0a:	430b      	orrs	r3, r1
 8001a0c:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	691b      	ldr	r3, [r3, #16]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d10c      	bne.n	8001a30 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1c:	f023 010f 	bic.w	r1, r3, #15
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	69db      	ldr	r3, [r3, #28]
 8001a24:	1e5a      	subs	r2, r3, #1
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	631a      	str	r2, [r3, #48]	; 0x30
 8001a2e:	e007      	b.n	8001a40 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f022 020f 	bic.w	r2, r2, #15
 8001a3e:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4a:	f023 0303 	bic.w	r3, r3, #3
 8001a4e:	f043 0201 	orr.w	r2, r3, #1
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	641a      	str	r2, [r3, #64]	; 0x40
 8001a56:	e00a      	b.n	8001a6e <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5c:	f023 0312 	bic.w	r3, r3, #18
 8001a60:	f043 0210 	orr.w	r2, r3, #16
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001a68:	2301      	movs	r3, #1
 8001a6a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001a6e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3768      	adds	r7, #104	; 0x68
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	20000000 	.word	0x20000000
 8001a80:	431bde83 	.word	0x431bde83
 8001a84:	50000300 	.word	0x50000300
 8001a88:	50000100 	.word	0x50000100
 8001a8c:	fff0c007 	.word	0xfff0c007

08001a90 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b09b      	sub	sp, #108	; 0x6c
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d101      	bne.n	8001ab2 <HAL_ADC_ConfigChannel+0x22>
 8001aae:	2302      	movs	r3, #2
 8001ab0:	e2a5      	b.n	8001ffe <HAL_ADC_ConfigChannel+0x56e>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f003 0304 	and.w	r3, r3, #4
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	f040 8289 	bne.w	8001fdc <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	2b04      	cmp	r3, #4
 8001ad0:	d81c      	bhi.n	8001b0c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685a      	ldr	r2, [r3, #4]
 8001adc:	4613      	mov	r3, r2
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	4413      	add	r3, r2
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	231f      	movs	r3, #31
 8001ae8:	4093      	lsls	r3, r2
 8001aea:	43db      	mvns	r3, r3
 8001aec:	4019      	ands	r1, r3
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	6818      	ldr	r0, [r3, #0]
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685a      	ldr	r2, [r3, #4]
 8001af6:	4613      	mov	r3, r2
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	4413      	add	r3, r2
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	fa00 f203 	lsl.w	r2, r0, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	430a      	orrs	r2, r1
 8001b08:	631a      	str	r2, [r3, #48]	; 0x30
 8001b0a:	e063      	b.n	8001bd4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	2b09      	cmp	r3, #9
 8001b12:	d81e      	bhi.n	8001b52 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685a      	ldr	r2, [r3, #4]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	4413      	add	r3, r2
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	3b1e      	subs	r3, #30
 8001b28:	221f      	movs	r2, #31
 8001b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2e:	43db      	mvns	r3, r3
 8001b30:	4019      	ands	r1, r3
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	6818      	ldr	r0, [r3, #0]
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685a      	ldr	r2, [r3, #4]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	4413      	add	r3, r2
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	3b1e      	subs	r3, #30
 8001b44:	fa00 f203 	lsl.w	r2, r0, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	635a      	str	r2, [r3, #52]	; 0x34
 8001b50:	e040      	b.n	8001bd4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2b0e      	cmp	r3, #14
 8001b58:	d81e      	bhi.n	8001b98 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685a      	ldr	r2, [r3, #4]
 8001b64:	4613      	mov	r3, r2
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	4413      	add	r3, r2
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	3b3c      	subs	r3, #60	; 0x3c
 8001b6e:	221f      	movs	r2, #31
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	43db      	mvns	r3, r3
 8001b76:	4019      	ands	r1, r3
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	6818      	ldr	r0, [r3, #0]
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685a      	ldr	r2, [r3, #4]
 8001b80:	4613      	mov	r3, r2
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	4413      	add	r3, r2
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	3b3c      	subs	r3, #60	; 0x3c
 8001b8a:	fa00 f203 	lsl.w	r2, r0, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	430a      	orrs	r2, r1
 8001b94:	639a      	str	r2, [r3, #56]	; 0x38
 8001b96:	e01d      	b.n	8001bd4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685a      	ldr	r2, [r3, #4]
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	4413      	add	r3, r2
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	3b5a      	subs	r3, #90	; 0x5a
 8001bac:	221f      	movs	r2, #31
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	4019      	ands	r1, r3
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	6818      	ldr	r0, [r3, #0]
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685a      	ldr	r2, [r3, #4]
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	4413      	add	r3, r2
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	3b5a      	subs	r3, #90	; 0x5a
 8001bc8:	fa00 f203 	lsl.w	r2, r0, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f003 030c 	and.w	r3, r3, #12
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f040 80e5 	bne.w	8001dae <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2b09      	cmp	r3, #9
 8001bea:	d91c      	bls.n	8001c26 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	6999      	ldr	r1, [r3, #24]
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	4413      	add	r3, r2
 8001bfc:	3b1e      	subs	r3, #30
 8001bfe:	2207      	movs	r2, #7
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	43db      	mvns	r3, r3
 8001c06:	4019      	ands	r1, r3
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	6898      	ldr	r0, [r3, #8]
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	4613      	mov	r3, r2
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	4413      	add	r3, r2
 8001c16:	3b1e      	subs	r3, #30
 8001c18:	fa00 f203 	lsl.w	r2, r0, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	430a      	orrs	r2, r1
 8001c22:	619a      	str	r2, [r3, #24]
 8001c24:	e019      	b.n	8001c5a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	6959      	ldr	r1, [r3, #20]
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	4613      	mov	r3, r2
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	4413      	add	r3, r2
 8001c36:	2207      	movs	r2, #7
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	4019      	ands	r1, r3
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	6898      	ldr	r0, [r3, #8]
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	4413      	add	r3, r2
 8001c4e:	fa00 f203 	lsl.w	r2, r0, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	430a      	orrs	r2, r1
 8001c58:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	695a      	ldr	r2, [r3, #20]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	08db      	lsrs	r3, r3, #3
 8001c66:	f003 0303 	and.w	r3, r3, #3
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	691b      	ldr	r3, [r3, #16]
 8001c76:	3b01      	subs	r3, #1
 8001c78:	2b03      	cmp	r3, #3
 8001c7a:	d84f      	bhi.n	8001d1c <HAL_ADC_ConfigChannel+0x28c>
 8001c7c:	a201      	add	r2, pc, #4	; (adr r2, 8001c84 <HAL_ADC_ConfigChannel+0x1f4>)
 8001c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c82:	bf00      	nop
 8001c84:	08001c95 	.word	0x08001c95
 8001c88:	08001cb7 	.word	0x08001cb7
 8001c8c:	08001cd9 	.word	0x08001cd9
 8001c90:	08001cfb 	.word	0x08001cfb
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c9a:	4b9e      	ldr	r3, [pc, #632]	; (8001f14 <HAL_ADC_ConfigChannel+0x484>)
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	683a      	ldr	r2, [r7, #0]
 8001ca0:	6812      	ldr	r2, [r2, #0]
 8001ca2:	0691      	lsls	r1, r2, #26
 8001ca4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	431a      	orrs	r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001cb2:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001cb4:	e07e      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001cbc:	4b95      	ldr	r3, [pc, #596]	; (8001f14 <HAL_ADC_ConfigChannel+0x484>)
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	683a      	ldr	r2, [r7, #0]
 8001cc2:	6812      	ldr	r2, [r2, #0]
 8001cc4:	0691      	lsls	r1, r2, #26
 8001cc6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001cd4:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001cd6:	e06d      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001cde:	4b8d      	ldr	r3, [pc, #564]	; (8001f14 <HAL_ADC_ConfigChannel+0x484>)
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	683a      	ldr	r2, [r7, #0]
 8001ce4:	6812      	ldr	r2, [r2, #0]
 8001ce6:	0691      	lsls	r1, r2, #26
 8001ce8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001cea:	430a      	orrs	r2, r1
 8001cec:	431a      	orrs	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001cf6:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001cf8:	e05c      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001d00:	4b84      	ldr	r3, [pc, #528]	; (8001f14 <HAL_ADC_ConfigChannel+0x484>)
 8001d02:	4013      	ands	r3, r2
 8001d04:	683a      	ldr	r2, [r7, #0]
 8001d06:	6812      	ldr	r2, [r2, #0]
 8001d08:	0691      	lsls	r1, r2, #26
 8001d0a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	431a      	orrs	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001d18:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001d1a:	e04b      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	069b      	lsls	r3, r3, #26
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d107      	bne.n	8001d40 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d3e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d46:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	069b      	lsls	r3, r3, #26
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d107      	bne.n	8001d64 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d62:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d6a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	069b      	lsls	r3, r3, #26
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d107      	bne.n	8001d88 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d86:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d8e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	069b      	lsls	r3, r3, #26
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d10a      	bne.n	8001db2 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001daa:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001dac:	e001      	b.n	8001db2 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001dae:	bf00      	nop
 8001db0:	e000      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001db2:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f003 0303 	and.w	r3, r3, #3
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d108      	bne.n	8001dd4 <HAL_ADC_ConfigChannel+0x344>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0301 	and.w	r3, r3, #1
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d101      	bne.n	8001dd4 <HAL_ADC_ConfigChannel+0x344>
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e000      	b.n	8001dd6 <HAL_ADC_ConfigChannel+0x346>
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f040 810b 	bne.w	8001ff2 <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d00f      	beq.n	8001e04 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2201      	movs	r2, #1
 8001df2:	fa02 f303 	lsl.w	r3, r2, r3
 8001df6:	43da      	mvns	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	400a      	ands	r2, r1
 8001dfe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001e02:	e049      	b.n	8001e98 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2201      	movs	r2, #1
 8001e12:	409a      	lsls	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2b09      	cmp	r3, #9
 8001e24:	d91c      	bls.n	8001e60 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	6999      	ldr	r1, [r3, #24]
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	4613      	mov	r3, r2
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	4413      	add	r3, r2
 8001e36:	3b1b      	subs	r3, #27
 8001e38:	2207      	movs	r2, #7
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	4019      	ands	r1, r3
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	6898      	ldr	r0, [r3, #8]
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	4413      	add	r3, r2
 8001e50:	3b1b      	subs	r3, #27
 8001e52:	fa00 f203 	lsl.w	r2, r0, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	619a      	str	r2, [r3, #24]
 8001e5e:	e01b      	b.n	8001e98 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	6959      	ldr	r1, [r3, #20]
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	1c5a      	adds	r2, r3, #1
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	4413      	add	r3, r2
 8001e72:	2207      	movs	r2, #7
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	4019      	ands	r1, r3
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	6898      	ldr	r0, [r3, #8]
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	1c5a      	adds	r2, r3, #1
 8001e86:	4613      	mov	r3, r2
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	4413      	add	r3, r2
 8001e8c:	fa00 f203 	lsl.w	r2, r0, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	430a      	orrs	r2, r1
 8001e96:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e98:	4b1f      	ldr	r3, [pc, #124]	; (8001f18 <HAL_ADC_ConfigChannel+0x488>)
 8001e9a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2b10      	cmp	r3, #16
 8001ea2:	d105      	bne.n	8001eb0 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001ea4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d015      	beq.n	8001edc <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001eb4:	2b11      	cmp	r3, #17
 8001eb6:	d105      	bne.n	8001ec4 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001eb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d00b      	beq.n	8001edc <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001ec8:	2b12      	cmp	r3, #18
 8001eca:	f040 8092 	bne.w	8001ff2 <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001ece:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	f040 808b 	bne.w	8001ff2 <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ee4:	d102      	bne.n	8001eec <HAL_ADC_ConfigChannel+0x45c>
 8001ee6:	4b0d      	ldr	r3, [pc, #52]	; (8001f1c <HAL_ADC_ConfigChannel+0x48c>)
 8001ee8:	60fb      	str	r3, [r7, #12]
 8001eea:	e002      	b.n	8001ef2 <HAL_ADC_ConfigChannel+0x462>
 8001eec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001ef0:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f003 0303 	and.w	r3, r3, #3
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d10f      	bne.n	8001f20 <HAL_ADC_ConfigChannel+0x490>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d108      	bne.n	8001f20 <HAL_ADC_ConfigChannel+0x490>
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e007      	b.n	8001f22 <HAL_ADC_ConfigChannel+0x492>
 8001f12:	bf00      	nop
 8001f14:	83fff000 	.word	0x83fff000
 8001f18:	50000300 	.word	0x50000300
 8001f1c:	50000100 	.word	0x50000100
 8001f20:	2300      	movs	r3, #0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d150      	bne.n	8001fc8 <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001f26:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d010      	beq.n	8001f4e <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f003 0303 	and.w	r3, r3, #3
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d107      	bne.n	8001f48 <HAL_ADC_ConfigChannel+0x4b8>
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d101      	bne.n	8001f48 <HAL_ADC_ConfigChannel+0x4b8>
 8001f44:	2301      	movs	r3, #1
 8001f46:	e000      	b.n	8001f4a <HAL_ADC_ConfigChannel+0x4ba>
 8001f48:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d13c      	bne.n	8001fc8 <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2b10      	cmp	r3, #16
 8001f54:	d11d      	bne.n	8001f92 <HAL_ADC_ConfigChannel+0x502>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f5e:	d118      	bne.n	8001f92 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001f60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001f68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f6a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f6c:	4b27      	ldr	r3, [pc, #156]	; (800200c <HAL_ADC_ConfigChannel+0x57c>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a27      	ldr	r2, [pc, #156]	; (8002010 <HAL_ADC_ConfigChannel+0x580>)
 8001f72:	fba2 2303 	umull	r2, r3, r2, r3
 8001f76:	0c9a      	lsrs	r2, r3, #18
 8001f78:	4613      	mov	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	4413      	add	r3, r2
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f82:	e002      	b.n	8001f8a <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	3b01      	subs	r3, #1
 8001f88:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d1f9      	bne.n	8001f84 <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001f90:	e02e      	b.n	8001ff0 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2b11      	cmp	r3, #17
 8001f98:	d10b      	bne.n	8001fb2 <HAL_ADC_ConfigChannel+0x522>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fa2:	d106      	bne.n	8001fb2 <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001fa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001fac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fae:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001fb0:	e01e      	b.n	8001ff0 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2b12      	cmp	r3, #18
 8001fb8:	d11a      	bne.n	8001ff0 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001fba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001fc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fc4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001fc6:	e013      	b.n	8001ff0 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fcc:	f043 0220 	orr.w	r2, r3, #32
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001fda:	e00a      	b.n	8001ff2 <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe0:	f043 0220 	orr.w	r2, r3, #32
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001fee:	e000      	b.n	8001ff2 <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001ff0:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001ffa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	376c      	adds	r7, #108	; 0x6c
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	20000000 	.word	0x20000000
 8002010:	431bde83 	.word	0x431bde83

08002014 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002014:	b480      	push	{r7}
 8002016:	b099      	sub	sp, #100	; 0x64
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800201e:	2300      	movs	r3, #0
 8002020:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800202c:	d102      	bne.n	8002034 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800202e:	4b5a      	ldr	r3, [pc, #360]	; (8002198 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8002030:	60bb      	str	r3, [r7, #8]
 8002032:	e002      	b.n	800203a <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8002034:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002038:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d101      	bne.n	8002044 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e0a2      	b.n	800218a <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800204a:	2b01      	cmp	r3, #1
 800204c:	d101      	bne.n	8002052 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800204e:	2302      	movs	r3, #2
 8002050:	e09b      	b.n	800218a <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2201      	movs	r2, #1
 8002056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	f003 0304 	and.w	r3, r3, #4
 8002064:	2b00      	cmp	r3, #0
 8002066:	d17f      	bne.n	8002168 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f003 0304 	and.w	r3, r3, #4
 8002070:	2b00      	cmp	r3, #0
 8002072:	d179      	bne.n	8002168 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002074:	4b49      	ldr	r3, [pc, #292]	; (800219c <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8002076:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d040      	beq.n	8002102 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002080:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	6859      	ldr	r1, [r3, #4]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002092:	035b      	lsls	r3, r3, #13
 8002094:	430b      	orrs	r3, r1
 8002096:	431a      	orrs	r2, r3
 8002098:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800209a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f003 0303 	and.w	r3, r3, #3
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d108      	bne.n	80020bc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0301 	and.w	r3, r3, #1
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d101      	bne.n	80020bc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80020b8:	2301      	movs	r3, #1
 80020ba:	e000      	b.n	80020be <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 80020bc:	2300      	movs	r3, #0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d15c      	bne.n	800217c <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f003 0303 	and.w	r3, r3, #3
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d107      	bne.n	80020de <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d101      	bne.n	80020de <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80020da:	2301      	movs	r3, #1
 80020dc:	e000      	b.n	80020e0 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 80020de:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d14b      	bne.n	800217c <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80020e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80020ec:	f023 030f 	bic.w	r3, r3, #15
 80020f0:	683a      	ldr	r2, [r7, #0]
 80020f2:	6811      	ldr	r1, [r2, #0]
 80020f4:	683a      	ldr	r2, [r7, #0]
 80020f6:	6892      	ldr	r2, [r2, #8]
 80020f8:	430a      	orrs	r2, r1
 80020fa:	431a      	orrs	r2, r3
 80020fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020fe:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002100:	e03c      	b.n	800217c <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002102:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800210a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800210c:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f003 0303 	and.w	r3, r3, #3
 8002118:	2b01      	cmp	r3, #1
 800211a:	d108      	bne.n	800212e <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	2b01      	cmp	r3, #1
 8002128:	d101      	bne.n	800212e <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 800212a:	2301      	movs	r3, #1
 800212c:	e000      	b.n	8002130 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 800212e:	2300      	movs	r3, #0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d123      	bne.n	800217c <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f003 0303 	and.w	r3, r3, #3
 800213c:	2b01      	cmp	r3, #1
 800213e:	d107      	bne.n	8002150 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0301 	and.w	r3, r3, #1
 8002148:	2b01      	cmp	r3, #1
 800214a:	d101      	bne.n	8002150 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 800214c:	2301      	movs	r3, #1
 800214e:	e000      	b.n	8002152 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002150:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002152:	2b00      	cmp	r3, #0
 8002154:	d112      	bne.n	800217c <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002156:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800215e:	f023 030f 	bic.w	r3, r3, #15
 8002162:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002164:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002166:	e009      	b.n	800217c <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216c:	f043 0220 	orr.w	r2, r3, #32
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800217a:	e000      	b.n	800217e <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800217c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002186:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800218a:	4618      	mov	r0, r3
 800218c:	3764      	adds	r7, #100	; 0x64
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	50000100 	.word	0x50000100
 800219c:	50000300 	.word	0x50000300

080021a0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021a8:	2300      	movs	r3, #0
 80021aa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f003 0303 	and.w	r3, r3, #3
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d108      	bne.n	80021cc <ADC_Disable+0x2c>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0301 	and.w	r3, r3, #1
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d101      	bne.n	80021cc <ADC_Disable+0x2c>
 80021c8:	2301      	movs	r3, #1
 80021ca:	e000      	b.n	80021ce <ADC_Disable+0x2e>
 80021cc:	2300      	movs	r3, #0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d047      	beq.n	8002262 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f003 030d 	and.w	r3, r3, #13
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d10f      	bne.n	8002200 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	689a      	ldr	r2, [r3, #8]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f042 0202 	orr.w	r2, r2, #2
 80021ee:	609a      	str	r2, [r3, #8]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2203      	movs	r2, #3
 80021f6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80021f8:	f7ff fa88 	bl	800170c <HAL_GetTick>
 80021fc:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80021fe:	e029      	b.n	8002254 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002204:	f043 0210 	orr.w	r2, r3, #16
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002210:	f043 0201 	orr.w	r2, r3, #1
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e023      	b.n	8002264 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800221c:	f7ff fa76 	bl	800170c <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b02      	cmp	r3, #2
 8002228:	d914      	bls.n	8002254 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f003 0301 	and.w	r3, r3, #1
 8002234:	2b01      	cmp	r3, #1
 8002236:	d10d      	bne.n	8002254 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223c:	f043 0210 	orr.w	r2, r3, #16
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002248:	f043 0201 	orr.w	r2, r3, #1
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e007      	b.n	8002264 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b01      	cmp	r3, #1
 8002260:	d0dc      	beq.n	800221c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002262:	2300      	movs	r3, #0
}
 8002264:	4618      	mov	r0, r3
 8002266:	3710      	adds	r7, #16
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e0ed      	b.n	800245a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b00      	cmp	r3, #0
 8002288:	d102      	bne.n	8002290 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7fe fbd0 	bl	8000a30 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f042 0201 	orr.w	r2, r2, #1
 800229e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022a0:	f7ff fa34 	bl	800170c <HAL_GetTick>
 80022a4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80022a6:	e012      	b.n	80022ce <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80022a8:	f7ff fa30 	bl	800170c <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b0a      	cmp	r3, #10
 80022b4:	d90b      	bls.n	80022ce <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2205      	movs	r2, #5
 80022c6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e0c5      	b.n	800245a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d0e5      	beq.n	80022a8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f022 0202 	bic.w	r2, r2, #2
 80022ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022ec:	f7ff fa0e 	bl	800170c <HAL_GetTick>
 80022f0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80022f2:	e012      	b.n	800231a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80022f4:	f7ff fa0a 	bl	800170c <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b0a      	cmp	r3, #10
 8002300:	d90b      	bls.n	800231a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002306:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2205      	movs	r2, #5
 8002312:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e09f      	b.n	800245a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	2b00      	cmp	r3, #0
 8002326:	d1e5      	bne.n	80022f4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	7e1b      	ldrb	r3, [r3, #24]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d108      	bne.n	8002342 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	e007      	b.n	8002352 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002350:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	7e5b      	ldrb	r3, [r3, #25]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d108      	bne.n	800236c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002368:	601a      	str	r2, [r3, #0]
 800236a:	e007      	b.n	800237c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800237a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	7e9b      	ldrb	r3, [r3, #26]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d108      	bne.n	8002396 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f042 0220 	orr.w	r2, r2, #32
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	e007      	b.n	80023a6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f022 0220 	bic.w	r2, r2, #32
 80023a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	7edb      	ldrb	r3, [r3, #27]
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d108      	bne.n	80023c0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f022 0210 	bic.w	r2, r2, #16
 80023bc:	601a      	str	r2, [r3, #0]
 80023be:	e007      	b.n	80023d0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f042 0210 	orr.w	r2, r2, #16
 80023ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	7f1b      	ldrb	r3, [r3, #28]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d108      	bne.n	80023ea <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f042 0208 	orr.w	r2, r2, #8
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	e007      	b.n	80023fa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f022 0208 	bic.w	r2, r2, #8
 80023f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	7f5b      	ldrb	r3, [r3, #29]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d108      	bne.n	8002414 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f042 0204 	orr.w	r2, r2, #4
 8002410:	601a      	str	r2, [r3, #0]
 8002412:	e007      	b.n	8002424 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f022 0204 	bic.w	r2, r2, #4
 8002422:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689a      	ldr	r2, [r3, #8]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	431a      	orrs	r2, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	431a      	orrs	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	695b      	ldr	r3, [r3, #20]
 8002438:	ea42 0103 	orr.w	r1, r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	1e5a      	subs	r2, r3, #1
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	430a      	orrs	r2, r1
 8002448:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3710      	adds	r7, #16
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
	...

08002464 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002464:	b480      	push	{r7}
 8002466:	b085      	sub	sp, #20
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f003 0307 	and.w	r3, r3, #7
 8002472:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002474:	4b0c      	ldr	r3, [pc, #48]	; (80024a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800247a:	68ba      	ldr	r2, [r7, #8]
 800247c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002480:	4013      	ands	r3, r2
 8002482:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800248c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002490:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002494:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002496:	4a04      	ldr	r2, [pc, #16]	; (80024a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	60d3      	str	r3, [r2, #12]
}
 800249c:	bf00      	nop
 800249e:	3714      	adds	r7, #20
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr
 80024a8:	e000ed00 	.word	0xe000ed00

080024ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024b0:	4b04      	ldr	r3, [pc, #16]	; (80024c4 <__NVIC_GetPriorityGrouping+0x18>)
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	0a1b      	lsrs	r3, r3, #8
 80024b6:	f003 0307 	and.w	r3, r3, #7
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr
 80024c4:	e000ed00 	.word	0xe000ed00

080024c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	4603      	mov	r3, r0
 80024d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	db0b      	blt.n	80024f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024da:	79fb      	ldrb	r3, [r7, #7]
 80024dc:	f003 021f 	and.w	r2, r3, #31
 80024e0:	4907      	ldr	r1, [pc, #28]	; (8002500 <__NVIC_EnableIRQ+0x38>)
 80024e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e6:	095b      	lsrs	r3, r3, #5
 80024e8:	2001      	movs	r0, #1
 80024ea:	fa00 f202 	lsl.w	r2, r0, r2
 80024ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024f2:	bf00      	nop
 80024f4:	370c      	adds	r7, #12
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	e000e100 	.word	0xe000e100

08002504 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	4603      	mov	r3, r0
 800250c:	6039      	str	r1, [r7, #0]
 800250e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002514:	2b00      	cmp	r3, #0
 8002516:	db0a      	blt.n	800252e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	b2da      	uxtb	r2, r3
 800251c:	490c      	ldr	r1, [pc, #48]	; (8002550 <__NVIC_SetPriority+0x4c>)
 800251e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002522:	0112      	lsls	r2, r2, #4
 8002524:	b2d2      	uxtb	r2, r2
 8002526:	440b      	add	r3, r1
 8002528:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800252c:	e00a      	b.n	8002544 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	b2da      	uxtb	r2, r3
 8002532:	4908      	ldr	r1, [pc, #32]	; (8002554 <__NVIC_SetPriority+0x50>)
 8002534:	79fb      	ldrb	r3, [r7, #7]
 8002536:	f003 030f 	and.w	r3, r3, #15
 800253a:	3b04      	subs	r3, #4
 800253c:	0112      	lsls	r2, r2, #4
 800253e:	b2d2      	uxtb	r2, r2
 8002540:	440b      	add	r3, r1
 8002542:	761a      	strb	r2, [r3, #24]
}
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr
 8002550:	e000e100 	.word	0xe000e100
 8002554:	e000ed00 	.word	0xe000ed00

08002558 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002558:	b480      	push	{r7}
 800255a:	b089      	sub	sp, #36	; 0x24
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f003 0307 	and.w	r3, r3, #7
 800256a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	f1c3 0307 	rsb	r3, r3, #7
 8002572:	2b04      	cmp	r3, #4
 8002574:	bf28      	it	cs
 8002576:	2304      	movcs	r3, #4
 8002578:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	3304      	adds	r3, #4
 800257e:	2b06      	cmp	r3, #6
 8002580:	d902      	bls.n	8002588 <NVIC_EncodePriority+0x30>
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	3b03      	subs	r3, #3
 8002586:	e000      	b.n	800258a <NVIC_EncodePriority+0x32>
 8002588:	2300      	movs	r3, #0
 800258a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800258c:	f04f 32ff 	mov.w	r2, #4294967295
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	fa02 f303 	lsl.w	r3, r2, r3
 8002596:	43da      	mvns	r2, r3
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	401a      	ands	r2, r3
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025a0:	f04f 31ff 	mov.w	r1, #4294967295
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	fa01 f303 	lsl.w	r3, r1, r3
 80025aa:	43d9      	mvns	r1, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025b0:	4313      	orrs	r3, r2
         );
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3724      	adds	r7, #36	; 0x24
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
	...

080025c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	3b01      	subs	r3, #1
 80025cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025d0:	d301      	bcc.n	80025d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025d2:	2301      	movs	r3, #1
 80025d4:	e00f      	b.n	80025f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025d6:	4a0a      	ldr	r2, [pc, #40]	; (8002600 <SysTick_Config+0x40>)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	3b01      	subs	r3, #1
 80025dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025de:	210f      	movs	r1, #15
 80025e0:	f04f 30ff 	mov.w	r0, #4294967295
 80025e4:	f7ff ff8e 	bl	8002504 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025e8:	4b05      	ldr	r3, [pc, #20]	; (8002600 <SysTick_Config+0x40>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025ee:	4b04      	ldr	r3, [pc, #16]	; (8002600 <SysTick_Config+0x40>)
 80025f0:	2207      	movs	r2, #7
 80025f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	e000e010 	.word	0xe000e010

08002604 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f7ff ff29 	bl	8002464 <__NVIC_SetPriorityGrouping>
}
 8002612:	bf00      	nop
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	b086      	sub	sp, #24
 800261e:	af00      	add	r7, sp, #0
 8002620:	4603      	mov	r3, r0
 8002622:	60b9      	str	r1, [r7, #8]
 8002624:	607a      	str	r2, [r7, #4]
 8002626:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002628:	2300      	movs	r3, #0
 800262a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800262c:	f7ff ff3e 	bl	80024ac <__NVIC_GetPriorityGrouping>
 8002630:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	68b9      	ldr	r1, [r7, #8]
 8002636:	6978      	ldr	r0, [r7, #20]
 8002638:	f7ff ff8e 	bl	8002558 <NVIC_EncodePriority>
 800263c:	4602      	mov	r2, r0
 800263e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002642:	4611      	mov	r1, r2
 8002644:	4618      	mov	r0, r3
 8002646:	f7ff ff5d 	bl	8002504 <__NVIC_SetPriority>
}
 800264a:	bf00      	nop
 800264c:	3718      	adds	r7, #24
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b082      	sub	sp, #8
 8002656:	af00      	add	r7, sp, #0
 8002658:	4603      	mov	r3, r0
 800265a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800265c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002660:	4618      	mov	r0, r3
 8002662:	f7ff ff31 	bl	80024c8 <__NVIC_EnableIRQ>
}
 8002666:	bf00      	nop
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800266e:	b580      	push	{r7, lr}
 8002670:	b082      	sub	sp, #8
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f7ff ffa2 	bl	80025c0 <SysTick_Config>
 800267c:	4603      	mov	r3, r0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002686:	b580      	push	{r7, lr}
 8002688:	b084      	sub	sp, #16
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800268e:	2300      	movs	r3, #0
 8002690:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d101      	bne.n	800269c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e037      	b.n	800270c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2202      	movs	r2, #2
 80026a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80026b2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80026b6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80026c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	695b      	ldr	r3, [r3, #20]
 80026d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	69db      	ldr	r3, [r3, #28]
 80026de:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80026e0:	68fa      	ldr	r2, [r7, #12]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68fa      	ldr	r2, [r7, #12]
 80026ec:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 f98c 	bl	8002a0c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2201      	movs	r2, #1
 80026fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800270a:	2300      	movs	r3, #0
}  
 800270c:	4618      	mov	r0, r3
 800270e:	3710      	adds	r7, #16
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
 8002720:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002722:	2300      	movs	r3, #0
 8002724:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f893 3020 	ldrb.w	r3, [r3, #32]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d101      	bne.n	8002734 <HAL_DMA_Start_IT+0x20>
 8002730:	2302      	movs	r3, #2
 8002732:	e04a      	b.n	80027ca <HAL_DMA_Start_IT+0xb6>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002742:	2b01      	cmp	r3, #1
 8002744:	d13a      	bne.n	80027bc <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2202      	movs	r2, #2
 800274a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2200      	movs	r2, #0
 8002752:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f022 0201 	bic.w	r2, r2, #1
 8002762:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	68b9      	ldr	r1, [r7, #8]
 800276a:	68f8      	ldr	r0, [r7, #12]
 800276c:	f000 f91f 	bl	80029ae <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002774:	2b00      	cmp	r3, #0
 8002776:	d008      	beq.n	800278a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f042 020e 	orr.w	r2, r2, #14
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	e00f      	b.n	80027aa <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f042 020a 	orr.w	r2, r2, #10
 8002798:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f022 0204 	bic.w	r2, r2, #4
 80027a8:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f042 0201 	orr.w	r2, r2, #1
 80027b8:	601a      	str	r2, [r3, #0]
 80027ba:	e005      	b.n	80027c8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80027c4:	2302      	movs	r3, #2
 80027c6:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80027c8:	7dfb      	ldrb	r3, [r7, #23]
} 
 80027ca:	4618      	mov	r0, r3
 80027cc:	3718      	adds	r7, #24
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b084      	sub	sp, #16
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027da:	2300      	movs	r3, #0
 80027dc:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d005      	beq.n	80027f4 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2204      	movs	r2, #4
 80027ec:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	73fb      	strb	r3, [r7, #15]
 80027f2:	e027      	b.n	8002844 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f022 020e 	bic.w	r2, r2, #14
 8002802:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f022 0201 	bic.w	r2, r2, #1
 8002812:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800281c:	2101      	movs	r1, #1
 800281e:	fa01 f202 	lsl.w	r2, r1, r2
 8002822:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002838:	2b00      	cmp	r3, #0
 800283a:	d003      	beq.n	8002844 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	4798      	blx	r3
    } 
  }
  return status;
 8002844:	7bfb      	ldrb	r3, [r7, #15]
}
 8002846:	4618      	mov	r0, r3
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b084      	sub	sp, #16
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	2204      	movs	r2, #4
 800286c:	409a      	lsls	r2, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	4013      	ands	r3, r2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d024      	beq.n	80028c0 <HAL_DMA_IRQHandler+0x72>
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	f003 0304 	and.w	r3, r3, #4
 800287c:	2b00      	cmp	r3, #0
 800287e:	d01f      	beq.n	80028c0 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0320 	and.w	r3, r3, #32
 800288a:	2b00      	cmp	r3, #0
 800288c:	d107      	bne.n	800289e <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f022 0204 	bic.w	r2, r2, #4
 800289c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028a6:	2104      	movs	r1, #4
 80028a8:	fa01 f202 	lsl.w	r2, r1, r2
 80028ac:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d06a      	beq.n	800298c <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80028be:	e065      	b.n	800298c <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c4:	2202      	movs	r2, #2
 80028c6:	409a      	lsls	r2, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	4013      	ands	r3, r2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d02c      	beq.n	800292a <HAL_DMA_IRQHandler+0xdc>
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d027      	beq.n	800292a <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0320 	and.w	r3, r3, #32
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d10b      	bne.n	8002900 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f022 020a 	bic.w	r2, r2, #10
 80028f6:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002908:	2102      	movs	r1, #2
 800290a:	fa01 f202 	lsl.w	r2, r1, r2
 800290e:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800291c:	2b00      	cmp	r3, #0
 800291e:	d035      	beq.n	800298c <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002928:	e030      	b.n	800298c <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292e:	2208      	movs	r2, #8
 8002930:	409a      	lsls	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	4013      	ands	r3, r2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d028      	beq.n	800298c <HAL_DMA_IRQHandler+0x13e>
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	f003 0308 	and.w	r3, r3, #8
 8002940:	2b00      	cmp	r3, #0
 8002942:	d023      	beq.n	800298c <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f022 020e 	bic.w	r2, r2, #14
 8002952:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800295c:	2101      	movs	r1, #1
 800295e:	fa01 f202 	lsl.w	r2, r1, r2
 8002962:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2201      	movs	r2, #1
 800296e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	2b00      	cmp	r3, #0
 8002980:	d004      	beq.n	800298c <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	4798      	blx	r3
    }
  }
}  
 800298a:	e7ff      	b.n	800298c <HAL_DMA_IRQHandler+0x13e>
 800298c:	bf00      	nop
 800298e:	3710      	adds	r7, #16
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr

080029ae <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029ae:	b480      	push	{r7}
 80029b0:	b085      	sub	sp, #20
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	60f8      	str	r0, [r7, #12]
 80029b6:	60b9      	str	r1, [r7, #8]
 80029b8:	607a      	str	r2, [r7, #4]
 80029ba:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029c4:	2101      	movs	r1, #1
 80029c6:	fa01 f202 	lsl.w	r2, r1, r2
 80029ca:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	683a      	ldr	r2, [r7, #0]
 80029d2:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	2b10      	cmp	r3, #16
 80029da:	d108      	bne.n	80029ee <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68ba      	ldr	r2, [r7, #8]
 80029ea:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80029ec:	e007      	b.n	80029fe <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	68ba      	ldr	r2, [r7, #8]
 80029f4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	60da      	str	r2, [r3, #12]
}
 80029fe:	bf00      	nop
 8002a00:	3714      	adds	r7, #20
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
	...

08002a0c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	461a      	mov	r2, r3
 8002a1a:	4b09      	ldr	r3, [pc, #36]	; (8002a40 <DMA_CalcBaseAndBitshift+0x34>)
 8002a1c:	4413      	add	r3, r2
 8002a1e:	4a09      	ldr	r2, [pc, #36]	; (8002a44 <DMA_CalcBaseAndBitshift+0x38>)
 8002a20:	fba2 2303 	umull	r2, r3, r2, r3
 8002a24:	091b      	lsrs	r3, r3, #4
 8002a26:	009a      	lsls	r2, r3, #2
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a06      	ldr	r2, [pc, #24]	; (8002a48 <DMA_CalcBaseAndBitshift+0x3c>)
 8002a30:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002a32:	bf00      	nop
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	bffdfff8 	.word	0xbffdfff8
 8002a44:	cccccccd 	.word	0xcccccccd
 8002a48:	40020000 	.word	0x40020000

08002a4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b087      	sub	sp, #28
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a56:	2300      	movs	r3, #0
 8002a58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a5a:	e14e      	b.n	8002cfa <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	2101      	movs	r1, #1
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	fa01 f303 	lsl.w	r3, r1, r3
 8002a68:	4013      	ands	r3, r2
 8002a6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	f000 8140 	beq.w	8002cf4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f003 0303 	and.w	r3, r3, #3
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d005      	beq.n	8002a8c <HAL_GPIO_Init+0x40>
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f003 0303 	and.w	r3, r3, #3
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d130      	bne.n	8002aee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	2203      	movs	r2, #3
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	68da      	ldr	r2, [r3, #12]
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aca:	43db      	mvns	r3, r3
 8002acc:	693a      	ldr	r2, [r7, #16]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	091b      	lsrs	r3, r3, #4
 8002ad8:	f003 0201 	and.w	r2, r3, #1
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f003 0303 	and.w	r3, r3, #3
 8002af6:	2b03      	cmp	r3, #3
 8002af8:	d017      	beq.n	8002b2a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	005b      	lsls	r3, r3, #1
 8002b04:	2203      	movs	r2, #3
 8002b06:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0a:	43db      	mvns	r3, r3
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	4013      	ands	r3, r2
 8002b10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	689a      	ldr	r2, [r3, #8]
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1e:	693a      	ldr	r2, [r7, #16]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	693a      	ldr	r2, [r7, #16]
 8002b28:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f003 0303 	and.w	r3, r3, #3
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d123      	bne.n	8002b7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	08da      	lsrs	r2, r3, #3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	3208      	adds	r2, #8
 8002b3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	f003 0307 	and.w	r3, r3, #7
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	220f      	movs	r2, #15
 8002b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b52:	43db      	mvns	r3, r3
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	4013      	ands	r3, r2
 8002b58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	691a      	ldr	r2, [r3, #16]
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	f003 0307 	and.w	r3, r3, #7
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6a:	693a      	ldr	r2, [r7, #16]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	08da      	lsrs	r2, r3, #3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	3208      	adds	r2, #8
 8002b78:	6939      	ldr	r1, [r7, #16]
 8002b7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	2203      	movs	r2, #3
 8002b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8e:	43db      	mvns	r3, r3
 8002b90:	693a      	ldr	r2, [r7, #16]
 8002b92:	4013      	ands	r3, r2
 8002b94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f003 0203 	and.w	r2, r3, #3
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba6:	693a      	ldr	r2, [r7, #16]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	693a      	ldr	r2, [r7, #16]
 8002bb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f000 809a 	beq.w	8002cf4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bc0:	4b55      	ldr	r3, [pc, #340]	; (8002d18 <HAL_GPIO_Init+0x2cc>)
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	4a54      	ldr	r2, [pc, #336]	; (8002d18 <HAL_GPIO_Init+0x2cc>)
 8002bc6:	f043 0301 	orr.w	r3, r3, #1
 8002bca:	6193      	str	r3, [r2, #24]
 8002bcc:	4b52      	ldr	r3, [pc, #328]	; (8002d18 <HAL_GPIO_Init+0x2cc>)
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	f003 0301 	and.w	r3, r3, #1
 8002bd4:	60bb      	str	r3, [r7, #8]
 8002bd6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002bd8:	4a50      	ldr	r2, [pc, #320]	; (8002d1c <HAL_GPIO_Init+0x2d0>)
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	089b      	lsrs	r3, r3, #2
 8002bde:	3302      	adds	r3, #2
 8002be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002be4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	f003 0303 	and.w	r3, r3, #3
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	220f      	movs	r2, #15
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	43db      	mvns	r3, r3
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002c02:	d013      	beq.n	8002c2c <HAL_GPIO_Init+0x1e0>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4a46      	ldr	r2, [pc, #280]	; (8002d20 <HAL_GPIO_Init+0x2d4>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d00d      	beq.n	8002c28 <HAL_GPIO_Init+0x1dc>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a45      	ldr	r2, [pc, #276]	; (8002d24 <HAL_GPIO_Init+0x2d8>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d007      	beq.n	8002c24 <HAL_GPIO_Init+0x1d8>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4a44      	ldr	r2, [pc, #272]	; (8002d28 <HAL_GPIO_Init+0x2dc>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d101      	bne.n	8002c20 <HAL_GPIO_Init+0x1d4>
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e006      	b.n	8002c2e <HAL_GPIO_Init+0x1e2>
 8002c20:	2305      	movs	r3, #5
 8002c22:	e004      	b.n	8002c2e <HAL_GPIO_Init+0x1e2>
 8002c24:	2302      	movs	r3, #2
 8002c26:	e002      	b.n	8002c2e <HAL_GPIO_Init+0x1e2>
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e000      	b.n	8002c2e <HAL_GPIO_Init+0x1e2>
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	f002 0203 	and.w	r2, r2, #3
 8002c34:	0092      	lsls	r2, r2, #2
 8002c36:	4093      	lsls	r3, r2
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c3e:	4937      	ldr	r1, [pc, #220]	; (8002d1c <HAL_GPIO_Init+0x2d0>)
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	089b      	lsrs	r3, r3, #2
 8002c44:	3302      	adds	r3, #2
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c4c:	4b37      	ldr	r3, [pc, #220]	; (8002d2c <HAL_GPIO_Init+0x2e0>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	43db      	mvns	r3, r3
 8002c56:	693a      	ldr	r2, [r7, #16]
 8002c58:	4013      	ands	r3, r2
 8002c5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d003      	beq.n	8002c70 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002c68:	693a      	ldr	r2, [r7, #16]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002c70:	4a2e      	ldr	r2, [pc, #184]	; (8002d2c <HAL_GPIO_Init+0x2e0>)
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c76:	4b2d      	ldr	r3, [pc, #180]	; (8002d2c <HAL_GPIO_Init+0x2e0>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	43db      	mvns	r3, r3
 8002c80:	693a      	ldr	r2, [r7, #16]
 8002c82:	4013      	ands	r3, r2
 8002c84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d003      	beq.n	8002c9a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002c9a:	4a24      	ldr	r2, [pc, #144]	; (8002d2c <HAL_GPIO_Init+0x2e0>)
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ca0:	4b22      	ldr	r3, [pc, #136]	; (8002d2c <HAL_GPIO_Init+0x2e0>)
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	43db      	mvns	r3, r3
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	4013      	ands	r3, r2
 8002cae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d003      	beq.n	8002cc4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002cc4:	4a19      	ldr	r2, [pc, #100]	; (8002d2c <HAL_GPIO_Init+0x2e0>)
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cca:	4b18      	ldr	r3, [pc, #96]	; (8002d2c <HAL_GPIO_Init+0x2e0>)
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	43db      	mvns	r3, r3
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d003      	beq.n	8002cee <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002ce6:	693a      	ldr	r2, [r7, #16]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002cee:	4a0f      	ldr	r2, [pc, #60]	; (8002d2c <HAL_GPIO_Init+0x2e0>)
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	fa22 f303 	lsr.w	r3, r2, r3
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	f47f aea9 	bne.w	8002a5c <HAL_GPIO_Init+0x10>
  }
}
 8002d0a:	bf00      	nop
 8002d0c:	bf00      	nop
 8002d0e:	371c      	adds	r7, #28
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr
 8002d18:	40021000 	.word	0x40021000
 8002d1c:	40010000 	.word	0x40010000
 8002d20:	48000400 	.word	0x48000400
 8002d24:	48000800 	.word	0x48000800
 8002d28:	48000c00 	.word	0x48000c00
 8002d2c:	40010400 	.word	0x40010400

08002d30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	460b      	mov	r3, r1
 8002d3a:	807b      	strh	r3, [r7, #2]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d40:	787b      	ldrb	r3, [r7, #1]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d003      	beq.n	8002d4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d46:	887a      	ldrh	r2, [r7, #2]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d4c:	e002      	b.n	8002d54 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d4e:	887a      	ldrh	r2, [r7, #2]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002d54:	bf00      	nop
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e081      	b.n	8002e76 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d106      	bne.n	8002d8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f7fd ff76 	bl	8000c78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2224      	movs	r2, #36	; 0x24
 8002d90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f022 0201 	bic.w	r2, r2, #1
 8002da2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685a      	ldr	r2, [r3, #4]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002db0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	689a      	ldr	r2, [r3, #8]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dc0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d107      	bne.n	8002dda <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	689a      	ldr	r2, [r3, #8]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dd6:	609a      	str	r2, [r3, #8]
 8002dd8:	e006      	b.n	8002de8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	689a      	ldr	r2, [r3, #8]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002de6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d104      	bne.n	8002dfa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002df8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	6812      	ldr	r2, [r2, #0]
 8002e04:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e0c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68da      	ldr	r2, [r3, #12]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e1c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	691a      	ldr	r2, [r3, #16]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	430a      	orrs	r2, r1
 8002e36:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	69d9      	ldr	r1, [r3, #28]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a1a      	ldr	r2, [r3, #32]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	430a      	orrs	r2, r1
 8002e46:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f042 0201 	orr.w	r2, r2, #1
 8002e56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2220      	movs	r2, #32
 8002e62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
	...

08002e80 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b088      	sub	sp, #32
 8002e84:	af02      	add	r7, sp, #8
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	4608      	mov	r0, r1
 8002e8a:	4611      	mov	r1, r2
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	4603      	mov	r3, r0
 8002e90:	817b      	strh	r3, [r7, #10]
 8002e92:	460b      	mov	r3, r1
 8002e94:	813b      	strh	r3, [r7, #8]
 8002e96:	4613      	mov	r3, r2
 8002e98:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b20      	cmp	r3, #32
 8002ea4:	f040 80f9 	bne.w	800309a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ea8:	6a3b      	ldr	r3, [r7, #32]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d002      	beq.n	8002eb4 <HAL_I2C_Mem_Write+0x34>
 8002eae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d105      	bne.n	8002ec0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002eba:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e0ed      	b.n	800309c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d101      	bne.n	8002ece <HAL_I2C_Mem_Write+0x4e>
 8002eca:	2302      	movs	r3, #2
 8002ecc:	e0e6      	b.n	800309c <HAL_I2C_Mem_Write+0x21c>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ed6:	f7fe fc19 	bl	800170c <HAL_GetTick>
 8002eda:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	9300      	str	r3, [sp, #0]
 8002ee0:	2319      	movs	r3, #25
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ee8:	68f8      	ldr	r0, [r7, #12]
 8002eea:	f001 fac6 	bl	800447a <I2C_WaitOnFlagUntilTimeout>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d001      	beq.n	8002ef8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e0d1      	b.n	800309c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2221      	movs	r2, #33	; 0x21
 8002efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2240      	movs	r2, #64	; 0x40
 8002f04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6a3a      	ldr	r2, [r7, #32]
 8002f12:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002f18:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f20:	88f8      	ldrh	r0, [r7, #6]
 8002f22:	893a      	ldrh	r2, [r7, #8]
 8002f24:	8979      	ldrh	r1, [r7, #10]
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	9301      	str	r3, [sp, #4]
 8002f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f2c:	9300      	str	r3, [sp, #0]
 8002f2e:	4603      	mov	r3, r0
 8002f30:	68f8      	ldr	r0, [r7, #12]
 8002f32:	f000 fd69 	bl	8003a08 <I2C_RequestMemoryWrite>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d005      	beq.n	8002f48 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e0a9      	b.n	800309c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	2bff      	cmp	r3, #255	; 0xff
 8002f50:	d90e      	bls.n	8002f70 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	22ff      	movs	r2, #255	; 0xff
 8002f56:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f5c:	b2da      	uxtb	r2, r3
 8002f5e:	8979      	ldrh	r1, [r7, #10]
 8002f60:	2300      	movs	r3, #0
 8002f62:	9300      	str	r3, [sp, #0]
 8002f64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f68:	68f8      	ldr	r0, [r7, #12]
 8002f6a:	f001 fbb9 	bl	80046e0 <I2C_TransferConfig>
 8002f6e:	e00f      	b.n	8002f90 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f74:	b29a      	uxth	r2, r3
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f7e:	b2da      	uxtb	r2, r3
 8002f80:	8979      	ldrh	r1, [r7, #10]
 8002f82:	2300      	movs	r3, #0
 8002f84:	9300      	str	r3, [sp, #0]
 8002f86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f8a:	68f8      	ldr	r0, [r7, #12]
 8002f8c:	f001 fba8 	bl	80046e0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f90:	697a      	ldr	r2, [r7, #20]
 8002f92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f94:	68f8      	ldr	r0, [r7, #12]
 8002f96:	f001 fab0 	bl	80044fa <I2C_WaitOnTXISFlagUntilTimeout>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e07b      	b.n	800309c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa8:	781a      	ldrb	r2, [r3, #0]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb4:	1c5a      	adds	r2, r3, #1
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	b29a      	uxth	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d034      	beq.n	8003048 <HAL_I2C_Mem_Write+0x1c8>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d130      	bne.n	8003048 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	9300      	str	r3, [sp, #0]
 8002fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fec:	2200      	movs	r2, #0
 8002fee:	2180      	movs	r1, #128	; 0x80
 8002ff0:	68f8      	ldr	r0, [r7, #12]
 8002ff2:	f001 fa42 	bl	800447a <I2C_WaitOnFlagUntilTimeout>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d001      	beq.n	8003000 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e04d      	b.n	800309c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003004:	b29b      	uxth	r3, r3
 8003006:	2bff      	cmp	r3, #255	; 0xff
 8003008:	d90e      	bls.n	8003028 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	22ff      	movs	r2, #255	; 0xff
 800300e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003014:	b2da      	uxtb	r2, r3
 8003016:	8979      	ldrh	r1, [r7, #10]
 8003018:	2300      	movs	r3, #0
 800301a:	9300      	str	r3, [sp, #0]
 800301c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003020:	68f8      	ldr	r0, [r7, #12]
 8003022:	f001 fb5d 	bl	80046e0 <I2C_TransferConfig>
 8003026:	e00f      	b.n	8003048 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800302c:	b29a      	uxth	r2, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003036:	b2da      	uxtb	r2, r3
 8003038:	8979      	ldrh	r1, [r7, #10]
 800303a:	2300      	movs	r3, #0
 800303c:	9300      	str	r3, [sp, #0]
 800303e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003042:	68f8      	ldr	r0, [r7, #12]
 8003044:	f001 fb4c 	bl	80046e0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800304c:	b29b      	uxth	r3, r3
 800304e:	2b00      	cmp	r3, #0
 8003050:	d19e      	bne.n	8002f90 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f001 fa8f 	bl	800457a <I2C_WaitOnSTOPFlagUntilTimeout>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e01a      	b.n	800309c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2220      	movs	r2, #32
 800306c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	6859      	ldr	r1, [r3, #4]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	4b0a      	ldr	r3, [pc, #40]	; (80030a4 <HAL_I2C_Mem_Write+0x224>)
 800307a:	400b      	ands	r3, r1
 800307c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2220      	movs	r2, #32
 8003082:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003096:	2300      	movs	r3, #0
 8003098:	e000      	b.n	800309c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800309a:	2302      	movs	r3, #2
  }
}
 800309c:	4618      	mov	r0, r3
 800309e:	3718      	adds	r7, #24
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	fe00e800 	.word	0xfe00e800

080030a8 <HAL_I2C_Mem_Write_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                        uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b08a      	sub	sp, #40	; 0x28
 80030ac:	af02      	add	r7, sp, #8
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	4608      	mov	r0, r1
 80030b2:	4611      	mov	r1, r2
 80030b4:	461a      	mov	r2, r3
 80030b6:	4603      	mov	r3, r0
 80030b8:	817b      	strh	r3, [r7, #10]
 80030ba:	460b      	mov	r3, r1
 80030bc:	813b      	strh	r3, [r7, #8]
 80030be:	4613      	mov	r3, r2
 80030c0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b20      	cmp	r3, #32
 80030cc:	f040 80d5 	bne.w	800327a <HAL_I2C_Mem_Write_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 80030d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d002      	beq.n	80030dc <HAL_I2C_Mem_Write_DMA+0x34>
 80030d6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d105      	bne.n	80030e8 <HAL_I2C_Mem_Write_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030e2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e0c9      	b.n	800327c <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030f6:	d101      	bne.n	80030fc <HAL_I2C_Mem_Write_DMA+0x54>
    {
      return HAL_BUSY;
 80030f8:	2302      	movs	r3, #2
 80030fa:	e0bf      	b.n	800327c <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003102:	2b01      	cmp	r3, #1
 8003104:	d101      	bne.n	800310a <HAL_I2C_Mem_Write_DMA+0x62>
 8003106:	2302      	movs	r3, #2
 8003108:	e0b8      	b.n	800327c <HAL_I2C_Mem_Write_DMA+0x1d4>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2201      	movs	r2, #1
 800310e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003112:	f7fe fafb 	bl	800170c <HAL_GetTick>
 8003116:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2221      	movs	r2, #33	; 0x21
 800311c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2240      	movs	r2, #64	; 0x40
 8003124:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2200      	movs	r2, #0
 800312c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003132:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8003138:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	4a51      	ldr	r2, [pc, #324]	; (8003284 <HAL_I2C_Mem_Write_DMA+0x1dc>)
 800313e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	4a51      	ldr	r2, [pc, #324]	; (8003288 <HAL_I2C_Mem_Write_DMA+0x1e0>)
 8003144:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800314a:	b29b      	uxth	r3, r3
 800314c:	2bff      	cmp	r3, #255	; 0xff
 800314e:	d906      	bls.n	800315e <HAL_I2C_Mem_Write_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	22ff      	movs	r2, #255	; 0xff
 8003154:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8003156:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800315a:	61fb      	str	r3, [r7, #28]
 800315c:	e007      	b.n	800316e <HAL_I2C_Mem_Write_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003162:	b29a      	uxth	r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003168:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800316c:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart)
 800316e:	88f8      	ldrh	r0, [r7, #6]
 8003170:	893a      	ldrh	r2, [r7, #8]
 8003172:	8979      	ldrh	r1, [r7, #10]
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	9301      	str	r3, [sp, #4]
 8003178:	2319      	movs	r3, #25
 800317a:	9300      	str	r3, [sp, #0]
 800317c:	4603      	mov	r3, r0
 800317e:	68f8      	ldr	r0, [r7, #12]
 8003180:	f000 fc42 	bl	8003a08 <I2C_RequestMemoryWrite>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d005      	beq.n	8003196 <HAL_I2C_Mem_Write_DMA+0xee>
        != HAL_OK)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e072      	b.n	800327c <HAL_I2C_Mem_Write_DMA+0x1d4>
    }


    if (hi2c->hdmatx != NULL)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800319a:	2b00      	cmp	r3, #0
 800319c:	d020      	beq.n	80031e0 <HAL_I2C_Mem_Write_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a2:	4a3a      	ldr	r2, [pc, #232]	; (800328c <HAL_I2C_Mem_Write_DMA+0x1e4>)
 80031a4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031aa:	4a39      	ldr	r2, [pc, #228]	; (8003290 <HAL_I2C_Mem_Write_DMA+0x1e8>)
 80031ac:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b2:	2200      	movs	r2, #0
 80031b4:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->hdmatx->XferAbortCallback = NULL;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ba:	2200      	movs	r2, #0
 80031bc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80031c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	3328      	adds	r3, #40	; 0x28
 80031ca:	461a      	mov	r2, r3
                                       hi2c->XferSize);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80031d0:	f7ff faa0 	bl	8002714 <HAL_DMA_Start_IT>
 80031d4:	4603      	mov	r3, r0
 80031d6:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 80031d8:	7dfb      	ldrb	r3, [r7, #23]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d139      	bne.n	8003252 <HAL_I2C_Mem_Write_DMA+0x1aa>
 80031de:	e013      	b.n	8003208 <HAL_I2C_Mem_Write_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2220      	movs	r2, #32
 80031e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e039      	b.n	800327c <HAL_I2C_Mem_Write_DMA+0x1d4>
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800320c:	b2da      	uxtb	r2, r3
 800320e:	8979      	ldrh	r1, [r7, #10]
 8003210:	2300      	movs	r3, #0
 8003212:	9300      	str	r3, [sp, #0]
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	68f8      	ldr	r0, [r7, #12]
 8003218:	f001 fa62 	bl	80046e0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003220:	b29a      	uxth	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	b29a      	uxth	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8003236:	2110      	movs	r1, #16
 8003238:	68f8      	ldr	r0, [r7, #12]
 800323a:	f001 fa7f 	bl	800473c <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800324c:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 800324e:	2300      	movs	r3, #0
 8003250:	e014      	b.n	800327c <HAL_I2C_Mem_Write_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2220      	movs	r2, #32
 8003256:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003266:	f043 0210 	orr.w	r2, r3, #16
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e000      	b.n	800327c <HAL_I2C_Mem_Write_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 800327a:	2302      	movs	r3, #2
  }
}
 800327c:	4618      	mov	r0, r3
 800327e:	3720      	adds	r7, #32
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	ffff0000 	.word	0xffff0000
 8003288:	08003661 	.word	0x08003661
 800328c:	0800437b 	.word	0x0800437b
 8003290:	08004411 	.word	0x08004411

08003294 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d005      	beq.n	80032c0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032b8:	68ba      	ldr	r2, [r7, #8]
 80032ba:	68f9      	ldr	r1, [r7, #12]
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	4798      	blx	r3
  }
}
 80032c0:	bf00      	nop
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b086      	sub	sp, #24
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	0a1b      	lsrs	r3, r3, #8
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d010      	beq.n	800330e <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	09db      	lsrs	r3, r3, #7
 80032f0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d00a      	beq.n	800330e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fc:	f043 0201 	orr.w	r2, r3, #1
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f44f 7280 	mov.w	r2, #256	; 0x100
 800330c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	0a9b      	lsrs	r3, r3, #10
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	2b00      	cmp	r3, #0
 8003318:	d010      	beq.n	800333c <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	09db      	lsrs	r3, r3, #7
 800331e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00a      	beq.n	800333c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332a:	f043 0208 	orr.w	r2, r3, #8
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800333a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	0a5b      	lsrs	r3, r3, #9
 8003340:	f003 0301 	and.w	r3, r3, #1
 8003344:	2b00      	cmp	r3, #0
 8003346:	d010      	beq.n	800336a <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	09db      	lsrs	r3, r3, #7
 800334c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00a      	beq.n	800336a <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003358:	f043 0202 	orr.w	r2, r3, #2
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003368:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f003 030b 	and.w	r3, r3, #11
 8003376:	2b00      	cmp	r3, #0
 8003378:	d003      	beq.n	8003382 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800337a:	68f9      	ldr	r1, [r7, #12]
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f000 fee1 	bl	8004144 <I2C_ITError>
  }
}
 8003382:	bf00      	nop
 8003384:	3718      	adds	r7, #24
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800338a:	b480      	push	{r7}
 800338c:	b083      	sub	sp, #12
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003392:	bf00      	nop
 8003394:	370c      	adds	r7, #12
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr

0800339e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800339e:	b480      	push	{r7}
 80033a0:	b083      	sub	sp, #12
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80033a6:	bf00      	nop
 80033a8:	370c      	adds	r7, #12
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr

080033b2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033b2:	b480      	push	{r7}
 80033b4:	b083      	sub	sp, #12
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80033ba:	bf00      	nop
 80033bc:	370c      	adds	r7, #12
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr

080033c6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033c6:	b480      	push	{r7}
 80033c8:	b083      	sub	sp, #12
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80033ce:	bf00      	nop
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr

080033da <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80033da:	b480      	push	{r7}
 80033dc:	b083      	sub	sp, #12
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
 80033e2:	460b      	mov	r3, r1
 80033e4:	70fb      	strb	r3, [r7, #3]
 80033e6:	4613      	mov	r3, r2
 80033e8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80033ea:	bf00      	nop
 80033ec:	370c      	adds	r7, #12
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr

080033f6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033f6:	b480      	push	{r7}
 80033f8:	b083      	sub	sp, #12
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80033fe:	bf00      	nop
 8003400:	370c      	adds	r7, #12
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr

0800340a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800340a:	b480      	push	{r7}
 800340c:	b083      	sub	sp, #12
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003412:	bf00      	nop
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr

0800341e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800341e:	b480      	push	{r7}
 8003420:	b083      	sub	sp, #12
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003426:	bf00      	nop
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr

08003432 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003432:	b480      	push	{r7}
 8003434:	b083      	sub	sp, #12
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800343a:	bf00      	nop
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr

08003446 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003446:	b480      	push	{r7}
 8003448:	b083      	sub	sp, #12
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800344e:	bf00      	nop
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr

0800345a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800345a:	b580      	push	{r7, lr}
 800345c:	b086      	sub	sp, #24
 800345e:	af00      	add	r7, sp, #0
 8003460:	60f8      	str	r0, [r7, #12]
 8003462:	60b9      	str	r1, [r7, #8]
 8003464:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003476:	2b01      	cmp	r3, #1
 8003478:	d101      	bne.n	800347e <I2C_Slave_ISR_IT+0x24>
 800347a:	2302      	movs	r3, #2
 800347c:	e0ec      	b.n	8003658 <I2C_Slave_ISR_IT+0x1fe>
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2201      	movs	r2, #1
 8003482:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	095b      	lsrs	r3, r3, #5
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	2b00      	cmp	r3, #0
 8003490:	d009      	beq.n	80034a6 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	095b      	lsrs	r3, r3, #5
 8003496:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800349a:	2b00      	cmp	r3, #0
 800349c:	d003      	beq.n	80034a6 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800349e:	6939      	ldr	r1, [r7, #16]
 80034a0:	68f8      	ldr	r0, [r7, #12]
 80034a2:	f000 fcef 	bl	8003e84 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	091b      	lsrs	r3, r3, #4
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d04d      	beq.n	800354e <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	091b      	lsrs	r3, r3, #4
 80034b6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d047      	beq.n	800354e <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d128      	bne.n	800351a <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	2b28      	cmp	r3, #40	; 0x28
 80034d2:	d108      	bne.n	80034e6 <I2C_Slave_ISR_IT+0x8c>
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80034da:	d104      	bne.n	80034e6 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80034dc:	6939      	ldr	r1, [r7, #16]
 80034de:	68f8      	ldr	r0, [r7, #12]
 80034e0:	f000 fdda 	bl	8004098 <I2C_ITListenCplt>
 80034e4:	e032      	b.n	800354c <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	2b29      	cmp	r3, #41	; 0x29
 80034f0:	d10e      	bne.n	8003510 <I2C_Slave_ISR_IT+0xb6>
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034f8:	d00a      	beq.n	8003510 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2210      	movs	r2, #16
 8003500:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f000 ff15 	bl	8004332 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003508:	68f8      	ldr	r0, [r7, #12]
 800350a:	f000 fb92 	bl	8003c32 <I2C_ITSlaveSeqCplt>
 800350e:	e01d      	b.n	800354c <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2210      	movs	r2, #16
 8003516:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003518:	e096      	b.n	8003648 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2210      	movs	r2, #16
 8003520:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003526:	f043 0204 	orr.w	r2, r3, #4
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d004      	beq.n	800353e <I2C_Slave_ISR_IT+0xe4>
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800353a:	f040 8085 	bne.w	8003648 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003542:	4619      	mov	r1, r3
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f000 fdfd 	bl	8004144 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800354a:	e07d      	b.n	8003648 <I2C_Slave_ISR_IT+0x1ee>
 800354c:	e07c      	b.n	8003648 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	089b      	lsrs	r3, r3, #2
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	2b00      	cmp	r3, #0
 8003558:	d030      	beq.n	80035bc <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	089b      	lsrs	r3, r3, #2
 800355e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003562:	2b00      	cmp	r3, #0
 8003564:	d02a      	beq.n	80035bc <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800356a:	b29b      	uxth	r3, r3
 800356c:	2b00      	cmp	r3, #0
 800356e:	d018      	beq.n	80035a2 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357a:	b2d2      	uxtb	r2, r2
 800357c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003582:	1c5a      	adds	r2, r3, #1
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800358c:	3b01      	subs	r3, #1
 800358e:	b29a      	uxth	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003598:	b29b      	uxth	r3, r3
 800359a:	3b01      	subs	r3, #1
 800359c:	b29a      	uxth	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d14f      	bne.n	800364c <I2C_Slave_ISR_IT+0x1f2>
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80035b2:	d04b      	beq.n	800364c <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80035b4:	68f8      	ldr	r0, [r7, #12]
 80035b6:	f000 fb3c 	bl	8003c32 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80035ba:	e047      	b.n	800364c <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	08db      	lsrs	r3, r3, #3
 80035c0:	f003 0301 	and.w	r3, r3, #1
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00a      	beq.n	80035de <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	08db      	lsrs	r3, r3, #3
 80035cc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d004      	beq.n	80035de <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80035d4:	6939      	ldr	r1, [r7, #16]
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f000 fa6a 	bl	8003ab0 <I2C_ITAddrCplt>
 80035dc:	e037      	b.n	800364e <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	085b      	lsrs	r3, r3, #1
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d031      	beq.n	800364e <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	085b      	lsrs	r3, r3, #1
 80035ee:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d02b      	beq.n	800364e <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d018      	beq.n	8003632 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003604:	781a      	ldrb	r2, [r3, #0]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003610:	1c5a      	adds	r2, r3, #1
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800361a:	b29b      	uxth	r3, r3
 800361c:	3b01      	subs	r3, #1
 800361e:	b29a      	uxth	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003628:	3b01      	subs	r3, #1
 800362a:	b29a      	uxth	r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	851a      	strh	r2, [r3, #40]	; 0x28
 8003630:	e00d      	b.n	800364e <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003638:	d002      	beq.n	8003640 <I2C_Slave_ISR_IT+0x1e6>
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d106      	bne.n	800364e <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003640:	68f8      	ldr	r0, [r7, #12]
 8003642:	f000 faf6 	bl	8003c32 <I2C_ITSlaveSeqCplt>
 8003646:	e002      	b.n	800364e <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8003648:	bf00      	nop
 800364a:	e000      	b.n	800364e <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800364c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3718      	adds	r7, #24
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b088      	sub	sp, #32
 8003664:	af02      	add	r7, sp, #8
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003672:	2b01      	cmp	r3, #1
 8003674:	d101      	bne.n	800367a <I2C_Master_ISR_DMA+0x1a>
 8003676:	2302      	movs	r3, #2
 8003678:	e0e1      	b.n	800383e <I2C_Master_ISR_DMA+0x1de>
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2201      	movs	r2, #1
 800367e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	091b      	lsrs	r3, r3, #4
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	2b00      	cmp	r3, #0
 800368c:	d017      	beq.n	80036be <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	091b      	lsrs	r3, r3, #4
 8003692:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003696:	2b00      	cmp	r3, #0
 8003698:	d011      	beq.n	80036be <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2210      	movs	r2, #16
 80036a0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a6:	f043 0204 	orr.w	r2, r3, #4
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80036ae:	2120      	movs	r1, #32
 80036b0:	68f8      	ldr	r0, [r7, #12]
 80036b2:	f001 f843 	bl	800473c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80036b6:	68f8      	ldr	r0, [r7, #12]
 80036b8:	f000 fe3b 	bl	8004332 <I2C_Flush_TXDR>
 80036bc:	e0ba      	b.n	8003834 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	09db      	lsrs	r3, r3, #7
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d072      	beq.n	80037b0 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	099b      	lsrs	r3, r3, #6
 80036ce:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d06c      	beq.n	80037b0 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036e4:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d04e      	beq.n	800378e <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036fc:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003702:	b29b      	uxth	r3, r3
 8003704:	2bff      	cmp	r3, #255	; 0xff
 8003706:	d906      	bls.n	8003716 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	22ff      	movs	r2, #255	; 0xff
 800370c:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800370e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003712:	617b      	str	r3, [r7, #20]
 8003714:	e010      	b.n	8003738 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800371a:	b29a      	uxth	r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003724:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003728:	d003      	beq.n	8003732 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372e:	617b      	str	r3, [r7, #20]
 8003730:	e002      	b.n	8003738 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8003732:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003736:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800373c:	b2da      	uxtb	r2, r3
 800373e:	8a79      	ldrh	r1, [r7, #18]
 8003740:	2300      	movs	r3, #0
 8003742:	9300      	str	r3, [sp, #0]
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	68f8      	ldr	r0, [r7, #12]
 8003748:	f000 ffca 	bl	80046e0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003750:	b29a      	uxth	r2, r3
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	b29a      	uxth	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b22      	cmp	r3, #34	; 0x22
 8003768:	d108      	bne.n	800377c <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003778:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800377a:	e05b      	b.n	8003834 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800378a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800378c:	e052      	b.n	8003834 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003798:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800379c:	d003      	beq.n	80037a6 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	f000 fa0a 	bl	8003bb8 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80037a4:	e046      	b.n	8003834 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80037a6:	2140      	movs	r1, #64	; 0x40
 80037a8:	68f8      	ldr	r0, [r7, #12]
 80037aa:	f000 fccb 	bl	8004144 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80037ae:	e041      	b.n	8003834 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	099b      	lsrs	r3, r3, #6
 80037b4:	f003 0301 	and.w	r3, r3, #1
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d029      	beq.n	8003810 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	099b      	lsrs	r3, r3, #6
 80037c0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d023      	beq.n	8003810 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d119      	bne.n	8003806 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80037e0:	d027      	beq.n	8003832 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80037ea:	d108      	bne.n	80037fe <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	685a      	ldr	r2, [r3, #4]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037fa:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80037fc:	e019      	b.n	8003832 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80037fe:	68f8      	ldr	r0, [r7, #12]
 8003800:	f000 f9da 	bl	8003bb8 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8003804:	e015      	b.n	8003832 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003806:	2140      	movs	r1, #64	; 0x40
 8003808:	68f8      	ldr	r0, [r7, #12]
 800380a:	f000 fc9b 	bl	8004144 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800380e:	e010      	b.n	8003832 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	095b      	lsrs	r3, r3, #5
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00b      	beq.n	8003834 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	095b      	lsrs	r3, r3, #5
 8003820:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003824:	2b00      	cmp	r3, #0
 8003826:	d005      	beq.n	8003834 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003828:	68b9      	ldr	r1, [r7, #8]
 800382a:	68f8      	ldr	r0, [r7, #12]
 800382c:	f000 fa60 	bl	8003cf0 <I2C_ITMasterCplt>
 8003830:	e000      	b.n	8003834 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8003832:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3718      	adds	r7, #24
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b088      	sub	sp, #32
 800384a:	af00      	add	r7, sp, #0
 800384c:	60f8      	str	r0, [r7, #12]
 800384e:	60b9      	str	r1, [r7, #8]
 8003850:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003856:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8003858:	2300      	movs	r3, #0
 800385a:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003862:	2b01      	cmp	r3, #1
 8003864:	d101      	bne.n	800386a <I2C_Slave_ISR_DMA+0x24>
 8003866:	2302      	movs	r3, #2
 8003868:	e0c9      	b.n	80039fe <I2C_Slave_ISR_DMA+0x1b8>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	095b      	lsrs	r3, r3, #5
 8003876:	f003 0301 	and.w	r3, r3, #1
 800387a:	2b00      	cmp	r3, #0
 800387c:	d009      	beq.n	8003892 <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	095b      	lsrs	r3, r3, #5
 8003882:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003886:	2b00      	cmp	r3, #0
 8003888:	d003      	beq.n	8003892 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800388a:	68b9      	ldr	r1, [r7, #8]
 800388c:	68f8      	ldr	r0, [r7, #12]
 800388e:	f000 faf9 	bl	8003e84 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	091b      	lsrs	r3, r3, #4
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b00      	cmp	r3, #0
 800389c:	f000 809a 	beq.w	80039d4 <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	091b      	lsrs	r3, r3, #4
 80038a4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f000 8093 	beq.w	80039d4 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	0b9b      	lsrs	r3, r3, #14
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d105      	bne.n	80038c6 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	0bdb      	lsrs	r3, r3, #15
 80038be:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d07f      	beq.n	80039c6 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00d      	beq.n	80038ea <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	0bdb      	lsrs	r3, r3, #15
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d007      	beq.n	80038ea <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d101      	bne.n	80038ea <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 80038e6:	2301      	movs	r3, #1
 80038e8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00d      	beq.n	800390e <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	0b9b      	lsrs	r3, r3, #14
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d007      	beq.n	800390e <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d101      	bne.n	800390e <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 800390a:	2301      	movs	r3, #1
 800390c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d128      	bne.n	8003966 <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800391a:	b2db      	uxtb	r3, r3
 800391c:	2b28      	cmp	r3, #40	; 0x28
 800391e:	d108      	bne.n	8003932 <I2C_Slave_ISR_DMA+0xec>
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003926:	d104      	bne.n	8003932 <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8003928:	68b9      	ldr	r1, [r7, #8]
 800392a:	68f8      	ldr	r0, [r7, #12]
 800392c:	f000 fbb4 	bl	8004098 <I2C_ITListenCplt>
 8003930:	e048      	b.n	80039c4 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003938:	b2db      	uxtb	r3, r3
 800393a:	2b29      	cmp	r3, #41	; 0x29
 800393c:	d10e      	bne.n	800395c <I2C_Slave_ISR_DMA+0x116>
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003944:	d00a      	beq.n	800395c <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2210      	movs	r2, #16
 800394c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800394e:	68f8      	ldr	r0, [r7, #12]
 8003950:	f000 fcef 	bl	8004332 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8003954:	68f8      	ldr	r0, [r7, #12]
 8003956:	f000 f96c 	bl	8003c32 <I2C_ITSlaveSeqCplt>
 800395a:	e033      	b.n	80039c4 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2210      	movs	r2, #16
 8003962:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8003964:	e034      	b.n	80039d0 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2210      	movs	r2, #16
 800396c:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003972:	f043 0204 	orr.w	r2, r3, #4
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003980:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d003      	beq.n	8003990 <I2C_Slave_ISR_DMA+0x14a>
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800398e:	d11f      	bne.n	80039d0 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003990:	7dfb      	ldrb	r3, [r7, #23]
 8003992:	2b21      	cmp	r3, #33	; 0x21
 8003994:	d002      	beq.n	800399c <I2C_Slave_ISR_DMA+0x156>
 8003996:	7dfb      	ldrb	r3, [r7, #23]
 8003998:	2b29      	cmp	r3, #41	; 0x29
 800399a:	d103      	bne.n	80039a4 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2221      	movs	r2, #33	; 0x21
 80039a0:	631a      	str	r2, [r3, #48]	; 0x30
 80039a2:	e008      	b.n	80039b6 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80039a4:	7dfb      	ldrb	r3, [r7, #23]
 80039a6:	2b22      	cmp	r3, #34	; 0x22
 80039a8:	d002      	beq.n	80039b0 <I2C_Slave_ISR_DMA+0x16a>
 80039aa:	7dfb      	ldrb	r3, [r7, #23]
 80039ac:	2b2a      	cmp	r3, #42	; 0x2a
 80039ae:	d102      	bne.n	80039b6 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2222      	movs	r2, #34	; 0x22
 80039b4:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ba:	4619      	mov	r1, r3
 80039bc:	68f8      	ldr	r0, [r7, #12]
 80039be:	f000 fbc1 	bl	8004144 <I2C_ITError>
      if (treatdmanack == 1U)
 80039c2:	e005      	b.n	80039d0 <I2C_Slave_ISR_DMA+0x18a>
 80039c4:	e004      	b.n	80039d0 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2210      	movs	r2, #16
 80039cc:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80039ce:	e011      	b.n	80039f4 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 80039d0:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80039d2:	e00f      	b.n	80039f4 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	08db      	lsrs	r3, r3, #3
 80039d8:	f003 0301 	and.w	r3, r3, #1
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d009      	beq.n	80039f4 <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	08db      	lsrs	r3, r3, #3
 80039e4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d003      	beq.n	80039f4 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80039ec:	68b9      	ldr	r1, [r7, #8]
 80039ee:	68f8      	ldr	r0, [r7, #12]
 80039f0:	f000 f85e 	bl	8003ab0 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3720      	adds	r7, #32
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
	...

08003a08 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af02      	add	r7, sp, #8
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	4608      	mov	r0, r1
 8003a12:	4611      	mov	r1, r2
 8003a14:	461a      	mov	r2, r3
 8003a16:	4603      	mov	r3, r0
 8003a18:	817b      	strh	r3, [r7, #10]
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	813b      	strh	r3, [r7, #8]
 8003a1e:	4613      	mov	r3, r2
 8003a20:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003a22:	88fb      	ldrh	r3, [r7, #6]
 8003a24:	b2da      	uxtb	r2, r3
 8003a26:	8979      	ldrh	r1, [r7, #10]
 8003a28:	4b20      	ldr	r3, [pc, #128]	; (8003aac <I2C_RequestMemoryWrite+0xa4>)
 8003a2a:	9300      	str	r3, [sp, #0]
 8003a2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a30:	68f8      	ldr	r0, [r7, #12]
 8003a32:	f000 fe55 	bl	80046e0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a36:	69fa      	ldr	r2, [r7, #28]
 8003a38:	69b9      	ldr	r1, [r7, #24]
 8003a3a:	68f8      	ldr	r0, [r7, #12]
 8003a3c:	f000 fd5d 	bl	80044fa <I2C_WaitOnTXISFlagUntilTimeout>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d001      	beq.n	8003a4a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e02c      	b.n	8003aa4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a4a:	88fb      	ldrh	r3, [r7, #6]
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d105      	bne.n	8003a5c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a50:	893b      	ldrh	r3, [r7, #8]
 8003a52:	b2da      	uxtb	r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	629a      	str	r2, [r3, #40]	; 0x28
 8003a5a:	e015      	b.n	8003a88 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003a5c:	893b      	ldrh	r3, [r7, #8]
 8003a5e:	0a1b      	lsrs	r3, r3, #8
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	b2da      	uxtb	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a6a:	69fa      	ldr	r2, [r7, #28]
 8003a6c:	69b9      	ldr	r1, [r7, #24]
 8003a6e:	68f8      	ldr	r0, [r7, #12]
 8003a70:	f000 fd43 	bl	80044fa <I2C_WaitOnTXISFlagUntilTimeout>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d001      	beq.n	8003a7e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e012      	b.n	8003aa4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a7e:	893b      	ldrh	r3, [r7, #8]
 8003a80:	b2da      	uxtb	r2, r3
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	9300      	str	r3, [sp, #0]
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	2180      	movs	r1, #128	; 0x80
 8003a92:	68f8      	ldr	r0, [r7, #12]
 8003a94:	f000 fcf1 	bl	800447a <I2C_WaitOnFlagUntilTimeout>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d001      	beq.n	8003aa2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e000      	b.n	8003aa4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3710      	adds	r7, #16
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	80002000 	.word	0x80002000

08003ab0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ac6:	2b28      	cmp	r3, #40	; 0x28
 8003ac8:	d16a      	bne.n	8003ba0 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	0c1b      	lsrs	r3, r3, #16
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	f003 0301 	and.w	r3, r3, #1
 8003ad8:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	0c1b      	lsrs	r3, r3, #16
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003ae8:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003af6:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003b04:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d138      	bne.n	8003b80 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003b0e:	897b      	ldrh	r3, [r7, #10]
 8003b10:	09db      	lsrs	r3, r3, #7
 8003b12:	b29a      	uxth	r2, r3
 8003b14:	89bb      	ldrh	r3, [r7, #12]
 8003b16:	4053      	eors	r3, r2
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	f003 0306 	and.w	r3, r3, #6
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d11c      	bne.n	8003b5c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003b22:	897b      	ldrh	r3, [r7, #10]
 8003b24:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b2a:	1c5a      	adds	r2, r3, #1
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d13b      	bne.n	8003bb0 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2208      	movs	r2, #8
 8003b44:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003b4e:	89ba      	ldrh	r2, [r7, #12]
 8003b50:	7bfb      	ldrb	r3, [r7, #15]
 8003b52:	4619      	mov	r1, r3
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f7ff fc40 	bl	80033da <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003b5a:	e029      	b.n	8003bb0 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003b5c:	893b      	ldrh	r3, [r7, #8]
 8003b5e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003b60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 fe4d 	bl	8004804 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003b72:	89ba      	ldrh	r2, [r7, #12]
 8003b74:	7bfb      	ldrb	r3, [r7, #15]
 8003b76:	4619      	mov	r1, r3
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f7ff fc2e 	bl	80033da <HAL_I2C_AddrCallback>
}
 8003b7e:	e017      	b.n	8003bb0 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003b80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f000 fe3d 	bl	8004804 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003b92:	89ba      	ldrh	r2, [r7, #12]
 8003b94:	7bfb      	ldrb	r3, [r7, #15]
 8003b96:	4619      	mov	r1, r3
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f7ff fc1e 	bl	80033da <HAL_I2C_AddrCallback>
}
 8003b9e:	e007      	b.n	8003bb0 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2208      	movs	r2, #8
 8003ba6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003bb0:	bf00      	nop
 8003bb2:	3710      	adds	r7, #16
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	2b21      	cmp	r3, #33	; 0x21
 8003bd2:	d115      	bne.n	8003c00 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2220      	movs	r2, #32
 8003bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2211      	movs	r2, #17
 8003be0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003be8:	2101      	movs	r1, #1
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 fe0a 	bl	8004804 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f7ff fbc6 	bl	800338a <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003bfe:	e014      	b.n	8003c2a <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2220      	movs	r2, #32
 8003c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2212      	movs	r2, #18
 8003c0c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003c14:	2102      	movs	r1, #2
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 fdf4 	bl	8004804 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f7ff fbba 	bl	800339e <HAL_I2C_MasterRxCpltCallback>
}
 8003c2a:	bf00      	nop
 8003c2c:	3708      	adds	r7, #8
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b084      	sub	sp, #16
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	0b9b      	lsrs	r3, r3, #14
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d008      	beq.n	8003c68 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003c64:	601a      	str	r2, [r3, #0]
 8003c66:	e00d      	b.n	8003c84 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	0bdb      	lsrs	r3, r3, #15
 8003c6c:	f003 0301 	and.w	r3, r3, #1
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d007      	beq.n	8003c84 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c82:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	2b29      	cmp	r3, #41	; 0x29
 8003c8e:	d112      	bne.n	8003cb6 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2228      	movs	r2, #40	; 0x28
 8003c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2221      	movs	r2, #33	; 0x21
 8003c9c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003c9e:	2101      	movs	r1, #1
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f000 fdaf 	bl	8004804 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f7ff fb7f 	bl	80033b2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003cb4:	e017      	b.n	8003ce6 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2b2a      	cmp	r3, #42	; 0x2a
 8003cc0:	d111      	bne.n	8003ce6 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2228      	movs	r2, #40	; 0x28
 8003cc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2222      	movs	r2, #34	; 0x22
 8003cce:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003cd0:	2102      	movs	r1, #2
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 fd96 	bl	8004804 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f7ff fb70 	bl	80033c6 <HAL_I2C_SlaveRxCpltCallback>
}
 8003ce6:	bf00      	nop
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
	...

08003cf0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b086      	sub	sp, #24
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2220      	movs	r2, #32
 8003d04:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b21      	cmp	r3, #33	; 0x21
 8003d10:	d107      	bne.n	8003d22 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003d12:	2101      	movs	r1, #1
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f000 fd75 	bl	8004804 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2211      	movs	r2, #17
 8003d1e:	631a      	str	r2, [r3, #48]	; 0x30
 8003d20:	e00c      	b.n	8003d3c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b22      	cmp	r3, #34	; 0x22
 8003d2c:	d106      	bne.n	8003d3c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003d2e:	2102      	movs	r1, #2
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f000 fd67 	bl	8004804 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2212      	movs	r2, #18
 8003d3a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	6859      	ldr	r1, [r3, #4]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	4b4d      	ldr	r3, [pc, #308]	; (8003e7c <I2C_ITMasterCplt+0x18c>)
 8003d48:	400b      	ands	r3, r1
 8003d4a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a4a      	ldr	r2, [pc, #296]	; (8003e80 <I2C_ITMasterCplt+0x190>)
 8003d56:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	091b      	lsrs	r3, r3, #4
 8003d5c:	f003 0301 	and.w	r3, r3, #1
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d009      	beq.n	8003d78 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2210      	movs	r2, #16
 8003d6a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d70:	f043 0204 	orr.w	r2, r3, #4
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	2b60      	cmp	r3, #96	; 0x60
 8003d82:	d10b      	bne.n	8003d9c <I2C_ITMasterCplt+0xac>
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	089b      	lsrs	r3, r3, #2
 8003d88:	f003 0301 	and.w	r3, r3, #1
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d005      	beq.n	8003d9c <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f000 fac8 	bl	8004332 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da6:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	2b60      	cmp	r3, #96	; 0x60
 8003db2:	d002      	beq.n	8003dba <I2C_ITMasterCplt+0xca>
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d006      	beq.n	8003dc8 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f000 f9bf 	bl	8004144 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003dc6:	e054      	b.n	8003e72 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	2b21      	cmp	r3, #33	; 0x21
 8003dd2:	d124      	bne.n	8003e1e <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2220      	movs	r2, #32
 8003dd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	2b40      	cmp	r3, #64	; 0x40
 8003dec:	d10b      	bne.n	8003e06 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f7ff fb03 	bl	800340a <HAL_I2C_MemTxCpltCallback>
}
 8003e04:	e035      	b.n	8003e72 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f7ff fab7 	bl	800338a <HAL_I2C_MasterTxCpltCallback>
}
 8003e1c:	e029      	b.n	8003e72 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b22      	cmp	r3, #34	; 0x22
 8003e28:	d123      	bne.n	8003e72 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2220      	movs	r2, #32
 8003e2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	2b40      	cmp	r3, #64	; 0x40
 8003e42:	d10b      	bne.n	8003e5c <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f7ff fae2 	bl	800341e <HAL_I2C_MemRxCpltCallback>
}
 8003e5a:	e00a      	b.n	8003e72 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f7ff fa96 	bl	800339e <HAL_I2C_MasterRxCpltCallback>
}
 8003e72:	bf00      	nop
 8003e74:	3718      	adds	r7, #24
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	fe00e800 	.word	0xfe00e800
 8003e80:	ffff0000 	.word	0xffff0000

08003e84 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b086      	sub	sp, #24
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ea0:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2220      	movs	r2, #32
 8003ea8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003eaa:	7bfb      	ldrb	r3, [r7, #15]
 8003eac:	2b21      	cmp	r3, #33	; 0x21
 8003eae:	d002      	beq.n	8003eb6 <I2C_ITSlaveCplt+0x32>
 8003eb0:	7bfb      	ldrb	r3, [r7, #15]
 8003eb2:	2b29      	cmp	r3, #41	; 0x29
 8003eb4:	d108      	bne.n	8003ec8 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003eb6:	f248 0101 	movw	r1, #32769	; 0x8001
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 fca2 	bl	8004804 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2221      	movs	r2, #33	; 0x21
 8003ec4:	631a      	str	r2, [r3, #48]	; 0x30
 8003ec6:	e00d      	b.n	8003ee4 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003ec8:	7bfb      	ldrb	r3, [r7, #15]
 8003eca:	2b22      	cmp	r3, #34	; 0x22
 8003ecc:	d002      	beq.n	8003ed4 <I2C_ITSlaveCplt+0x50>
 8003ece:	7bfb      	ldrb	r3, [r7, #15]
 8003ed0:	2b2a      	cmp	r3, #42	; 0x2a
 8003ed2:	d107      	bne.n	8003ee4 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003ed4:	f248 0102 	movw	r1, #32770	; 0x8002
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f000 fc93 	bl	8004804 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2222      	movs	r2, #34	; 0x22
 8003ee2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	685a      	ldr	r2, [r3, #4]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ef2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	6859      	ldr	r1, [r3, #4]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	4b64      	ldr	r3, [pc, #400]	; (8004090 <I2C_ITSlaveCplt+0x20c>)
 8003f00:	400b      	ands	r3, r1
 8003f02:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 fa14 	bl	8004332 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	0b9b      	lsrs	r3, r3, #14
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d013      	beq.n	8003f3e <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003f24:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d020      	beq.n	8003f70 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f3c:	e018      	b.n	8003f70 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	0bdb      	lsrs	r3, r3, #15
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d012      	beq.n	8003f70 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f58:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d006      	beq.n	8003f70 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	b29a      	uxth	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	089b      	lsrs	r3, r3, #2
 8003f74:	f003 0301 	and.w	r3, r3, #1
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d020      	beq.n	8003fbe <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	f023 0304 	bic.w	r3, r3, #4
 8003f82:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8e:	b2d2      	uxtb	r2, r2
 8003f90:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f96:	1c5a      	adds	r2, r3, #1
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d00c      	beq.n	8003fbe <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	b29a      	uxth	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	b29a      	uxth	r2, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d005      	beq.n	8003fd4 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fcc:	f043 0204 	orr.w	r2, r3, #4
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d010      	beq.n	800400c <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fee:	4619      	mov	r1, r3
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 f8a7 	bl	8004144 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	2b28      	cmp	r3, #40	; 0x28
 8004000:	d141      	bne.n	8004086 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004002:	6979      	ldr	r1, [r7, #20]
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f000 f847 	bl	8004098 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800400a:	e03c      	b.n	8004086 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004010:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004014:	d014      	beq.n	8004040 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f7ff fe0b 	bl	8003c32 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a1d      	ldr	r2, [pc, #116]	; (8004094 <I2C_ITSlaveCplt+0x210>)
 8004020:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2220      	movs	r2, #32
 8004026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f7ff f9dc 	bl	80033f6 <HAL_I2C_ListenCpltCallback>
}
 800403e:	e022      	b.n	8004086 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004046:	b2db      	uxtb	r3, r3
 8004048:	2b22      	cmp	r3, #34	; 0x22
 800404a:	d10e      	bne.n	800406a <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2220      	movs	r2, #32
 8004050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7ff f9af 	bl	80033c6 <HAL_I2C_SlaveRxCpltCallback>
}
 8004068:	e00d      	b.n	8004086 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2220      	movs	r2, #32
 800406e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f7ff f996 	bl	80033b2 <HAL_I2C_SlaveTxCpltCallback>
}
 8004086:	bf00      	nop
 8004088:	3718      	adds	r7, #24
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	fe00e800 	.word	0xfe00e800
 8004094:	ffff0000 	.word	0xffff0000

08004098 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a26      	ldr	r2, [pc, #152]	; (8004140 <I2C_ITListenCplt+0xa8>)
 80040a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2220      	movs	r2, #32
 80040b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	089b      	lsrs	r3, r3, #2
 80040c8:	f003 0301 	and.w	r3, r3, #1
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d022      	beq.n	8004116 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040da:	b2d2      	uxtb	r2, r2
 80040dc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e2:	1c5a      	adds	r2, r3, #1
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d012      	beq.n	8004116 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040f4:	3b01      	subs	r3, #1
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004100:	b29b      	uxth	r3, r3
 8004102:	3b01      	subs	r3, #1
 8004104:	b29a      	uxth	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800410e:	f043 0204 	orr.w	r2, r3, #4
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004116:	f248 0103 	movw	r1, #32771	; 0x8003
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 fb72 	bl	8004804 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2210      	movs	r2, #16
 8004126:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f7ff f960 	bl	80033f6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004136:	bf00      	nop
 8004138:	3708      	adds	r7, #8
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	ffff0000 	.word	0xffff0000

08004144 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004154:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a5d      	ldr	r2, [pc, #372]	; (80042d8 <I2C_ITError+0x194>)
 8004162:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	431a      	orrs	r2, r3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004176:	7bfb      	ldrb	r3, [r7, #15]
 8004178:	2b28      	cmp	r3, #40	; 0x28
 800417a:	d005      	beq.n	8004188 <I2C_ITError+0x44>
 800417c:	7bfb      	ldrb	r3, [r7, #15]
 800417e:	2b29      	cmp	r3, #41	; 0x29
 8004180:	d002      	beq.n	8004188 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004182:	7bfb      	ldrb	r3, [r7, #15]
 8004184:	2b2a      	cmp	r3, #42	; 0x2a
 8004186:	d10b      	bne.n	80041a0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004188:	2103      	movs	r1, #3
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 fb3a 	bl	8004804 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2228      	movs	r2, #40	; 0x28
 8004194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a50      	ldr	r2, [pc, #320]	; (80042dc <I2C_ITError+0x198>)
 800419c:	635a      	str	r2, [r3, #52]	; 0x34
 800419e:	e011      	b.n	80041c4 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80041a0:	f248 0103 	movw	r1, #32771	; 0x8003
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 fb2d 	bl	8004804 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	2b60      	cmp	r3, #96	; 0x60
 80041b4:	d003      	beq.n	80041be <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2220      	movs	r2, #32
 80041ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c8:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d039      	beq.n	8004246 <I2C_ITError+0x102>
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	2b11      	cmp	r3, #17
 80041d6:	d002      	beq.n	80041de <I2C_ITError+0x9a>
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	2b21      	cmp	r3, #33	; 0x21
 80041dc:	d133      	bne.n	8004246 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041ec:	d107      	bne.n	80041fe <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80041fc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004202:	4618      	mov	r0, r3
 8004204:	f7fe fbc6 	bl	8002994 <HAL_DMA_GetState>
 8004208:	4603      	mov	r3, r0
 800420a:	2b01      	cmp	r3, #1
 800420c:	d017      	beq.n	800423e <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004212:	4a33      	ldr	r2, [pc, #204]	; (80042e0 <I2C_ITError+0x19c>)
 8004214:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004222:	4618      	mov	r0, r3
 8004224:	f7fe fad5 	bl	80027d2 <HAL_DMA_Abort_IT>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d04d      	beq.n	80042ca <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004238:	4610      	mov	r0, r2
 800423a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800423c:	e045      	b.n	80042ca <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 f850 	bl	80042e4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004244:	e041      	b.n	80042ca <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800424a:	2b00      	cmp	r3, #0
 800424c:	d039      	beq.n	80042c2 <I2C_ITError+0x17e>
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	2b12      	cmp	r3, #18
 8004252:	d002      	beq.n	800425a <I2C_ITError+0x116>
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	2b22      	cmp	r3, #34	; 0x22
 8004258:	d133      	bne.n	80042c2 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004264:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004268:	d107      	bne.n	800427a <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004278:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800427e:	4618      	mov	r0, r3
 8004280:	f7fe fb88 	bl	8002994 <HAL_DMA_GetState>
 8004284:	4603      	mov	r3, r0
 8004286:	2b01      	cmp	r3, #1
 8004288:	d017      	beq.n	80042ba <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800428e:	4a14      	ldr	r2, [pc, #80]	; (80042e0 <I2C_ITError+0x19c>)
 8004290:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800429e:	4618      	mov	r0, r3
 80042a0:	f7fe fa97 	bl	80027d2 <HAL_DMA_Abort_IT>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d011      	beq.n	80042ce <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80042b4:	4610      	mov	r0, r2
 80042b6:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80042b8:	e009      	b.n	80042ce <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 f812 	bl	80042e4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80042c0:	e005      	b.n	80042ce <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 f80e 	bl	80042e4 <I2C_TreatErrorCallback>
  }
}
 80042c8:	e002      	b.n	80042d0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80042ca:	bf00      	nop
 80042cc:	e000      	b.n	80042d0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80042ce:	bf00      	nop
}
 80042d0:	bf00      	nop
 80042d2:	3710      	adds	r7, #16
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	ffff0000 	.word	0xffff0000
 80042dc:	0800345b 	.word	0x0800345b
 80042e0:	0800443f 	.word	0x0800443f

080042e4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	2b60      	cmp	r3, #96	; 0x60
 80042f6:	d10e      	bne.n	8004316 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2220      	movs	r2, #32
 80042fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f7ff f899 	bl	8003446 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004314:	e009      	b.n	800432a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f7ff f884 	bl	8003432 <HAL_I2C_ErrorCallback>
}
 800432a:	bf00      	nop
 800432c:	3708      	adds	r7, #8
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004332:	b480      	push	{r7}
 8004334:	b083      	sub	sp, #12
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	f003 0302 	and.w	r3, r3, #2
 8004344:	2b02      	cmp	r3, #2
 8004346:	d103      	bne.n	8004350 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2200      	movs	r2, #0
 800434e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	2b01      	cmp	r3, #1
 800435c:	d007      	beq.n	800436e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	699a      	ldr	r2, [r3, #24]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f042 0201 	orr.w	r2, r2, #1
 800436c:	619a      	str	r2, [r3, #24]
  }
}
 800436e:	bf00      	nop
 8004370:	370c      	adds	r7, #12
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr

0800437a <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800437a:	b580      	push	{r7, lr}
 800437c:	b084      	sub	sp, #16
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004386:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004396:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800439c:	b29b      	uxth	r3, r3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d104      	bne.n	80043ac <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80043a2:	2120      	movs	r1, #32
 80043a4:	68f8      	ldr	r0, [r7, #12]
 80043a6:	f000 f9c9 	bl	800473c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80043aa:	e02d      	b.n	8004408 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b0:	68fa      	ldr	r2, [r7, #12]
 80043b2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80043b4:	441a      	add	r2, r3
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043be:	b29b      	uxth	r3, r3
 80043c0:	2bff      	cmp	r3, #255	; 0xff
 80043c2:	d903      	bls.n	80043cc <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	22ff      	movs	r2, #255	; 0xff
 80043c8:	851a      	strh	r2, [r3, #40]	; 0x28
 80043ca:	e004      	b.n	80043d6 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d0:	b29a      	uxth	r2, r3
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043de:	4619      	mov	r1, r3
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	3328      	adds	r3, #40	; 0x28
 80043e6:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80043ec:	f7fe f992 	bl	8002714 <HAL_DMA_Start_IT>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d004      	beq.n	8004400 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80043f6:	2110      	movs	r1, #16
 80043f8:	68f8      	ldr	r0, [r7, #12]
 80043fa:	f7ff fea3 	bl	8004144 <I2C_ITError>
}
 80043fe:	e003      	b.n	8004408 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8004400:	2140      	movs	r1, #64	; 0x40
 8004402:	68f8      	ldr	r0, [r7, #12]
 8004404:	f000 f99a 	bl	800473c <I2C_Enable_IRQ>
}
 8004408:	bf00      	nop
 800440a:	3710      	adds	r7, #16
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441c:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	685a      	ldr	r2, [r3, #4]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800442c:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800442e:	2110      	movs	r1, #16
 8004430:	68f8      	ldr	r0, [r7, #12]
 8004432:	f7ff fe87 	bl	8004144 <I2C_ITError>
}
 8004436:	bf00      	nop
 8004438:	3710      	adds	r7, #16
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}

0800443e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800443e:	b580      	push	{r7, lr}
 8004440:	b084      	sub	sp, #16
 8004442:	af00      	add	r7, sp, #0
 8004444:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004450:	2b00      	cmp	r3, #0
 8004452:	d003      	beq.n	800445c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004458:	2200      	movs	r2, #0
 800445a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004460:	2b00      	cmp	r3, #0
 8004462:	d003      	beq.n	800446c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004468:	2200      	movs	r2, #0
 800446a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 800446c:	68f8      	ldr	r0, [r7, #12]
 800446e:	f7ff ff39 	bl	80042e4 <I2C_TreatErrorCallback>
}
 8004472:	bf00      	nop
 8004474:	3710      	adds	r7, #16
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}

0800447a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800447a:	b580      	push	{r7, lr}
 800447c:	b084      	sub	sp, #16
 800447e:	af00      	add	r7, sp, #0
 8004480:	60f8      	str	r0, [r7, #12]
 8004482:	60b9      	str	r1, [r7, #8]
 8004484:	603b      	str	r3, [r7, #0]
 8004486:	4613      	mov	r3, r2
 8004488:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800448a:	e022      	b.n	80044d2 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004492:	d01e      	beq.n	80044d2 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004494:	f7fd f93a 	bl	800170c <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	683a      	ldr	r2, [r7, #0]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d302      	bcc.n	80044aa <I2C_WaitOnFlagUntilTimeout+0x30>
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d113      	bne.n	80044d2 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ae:	f043 0220 	orr.w	r2, r3, #32
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2220      	movs	r2, #32
 80044ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e00f      	b.n	80044f2 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	699a      	ldr	r2, [r3, #24]
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	4013      	ands	r3, r2
 80044dc:	68ba      	ldr	r2, [r7, #8]
 80044de:	429a      	cmp	r2, r3
 80044e0:	bf0c      	ite	eq
 80044e2:	2301      	moveq	r3, #1
 80044e4:	2300      	movne	r3, #0
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	461a      	mov	r2, r3
 80044ea:	79fb      	ldrb	r3, [r7, #7]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d0cd      	beq.n	800448c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3710      	adds	r7, #16
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}

080044fa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80044fa:	b580      	push	{r7, lr}
 80044fc:	b084      	sub	sp, #16
 80044fe:	af00      	add	r7, sp, #0
 8004500:	60f8      	str	r0, [r7, #12]
 8004502:	60b9      	str	r1, [r7, #8]
 8004504:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004506:	e02c      	b.n	8004562 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	68b9      	ldr	r1, [r7, #8]
 800450c:	68f8      	ldr	r0, [r7, #12]
 800450e:	f000 f871 	bl	80045f4 <I2C_IsAcknowledgeFailed>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d001      	beq.n	800451c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e02a      	b.n	8004572 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004522:	d01e      	beq.n	8004562 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004524:	f7fd f8f2 	bl	800170c <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	68ba      	ldr	r2, [r7, #8]
 8004530:	429a      	cmp	r2, r3
 8004532:	d302      	bcc.n	800453a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d113      	bne.n	8004562 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800453e:	f043 0220 	orr.w	r2, r3, #32
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2220      	movs	r2, #32
 800454a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e007      	b.n	8004572 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	699b      	ldr	r3, [r3, #24]
 8004568:	f003 0302 	and.w	r3, r3, #2
 800456c:	2b02      	cmp	r3, #2
 800456e:	d1cb      	bne.n	8004508 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004570:	2300      	movs	r3, #0
}
 8004572:	4618      	mov	r0, r3
 8004574:	3710      	adds	r7, #16
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}

0800457a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800457a:	b580      	push	{r7, lr}
 800457c:	b084      	sub	sp, #16
 800457e:	af00      	add	r7, sp, #0
 8004580:	60f8      	str	r0, [r7, #12]
 8004582:	60b9      	str	r1, [r7, #8]
 8004584:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004586:	e028      	b.n	80045da <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	68b9      	ldr	r1, [r7, #8]
 800458c:	68f8      	ldr	r0, [r7, #12]
 800458e:	f000 f831 	bl	80045f4 <I2C_IsAcknowledgeFailed>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d001      	beq.n	800459c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e026      	b.n	80045ea <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800459c:	f7fd f8b6 	bl	800170c <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	68ba      	ldr	r2, [r7, #8]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d302      	bcc.n	80045b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d113      	bne.n	80045da <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b6:	f043 0220 	orr.w	r2, r3, #32
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2220      	movs	r2, #32
 80045c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e007      	b.n	80045ea <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	699b      	ldr	r3, [r3, #24]
 80045e0:	f003 0320 	and.w	r3, r3, #32
 80045e4:	2b20      	cmp	r3, #32
 80045e6:	d1cf      	bne.n	8004588 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3710      	adds	r7, #16
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
	...

080045f4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	60b9      	str	r1, [r7, #8]
 80045fe:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	699b      	ldr	r3, [r3, #24]
 8004606:	f003 0310 	and.w	r3, r3, #16
 800460a:	2b10      	cmp	r3, #16
 800460c:	d161      	bne.n	80046d2 <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004618:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800461c:	d02b      	beq.n	8004676 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	685a      	ldr	r2, [r3, #4]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800462c:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800462e:	e022      	b.n	8004676 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004636:	d01e      	beq.n	8004676 <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004638:	f7fd f868 	bl	800170c <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	68ba      	ldr	r2, [r7, #8]
 8004644:	429a      	cmp	r2, r3
 8004646:	d302      	bcc.n	800464e <I2C_IsAcknowledgeFailed+0x5a>
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d113      	bne.n	8004676 <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004652:	f043 0220 	orr.w	r2, r3, #32
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2220      	movs	r2, #32
 800465e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e02e      	b.n	80046d4 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	f003 0320 	and.w	r3, r3, #32
 8004680:	2b20      	cmp	r3, #32
 8004682:	d1d5      	bne.n	8004630 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2210      	movs	r2, #16
 800468a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2220      	movs	r2, #32
 8004692:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f7ff fe4c 	bl	8004332 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	6859      	ldr	r1, [r3, #4]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	4b0d      	ldr	r3, [pc, #52]	; (80046dc <I2C_IsAcknowledgeFailed+0xe8>)
 80046a6:	400b      	ands	r3, r1
 80046a8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ae:	f043 0204 	orr.w	r2, r3, #4
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2220      	movs	r2, #32
 80046ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e000      	b.n	80046d4 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 80046d2:	2300      	movs	r3, #0
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3710      	adds	r7, #16
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	fe00e800 	.word	0xfe00e800

080046e0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b085      	sub	sp, #20
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	607b      	str	r3, [r7, #4]
 80046ea:	460b      	mov	r3, r1
 80046ec:	817b      	strh	r3, [r7, #10]
 80046ee:	4613      	mov	r3, r2
 80046f0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	685a      	ldr	r2, [r3, #4]
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	0d5b      	lsrs	r3, r3, #21
 80046fc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004700:	4b0d      	ldr	r3, [pc, #52]	; (8004738 <I2C_TransferConfig+0x58>)
 8004702:	430b      	orrs	r3, r1
 8004704:	43db      	mvns	r3, r3
 8004706:	ea02 0103 	and.w	r1, r2, r3
 800470a:	897b      	ldrh	r3, [r7, #10]
 800470c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004710:	7a7b      	ldrb	r3, [r7, #9]
 8004712:	041b      	lsls	r3, r3, #16
 8004714:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004718:	431a      	orrs	r2, r3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	431a      	orrs	r2, r3
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	431a      	orrs	r2, r3
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	430a      	orrs	r2, r1
 8004728:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800472a:	bf00      	nop
 800472c:	3714      	adds	r7, #20
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop
 8004738:	03ff63ff 	.word	0x03ff63ff

0800473c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800473c:	b480      	push	{r7}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	460b      	mov	r3, r1
 8004746:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004748:	2300      	movs	r3, #0
 800474a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004750:	4a2a      	ldr	r2, [pc, #168]	; (80047fc <I2C_Enable_IRQ+0xc0>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d004      	beq.n	8004760 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800475a:	4a29      	ldr	r2, [pc, #164]	; (8004800 <I2C_Enable_IRQ+0xc4>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d11d      	bne.n	800479c <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004760:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004764:	2b00      	cmp	r3, #0
 8004766:	da03      	bge.n	8004770 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800476e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004770:	887b      	ldrh	r3, [r7, #2]
 8004772:	2b10      	cmp	r3, #16
 8004774:	d103      	bne.n	800477e <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800477c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800477e:	887b      	ldrh	r3, [r7, #2]
 8004780:	2b20      	cmp	r3, #32
 8004782:	d103      	bne.n	800478c <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800478a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800478c:	887b      	ldrh	r3, [r7, #2]
 800478e:	2b40      	cmp	r3, #64	; 0x40
 8004790:	d125      	bne.n	80047de <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004798:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800479a:	e020      	b.n	80047de <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800479c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	da03      	bge.n	80047ac <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80047aa:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80047ac:	887b      	ldrh	r3, [r7, #2]
 80047ae:	f003 0301 	and.w	r3, r3, #1
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d003      	beq.n	80047be <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80047bc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80047be:	887b      	ldrh	r3, [r7, #2]
 80047c0:	f003 0302 	and.w	r3, r3, #2
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d003      	beq.n	80047d0 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 80047ce:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80047d0:	887b      	ldrh	r3, [r7, #2]
 80047d2:	2b20      	cmp	r3, #32
 80047d4:	d103      	bne.n	80047de <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f043 0320 	orr.w	r3, r3, #32
 80047dc:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	6819      	ldr	r1, [r3, #0]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	430a      	orrs	r2, r1
 80047ec:	601a      	str	r2, [r3, #0]
}
 80047ee:	bf00      	nop
 80047f0:	3714      	adds	r7, #20
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	08003661 	.word	0x08003661
 8004800:	08003847 	.word	0x08003847

08004804 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004804:	b480      	push	{r7}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	460b      	mov	r3, r1
 800480e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004810:	2300      	movs	r3, #0
 8004812:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004814:	887b      	ldrh	r3, [r7, #2]
 8004816:	f003 0301 	and.w	r3, r3, #1
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00f      	beq.n	800483e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8004824:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800482c:	b2db      	uxtb	r3, r3
 800482e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004832:	2b28      	cmp	r3, #40	; 0x28
 8004834:	d003      	beq.n	800483e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800483c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800483e:	887b      	ldrh	r3, [r7, #2]
 8004840:	f003 0302 	and.w	r3, r3, #2
 8004844:	2b00      	cmp	r3, #0
 8004846:	d00f      	beq.n	8004868 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800484e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004856:	b2db      	uxtb	r3, r3
 8004858:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800485c:	2b28      	cmp	r3, #40	; 0x28
 800485e:	d003      	beq.n	8004868 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004866:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004868:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800486c:	2b00      	cmp	r3, #0
 800486e:	da03      	bge.n	8004878 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004876:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004878:	887b      	ldrh	r3, [r7, #2]
 800487a:	2b10      	cmp	r3, #16
 800487c:	d103      	bne.n	8004886 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004884:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004886:	887b      	ldrh	r3, [r7, #2]
 8004888:	2b20      	cmp	r3, #32
 800488a:	d103      	bne.n	8004894 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f043 0320 	orr.w	r3, r3, #32
 8004892:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004894:	887b      	ldrh	r3, [r7, #2]
 8004896:	2b40      	cmp	r3, #64	; 0x40
 8004898:	d103      	bne.n	80048a2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048a0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	6819      	ldr	r1, [r3, #0]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	43da      	mvns	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	400a      	ands	r2, r1
 80048b2:	601a      	str	r2, [r3, #0]
}
 80048b4:	bf00      	nop
 80048b6:	3714      	adds	r7, #20
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	2b20      	cmp	r3, #32
 80048d4:	d138      	bne.n	8004948 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d101      	bne.n	80048e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80048e0:	2302      	movs	r3, #2
 80048e2:	e032      	b.n	800494a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2224      	movs	r2, #36	; 0x24
 80048f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f022 0201 	bic.w	r2, r2, #1
 8004902:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004912:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	6819      	ldr	r1, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	683a      	ldr	r2, [r7, #0]
 8004920:	430a      	orrs	r2, r1
 8004922:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f042 0201 	orr.w	r2, r2, #1
 8004932:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2220      	movs	r2, #32
 8004938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004944:	2300      	movs	r3, #0
 8004946:	e000      	b.n	800494a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004948:	2302      	movs	r3, #2
  }
}
 800494a:	4618      	mov	r0, r3
 800494c:	370c      	adds	r7, #12
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr

08004956 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004956:	b480      	push	{r7}
 8004958:	b085      	sub	sp, #20
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
 800495e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004966:	b2db      	uxtb	r3, r3
 8004968:	2b20      	cmp	r3, #32
 800496a:	d139      	bne.n	80049e0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004972:	2b01      	cmp	r3, #1
 8004974:	d101      	bne.n	800497a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004976:	2302      	movs	r3, #2
 8004978:	e033      	b.n	80049e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2201      	movs	r2, #1
 800497e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2224      	movs	r2, #36	; 0x24
 8004986:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f022 0201 	bic.w	r2, r2, #1
 8004998:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80049a8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	021b      	lsls	r3, r3, #8
 80049ae:	68fa      	ldr	r2, [r7, #12]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f042 0201 	orr.w	r2, r2, #1
 80049ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2220      	movs	r2, #32
 80049d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80049dc:	2300      	movs	r3, #0
 80049de:	e000      	b.n	80049e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80049e0:	2302      	movs	r3, #2
  }
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3714      	adds	r7, #20
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
	...

080049f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	1d3b      	adds	r3, r7, #4
 80049fa:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049fc:	1d3b      	adds	r3, r7, #4
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d102      	bne.n	8004a0a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	f000 bef4 	b.w	80057f2 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a0a:	1d3b      	adds	r3, r7, #4
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0301 	and.w	r3, r3, #1
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	f000 816a 	beq.w	8004cee <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004a1a:	4bb3      	ldr	r3, [pc, #716]	; (8004ce8 <HAL_RCC_OscConfig+0x2f8>)
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f003 030c 	and.w	r3, r3, #12
 8004a22:	2b04      	cmp	r3, #4
 8004a24:	d00c      	beq.n	8004a40 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004a26:	4bb0      	ldr	r3, [pc, #704]	; (8004ce8 <HAL_RCC_OscConfig+0x2f8>)
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	f003 030c 	and.w	r3, r3, #12
 8004a2e:	2b08      	cmp	r3, #8
 8004a30:	d159      	bne.n	8004ae6 <HAL_RCC_OscConfig+0xf6>
 8004a32:	4bad      	ldr	r3, [pc, #692]	; (8004ce8 <HAL_RCC_OscConfig+0x2f8>)
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a3e:	d152      	bne.n	8004ae6 <HAL_RCC_OscConfig+0xf6>
 8004a40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a44:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a48:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004a4c:	fa93 f3a3 	rbit	r3, r3
 8004a50:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004a54:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a58:	fab3 f383 	clz	r3, r3
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	095b      	lsrs	r3, r3, #5
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	f043 0301 	orr.w	r3, r3, #1
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d102      	bne.n	8004a72 <HAL_RCC_OscConfig+0x82>
 8004a6c:	4b9e      	ldr	r3, [pc, #632]	; (8004ce8 <HAL_RCC_OscConfig+0x2f8>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	e015      	b.n	8004a9e <HAL_RCC_OscConfig+0xae>
 8004a72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a76:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a7a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004a7e:	fa93 f3a3 	rbit	r3, r3
 8004a82:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004a86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a8a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004a8e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004a92:	fa93 f3a3 	rbit	r3, r3
 8004a96:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004a9a:	4b93      	ldr	r3, [pc, #588]	; (8004ce8 <HAL_RCC_OscConfig+0x2f8>)
 8004a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004aa2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8004aa6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004aaa:	fa92 f2a2 	rbit	r2, r2
 8004aae:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004ab2:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004ab6:	fab2 f282 	clz	r2, r2
 8004aba:	b2d2      	uxtb	r2, r2
 8004abc:	f042 0220 	orr.w	r2, r2, #32
 8004ac0:	b2d2      	uxtb	r2, r2
 8004ac2:	f002 021f 	and.w	r2, r2, #31
 8004ac6:	2101      	movs	r1, #1
 8004ac8:	fa01 f202 	lsl.w	r2, r1, r2
 8004acc:	4013      	ands	r3, r2
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	f000 810c 	beq.w	8004cec <HAL_RCC_OscConfig+0x2fc>
 8004ad4:	1d3b      	adds	r3, r7, #4
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	f040 8106 	bne.w	8004cec <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	f000 be86 	b.w	80057f2 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ae6:	1d3b      	adds	r3, r7, #4
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004af0:	d106      	bne.n	8004b00 <HAL_RCC_OscConfig+0x110>
 8004af2:	4b7d      	ldr	r3, [pc, #500]	; (8004ce8 <HAL_RCC_OscConfig+0x2f8>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a7c      	ldr	r2, [pc, #496]	; (8004ce8 <HAL_RCC_OscConfig+0x2f8>)
 8004af8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004afc:	6013      	str	r3, [r2, #0]
 8004afe:	e030      	b.n	8004b62 <HAL_RCC_OscConfig+0x172>
 8004b00:	1d3b      	adds	r3, r7, #4
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10c      	bne.n	8004b24 <HAL_RCC_OscConfig+0x134>
 8004b0a:	4b77      	ldr	r3, [pc, #476]	; (8004ce8 <HAL_RCC_OscConfig+0x2f8>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a76      	ldr	r2, [pc, #472]	; (8004ce8 <HAL_RCC_OscConfig+0x2f8>)
 8004b10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b14:	6013      	str	r3, [r2, #0]
 8004b16:	4b74      	ldr	r3, [pc, #464]	; (8004ce8 <HAL_RCC_OscConfig+0x2f8>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a73      	ldr	r2, [pc, #460]	; (8004ce8 <HAL_RCC_OscConfig+0x2f8>)
 8004b1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b20:	6013      	str	r3, [r2, #0]
 8004b22:	e01e      	b.n	8004b62 <HAL_RCC_OscConfig+0x172>
 8004b24:	1d3b      	adds	r3, r7, #4
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b2e:	d10c      	bne.n	8004b4a <HAL_RCC_OscConfig+0x15a>
 8004b30:	4b6d      	ldr	r3, [pc, #436]	; (8004ce8 <HAL_RCC_OscConfig+0x2f8>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a6c      	ldr	r2, [pc, #432]	; (8004ce8 <HAL_RCC_OscConfig+0x2f8>)
 8004b36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b3a:	6013      	str	r3, [r2, #0]
 8004b3c:	4b6a      	ldr	r3, [pc, #424]	; (8004ce8 <HAL_RCC_OscConfig+0x2f8>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a69      	ldr	r2, [pc, #420]	; (8004ce8 <HAL_RCC_OscConfig+0x2f8>)
 8004b42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b46:	6013      	str	r3, [r2, #0]
 8004b48:	e00b      	b.n	8004b62 <HAL_RCC_OscConfig+0x172>
 8004b4a:	4b67      	ldr	r3, [pc, #412]	; (8004ce8 <HAL_RCC_OscConfig+0x2f8>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a66      	ldr	r2, [pc, #408]	; (8004ce8 <HAL_RCC_OscConfig+0x2f8>)
 8004b50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b54:	6013      	str	r3, [r2, #0]
 8004b56:	4b64      	ldr	r3, [pc, #400]	; (8004ce8 <HAL_RCC_OscConfig+0x2f8>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a63      	ldr	r2, [pc, #396]	; (8004ce8 <HAL_RCC_OscConfig+0x2f8>)
 8004b5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b60:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004b62:	4b61      	ldr	r3, [pc, #388]	; (8004ce8 <HAL_RCC_OscConfig+0x2f8>)
 8004b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b66:	f023 020f 	bic.w	r2, r3, #15
 8004b6a:	1d3b      	adds	r3, r7, #4
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	495d      	ldr	r1, [pc, #372]	; (8004ce8 <HAL_RCC_OscConfig+0x2f8>)
 8004b72:	4313      	orrs	r3, r2
 8004b74:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b76:	1d3b      	adds	r3, r7, #4
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d059      	beq.n	8004c34 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b80:	f7fc fdc4 	bl	800170c <HAL_GetTick>
 8004b84:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b88:	e00a      	b.n	8004ba0 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b8a:	f7fc fdbf 	bl	800170c <HAL_GetTick>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	2b64      	cmp	r3, #100	; 0x64
 8004b98:	d902      	bls.n	8004ba0 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	f000 be29 	b.w	80057f2 <HAL_RCC_OscConfig+0xe02>
 8004ba0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ba4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ba8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004bac:	fa93 f3a3 	rbit	r3, r3
 8004bb0:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004bb4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bb8:	fab3 f383 	clz	r3, r3
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	095b      	lsrs	r3, r3, #5
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	f043 0301 	orr.w	r3, r3, #1
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d102      	bne.n	8004bd2 <HAL_RCC_OscConfig+0x1e2>
 8004bcc:	4b46      	ldr	r3, [pc, #280]	; (8004ce8 <HAL_RCC_OscConfig+0x2f8>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	e015      	b.n	8004bfe <HAL_RCC_OscConfig+0x20e>
 8004bd2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004bd6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bda:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004bde:	fa93 f3a3 	rbit	r3, r3
 8004be2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004be6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004bea:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004bee:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004bf2:	fa93 f3a3 	rbit	r3, r3
 8004bf6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004bfa:	4b3b      	ldr	r3, [pc, #236]	; (8004ce8 <HAL_RCC_OscConfig+0x2f8>)
 8004bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004c02:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004c06:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004c0a:	fa92 f2a2 	rbit	r2, r2
 8004c0e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004c12:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004c16:	fab2 f282 	clz	r2, r2
 8004c1a:	b2d2      	uxtb	r2, r2
 8004c1c:	f042 0220 	orr.w	r2, r2, #32
 8004c20:	b2d2      	uxtb	r2, r2
 8004c22:	f002 021f 	and.w	r2, r2, #31
 8004c26:	2101      	movs	r1, #1
 8004c28:	fa01 f202 	lsl.w	r2, r1, r2
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d0ab      	beq.n	8004b8a <HAL_RCC_OscConfig+0x19a>
 8004c32:	e05c      	b.n	8004cee <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c34:	f7fc fd6a 	bl	800170c <HAL_GetTick>
 8004c38:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c3c:	e00a      	b.n	8004c54 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c3e:	f7fc fd65 	bl	800170c <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	2b64      	cmp	r3, #100	; 0x64
 8004c4c:	d902      	bls.n	8004c54 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	f000 bdcf 	b.w	80057f2 <HAL_RCC_OscConfig+0xe02>
 8004c54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c58:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c5c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004c60:	fa93 f3a3 	rbit	r3, r3
 8004c64:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004c68:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c6c:	fab3 f383 	clz	r3, r3
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	095b      	lsrs	r3, r3, #5
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	f043 0301 	orr.w	r3, r3, #1
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d102      	bne.n	8004c86 <HAL_RCC_OscConfig+0x296>
 8004c80:	4b19      	ldr	r3, [pc, #100]	; (8004ce8 <HAL_RCC_OscConfig+0x2f8>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	e015      	b.n	8004cb2 <HAL_RCC_OscConfig+0x2c2>
 8004c86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c8a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c8e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004c92:	fa93 f3a3 	rbit	r3, r3
 8004c96:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004c9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c9e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004ca2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004ca6:	fa93 f3a3 	rbit	r3, r3
 8004caa:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004cae:	4b0e      	ldr	r3, [pc, #56]	; (8004ce8 <HAL_RCC_OscConfig+0x2f8>)
 8004cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004cb6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004cba:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004cbe:	fa92 f2a2 	rbit	r2, r2
 8004cc2:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004cc6:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004cca:	fab2 f282 	clz	r2, r2
 8004cce:	b2d2      	uxtb	r2, r2
 8004cd0:	f042 0220 	orr.w	r2, r2, #32
 8004cd4:	b2d2      	uxtb	r2, r2
 8004cd6:	f002 021f 	and.w	r2, r2, #31
 8004cda:	2101      	movs	r1, #1
 8004cdc:	fa01 f202 	lsl.w	r2, r1, r2
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d1ab      	bne.n	8004c3e <HAL_RCC_OscConfig+0x24e>
 8004ce6:	e002      	b.n	8004cee <HAL_RCC_OscConfig+0x2fe>
 8004ce8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cee:	1d3b      	adds	r3, r7, #4
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0302 	and.w	r3, r3, #2
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	f000 816f 	beq.w	8004fdc <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004cfe:	4bd0      	ldr	r3, [pc, #832]	; (8005040 <HAL_RCC_OscConfig+0x650>)
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	f003 030c 	and.w	r3, r3, #12
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00b      	beq.n	8004d22 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004d0a:	4bcd      	ldr	r3, [pc, #820]	; (8005040 <HAL_RCC_OscConfig+0x650>)
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	f003 030c 	and.w	r3, r3, #12
 8004d12:	2b08      	cmp	r3, #8
 8004d14:	d16c      	bne.n	8004df0 <HAL_RCC_OscConfig+0x400>
 8004d16:	4bca      	ldr	r3, [pc, #808]	; (8005040 <HAL_RCC_OscConfig+0x650>)
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d166      	bne.n	8004df0 <HAL_RCC_OscConfig+0x400>
 8004d22:	2302      	movs	r3, #2
 8004d24:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d28:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004d2c:	fa93 f3a3 	rbit	r3, r3
 8004d30:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004d34:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d38:	fab3 f383 	clz	r3, r3
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	095b      	lsrs	r3, r3, #5
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	f043 0301 	orr.w	r3, r3, #1
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d102      	bne.n	8004d52 <HAL_RCC_OscConfig+0x362>
 8004d4c:	4bbc      	ldr	r3, [pc, #752]	; (8005040 <HAL_RCC_OscConfig+0x650>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	e013      	b.n	8004d7a <HAL_RCC_OscConfig+0x38a>
 8004d52:	2302      	movs	r3, #2
 8004d54:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d58:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004d5c:	fa93 f3a3 	rbit	r3, r3
 8004d60:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004d64:	2302      	movs	r3, #2
 8004d66:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004d6a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004d6e:	fa93 f3a3 	rbit	r3, r3
 8004d72:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004d76:	4bb2      	ldr	r3, [pc, #712]	; (8005040 <HAL_RCC_OscConfig+0x650>)
 8004d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7a:	2202      	movs	r2, #2
 8004d7c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004d80:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004d84:	fa92 f2a2 	rbit	r2, r2
 8004d88:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004d8c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004d90:	fab2 f282 	clz	r2, r2
 8004d94:	b2d2      	uxtb	r2, r2
 8004d96:	f042 0220 	orr.w	r2, r2, #32
 8004d9a:	b2d2      	uxtb	r2, r2
 8004d9c:	f002 021f 	and.w	r2, r2, #31
 8004da0:	2101      	movs	r1, #1
 8004da2:	fa01 f202 	lsl.w	r2, r1, r2
 8004da6:	4013      	ands	r3, r2
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d007      	beq.n	8004dbc <HAL_RCC_OscConfig+0x3cc>
 8004dac:	1d3b      	adds	r3, r7, #4
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d002      	beq.n	8004dbc <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	f000 bd1b 	b.w	80057f2 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dbc:	4ba0      	ldr	r3, [pc, #640]	; (8005040 <HAL_RCC_OscConfig+0x650>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004dc4:	1d3b      	adds	r3, r7, #4
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	695b      	ldr	r3, [r3, #20]
 8004dca:	21f8      	movs	r1, #248	; 0xf8
 8004dcc:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dd0:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004dd4:	fa91 f1a1 	rbit	r1, r1
 8004dd8:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004ddc:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004de0:	fab1 f181 	clz	r1, r1
 8004de4:	b2c9      	uxtb	r1, r1
 8004de6:	408b      	lsls	r3, r1
 8004de8:	4995      	ldr	r1, [pc, #596]	; (8005040 <HAL_RCC_OscConfig+0x650>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dee:	e0f5      	b.n	8004fdc <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004df0:	1d3b      	adds	r3, r7, #4
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	f000 8085 	beq.w	8004f06 <HAL_RCC_OscConfig+0x516>
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e02:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004e06:	fa93 f3a3 	rbit	r3, r3
 8004e0a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004e0e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e12:	fab3 f383 	clz	r3, r3
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004e1c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	461a      	mov	r2, r3
 8004e24:	2301      	movs	r3, #1
 8004e26:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e28:	f7fc fc70 	bl	800170c <HAL_GetTick>
 8004e2c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e30:	e00a      	b.n	8004e48 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e32:	f7fc fc6b 	bl	800170c <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d902      	bls.n	8004e48 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	f000 bcd5 	b.w	80057f2 <HAL_RCC_OscConfig+0xe02>
 8004e48:	2302      	movs	r3, #2
 8004e4a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e4e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004e52:	fa93 f3a3 	rbit	r3, r3
 8004e56:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004e5a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e5e:	fab3 f383 	clz	r3, r3
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	095b      	lsrs	r3, r3, #5
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	f043 0301 	orr.w	r3, r3, #1
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d102      	bne.n	8004e78 <HAL_RCC_OscConfig+0x488>
 8004e72:	4b73      	ldr	r3, [pc, #460]	; (8005040 <HAL_RCC_OscConfig+0x650>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	e013      	b.n	8004ea0 <HAL_RCC_OscConfig+0x4b0>
 8004e78:	2302      	movs	r3, #2
 8004e7a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e7e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004e82:	fa93 f3a3 	rbit	r3, r3
 8004e86:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004e8a:	2302      	movs	r3, #2
 8004e8c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004e90:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004e94:	fa93 f3a3 	rbit	r3, r3
 8004e98:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004e9c:	4b68      	ldr	r3, [pc, #416]	; (8005040 <HAL_RCC_OscConfig+0x650>)
 8004e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea0:	2202      	movs	r2, #2
 8004ea2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004ea6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004eaa:	fa92 f2a2 	rbit	r2, r2
 8004eae:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004eb2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004eb6:	fab2 f282 	clz	r2, r2
 8004eba:	b2d2      	uxtb	r2, r2
 8004ebc:	f042 0220 	orr.w	r2, r2, #32
 8004ec0:	b2d2      	uxtb	r2, r2
 8004ec2:	f002 021f 	and.w	r2, r2, #31
 8004ec6:	2101      	movs	r1, #1
 8004ec8:	fa01 f202 	lsl.w	r2, r1, r2
 8004ecc:	4013      	ands	r3, r2
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d0af      	beq.n	8004e32 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ed2:	4b5b      	ldr	r3, [pc, #364]	; (8005040 <HAL_RCC_OscConfig+0x650>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004eda:	1d3b      	adds	r3, r7, #4
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	695b      	ldr	r3, [r3, #20]
 8004ee0:	21f8      	movs	r1, #248	; 0xf8
 8004ee2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ee6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004eea:	fa91 f1a1 	rbit	r1, r1
 8004eee:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004ef2:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004ef6:	fab1 f181 	clz	r1, r1
 8004efa:	b2c9      	uxtb	r1, r1
 8004efc:	408b      	lsls	r3, r1
 8004efe:	4950      	ldr	r1, [pc, #320]	; (8005040 <HAL_RCC_OscConfig+0x650>)
 8004f00:	4313      	orrs	r3, r2
 8004f02:	600b      	str	r3, [r1, #0]
 8004f04:	e06a      	b.n	8004fdc <HAL_RCC_OscConfig+0x5ec>
 8004f06:	2301      	movs	r3, #1
 8004f08:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f0c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004f10:	fa93 f3a3 	rbit	r3, r3
 8004f14:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004f18:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f1c:	fab3 f383 	clz	r3, r3
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004f26:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	2300      	movs	r3, #0
 8004f30:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f32:	f7fc fbeb 	bl	800170c <HAL_GetTick>
 8004f36:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f3a:	e00a      	b.n	8004f52 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f3c:	f7fc fbe6 	bl	800170c <HAL_GetTick>
 8004f40:	4602      	mov	r2, r0
 8004f42:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	d902      	bls.n	8004f52 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	f000 bc50 	b.w	80057f2 <HAL_RCC_OscConfig+0xe02>
 8004f52:	2302      	movs	r3, #2
 8004f54:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f58:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004f5c:	fa93 f3a3 	rbit	r3, r3
 8004f60:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004f64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f68:	fab3 f383 	clz	r3, r3
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	095b      	lsrs	r3, r3, #5
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	f043 0301 	orr.w	r3, r3, #1
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d102      	bne.n	8004f82 <HAL_RCC_OscConfig+0x592>
 8004f7c:	4b30      	ldr	r3, [pc, #192]	; (8005040 <HAL_RCC_OscConfig+0x650>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	e013      	b.n	8004faa <HAL_RCC_OscConfig+0x5ba>
 8004f82:	2302      	movs	r3, #2
 8004f84:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f88:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004f8c:	fa93 f3a3 	rbit	r3, r3
 8004f90:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004f94:	2302      	movs	r3, #2
 8004f96:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004f9a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004f9e:	fa93 f3a3 	rbit	r3, r3
 8004fa2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004fa6:	4b26      	ldr	r3, [pc, #152]	; (8005040 <HAL_RCC_OscConfig+0x650>)
 8004fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004faa:	2202      	movs	r2, #2
 8004fac:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004fb0:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004fb4:	fa92 f2a2 	rbit	r2, r2
 8004fb8:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004fbc:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004fc0:	fab2 f282 	clz	r2, r2
 8004fc4:	b2d2      	uxtb	r2, r2
 8004fc6:	f042 0220 	orr.w	r2, r2, #32
 8004fca:	b2d2      	uxtb	r2, r2
 8004fcc:	f002 021f 	and.w	r2, r2, #31
 8004fd0:	2101      	movs	r1, #1
 8004fd2:	fa01 f202 	lsl.w	r2, r1, r2
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d1af      	bne.n	8004f3c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fdc:	1d3b      	adds	r3, r7, #4
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 0308 	and.w	r3, r3, #8
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	f000 80da 	beq.w	80051a0 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004fec:	1d3b      	adds	r3, r7, #4
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	699b      	ldr	r3, [r3, #24]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d069      	beq.n	80050ca <HAL_RCC_OscConfig+0x6da>
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ffc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005000:	fa93 f3a3 	rbit	r3, r3
 8005004:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8005008:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800500c:	fab3 f383 	clz	r3, r3
 8005010:	b2db      	uxtb	r3, r3
 8005012:	461a      	mov	r2, r3
 8005014:	4b0b      	ldr	r3, [pc, #44]	; (8005044 <HAL_RCC_OscConfig+0x654>)
 8005016:	4413      	add	r3, r2
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	461a      	mov	r2, r3
 800501c:	2301      	movs	r3, #1
 800501e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005020:	f7fc fb74 	bl	800170c <HAL_GetTick>
 8005024:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005028:	e00e      	b.n	8005048 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800502a:	f7fc fb6f 	bl	800170c <HAL_GetTick>
 800502e:	4602      	mov	r2, r0
 8005030:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	2b02      	cmp	r3, #2
 8005038:	d906      	bls.n	8005048 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e3d9      	b.n	80057f2 <HAL_RCC_OscConfig+0xe02>
 800503e:	bf00      	nop
 8005040:	40021000 	.word	0x40021000
 8005044:	10908120 	.word	0x10908120
 8005048:	2302      	movs	r3, #2
 800504a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800504e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005052:	fa93 f3a3 	rbit	r3, r3
 8005056:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800505a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800505e:	2202      	movs	r2, #2
 8005060:	601a      	str	r2, [r3, #0]
 8005062:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	fa93 f2a3 	rbit	r2, r3
 800506c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005070:	601a      	str	r2, [r3, #0]
 8005072:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8005076:	2202      	movs	r2, #2
 8005078:	601a      	str	r2, [r3, #0]
 800507a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	fa93 f2a3 	rbit	r2, r3
 8005084:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8005088:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800508a:	4ba5      	ldr	r3, [pc, #660]	; (8005320 <HAL_RCC_OscConfig+0x930>)
 800508c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800508e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8005092:	2102      	movs	r1, #2
 8005094:	6019      	str	r1, [r3, #0]
 8005096:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	fa93 f1a3 	rbit	r1, r3
 80050a0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80050a4:	6019      	str	r1, [r3, #0]
  return result;
 80050a6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	fab3 f383 	clz	r3, r3
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	f003 031f 	and.w	r3, r3, #31
 80050bc:	2101      	movs	r1, #1
 80050be:	fa01 f303 	lsl.w	r3, r1, r3
 80050c2:	4013      	ands	r3, r2
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d0b0      	beq.n	800502a <HAL_RCC_OscConfig+0x63a>
 80050c8:	e06a      	b.n	80051a0 <HAL_RCC_OscConfig+0x7b0>
 80050ca:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80050ce:	2201      	movs	r2, #1
 80050d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050d2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	fa93 f2a3 	rbit	r2, r3
 80050dc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80050e0:	601a      	str	r2, [r3, #0]
  return result;
 80050e2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80050e6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050e8:	fab3 f383 	clz	r3, r3
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	461a      	mov	r2, r3
 80050f0:	4b8c      	ldr	r3, [pc, #560]	; (8005324 <HAL_RCC_OscConfig+0x934>)
 80050f2:	4413      	add	r3, r2
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	461a      	mov	r2, r3
 80050f8:	2300      	movs	r3, #0
 80050fa:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050fc:	f7fc fb06 	bl	800170c <HAL_GetTick>
 8005100:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005104:	e009      	b.n	800511a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005106:	f7fc fb01 	bl	800170c <HAL_GetTick>
 800510a:	4602      	mov	r2, r0
 800510c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	2b02      	cmp	r3, #2
 8005114:	d901      	bls.n	800511a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	e36b      	b.n	80057f2 <HAL_RCC_OscConfig+0xe02>
 800511a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800511e:	2202      	movs	r2, #2
 8005120:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005122:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	fa93 f2a3 	rbit	r2, r3
 800512c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005130:	601a      	str	r2, [r3, #0]
 8005132:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005136:	2202      	movs	r2, #2
 8005138:	601a      	str	r2, [r3, #0]
 800513a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	fa93 f2a3 	rbit	r2, r3
 8005144:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005148:	601a      	str	r2, [r3, #0]
 800514a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800514e:	2202      	movs	r2, #2
 8005150:	601a      	str	r2, [r3, #0]
 8005152:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	fa93 f2a3 	rbit	r2, r3
 800515c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005160:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005162:	4b6f      	ldr	r3, [pc, #444]	; (8005320 <HAL_RCC_OscConfig+0x930>)
 8005164:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005166:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800516a:	2102      	movs	r1, #2
 800516c:	6019      	str	r1, [r3, #0]
 800516e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	fa93 f1a3 	rbit	r1, r3
 8005178:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800517c:	6019      	str	r1, [r3, #0]
  return result;
 800517e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	fab3 f383 	clz	r3, r3
 8005188:	b2db      	uxtb	r3, r3
 800518a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800518e:	b2db      	uxtb	r3, r3
 8005190:	f003 031f 	and.w	r3, r3, #31
 8005194:	2101      	movs	r1, #1
 8005196:	fa01 f303 	lsl.w	r3, r1, r3
 800519a:	4013      	ands	r3, r2
 800519c:	2b00      	cmp	r3, #0
 800519e:	d1b2      	bne.n	8005106 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051a0:	1d3b      	adds	r3, r7, #4
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0304 	and.w	r3, r3, #4
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	f000 8158 	beq.w	8005460 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051b0:	2300      	movs	r3, #0
 80051b2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051b6:	4b5a      	ldr	r3, [pc, #360]	; (8005320 <HAL_RCC_OscConfig+0x930>)
 80051b8:	69db      	ldr	r3, [r3, #28]
 80051ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d112      	bne.n	80051e8 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051c2:	4b57      	ldr	r3, [pc, #348]	; (8005320 <HAL_RCC_OscConfig+0x930>)
 80051c4:	69db      	ldr	r3, [r3, #28]
 80051c6:	4a56      	ldr	r2, [pc, #344]	; (8005320 <HAL_RCC_OscConfig+0x930>)
 80051c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051cc:	61d3      	str	r3, [r2, #28]
 80051ce:	4b54      	ldr	r3, [pc, #336]	; (8005320 <HAL_RCC_OscConfig+0x930>)
 80051d0:	69db      	ldr	r3, [r3, #28]
 80051d2:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80051d6:	f107 0308 	add.w	r3, r7, #8
 80051da:	601a      	str	r2, [r3, #0]
 80051dc:	f107 0308 	add.w	r3, r7, #8
 80051e0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80051e2:	2301      	movs	r3, #1
 80051e4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051e8:	4b4f      	ldr	r3, [pc, #316]	; (8005328 <HAL_RCC_OscConfig+0x938>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d11a      	bne.n	800522a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051f4:	4b4c      	ldr	r3, [pc, #304]	; (8005328 <HAL_RCC_OscConfig+0x938>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a4b      	ldr	r2, [pc, #300]	; (8005328 <HAL_RCC_OscConfig+0x938>)
 80051fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051fe:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005200:	f7fc fa84 	bl	800170c <HAL_GetTick>
 8005204:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005208:	e009      	b.n	800521e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800520a:	f7fc fa7f 	bl	800170c <HAL_GetTick>
 800520e:	4602      	mov	r2, r0
 8005210:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	2b64      	cmp	r3, #100	; 0x64
 8005218:	d901      	bls.n	800521e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	e2e9      	b.n	80057f2 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800521e:	4b42      	ldr	r3, [pc, #264]	; (8005328 <HAL_RCC_OscConfig+0x938>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005226:	2b00      	cmp	r3, #0
 8005228:	d0ef      	beq.n	800520a <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800522a:	1d3b      	adds	r3, r7, #4
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	2b01      	cmp	r3, #1
 8005232:	d106      	bne.n	8005242 <HAL_RCC_OscConfig+0x852>
 8005234:	4b3a      	ldr	r3, [pc, #232]	; (8005320 <HAL_RCC_OscConfig+0x930>)
 8005236:	6a1b      	ldr	r3, [r3, #32]
 8005238:	4a39      	ldr	r2, [pc, #228]	; (8005320 <HAL_RCC_OscConfig+0x930>)
 800523a:	f043 0301 	orr.w	r3, r3, #1
 800523e:	6213      	str	r3, [r2, #32]
 8005240:	e02f      	b.n	80052a2 <HAL_RCC_OscConfig+0x8b2>
 8005242:	1d3b      	adds	r3, r7, #4
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d10c      	bne.n	8005266 <HAL_RCC_OscConfig+0x876>
 800524c:	4b34      	ldr	r3, [pc, #208]	; (8005320 <HAL_RCC_OscConfig+0x930>)
 800524e:	6a1b      	ldr	r3, [r3, #32]
 8005250:	4a33      	ldr	r2, [pc, #204]	; (8005320 <HAL_RCC_OscConfig+0x930>)
 8005252:	f023 0301 	bic.w	r3, r3, #1
 8005256:	6213      	str	r3, [r2, #32]
 8005258:	4b31      	ldr	r3, [pc, #196]	; (8005320 <HAL_RCC_OscConfig+0x930>)
 800525a:	6a1b      	ldr	r3, [r3, #32]
 800525c:	4a30      	ldr	r2, [pc, #192]	; (8005320 <HAL_RCC_OscConfig+0x930>)
 800525e:	f023 0304 	bic.w	r3, r3, #4
 8005262:	6213      	str	r3, [r2, #32]
 8005264:	e01d      	b.n	80052a2 <HAL_RCC_OscConfig+0x8b2>
 8005266:	1d3b      	adds	r3, r7, #4
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	2b05      	cmp	r3, #5
 800526e:	d10c      	bne.n	800528a <HAL_RCC_OscConfig+0x89a>
 8005270:	4b2b      	ldr	r3, [pc, #172]	; (8005320 <HAL_RCC_OscConfig+0x930>)
 8005272:	6a1b      	ldr	r3, [r3, #32]
 8005274:	4a2a      	ldr	r2, [pc, #168]	; (8005320 <HAL_RCC_OscConfig+0x930>)
 8005276:	f043 0304 	orr.w	r3, r3, #4
 800527a:	6213      	str	r3, [r2, #32]
 800527c:	4b28      	ldr	r3, [pc, #160]	; (8005320 <HAL_RCC_OscConfig+0x930>)
 800527e:	6a1b      	ldr	r3, [r3, #32]
 8005280:	4a27      	ldr	r2, [pc, #156]	; (8005320 <HAL_RCC_OscConfig+0x930>)
 8005282:	f043 0301 	orr.w	r3, r3, #1
 8005286:	6213      	str	r3, [r2, #32]
 8005288:	e00b      	b.n	80052a2 <HAL_RCC_OscConfig+0x8b2>
 800528a:	4b25      	ldr	r3, [pc, #148]	; (8005320 <HAL_RCC_OscConfig+0x930>)
 800528c:	6a1b      	ldr	r3, [r3, #32]
 800528e:	4a24      	ldr	r2, [pc, #144]	; (8005320 <HAL_RCC_OscConfig+0x930>)
 8005290:	f023 0301 	bic.w	r3, r3, #1
 8005294:	6213      	str	r3, [r2, #32]
 8005296:	4b22      	ldr	r3, [pc, #136]	; (8005320 <HAL_RCC_OscConfig+0x930>)
 8005298:	6a1b      	ldr	r3, [r3, #32]
 800529a:	4a21      	ldr	r2, [pc, #132]	; (8005320 <HAL_RCC_OscConfig+0x930>)
 800529c:	f023 0304 	bic.w	r3, r3, #4
 80052a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80052a2:	1d3b      	adds	r3, r7, #4
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d06b      	beq.n	8005384 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052ac:	f7fc fa2e 	bl	800170c <HAL_GetTick>
 80052b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052b4:	e00b      	b.n	80052ce <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052b6:	f7fc fa29 	bl	800170c <HAL_GetTick>
 80052ba:	4602      	mov	r2, r0
 80052bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d901      	bls.n	80052ce <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e291      	b.n	80057f2 <HAL_RCC_OscConfig+0xe02>
 80052ce:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80052d2:	2202      	movs	r2, #2
 80052d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052d6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	fa93 f2a3 	rbit	r2, r3
 80052e0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80052e4:	601a      	str	r2, [r3, #0]
 80052e6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80052ea:	2202      	movs	r2, #2
 80052ec:	601a      	str	r2, [r3, #0]
 80052ee:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	fa93 f2a3 	rbit	r2, r3
 80052f8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80052fc:	601a      	str	r2, [r3, #0]
  return result;
 80052fe:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005302:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005304:	fab3 f383 	clz	r3, r3
 8005308:	b2db      	uxtb	r3, r3
 800530a:	095b      	lsrs	r3, r3, #5
 800530c:	b2db      	uxtb	r3, r3
 800530e:	f043 0302 	orr.w	r3, r3, #2
 8005312:	b2db      	uxtb	r3, r3
 8005314:	2b02      	cmp	r3, #2
 8005316:	d109      	bne.n	800532c <HAL_RCC_OscConfig+0x93c>
 8005318:	4b01      	ldr	r3, [pc, #4]	; (8005320 <HAL_RCC_OscConfig+0x930>)
 800531a:	6a1b      	ldr	r3, [r3, #32]
 800531c:	e014      	b.n	8005348 <HAL_RCC_OscConfig+0x958>
 800531e:	bf00      	nop
 8005320:	40021000 	.word	0x40021000
 8005324:	10908120 	.word	0x10908120
 8005328:	40007000 	.word	0x40007000
 800532c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005330:	2202      	movs	r2, #2
 8005332:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005334:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	fa93 f2a3 	rbit	r2, r3
 800533e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005342:	601a      	str	r2, [r3, #0]
 8005344:	4bbb      	ldr	r3, [pc, #748]	; (8005634 <HAL_RCC_OscConfig+0xc44>)
 8005346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005348:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800534c:	2102      	movs	r1, #2
 800534e:	6011      	str	r1, [r2, #0]
 8005350:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005354:	6812      	ldr	r2, [r2, #0]
 8005356:	fa92 f1a2 	rbit	r1, r2
 800535a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800535e:	6011      	str	r1, [r2, #0]
  return result;
 8005360:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005364:	6812      	ldr	r2, [r2, #0]
 8005366:	fab2 f282 	clz	r2, r2
 800536a:	b2d2      	uxtb	r2, r2
 800536c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005370:	b2d2      	uxtb	r2, r2
 8005372:	f002 021f 	and.w	r2, r2, #31
 8005376:	2101      	movs	r1, #1
 8005378:	fa01 f202 	lsl.w	r2, r1, r2
 800537c:	4013      	ands	r3, r2
 800537e:	2b00      	cmp	r3, #0
 8005380:	d099      	beq.n	80052b6 <HAL_RCC_OscConfig+0x8c6>
 8005382:	e063      	b.n	800544c <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005384:	f7fc f9c2 	bl	800170c <HAL_GetTick>
 8005388:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800538c:	e00b      	b.n	80053a6 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800538e:	f7fc f9bd 	bl	800170c <HAL_GetTick>
 8005392:	4602      	mov	r2, r0
 8005394:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	f241 3288 	movw	r2, #5000	; 0x1388
 800539e:	4293      	cmp	r3, r2
 80053a0:	d901      	bls.n	80053a6 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	e225      	b.n	80057f2 <HAL_RCC_OscConfig+0xe02>
 80053a6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80053aa:	2202      	movs	r2, #2
 80053ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ae:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	fa93 f2a3 	rbit	r2, r3
 80053b8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80053bc:	601a      	str	r2, [r3, #0]
 80053be:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80053c2:	2202      	movs	r2, #2
 80053c4:	601a      	str	r2, [r3, #0]
 80053c6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	fa93 f2a3 	rbit	r2, r3
 80053d0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80053d4:	601a      	str	r2, [r3, #0]
  return result;
 80053d6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80053da:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053dc:	fab3 f383 	clz	r3, r3
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	095b      	lsrs	r3, r3, #5
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	f043 0302 	orr.w	r3, r3, #2
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d102      	bne.n	80053f6 <HAL_RCC_OscConfig+0xa06>
 80053f0:	4b90      	ldr	r3, [pc, #576]	; (8005634 <HAL_RCC_OscConfig+0xc44>)
 80053f2:	6a1b      	ldr	r3, [r3, #32]
 80053f4:	e00d      	b.n	8005412 <HAL_RCC_OscConfig+0xa22>
 80053f6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80053fa:	2202      	movs	r2, #2
 80053fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053fe:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	fa93 f2a3 	rbit	r2, r3
 8005408:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800540c:	601a      	str	r2, [r3, #0]
 800540e:	4b89      	ldr	r3, [pc, #548]	; (8005634 <HAL_RCC_OscConfig+0xc44>)
 8005410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005412:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005416:	2102      	movs	r1, #2
 8005418:	6011      	str	r1, [r2, #0]
 800541a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800541e:	6812      	ldr	r2, [r2, #0]
 8005420:	fa92 f1a2 	rbit	r1, r2
 8005424:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8005428:	6011      	str	r1, [r2, #0]
  return result;
 800542a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800542e:	6812      	ldr	r2, [r2, #0]
 8005430:	fab2 f282 	clz	r2, r2
 8005434:	b2d2      	uxtb	r2, r2
 8005436:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800543a:	b2d2      	uxtb	r2, r2
 800543c:	f002 021f 	and.w	r2, r2, #31
 8005440:	2101      	movs	r1, #1
 8005442:	fa01 f202 	lsl.w	r2, r1, r2
 8005446:	4013      	ands	r3, r2
 8005448:	2b00      	cmp	r3, #0
 800544a:	d1a0      	bne.n	800538e <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800544c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8005450:	2b01      	cmp	r3, #1
 8005452:	d105      	bne.n	8005460 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005454:	4b77      	ldr	r3, [pc, #476]	; (8005634 <HAL_RCC_OscConfig+0xc44>)
 8005456:	69db      	ldr	r3, [r3, #28]
 8005458:	4a76      	ldr	r2, [pc, #472]	; (8005634 <HAL_RCC_OscConfig+0xc44>)
 800545a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800545e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005460:	1d3b      	adds	r3, r7, #4
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	69db      	ldr	r3, [r3, #28]
 8005466:	2b00      	cmp	r3, #0
 8005468:	f000 81c2 	beq.w	80057f0 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800546c:	4b71      	ldr	r3, [pc, #452]	; (8005634 <HAL_RCC_OscConfig+0xc44>)
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	f003 030c 	and.w	r3, r3, #12
 8005474:	2b08      	cmp	r3, #8
 8005476:	f000 819c 	beq.w	80057b2 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800547a:	1d3b      	adds	r3, r7, #4
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	69db      	ldr	r3, [r3, #28]
 8005480:	2b02      	cmp	r3, #2
 8005482:	f040 8114 	bne.w	80056ae <HAL_RCC_OscConfig+0xcbe>
 8005486:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800548a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800548e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005490:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	fa93 f2a3 	rbit	r2, r3
 800549a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800549e:	601a      	str	r2, [r3, #0]
  return result;
 80054a0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80054a4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054a6:	fab3 f383 	clz	r3, r3
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80054b0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	461a      	mov	r2, r3
 80054b8:	2300      	movs	r3, #0
 80054ba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054bc:	f7fc f926 	bl	800170c <HAL_GetTick>
 80054c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054c4:	e009      	b.n	80054da <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054c6:	f7fc f921 	bl	800170c <HAL_GetTick>
 80054ca:	4602      	mov	r2, r0
 80054cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d901      	bls.n	80054da <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e18b      	b.n	80057f2 <HAL_RCC_OscConfig+0xe02>
 80054da:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80054de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80054e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054e4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	fa93 f2a3 	rbit	r2, r3
 80054ee:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80054f2:	601a      	str	r2, [r3, #0]
  return result;
 80054f4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80054f8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054fa:	fab3 f383 	clz	r3, r3
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	095b      	lsrs	r3, r3, #5
 8005502:	b2db      	uxtb	r3, r3
 8005504:	f043 0301 	orr.w	r3, r3, #1
 8005508:	b2db      	uxtb	r3, r3
 800550a:	2b01      	cmp	r3, #1
 800550c:	d102      	bne.n	8005514 <HAL_RCC_OscConfig+0xb24>
 800550e:	4b49      	ldr	r3, [pc, #292]	; (8005634 <HAL_RCC_OscConfig+0xc44>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	e01b      	b.n	800554c <HAL_RCC_OscConfig+0xb5c>
 8005514:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005518:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800551c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800551e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	fa93 f2a3 	rbit	r2, r3
 8005528:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800552c:	601a      	str	r2, [r3, #0]
 800552e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005532:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005536:	601a      	str	r2, [r3, #0]
 8005538:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	fa93 f2a3 	rbit	r2, r3
 8005542:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005546:	601a      	str	r2, [r3, #0]
 8005548:	4b3a      	ldr	r3, [pc, #232]	; (8005634 <HAL_RCC_OscConfig+0xc44>)
 800554a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005550:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005554:	6011      	str	r1, [r2, #0]
 8005556:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800555a:	6812      	ldr	r2, [r2, #0]
 800555c:	fa92 f1a2 	rbit	r1, r2
 8005560:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005564:	6011      	str	r1, [r2, #0]
  return result;
 8005566:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800556a:	6812      	ldr	r2, [r2, #0]
 800556c:	fab2 f282 	clz	r2, r2
 8005570:	b2d2      	uxtb	r2, r2
 8005572:	f042 0220 	orr.w	r2, r2, #32
 8005576:	b2d2      	uxtb	r2, r2
 8005578:	f002 021f 	and.w	r2, r2, #31
 800557c:	2101      	movs	r1, #1
 800557e:	fa01 f202 	lsl.w	r2, r1, r2
 8005582:	4013      	ands	r3, r2
 8005584:	2b00      	cmp	r3, #0
 8005586:	d19e      	bne.n	80054c6 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005588:	4b2a      	ldr	r3, [pc, #168]	; (8005634 <HAL_RCC_OscConfig+0xc44>)
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005590:	1d3b      	adds	r3, r7, #4
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005596:	1d3b      	adds	r3, r7, #4
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	6a1b      	ldr	r3, [r3, #32]
 800559c:	430b      	orrs	r3, r1
 800559e:	4925      	ldr	r1, [pc, #148]	; (8005634 <HAL_RCC_OscConfig+0xc44>)
 80055a0:	4313      	orrs	r3, r2
 80055a2:	604b      	str	r3, [r1, #4]
 80055a4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80055a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80055ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055ae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	fa93 f2a3 	rbit	r2, r3
 80055b8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80055bc:	601a      	str	r2, [r3, #0]
  return result;
 80055be:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80055c2:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055c4:	fab3 f383 	clz	r3, r3
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80055ce:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	461a      	mov	r2, r3
 80055d6:	2301      	movs	r3, #1
 80055d8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055da:	f7fc f897 	bl	800170c <HAL_GetTick>
 80055de:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80055e2:	e009      	b.n	80055f8 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055e4:	f7fc f892 	bl	800170c <HAL_GetTick>
 80055e8:	4602      	mov	r2, r0
 80055ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	2b02      	cmp	r3, #2
 80055f2:	d901      	bls.n	80055f8 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80055f4:	2303      	movs	r3, #3
 80055f6:	e0fc      	b.n	80057f2 <HAL_RCC_OscConfig+0xe02>
 80055f8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80055fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005600:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005602:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	fa93 f2a3 	rbit	r2, r3
 800560c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005610:	601a      	str	r2, [r3, #0]
  return result;
 8005612:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005616:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005618:	fab3 f383 	clz	r3, r3
 800561c:	b2db      	uxtb	r3, r3
 800561e:	095b      	lsrs	r3, r3, #5
 8005620:	b2db      	uxtb	r3, r3
 8005622:	f043 0301 	orr.w	r3, r3, #1
 8005626:	b2db      	uxtb	r3, r3
 8005628:	2b01      	cmp	r3, #1
 800562a:	d105      	bne.n	8005638 <HAL_RCC_OscConfig+0xc48>
 800562c:	4b01      	ldr	r3, [pc, #4]	; (8005634 <HAL_RCC_OscConfig+0xc44>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	e01e      	b.n	8005670 <HAL_RCC_OscConfig+0xc80>
 8005632:	bf00      	nop
 8005634:	40021000 	.word	0x40021000
 8005638:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800563c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005640:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005642:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	fa93 f2a3 	rbit	r2, r3
 800564c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005650:	601a      	str	r2, [r3, #0]
 8005652:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005656:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800565a:	601a      	str	r2, [r3, #0]
 800565c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	fa93 f2a3 	rbit	r2, r3
 8005666:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800566a:	601a      	str	r2, [r3, #0]
 800566c:	4b63      	ldr	r3, [pc, #396]	; (80057fc <HAL_RCC_OscConfig+0xe0c>)
 800566e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005670:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005674:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005678:	6011      	str	r1, [r2, #0]
 800567a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800567e:	6812      	ldr	r2, [r2, #0]
 8005680:	fa92 f1a2 	rbit	r1, r2
 8005684:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005688:	6011      	str	r1, [r2, #0]
  return result;
 800568a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800568e:	6812      	ldr	r2, [r2, #0]
 8005690:	fab2 f282 	clz	r2, r2
 8005694:	b2d2      	uxtb	r2, r2
 8005696:	f042 0220 	orr.w	r2, r2, #32
 800569a:	b2d2      	uxtb	r2, r2
 800569c:	f002 021f 	and.w	r2, r2, #31
 80056a0:	2101      	movs	r1, #1
 80056a2:	fa01 f202 	lsl.w	r2, r1, r2
 80056a6:	4013      	ands	r3, r2
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d09b      	beq.n	80055e4 <HAL_RCC_OscConfig+0xbf4>
 80056ac:	e0a0      	b.n	80057f0 <HAL_RCC_OscConfig+0xe00>
 80056ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80056b2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80056b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	fa93 f2a3 	rbit	r2, r3
 80056c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80056c6:	601a      	str	r2, [r3, #0]
  return result;
 80056c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80056cc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056ce:	fab3 f383 	clz	r3, r3
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80056d8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	461a      	mov	r2, r3
 80056e0:	2300      	movs	r3, #0
 80056e2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056e4:	f7fc f812 	bl	800170c <HAL_GetTick>
 80056e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056ec:	e009      	b.n	8005702 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056ee:	f7fc f80d 	bl	800170c <HAL_GetTick>
 80056f2:	4602      	mov	r2, r0
 80056f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	d901      	bls.n	8005702 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	e077      	b.n	80057f2 <HAL_RCC_OscConfig+0xe02>
 8005702:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005706:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800570a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800570c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	fa93 f2a3 	rbit	r2, r3
 8005716:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800571a:	601a      	str	r2, [r3, #0]
  return result;
 800571c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005720:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005722:	fab3 f383 	clz	r3, r3
 8005726:	b2db      	uxtb	r3, r3
 8005728:	095b      	lsrs	r3, r3, #5
 800572a:	b2db      	uxtb	r3, r3
 800572c:	f043 0301 	orr.w	r3, r3, #1
 8005730:	b2db      	uxtb	r3, r3
 8005732:	2b01      	cmp	r3, #1
 8005734:	d102      	bne.n	800573c <HAL_RCC_OscConfig+0xd4c>
 8005736:	4b31      	ldr	r3, [pc, #196]	; (80057fc <HAL_RCC_OscConfig+0xe0c>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	e01b      	b.n	8005774 <HAL_RCC_OscConfig+0xd84>
 800573c:	f107 0320 	add.w	r3, r7, #32
 8005740:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005744:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005746:	f107 0320 	add.w	r3, r7, #32
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	fa93 f2a3 	rbit	r2, r3
 8005750:	f107 031c 	add.w	r3, r7, #28
 8005754:	601a      	str	r2, [r3, #0]
 8005756:	f107 0318 	add.w	r3, r7, #24
 800575a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800575e:	601a      	str	r2, [r3, #0]
 8005760:	f107 0318 	add.w	r3, r7, #24
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	fa93 f2a3 	rbit	r2, r3
 800576a:	f107 0314 	add.w	r3, r7, #20
 800576e:	601a      	str	r2, [r3, #0]
 8005770:	4b22      	ldr	r3, [pc, #136]	; (80057fc <HAL_RCC_OscConfig+0xe0c>)
 8005772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005774:	f107 0210 	add.w	r2, r7, #16
 8005778:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800577c:	6011      	str	r1, [r2, #0]
 800577e:	f107 0210 	add.w	r2, r7, #16
 8005782:	6812      	ldr	r2, [r2, #0]
 8005784:	fa92 f1a2 	rbit	r1, r2
 8005788:	f107 020c 	add.w	r2, r7, #12
 800578c:	6011      	str	r1, [r2, #0]
  return result;
 800578e:	f107 020c 	add.w	r2, r7, #12
 8005792:	6812      	ldr	r2, [r2, #0]
 8005794:	fab2 f282 	clz	r2, r2
 8005798:	b2d2      	uxtb	r2, r2
 800579a:	f042 0220 	orr.w	r2, r2, #32
 800579e:	b2d2      	uxtb	r2, r2
 80057a0:	f002 021f 	and.w	r2, r2, #31
 80057a4:	2101      	movs	r1, #1
 80057a6:	fa01 f202 	lsl.w	r2, r1, r2
 80057aa:	4013      	ands	r3, r2
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d19e      	bne.n	80056ee <HAL_RCC_OscConfig+0xcfe>
 80057b0:	e01e      	b.n	80057f0 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057b2:	1d3b      	adds	r3, r7, #4
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	69db      	ldr	r3, [r3, #28]
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d101      	bne.n	80057c0 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	e018      	b.n	80057f2 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80057c0:	4b0e      	ldr	r3, [pc, #56]	; (80057fc <HAL_RCC_OscConfig+0xe0c>)
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80057c8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80057cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80057d0:	1d3b      	adds	r3, r7, #4
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	6a1b      	ldr	r3, [r3, #32]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d108      	bne.n	80057ec <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80057da:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80057de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80057e2:	1d3b      	adds	r3, r7, #4
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d001      	beq.n	80057f0 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e000      	b.n	80057f2 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80057f0:	2300      	movs	r3, #0
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	40021000 	.word	0x40021000

08005800 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b09e      	sub	sp, #120	; 0x78
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800580a:	2300      	movs	r3, #0
 800580c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d101      	bne.n	8005818 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	e162      	b.n	8005ade <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005818:	4b90      	ldr	r3, [pc, #576]	; (8005a5c <HAL_RCC_ClockConfig+0x25c>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0307 	and.w	r3, r3, #7
 8005820:	683a      	ldr	r2, [r7, #0]
 8005822:	429a      	cmp	r2, r3
 8005824:	d910      	bls.n	8005848 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005826:	4b8d      	ldr	r3, [pc, #564]	; (8005a5c <HAL_RCC_ClockConfig+0x25c>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f023 0207 	bic.w	r2, r3, #7
 800582e:	498b      	ldr	r1, [pc, #556]	; (8005a5c <HAL_RCC_ClockConfig+0x25c>)
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	4313      	orrs	r3, r2
 8005834:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005836:	4b89      	ldr	r3, [pc, #548]	; (8005a5c <HAL_RCC_ClockConfig+0x25c>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 0307 	and.w	r3, r3, #7
 800583e:	683a      	ldr	r2, [r7, #0]
 8005840:	429a      	cmp	r2, r3
 8005842:	d001      	beq.n	8005848 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	e14a      	b.n	8005ade <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 0302 	and.w	r3, r3, #2
 8005850:	2b00      	cmp	r3, #0
 8005852:	d008      	beq.n	8005866 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005854:	4b82      	ldr	r3, [pc, #520]	; (8005a60 <HAL_RCC_ClockConfig+0x260>)
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	497f      	ldr	r1, [pc, #508]	; (8005a60 <HAL_RCC_ClockConfig+0x260>)
 8005862:	4313      	orrs	r3, r2
 8005864:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 0301 	and.w	r3, r3, #1
 800586e:	2b00      	cmp	r3, #0
 8005870:	f000 80dc 	beq.w	8005a2c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	2b01      	cmp	r3, #1
 800587a:	d13c      	bne.n	80058f6 <HAL_RCC_ClockConfig+0xf6>
 800587c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005880:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005882:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005884:	fa93 f3a3 	rbit	r3, r3
 8005888:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800588a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800588c:	fab3 f383 	clz	r3, r3
 8005890:	b2db      	uxtb	r3, r3
 8005892:	095b      	lsrs	r3, r3, #5
 8005894:	b2db      	uxtb	r3, r3
 8005896:	f043 0301 	orr.w	r3, r3, #1
 800589a:	b2db      	uxtb	r3, r3
 800589c:	2b01      	cmp	r3, #1
 800589e:	d102      	bne.n	80058a6 <HAL_RCC_ClockConfig+0xa6>
 80058a0:	4b6f      	ldr	r3, [pc, #444]	; (8005a60 <HAL_RCC_ClockConfig+0x260>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	e00f      	b.n	80058c6 <HAL_RCC_ClockConfig+0xc6>
 80058a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80058aa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80058ae:	fa93 f3a3 	rbit	r3, r3
 80058b2:	667b      	str	r3, [r7, #100]	; 0x64
 80058b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80058b8:	663b      	str	r3, [r7, #96]	; 0x60
 80058ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058bc:	fa93 f3a3 	rbit	r3, r3
 80058c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058c2:	4b67      	ldr	r3, [pc, #412]	; (8005a60 <HAL_RCC_ClockConfig+0x260>)
 80058c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80058ca:	65ba      	str	r2, [r7, #88]	; 0x58
 80058cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80058ce:	fa92 f2a2 	rbit	r2, r2
 80058d2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80058d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80058d6:	fab2 f282 	clz	r2, r2
 80058da:	b2d2      	uxtb	r2, r2
 80058dc:	f042 0220 	orr.w	r2, r2, #32
 80058e0:	b2d2      	uxtb	r2, r2
 80058e2:	f002 021f 	and.w	r2, r2, #31
 80058e6:	2101      	movs	r1, #1
 80058e8:	fa01 f202 	lsl.w	r2, r1, r2
 80058ec:	4013      	ands	r3, r2
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d17b      	bne.n	80059ea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e0f3      	b.n	8005ade <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	2b02      	cmp	r3, #2
 80058fc:	d13c      	bne.n	8005978 <HAL_RCC_ClockConfig+0x178>
 80058fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005902:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005904:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005906:	fa93 f3a3 	rbit	r3, r3
 800590a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800590c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800590e:	fab3 f383 	clz	r3, r3
 8005912:	b2db      	uxtb	r3, r3
 8005914:	095b      	lsrs	r3, r3, #5
 8005916:	b2db      	uxtb	r3, r3
 8005918:	f043 0301 	orr.w	r3, r3, #1
 800591c:	b2db      	uxtb	r3, r3
 800591e:	2b01      	cmp	r3, #1
 8005920:	d102      	bne.n	8005928 <HAL_RCC_ClockConfig+0x128>
 8005922:	4b4f      	ldr	r3, [pc, #316]	; (8005a60 <HAL_RCC_ClockConfig+0x260>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	e00f      	b.n	8005948 <HAL_RCC_ClockConfig+0x148>
 8005928:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800592c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800592e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005930:	fa93 f3a3 	rbit	r3, r3
 8005934:	647b      	str	r3, [r7, #68]	; 0x44
 8005936:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800593a:	643b      	str	r3, [r7, #64]	; 0x40
 800593c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800593e:	fa93 f3a3 	rbit	r3, r3
 8005942:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005944:	4b46      	ldr	r3, [pc, #280]	; (8005a60 <HAL_RCC_ClockConfig+0x260>)
 8005946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005948:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800594c:	63ba      	str	r2, [r7, #56]	; 0x38
 800594e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005950:	fa92 f2a2 	rbit	r2, r2
 8005954:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005956:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005958:	fab2 f282 	clz	r2, r2
 800595c:	b2d2      	uxtb	r2, r2
 800595e:	f042 0220 	orr.w	r2, r2, #32
 8005962:	b2d2      	uxtb	r2, r2
 8005964:	f002 021f 	and.w	r2, r2, #31
 8005968:	2101      	movs	r1, #1
 800596a:	fa01 f202 	lsl.w	r2, r1, r2
 800596e:	4013      	ands	r3, r2
 8005970:	2b00      	cmp	r3, #0
 8005972:	d13a      	bne.n	80059ea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	e0b2      	b.n	8005ade <HAL_RCC_ClockConfig+0x2de>
 8005978:	2302      	movs	r3, #2
 800597a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800597c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800597e:	fa93 f3a3 	rbit	r3, r3
 8005982:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005986:	fab3 f383 	clz	r3, r3
 800598a:	b2db      	uxtb	r3, r3
 800598c:	095b      	lsrs	r3, r3, #5
 800598e:	b2db      	uxtb	r3, r3
 8005990:	f043 0301 	orr.w	r3, r3, #1
 8005994:	b2db      	uxtb	r3, r3
 8005996:	2b01      	cmp	r3, #1
 8005998:	d102      	bne.n	80059a0 <HAL_RCC_ClockConfig+0x1a0>
 800599a:	4b31      	ldr	r3, [pc, #196]	; (8005a60 <HAL_RCC_ClockConfig+0x260>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	e00d      	b.n	80059bc <HAL_RCC_ClockConfig+0x1bc>
 80059a0:	2302      	movs	r3, #2
 80059a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a6:	fa93 f3a3 	rbit	r3, r3
 80059aa:	627b      	str	r3, [r7, #36]	; 0x24
 80059ac:	2302      	movs	r3, #2
 80059ae:	623b      	str	r3, [r7, #32]
 80059b0:	6a3b      	ldr	r3, [r7, #32]
 80059b2:	fa93 f3a3 	rbit	r3, r3
 80059b6:	61fb      	str	r3, [r7, #28]
 80059b8:	4b29      	ldr	r3, [pc, #164]	; (8005a60 <HAL_RCC_ClockConfig+0x260>)
 80059ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059bc:	2202      	movs	r2, #2
 80059be:	61ba      	str	r2, [r7, #24]
 80059c0:	69ba      	ldr	r2, [r7, #24]
 80059c2:	fa92 f2a2 	rbit	r2, r2
 80059c6:	617a      	str	r2, [r7, #20]
  return result;
 80059c8:	697a      	ldr	r2, [r7, #20]
 80059ca:	fab2 f282 	clz	r2, r2
 80059ce:	b2d2      	uxtb	r2, r2
 80059d0:	f042 0220 	orr.w	r2, r2, #32
 80059d4:	b2d2      	uxtb	r2, r2
 80059d6:	f002 021f 	and.w	r2, r2, #31
 80059da:	2101      	movs	r1, #1
 80059dc:	fa01 f202 	lsl.w	r2, r1, r2
 80059e0:	4013      	ands	r3, r2
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d101      	bne.n	80059ea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e079      	b.n	8005ade <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059ea:	4b1d      	ldr	r3, [pc, #116]	; (8005a60 <HAL_RCC_ClockConfig+0x260>)
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	f023 0203 	bic.w	r2, r3, #3
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	491a      	ldr	r1, [pc, #104]	; (8005a60 <HAL_RCC_ClockConfig+0x260>)
 80059f8:	4313      	orrs	r3, r2
 80059fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059fc:	f7fb fe86 	bl	800170c <HAL_GetTick>
 8005a00:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a02:	e00a      	b.n	8005a1a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a04:	f7fb fe82 	bl	800170c <HAL_GetTick>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a0c:	1ad3      	subs	r3, r2, r3
 8005a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d901      	bls.n	8005a1a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005a16:	2303      	movs	r3, #3
 8005a18:	e061      	b.n	8005ade <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a1a:	4b11      	ldr	r3, [pc, #68]	; (8005a60 <HAL_RCC_ClockConfig+0x260>)
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	f003 020c 	and.w	r2, r3, #12
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d1eb      	bne.n	8005a04 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a2c:	4b0b      	ldr	r3, [pc, #44]	; (8005a5c <HAL_RCC_ClockConfig+0x25c>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 0307 	and.w	r3, r3, #7
 8005a34:	683a      	ldr	r2, [r7, #0]
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d214      	bcs.n	8005a64 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a3a:	4b08      	ldr	r3, [pc, #32]	; (8005a5c <HAL_RCC_ClockConfig+0x25c>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f023 0207 	bic.w	r2, r3, #7
 8005a42:	4906      	ldr	r1, [pc, #24]	; (8005a5c <HAL_RCC_ClockConfig+0x25c>)
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a4a:	4b04      	ldr	r3, [pc, #16]	; (8005a5c <HAL_RCC_ClockConfig+0x25c>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 0307 	and.w	r3, r3, #7
 8005a52:	683a      	ldr	r2, [r7, #0]
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d005      	beq.n	8005a64 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e040      	b.n	8005ade <HAL_RCC_ClockConfig+0x2de>
 8005a5c:	40022000 	.word	0x40022000
 8005a60:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 0304 	and.w	r3, r3, #4
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d008      	beq.n	8005a82 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a70:	4b1d      	ldr	r3, [pc, #116]	; (8005ae8 <HAL_RCC_ClockConfig+0x2e8>)
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	491a      	ldr	r1, [pc, #104]	; (8005ae8 <HAL_RCC_ClockConfig+0x2e8>)
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 0308 	and.w	r3, r3, #8
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d009      	beq.n	8005aa2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a8e:	4b16      	ldr	r3, [pc, #88]	; (8005ae8 <HAL_RCC_ClockConfig+0x2e8>)
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	00db      	lsls	r3, r3, #3
 8005a9c:	4912      	ldr	r1, [pc, #72]	; (8005ae8 <HAL_RCC_ClockConfig+0x2e8>)
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005aa2:	f000 f829 	bl	8005af8 <HAL_RCC_GetSysClockFreq>
 8005aa6:	4601      	mov	r1, r0
 8005aa8:	4b0f      	ldr	r3, [pc, #60]	; (8005ae8 <HAL_RCC_ClockConfig+0x2e8>)
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ab0:	22f0      	movs	r2, #240	; 0xf0
 8005ab2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ab4:	693a      	ldr	r2, [r7, #16]
 8005ab6:	fa92 f2a2 	rbit	r2, r2
 8005aba:	60fa      	str	r2, [r7, #12]
  return result;
 8005abc:	68fa      	ldr	r2, [r7, #12]
 8005abe:	fab2 f282 	clz	r2, r2
 8005ac2:	b2d2      	uxtb	r2, r2
 8005ac4:	40d3      	lsrs	r3, r2
 8005ac6:	4a09      	ldr	r2, [pc, #36]	; (8005aec <HAL_RCC_ClockConfig+0x2ec>)
 8005ac8:	5cd3      	ldrb	r3, [r2, r3]
 8005aca:	fa21 f303 	lsr.w	r3, r1, r3
 8005ace:	4a08      	ldr	r2, [pc, #32]	; (8005af0 <HAL_RCC_ClockConfig+0x2f0>)
 8005ad0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005ad2:	4b08      	ldr	r3, [pc, #32]	; (8005af4 <HAL_RCC_ClockConfig+0x2f4>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f7fb fdd4 	bl	8001684 <HAL_InitTick>
  
  return HAL_OK;
 8005adc:	2300      	movs	r3, #0
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3778      	adds	r7, #120	; 0x78
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	40021000 	.word	0x40021000
 8005aec:	08007664 	.word	0x08007664
 8005af0:	20000000 	.word	0x20000000
 8005af4:	20000004 	.word	0x20000004

08005af8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b08b      	sub	sp, #44	; 0x2c
 8005afc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005afe:	2300      	movs	r3, #0
 8005b00:	61fb      	str	r3, [r7, #28]
 8005b02:	2300      	movs	r3, #0
 8005b04:	61bb      	str	r3, [r7, #24]
 8005b06:	2300      	movs	r3, #0
 8005b08:	627b      	str	r3, [r7, #36]	; 0x24
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005b12:	4b29      	ldr	r3, [pc, #164]	; (8005bb8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	f003 030c 	and.w	r3, r3, #12
 8005b1e:	2b04      	cmp	r3, #4
 8005b20:	d002      	beq.n	8005b28 <HAL_RCC_GetSysClockFreq+0x30>
 8005b22:	2b08      	cmp	r3, #8
 8005b24:	d003      	beq.n	8005b2e <HAL_RCC_GetSysClockFreq+0x36>
 8005b26:	e03c      	b.n	8005ba2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005b28:	4b24      	ldr	r3, [pc, #144]	; (8005bbc <HAL_RCC_GetSysClockFreq+0xc4>)
 8005b2a:	623b      	str	r3, [r7, #32]
      break;
 8005b2c:	e03c      	b.n	8005ba8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005b34:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005b38:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b3a:	68ba      	ldr	r2, [r7, #8]
 8005b3c:	fa92 f2a2 	rbit	r2, r2
 8005b40:	607a      	str	r2, [r7, #4]
  return result;
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	fab2 f282 	clz	r2, r2
 8005b48:	b2d2      	uxtb	r2, r2
 8005b4a:	40d3      	lsrs	r3, r2
 8005b4c:	4a1c      	ldr	r2, [pc, #112]	; (8005bc0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005b4e:	5cd3      	ldrb	r3, [r2, r3]
 8005b50:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005b52:	4b19      	ldr	r3, [pc, #100]	; (8005bb8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b56:	f003 030f 	and.w	r3, r3, #15
 8005b5a:	220f      	movs	r2, #15
 8005b5c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b5e:	693a      	ldr	r2, [r7, #16]
 8005b60:	fa92 f2a2 	rbit	r2, r2
 8005b64:	60fa      	str	r2, [r7, #12]
  return result;
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	fab2 f282 	clz	r2, r2
 8005b6c:	b2d2      	uxtb	r2, r2
 8005b6e:	40d3      	lsrs	r3, r2
 8005b70:	4a14      	ldr	r2, [pc, #80]	; (8005bc4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005b72:	5cd3      	ldrb	r3, [r2, r3]
 8005b74:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d008      	beq.n	8005b92 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005b80:	4a0e      	ldr	r2, [pc, #56]	; (8005bbc <HAL_RCC_GetSysClockFreq+0xc4>)
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	fb02 f303 	mul.w	r3, r2, r3
 8005b8e:	627b      	str	r3, [r7, #36]	; 0x24
 8005b90:	e004      	b.n	8005b9c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	4a0c      	ldr	r2, [pc, #48]	; (8005bc8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005b96:	fb02 f303 	mul.w	r3, r2, r3
 8005b9a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9e:	623b      	str	r3, [r7, #32]
      break;
 8005ba0:	e002      	b.n	8005ba8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005ba2:	4b06      	ldr	r3, [pc, #24]	; (8005bbc <HAL_RCC_GetSysClockFreq+0xc4>)
 8005ba4:	623b      	str	r3, [r7, #32]
      break;
 8005ba6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ba8:	6a3b      	ldr	r3, [r7, #32]
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	372c      	adds	r7, #44	; 0x2c
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr
 8005bb6:	bf00      	nop
 8005bb8:	40021000 	.word	0x40021000
 8005bbc:	007a1200 	.word	0x007a1200
 8005bc0:	0800767c 	.word	0x0800767c
 8005bc4:	0800768c 	.word	0x0800768c
 8005bc8:	003d0900 	.word	0x003d0900

08005bcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005bd0:	4b03      	ldr	r3, [pc, #12]	; (8005be0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr
 8005bde:	bf00      	nop
 8005be0:	20000000 	.word	0x20000000

08005be4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b082      	sub	sp, #8
 8005be8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005bea:	f7ff ffef 	bl	8005bcc <HAL_RCC_GetHCLKFreq>
 8005bee:	4601      	mov	r1, r0
 8005bf0:	4b0b      	ldr	r3, [pc, #44]	; (8005c20 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005bf8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005bfc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	fa92 f2a2 	rbit	r2, r2
 8005c04:	603a      	str	r2, [r7, #0]
  return result;
 8005c06:	683a      	ldr	r2, [r7, #0]
 8005c08:	fab2 f282 	clz	r2, r2
 8005c0c:	b2d2      	uxtb	r2, r2
 8005c0e:	40d3      	lsrs	r3, r2
 8005c10:	4a04      	ldr	r2, [pc, #16]	; (8005c24 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005c12:	5cd3      	ldrb	r3, [r2, r3]
 8005c14:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3708      	adds	r7, #8
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	40021000 	.word	0x40021000
 8005c24:	08007674 	.word	0x08007674

08005c28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b082      	sub	sp, #8
 8005c2c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005c2e:	f7ff ffcd 	bl	8005bcc <HAL_RCC_GetHCLKFreq>
 8005c32:	4601      	mov	r1, r0
 8005c34:	4b0b      	ldr	r3, [pc, #44]	; (8005c64 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005c3c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005c40:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	fa92 f2a2 	rbit	r2, r2
 8005c48:	603a      	str	r2, [r7, #0]
  return result;
 8005c4a:	683a      	ldr	r2, [r7, #0]
 8005c4c:	fab2 f282 	clz	r2, r2
 8005c50:	b2d2      	uxtb	r2, r2
 8005c52:	40d3      	lsrs	r3, r2
 8005c54:	4a04      	ldr	r2, [pc, #16]	; (8005c68 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005c56:	5cd3      	ldrb	r3, [r2, r3]
 8005c58:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3708      	adds	r7, #8
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}
 8005c64:	40021000 	.word	0x40021000
 8005c68:	08007674 	.word	0x08007674

08005c6c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b092      	sub	sp, #72	; 0x48
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c74:	2300      	movs	r3, #0
 8005c76:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	f000 80cd 	beq.w	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c90:	4b86      	ldr	r3, [pc, #536]	; (8005eac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005c92:	69db      	ldr	r3, [r3, #28]
 8005c94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d10e      	bne.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c9c:	4b83      	ldr	r3, [pc, #524]	; (8005eac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005c9e:	69db      	ldr	r3, [r3, #28]
 8005ca0:	4a82      	ldr	r2, [pc, #520]	; (8005eac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005ca2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ca6:	61d3      	str	r3, [r2, #28]
 8005ca8:	4b80      	ldr	r3, [pc, #512]	; (8005eac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005caa:	69db      	ldr	r3, [r3, #28]
 8005cac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cb0:	60bb      	str	r3, [r7, #8]
 8005cb2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cba:	4b7d      	ldr	r3, [pc, #500]	; (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d118      	bne.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005cc6:	4b7a      	ldr	r3, [pc, #488]	; (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a79      	ldr	r2, [pc, #484]	; (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005ccc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cd0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cd2:	f7fb fd1b 	bl	800170c <HAL_GetTick>
 8005cd6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cd8:	e008      	b.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cda:	f7fb fd17 	bl	800170c <HAL_GetTick>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ce2:	1ad3      	subs	r3, r2, r3
 8005ce4:	2b64      	cmp	r3, #100	; 0x64
 8005ce6:	d901      	bls.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005ce8:	2303      	movs	r3, #3
 8005cea:	e0db      	b.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cec:	4b70      	ldr	r3, [pc, #448]	; (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d0f0      	beq.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005cf8:	4b6c      	ldr	r3, [pc, #432]	; (8005eac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005cfa:	6a1b      	ldr	r3, [r3, #32]
 8005cfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d00:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d07d      	beq.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d076      	beq.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d16:	4b65      	ldr	r3, [pc, #404]	; (8005eac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005d18:	6a1b      	ldr	r3, [r3, #32]
 8005d1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005d24:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d28:	fa93 f3a3 	rbit	r3, r3
 8005d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005d30:	fab3 f383 	clz	r3, r3
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	461a      	mov	r2, r3
 8005d38:	4b5e      	ldr	r3, [pc, #376]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005d3a:	4413      	add	r3, r2
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	461a      	mov	r2, r3
 8005d40:	2301      	movs	r3, #1
 8005d42:	6013      	str	r3, [r2, #0]
 8005d44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005d48:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d4c:	fa93 f3a3 	rbit	r3, r3
 8005d50:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005d54:	fab3 f383 	clz	r3, r3
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	4b55      	ldr	r3, [pc, #340]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005d5e:	4413      	add	r3, r2
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	461a      	mov	r2, r3
 8005d64:	2300      	movs	r3, #0
 8005d66:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005d68:	4a50      	ldr	r2, [pc, #320]	; (8005eac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005d6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d6c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005d6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d70:	f003 0301 	and.w	r3, r3, #1
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d045      	beq.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d78:	f7fb fcc8 	bl	800170c <HAL_GetTick>
 8005d7c:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d7e:	e00a      	b.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d80:	f7fb fcc4 	bl	800170c <HAL_GetTick>
 8005d84:	4602      	mov	r2, r0
 8005d86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d88:	1ad3      	subs	r3, r2, r3
 8005d8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d901      	bls.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8005d92:	2303      	movs	r3, #3
 8005d94:	e086      	b.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8005d96:	2302      	movs	r3, #2
 8005d98:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d9c:	fa93 f3a3 	rbit	r3, r3
 8005da0:	627b      	str	r3, [r7, #36]	; 0x24
 8005da2:	2302      	movs	r3, #2
 8005da4:	623b      	str	r3, [r7, #32]
 8005da6:	6a3b      	ldr	r3, [r7, #32]
 8005da8:	fa93 f3a3 	rbit	r3, r3
 8005dac:	61fb      	str	r3, [r7, #28]
  return result;
 8005dae:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005db0:	fab3 f383 	clz	r3, r3
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	095b      	lsrs	r3, r3, #5
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	f043 0302 	orr.w	r3, r3, #2
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	2b02      	cmp	r3, #2
 8005dc2:	d102      	bne.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005dc4:	4b39      	ldr	r3, [pc, #228]	; (8005eac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005dc6:	6a1b      	ldr	r3, [r3, #32]
 8005dc8:	e007      	b.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8005dca:	2302      	movs	r3, #2
 8005dcc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	fa93 f3a3 	rbit	r3, r3
 8005dd4:	617b      	str	r3, [r7, #20]
 8005dd6:	4b35      	ldr	r3, [pc, #212]	; (8005eac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dda:	2202      	movs	r2, #2
 8005ddc:	613a      	str	r2, [r7, #16]
 8005dde:	693a      	ldr	r2, [r7, #16]
 8005de0:	fa92 f2a2 	rbit	r2, r2
 8005de4:	60fa      	str	r2, [r7, #12]
  return result;
 8005de6:	68fa      	ldr	r2, [r7, #12]
 8005de8:	fab2 f282 	clz	r2, r2
 8005dec:	b2d2      	uxtb	r2, r2
 8005dee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005df2:	b2d2      	uxtb	r2, r2
 8005df4:	f002 021f 	and.w	r2, r2, #31
 8005df8:	2101      	movs	r1, #1
 8005dfa:	fa01 f202 	lsl.w	r2, r1, r2
 8005dfe:	4013      	ands	r3, r2
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d0bd      	beq.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005e04:	4b29      	ldr	r3, [pc, #164]	; (8005eac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005e06:	6a1b      	ldr	r3, [r3, #32]
 8005e08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	4926      	ldr	r1, [pc, #152]	; (8005eac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005e12:	4313      	orrs	r3, r2
 8005e14:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005e16:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d105      	bne.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e1e:	4b23      	ldr	r3, [pc, #140]	; (8005eac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005e20:	69db      	ldr	r3, [r3, #28]
 8005e22:	4a22      	ldr	r2, [pc, #136]	; (8005eac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005e24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e28:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 0301 	and.w	r3, r3, #1
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d008      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005e36:	4b1d      	ldr	r3, [pc, #116]	; (8005eac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e3a:	f023 0203 	bic.w	r2, r3, #3
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	491a      	ldr	r1, [pc, #104]	; (8005eac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005e44:	4313      	orrs	r3, r2
 8005e46:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f003 0320 	and.w	r3, r3, #32
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d008      	beq.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e54:	4b15      	ldr	r3, [pc, #84]	; (8005eac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e58:	f023 0210 	bic.w	r2, r3, #16
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	4912      	ldr	r1, [pc, #72]	; (8005eac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005e62:	4313      	orrs	r3, r2
 8005e64:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d008      	beq.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005e72:	4b0e      	ldr	r3, [pc, #56]	; (8005eac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e76:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	490b      	ldr	r1, [pc, #44]	; (8005eac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005e80:	4313      	orrs	r3, r2
 8005e82:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d008      	beq.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005e90:	4b06      	ldr	r3, [pc, #24]	; (8005eac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	695b      	ldr	r3, [r3, #20]
 8005e9c:	4903      	ldr	r1, [pc, #12]	; (8005eac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005ea2:	2300      	movs	r3, #0
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3748      	adds	r7, #72	; 0x48
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	40021000 	.word	0x40021000
 8005eb0:	40007000 	.word	0x40007000
 8005eb4:	10908100 	.word	0x10908100

08005eb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b082      	sub	sp, #8
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d101      	bne.n	8005eca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e049      	b.n	8005f5e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d106      	bne.n	8005ee4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f7fb fa9c 	bl	800141c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2202      	movs	r2, #2
 8005ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	3304      	adds	r3, #4
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	4610      	mov	r0, r2
 8005ef8:	f000 fb98 	bl	800662c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f5c:	2300      	movs	r3, #0
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3708      	adds	r7, #8
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}

08005f66 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005f66:	b580      	push	{r7, lr}
 8005f68:	b082      	sub	sp, #8
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d101      	bne.n	8005f78 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	e049      	b.n	800600c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d106      	bne.n	8005f92 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f7fb f9cb 	bl	8001328 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2202      	movs	r2, #2
 8005f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	3304      	adds	r3, #4
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	4610      	mov	r0, r2
 8005fa6:	f000 fb41 	bl	800662c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2201      	movs	r2, #1
 8005fae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2201      	movs	r2, #1
 8005fee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2201      	movs	r2, #1
 8006006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800600a:	2300      	movs	r3, #0
}
 800600c:	4618      	mov	r0, r3
 800600e:	3708      	adds	r7, #8
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}

08006014 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b086      	sub	sp, #24
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d101      	bne.n	8006028 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	e097      	b.n	8006158 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800602e:	b2db      	uxtb	r3, r3
 8006030:	2b00      	cmp	r3, #0
 8006032:	d106      	bne.n	8006042 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f7fb f9ab 	bl	8001398 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2202      	movs	r2, #2
 8006046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	6812      	ldr	r2, [r2, #0]
 8006054:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8006058:	f023 0307 	bic.w	r3, r3, #7
 800605c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	3304      	adds	r3, #4
 8006066:	4619      	mov	r1, r3
 8006068:	4610      	mov	r0, r2
 800606a:	f000 fadf 	bl	800662c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	699b      	ldr	r3, [r3, #24]
 800607c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	6a1b      	ldr	r3, [r3, #32]
 8006084:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	697a      	ldr	r2, [r7, #20]
 800608c:	4313      	orrs	r3, r2
 800608e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006096:	f023 0303 	bic.w	r3, r3, #3
 800609a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	689a      	ldr	r2, [r3, #8]
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	699b      	ldr	r3, [r3, #24]
 80060a4:	021b      	lsls	r3, r3, #8
 80060a6:	4313      	orrs	r3, r2
 80060a8:	693a      	ldr	r2, [r7, #16]
 80060aa:	4313      	orrs	r3, r2
 80060ac:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80060b4:	f023 030c 	bic.w	r3, r3, #12
 80060b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	68da      	ldr	r2, [r3, #12]
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	69db      	ldr	r3, [r3, #28]
 80060ce:	021b      	lsls	r3, r3, #8
 80060d0:	4313      	orrs	r3, r2
 80060d2:	693a      	ldr	r2, [r7, #16]
 80060d4:	4313      	orrs	r3, r2
 80060d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	691b      	ldr	r3, [r3, #16]
 80060dc:	011a      	lsls	r2, r3, #4
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	6a1b      	ldr	r3, [r3, #32]
 80060e2:	031b      	lsls	r3, r3, #12
 80060e4:	4313      	orrs	r3, r2
 80060e6:	693a      	ldr	r2, [r7, #16]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80060f2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80060fa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	685a      	ldr	r2, [r3, #4]
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	695b      	ldr	r3, [r3, #20]
 8006104:	011b      	lsls	r3, r3, #4
 8006106:	4313      	orrs	r3, r2
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	4313      	orrs	r3, r2
 800610c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	697a      	ldr	r2, [r7, #20]
 8006114:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	693a      	ldr	r2, [r7, #16]
 800611c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	68fa      	ldr	r2, [r7, #12]
 8006124:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2201      	movs	r2, #1
 800612a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2201      	movs	r2, #1
 8006132:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2201      	movs	r2, #1
 800613a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2201      	movs	r2, #1
 8006142:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2201      	movs	r2, #1
 800614a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2201      	movs	r2, #1
 8006152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006156:	2300      	movs	r3, #0
}
 8006158:	4618      	mov	r0, r3
 800615a:	3718      	adds	r7, #24
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b082      	sub	sp, #8
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	691b      	ldr	r3, [r3, #16]
 800616e:	f003 0302 	and.w	r3, r3, #2
 8006172:	2b02      	cmp	r3, #2
 8006174:	d122      	bne.n	80061bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	f003 0302 	and.w	r3, r3, #2
 8006180:	2b02      	cmp	r3, #2
 8006182:	d11b      	bne.n	80061bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f06f 0202 	mvn.w	r2, #2
 800618c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2201      	movs	r2, #1
 8006192:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	699b      	ldr	r3, [r3, #24]
 800619a:	f003 0303 	and.w	r3, r3, #3
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d003      	beq.n	80061aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 fa24 	bl	80065f0 <HAL_TIM_IC_CaptureCallback>
 80061a8:	e005      	b.n	80061b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f000 fa16 	bl	80065dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f000 fa27 	bl	8006604 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	f003 0304 	and.w	r3, r3, #4
 80061c6:	2b04      	cmp	r3, #4
 80061c8:	d122      	bne.n	8006210 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	f003 0304 	and.w	r3, r3, #4
 80061d4:	2b04      	cmp	r3, #4
 80061d6:	d11b      	bne.n	8006210 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f06f 0204 	mvn.w	r2, #4
 80061e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2202      	movs	r2, #2
 80061e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	699b      	ldr	r3, [r3, #24]
 80061ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d003      	beq.n	80061fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f000 f9fa 	bl	80065f0 <HAL_TIM_IC_CaptureCallback>
 80061fc:	e005      	b.n	800620a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 f9ec 	bl	80065dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f000 f9fd 	bl	8006604 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	691b      	ldr	r3, [r3, #16]
 8006216:	f003 0308 	and.w	r3, r3, #8
 800621a:	2b08      	cmp	r3, #8
 800621c:	d122      	bne.n	8006264 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	f003 0308 	and.w	r3, r3, #8
 8006228:	2b08      	cmp	r3, #8
 800622a:	d11b      	bne.n	8006264 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f06f 0208 	mvn.w	r2, #8
 8006234:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2204      	movs	r2, #4
 800623a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	69db      	ldr	r3, [r3, #28]
 8006242:	f003 0303 	and.w	r3, r3, #3
 8006246:	2b00      	cmp	r3, #0
 8006248:	d003      	beq.n	8006252 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f000 f9d0 	bl	80065f0 <HAL_TIM_IC_CaptureCallback>
 8006250:	e005      	b.n	800625e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 f9c2 	bl	80065dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f000 f9d3 	bl	8006604 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	f003 0310 	and.w	r3, r3, #16
 800626e:	2b10      	cmp	r3, #16
 8006270:	d122      	bne.n	80062b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	f003 0310 	and.w	r3, r3, #16
 800627c:	2b10      	cmp	r3, #16
 800627e:	d11b      	bne.n	80062b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f06f 0210 	mvn.w	r2, #16
 8006288:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2208      	movs	r2, #8
 800628e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	69db      	ldr	r3, [r3, #28]
 8006296:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800629a:	2b00      	cmp	r3, #0
 800629c:	d003      	beq.n	80062a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 f9a6 	bl	80065f0 <HAL_TIM_IC_CaptureCallback>
 80062a4:	e005      	b.n	80062b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 f998 	bl	80065dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 f9a9 	bl	8006604 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	691b      	ldr	r3, [r3, #16]
 80062be:	f003 0301 	and.w	r3, r3, #1
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	d10e      	bne.n	80062e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	f003 0301 	and.w	r3, r3, #1
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d107      	bne.n	80062e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f06f 0201 	mvn.w	r2, #1
 80062dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 f972 	bl	80065c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ee:	2b80      	cmp	r3, #128	; 0x80
 80062f0:	d10e      	bne.n	8006310 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062fc:	2b80      	cmp	r3, #128	; 0x80
 80062fe:	d107      	bne.n	8006310 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f000 fd9c 	bl	8006e48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800631a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800631e:	d10e      	bne.n	800633e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800632a:	2b80      	cmp	r3, #128	; 0x80
 800632c:	d107      	bne.n	800633e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006336:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f000 fd8f 	bl	8006e5c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	691b      	ldr	r3, [r3, #16]
 8006344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006348:	2b40      	cmp	r3, #64	; 0x40
 800634a:	d10e      	bne.n	800636a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006356:	2b40      	cmp	r3, #64	; 0x40
 8006358:	d107      	bne.n	800636a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006362:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f000 f957 	bl	8006618 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	691b      	ldr	r3, [r3, #16]
 8006370:	f003 0320 	and.w	r3, r3, #32
 8006374:	2b20      	cmp	r3, #32
 8006376:	d10e      	bne.n	8006396 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	f003 0320 	and.w	r3, r3, #32
 8006382:	2b20      	cmp	r3, #32
 8006384:	d107      	bne.n	8006396 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f06f 0220 	mvn.w	r2, #32
 800638e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f000 fd4f 	bl	8006e34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006396:	bf00      	nop
 8006398:	3708      	adds	r7, #8
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
	...

080063a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b086      	sub	sp, #24
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063ac:	2300      	movs	r3, #0
 80063ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d101      	bne.n	80063be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80063ba:	2302      	movs	r3, #2
 80063bc:	e0ff      	b.n	80065be <HAL_TIM_PWM_ConfigChannel+0x21e>
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2201      	movs	r2, #1
 80063c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2b14      	cmp	r3, #20
 80063ca:	f200 80f0 	bhi.w	80065ae <HAL_TIM_PWM_ConfigChannel+0x20e>
 80063ce:	a201      	add	r2, pc, #4	; (adr r2, 80063d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80063d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063d4:	08006429 	.word	0x08006429
 80063d8:	080065af 	.word	0x080065af
 80063dc:	080065af 	.word	0x080065af
 80063e0:	080065af 	.word	0x080065af
 80063e4:	08006469 	.word	0x08006469
 80063e8:	080065af 	.word	0x080065af
 80063ec:	080065af 	.word	0x080065af
 80063f0:	080065af 	.word	0x080065af
 80063f4:	080064ab 	.word	0x080064ab
 80063f8:	080065af 	.word	0x080065af
 80063fc:	080065af 	.word	0x080065af
 8006400:	080065af 	.word	0x080065af
 8006404:	080064eb 	.word	0x080064eb
 8006408:	080065af 	.word	0x080065af
 800640c:	080065af 	.word	0x080065af
 8006410:	080065af 	.word	0x080065af
 8006414:	0800652d 	.word	0x0800652d
 8006418:	080065af 	.word	0x080065af
 800641c:	080065af 	.word	0x080065af
 8006420:	080065af 	.word	0x080065af
 8006424:	0800656d 	.word	0x0800656d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	68b9      	ldr	r1, [r7, #8]
 800642e:	4618      	mov	r0, r3
 8006430:	f000 f974 	bl	800671c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	699a      	ldr	r2, [r3, #24]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f042 0208 	orr.w	r2, r2, #8
 8006442:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	699a      	ldr	r2, [r3, #24]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f022 0204 	bic.w	r2, r2, #4
 8006452:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	6999      	ldr	r1, [r3, #24]
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	691a      	ldr	r2, [r3, #16]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	430a      	orrs	r2, r1
 8006464:	619a      	str	r2, [r3, #24]
      break;
 8006466:	e0a5      	b.n	80065b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	68b9      	ldr	r1, [r7, #8]
 800646e:	4618      	mov	r0, r3
 8006470:	f000 f9da 	bl	8006828 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	699a      	ldr	r2, [r3, #24]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006482:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	699a      	ldr	r2, [r3, #24]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006492:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	6999      	ldr	r1, [r3, #24]
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	691b      	ldr	r3, [r3, #16]
 800649e:	021a      	lsls	r2, r3, #8
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	430a      	orrs	r2, r1
 80064a6:	619a      	str	r2, [r3, #24]
      break;
 80064a8:	e084      	b.n	80065b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	68b9      	ldr	r1, [r7, #8]
 80064b0:	4618      	mov	r0, r3
 80064b2:	f000 fa39 	bl	8006928 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	69da      	ldr	r2, [r3, #28]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f042 0208 	orr.w	r2, r2, #8
 80064c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	69da      	ldr	r2, [r3, #28]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f022 0204 	bic.w	r2, r2, #4
 80064d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	69d9      	ldr	r1, [r3, #28]
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	691a      	ldr	r2, [r3, #16]
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	430a      	orrs	r2, r1
 80064e6:	61da      	str	r2, [r3, #28]
      break;
 80064e8:	e064      	b.n	80065b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	68b9      	ldr	r1, [r7, #8]
 80064f0:	4618      	mov	r0, r3
 80064f2:	f000 fa97 	bl	8006a24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	69da      	ldr	r2, [r3, #28]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006504:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	69da      	ldr	r2, [r3, #28]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006514:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	69d9      	ldr	r1, [r3, #28]
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	691b      	ldr	r3, [r3, #16]
 8006520:	021a      	lsls	r2, r3, #8
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	430a      	orrs	r2, r1
 8006528:	61da      	str	r2, [r3, #28]
      break;
 800652a:	e043      	b.n	80065b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	68b9      	ldr	r1, [r7, #8]
 8006532:	4618      	mov	r0, r3
 8006534:	f000 fada 	bl	8006aec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f042 0208 	orr.w	r2, r2, #8
 8006546:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f022 0204 	bic.w	r2, r2, #4
 8006556:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	691a      	ldr	r2, [r3, #16]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	430a      	orrs	r2, r1
 8006568:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800656a:	e023      	b.n	80065b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	68b9      	ldr	r1, [r7, #8]
 8006572:	4618      	mov	r0, r3
 8006574:	f000 fb18 	bl	8006ba8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006586:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006596:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	021a      	lsls	r2, r3, #8
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	430a      	orrs	r2, r1
 80065aa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80065ac:	e002      	b.n	80065b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	75fb      	strb	r3, [r7, #23]
      break;
 80065b2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2200      	movs	r2, #0
 80065b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80065bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3718      	adds	r7, #24
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop

080065c8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b083      	sub	sp, #12
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80065d0:	bf00      	nop
 80065d2:	370c      	adds	r7, #12
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80065dc:	b480      	push	{r7}
 80065de:	b083      	sub	sp, #12
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80065e4:	bf00      	nop
 80065e6:	370c      	adds	r7, #12
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr

080065f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b083      	sub	sp, #12
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80065f8:	bf00      	nop
 80065fa:	370c      	adds	r7, #12
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr

08006604 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006604:	b480      	push	{r7}
 8006606:	b083      	sub	sp, #12
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800660c:	bf00      	nop
 800660e:	370c      	adds	r7, #12
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006618:	b480      	push	{r7}
 800661a:	b083      	sub	sp, #12
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006620:	bf00      	nop
 8006622:	370c      	adds	r7, #12
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr

0800662c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800662c:	b480      	push	{r7}
 800662e:	b085      	sub	sp, #20
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	4a32      	ldr	r2, [pc, #200]	; (8006708 <TIM_Base_SetConfig+0xdc>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d007      	beq.n	8006654 <TIM_Base_SetConfig+0x28>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800664a:	d003      	beq.n	8006654 <TIM_Base_SetConfig+0x28>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4a2f      	ldr	r2, [pc, #188]	; (800670c <TIM_Base_SetConfig+0xe0>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d108      	bne.n	8006666 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800665a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	68fa      	ldr	r2, [r7, #12]
 8006662:	4313      	orrs	r3, r2
 8006664:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4a27      	ldr	r2, [pc, #156]	; (8006708 <TIM_Base_SetConfig+0xdc>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d013      	beq.n	8006696 <TIM_Base_SetConfig+0x6a>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006674:	d00f      	beq.n	8006696 <TIM_Base_SetConfig+0x6a>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4a24      	ldr	r2, [pc, #144]	; (800670c <TIM_Base_SetConfig+0xe0>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d00b      	beq.n	8006696 <TIM_Base_SetConfig+0x6a>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4a23      	ldr	r2, [pc, #140]	; (8006710 <TIM_Base_SetConfig+0xe4>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d007      	beq.n	8006696 <TIM_Base_SetConfig+0x6a>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4a22      	ldr	r2, [pc, #136]	; (8006714 <TIM_Base_SetConfig+0xe8>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d003      	beq.n	8006696 <TIM_Base_SetConfig+0x6a>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	4a21      	ldr	r2, [pc, #132]	; (8006718 <TIM_Base_SetConfig+0xec>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d108      	bne.n	80066a8 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800669c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	68db      	ldr	r3, [r3, #12]
 80066a2:	68fa      	ldr	r2, [r7, #12]
 80066a4:	4313      	orrs	r3, r2
 80066a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	695b      	ldr	r3, [r3, #20]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	68fa      	ldr	r2, [r7, #12]
 80066ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	689a      	ldr	r2, [r3, #8]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	4a0e      	ldr	r2, [pc, #56]	; (8006708 <TIM_Base_SetConfig+0xdc>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d00b      	beq.n	80066ec <TIM_Base_SetConfig+0xc0>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	4a0e      	ldr	r2, [pc, #56]	; (8006710 <TIM_Base_SetConfig+0xe4>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d007      	beq.n	80066ec <TIM_Base_SetConfig+0xc0>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4a0d      	ldr	r2, [pc, #52]	; (8006714 <TIM_Base_SetConfig+0xe8>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d003      	beq.n	80066ec <TIM_Base_SetConfig+0xc0>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	4a0c      	ldr	r2, [pc, #48]	; (8006718 <TIM_Base_SetConfig+0xec>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d103      	bne.n	80066f4 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	691a      	ldr	r2, [r3, #16]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2201      	movs	r2, #1
 80066f8:	615a      	str	r2, [r3, #20]
}
 80066fa:	bf00      	nop
 80066fc:	3714      	adds	r7, #20
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr
 8006706:	bf00      	nop
 8006708:	40012c00 	.word	0x40012c00
 800670c:	40000400 	.word	0x40000400
 8006710:	40014000 	.word	0x40014000
 8006714:	40014400 	.word	0x40014400
 8006718:	40014800 	.word	0x40014800

0800671c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800671c:	b480      	push	{r7}
 800671e:	b087      	sub	sp, #28
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6a1b      	ldr	r3, [r3, #32]
 800672a:	f023 0201 	bic.w	r2, r3, #1
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6a1b      	ldr	r3, [r3, #32]
 8006736:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	699b      	ldr	r3, [r3, #24]
 8006742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800674a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800674e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f023 0303 	bic.w	r3, r3, #3
 8006756:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	68fa      	ldr	r2, [r7, #12]
 800675e:	4313      	orrs	r3, r2
 8006760:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	f023 0302 	bic.w	r3, r3, #2
 8006768:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	697a      	ldr	r2, [r7, #20]
 8006770:	4313      	orrs	r3, r2
 8006772:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	4a28      	ldr	r2, [pc, #160]	; (8006818 <TIM_OC1_SetConfig+0xfc>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d00b      	beq.n	8006794 <TIM_OC1_SetConfig+0x78>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	4a27      	ldr	r2, [pc, #156]	; (800681c <TIM_OC1_SetConfig+0x100>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d007      	beq.n	8006794 <TIM_OC1_SetConfig+0x78>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	4a26      	ldr	r2, [pc, #152]	; (8006820 <TIM_OC1_SetConfig+0x104>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d003      	beq.n	8006794 <TIM_OC1_SetConfig+0x78>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	4a25      	ldr	r2, [pc, #148]	; (8006824 <TIM_OC1_SetConfig+0x108>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d10c      	bne.n	80067ae <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	f023 0308 	bic.w	r3, r3, #8
 800679a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	697a      	ldr	r2, [r7, #20]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	f023 0304 	bic.w	r3, r3, #4
 80067ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4a19      	ldr	r2, [pc, #100]	; (8006818 <TIM_OC1_SetConfig+0xfc>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d00b      	beq.n	80067ce <TIM_OC1_SetConfig+0xb2>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	4a18      	ldr	r2, [pc, #96]	; (800681c <TIM_OC1_SetConfig+0x100>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d007      	beq.n	80067ce <TIM_OC1_SetConfig+0xb2>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	4a17      	ldr	r2, [pc, #92]	; (8006820 <TIM_OC1_SetConfig+0x104>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d003      	beq.n	80067ce <TIM_OC1_SetConfig+0xb2>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	4a16      	ldr	r2, [pc, #88]	; (8006824 <TIM_OC1_SetConfig+0x108>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d111      	bne.n	80067f2 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80067dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	695b      	ldr	r3, [r3, #20]
 80067e2:	693a      	ldr	r2, [r7, #16]
 80067e4:	4313      	orrs	r3, r2
 80067e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	699b      	ldr	r3, [r3, #24]
 80067ec:	693a      	ldr	r2, [r7, #16]
 80067ee:	4313      	orrs	r3, r2
 80067f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	693a      	ldr	r2, [r7, #16]
 80067f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	68fa      	ldr	r2, [r7, #12]
 80067fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	685a      	ldr	r2, [r3, #4]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	697a      	ldr	r2, [r7, #20]
 800680a:	621a      	str	r2, [r3, #32]
}
 800680c:	bf00      	nop
 800680e:	371c      	adds	r7, #28
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr
 8006818:	40012c00 	.word	0x40012c00
 800681c:	40014000 	.word	0x40014000
 8006820:	40014400 	.word	0x40014400
 8006824:	40014800 	.word	0x40014800

08006828 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006828:	b480      	push	{r7}
 800682a:	b087      	sub	sp, #28
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6a1b      	ldr	r3, [r3, #32]
 8006836:	f023 0210 	bic.w	r2, r3, #16
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6a1b      	ldr	r3, [r3, #32]
 8006842:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	699b      	ldr	r3, [r3, #24]
 800684e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006856:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800685a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006862:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	021b      	lsls	r3, r3, #8
 800686a:	68fa      	ldr	r2, [r7, #12]
 800686c:	4313      	orrs	r3, r2
 800686e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	f023 0320 	bic.w	r3, r3, #32
 8006876:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	011b      	lsls	r3, r3, #4
 800687e:	697a      	ldr	r2, [r7, #20]
 8006880:	4313      	orrs	r3, r2
 8006882:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	4a24      	ldr	r2, [pc, #144]	; (8006918 <TIM_OC2_SetConfig+0xf0>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d10d      	bne.n	80068a8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006892:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	011b      	lsls	r3, r3, #4
 800689a:	697a      	ldr	r2, [r7, #20]
 800689c:	4313      	orrs	r3, r2
 800689e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a1b      	ldr	r2, [pc, #108]	; (8006918 <TIM_OC2_SetConfig+0xf0>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d00b      	beq.n	80068c8 <TIM_OC2_SetConfig+0xa0>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4a1a      	ldr	r2, [pc, #104]	; (800691c <TIM_OC2_SetConfig+0xf4>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d007      	beq.n	80068c8 <TIM_OC2_SetConfig+0xa0>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4a19      	ldr	r2, [pc, #100]	; (8006920 <TIM_OC2_SetConfig+0xf8>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d003      	beq.n	80068c8 <TIM_OC2_SetConfig+0xa0>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4a18      	ldr	r2, [pc, #96]	; (8006924 <TIM_OC2_SetConfig+0xfc>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d113      	bne.n	80068f0 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80068ce:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80068d6:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	695b      	ldr	r3, [r3, #20]
 80068dc:	009b      	lsls	r3, r3, #2
 80068de:	693a      	ldr	r2, [r7, #16]
 80068e0:	4313      	orrs	r3, r2
 80068e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	699b      	ldr	r3, [r3, #24]
 80068e8:	009b      	lsls	r3, r3, #2
 80068ea:	693a      	ldr	r2, [r7, #16]
 80068ec:	4313      	orrs	r3, r2
 80068ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	693a      	ldr	r2, [r7, #16]
 80068f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	68fa      	ldr	r2, [r7, #12]
 80068fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	685a      	ldr	r2, [r3, #4]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	697a      	ldr	r2, [r7, #20]
 8006908:	621a      	str	r2, [r3, #32]
}
 800690a:	bf00      	nop
 800690c:	371c      	adds	r7, #28
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr
 8006916:	bf00      	nop
 8006918:	40012c00 	.word	0x40012c00
 800691c:	40014000 	.word	0x40014000
 8006920:	40014400 	.word	0x40014400
 8006924:	40014800 	.word	0x40014800

08006928 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006928:	b480      	push	{r7}
 800692a:	b087      	sub	sp, #28
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6a1b      	ldr	r3, [r3, #32]
 8006936:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6a1b      	ldr	r3, [r3, #32]
 8006942:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	69db      	ldr	r3, [r3, #28]
 800694e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800695a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f023 0303 	bic.w	r3, r3, #3
 8006962:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	68fa      	ldr	r2, [r7, #12]
 800696a:	4313      	orrs	r3, r2
 800696c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006974:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	021b      	lsls	r3, r3, #8
 800697c:	697a      	ldr	r2, [r7, #20]
 800697e:	4313      	orrs	r3, r2
 8006980:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4a23      	ldr	r2, [pc, #140]	; (8006a14 <TIM_OC3_SetConfig+0xec>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d10d      	bne.n	80069a6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006990:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	68db      	ldr	r3, [r3, #12]
 8006996:	021b      	lsls	r3, r3, #8
 8006998:	697a      	ldr	r2, [r7, #20]
 800699a:	4313      	orrs	r3, r2
 800699c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80069a4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	4a1a      	ldr	r2, [pc, #104]	; (8006a14 <TIM_OC3_SetConfig+0xec>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d00b      	beq.n	80069c6 <TIM_OC3_SetConfig+0x9e>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	4a19      	ldr	r2, [pc, #100]	; (8006a18 <TIM_OC3_SetConfig+0xf0>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d007      	beq.n	80069c6 <TIM_OC3_SetConfig+0x9e>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	4a18      	ldr	r2, [pc, #96]	; (8006a1c <TIM_OC3_SetConfig+0xf4>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d003      	beq.n	80069c6 <TIM_OC3_SetConfig+0x9e>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	4a17      	ldr	r2, [pc, #92]	; (8006a20 <TIM_OC3_SetConfig+0xf8>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d113      	bne.n	80069ee <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80069cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80069d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	695b      	ldr	r3, [r3, #20]
 80069da:	011b      	lsls	r3, r3, #4
 80069dc:	693a      	ldr	r2, [r7, #16]
 80069de:	4313      	orrs	r3, r2
 80069e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	699b      	ldr	r3, [r3, #24]
 80069e6:	011b      	lsls	r3, r3, #4
 80069e8:	693a      	ldr	r2, [r7, #16]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	693a      	ldr	r2, [r7, #16]
 80069f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	68fa      	ldr	r2, [r7, #12]
 80069f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	685a      	ldr	r2, [r3, #4]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	697a      	ldr	r2, [r7, #20]
 8006a06:	621a      	str	r2, [r3, #32]
}
 8006a08:	bf00      	nop
 8006a0a:	371c      	adds	r7, #28
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr
 8006a14:	40012c00 	.word	0x40012c00
 8006a18:	40014000 	.word	0x40014000
 8006a1c:	40014400 	.word	0x40014400
 8006a20:	40014800 	.word	0x40014800

08006a24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b087      	sub	sp, #28
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6a1b      	ldr	r3, [r3, #32]
 8006a32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6a1b      	ldr	r3, [r3, #32]
 8006a3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	69db      	ldr	r3, [r3, #28]
 8006a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	021b      	lsls	r3, r3, #8
 8006a66:	68fa      	ldr	r2, [r7, #12]
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	031b      	lsls	r3, r3, #12
 8006a7a:	693a      	ldr	r2, [r7, #16]
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	4a16      	ldr	r2, [pc, #88]	; (8006adc <TIM_OC4_SetConfig+0xb8>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d00b      	beq.n	8006aa0 <TIM_OC4_SetConfig+0x7c>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	4a15      	ldr	r2, [pc, #84]	; (8006ae0 <TIM_OC4_SetConfig+0xbc>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d007      	beq.n	8006aa0 <TIM_OC4_SetConfig+0x7c>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	4a14      	ldr	r2, [pc, #80]	; (8006ae4 <TIM_OC4_SetConfig+0xc0>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d003      	beq.n	8006aa0 <TIM_OC4_SetConfig+0x7c>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	4a13      	ldr	r2, [pc, #76]	; (8006ae8 <TIM_OC4_SetConfig+0xc4>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d109      	bne.n	8006ab4 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006aa6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	695b      	ldr	r3, [r3, #20]
 8006aac:	019b      	lsls	r3, r3, #6
 8006aae:	697a      	ldr	r2, [r7, #20]
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	697a      	ldr	r2, [r7, #20]
 8006ab8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	68fa      	ldr	r2, [r7, #12]
 8006abe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	685a      	ldr	r2, [r3, #4]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	693a      	ldr	r2, [r7, #16]
 8006acc:	621a      	str	r2, [r3, #32]
}
 8006ace:	bf00      	nop
 8006ad0:	371c      	adds	r7, #28
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr
 8006ada:	bf00      	nop
 8006adc:	40012c00 	.word	0x40012c00
 8006ae0:	40014000 	.word	0x40014000
 8006ae4:	40014400 	.word	0x40014400
 8006ae8:	40014800 	.word	0x40014800

08006aec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b087      	sub	sp, #28
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6a1b      	ldr	r3, [r3, #32]
 8006afa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6a1b      	ldr	r3, [r3, #32]
 8006b06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	68fa      	ldr	r2, [r7, #12]
 8006b26:	4313      	orrs	r3, r2
 8006b28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006b30:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	041b      	lsls	r3, r3, #16
 8006b38:	693a      	ldr	r2, [r7, #16]
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4a15      	ldr	r2, [pc, #84]	; (8006b98 <TIM_OC5_SetConfig+0xac>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d00b      	beq.n	8006b5e <TIM_OC5_SetConfig+0x72>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	4a14      	ldr	r2, [pc, #80]	; (8006b9c <TIM_OC5_SetConfig+0xb0>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d007      	beq.n	8006b5e <TIM_OC5_SetConfig+0x72>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a13      	ldr	r2, [pc, #76]	; (8006ba0 <TIM_OC5_SetConfig+0xb4>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d003      	beq.n	8006b5e <TIM_OC5_SetConfig+0x72>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a12      	ldr	r2, [pc, #72]	; (8006ba4 <TIM_OC5_SetConfig+0xb8>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d109      	bne.n	8006b72 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b64:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	695b      	ldr	r3, [r3, #20]
 8006b6a:	021b      	lsls	r3, r3, #8
 8006b6c:	697a      	ldr	r2, [r7, #20]
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	697a      	ldr	r2, [r7, #20]
 8006b76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	68fa      	ldr	r2, [r7, #12]
 8006b7c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	685a      	ldr	r2, [r3, #4]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	693a      	ldr	r2, [r7, #16]
 8006b8a:	621a      	str	r2, [r3, #32]
}
 8006b8c:	bf00      	nop
 8006b8e:	371c      	adds	r7, #28
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr
 8006b98:	40012c00 	.word	0x40012c00
 8006b9c:	40014000 	.word	0x40014000
 8006ba0:	40014400 	.word	0x40014400
 8006ba4:	40014800 	.word	0x40014800

08006ba8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b087      	sub	sp, #28
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6a1b      	ldr	r3, [r3, #32]
 8006bb6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6a1b      	ldr	r3, [r3, #32]
 8006bc2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006bd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	021b      	lsls	r3, r3, #8
 8006be2:	68fa      	ldr	r2, [r7, #12]
 8006be4:	4313      	orrs	r3, r2
 8006be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006bee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	051b      	lsls	r3, r3, #20
 8006bf6:	693a      	ldr	r2, [r7, #16]
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	4a16      	ldr	r2, [pc, #88]	; (8006c58 <TIM_OC6_SetConfig+0xb0>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d00b      	beq.n	8006c1c <TIM_OC6_SetConfig+0x74>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	4a15      	ldr	r2, [pc, #84]	; (8006c5c <TIM_OC6_SetConfig+0xb4>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d007      	beq.n	8006c1c <TIM_OC6_SetConfig+0x74>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	4a14      	ldr	r2, [pc, #80]	; (8006c60 <TIM_OC6_SetConfig+0xb8>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d003      	beq.n	8006c1c <TIM_OC6_SetConfig+0x74>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	4a13      	ldr	r2, [pc, #76]	; (8006c64 <TIM_OC6_SetConfig+0xbc>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d109      	bne.n	8006c30 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c22:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	695b      	ldr	r3, [r3, #20]
 8006c28:	029b      	lsls	r3, r3, #10
 8006c2a:	697a      	ldr	r2, [r7, #20]
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	697a      	ldr	r2, [r7, #20]
 8006c34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	68fa      	ldr	r2, [r7, #12]
 8006c3a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	685a      	ldr	r2, [r3, #4]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	693a      	ldr	r2, [r7, #16]
 8006c48:	621a      	str	r2, [r3, #32]
}
 8006c4a:	bf00      	nop
 8006c4c:	371c      	adds	r7, #28
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c54:	4770      	bx	lr
 8006c56:	bf00      	nop
 8006c58:	40012c00 	.word	0x40012c00
 8006c5c:	40014000 	.word	0x40014000
 8006c60:	40014400 	.word	0x40014400
 8006c64:	40014800 	.word	0x40014800

08006c68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b085      	sub	sp, #20
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d101      	bne.n	8006c80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c7c:	2302      	movs	r3, #2
 8006c7e:	e054      	b.n	8006d2a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2202      	movs	r2, #2
 8006c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a24      	ldr	r2, [pc, #144]	; (8006d38 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d108      	bne.n	8006cbc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006cb0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	68fa      	ldr	r2, [r7, #12]
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	68fa      	ldr	r2, [r7, #12]
 8006cd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a17      	ldr	r2, [pc, #92]	; (8006d38 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d00e      	beq.n	8006cfe <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ce8:	d009      	beq.n	8006cfe <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a13      	ldr	r2, [pc, #76]	; (8006d3c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d004      	beq.n	8006cfe <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a11      	ldr	r2, [pc, #68]	; (8006d40 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d10c      	bne.n	8006d18 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	68ba      	ldr	r2, [r7, #8]
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	68ba      	ldr	r2, [r7, #8]
 8006d16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2200      	movs	r2, #0
 8006d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d28:	2300      	movs	r3, #0
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3714      	adds	r7, #20
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr
 8006d36:	bf00      	nop
 8006d38:	40012c00 	.word	0x40012c00
 8006d3c:	40000400 	.word	0x40000400
 8006d40:	40014000 	.word	0x40014000

08006d44 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b085      	sub	sp, #20
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d101      	bne.n	8006d60 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006d5c:	2302      	movs	r3, #2
 8006d5e:	e060      	b.n	8006e22 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2201      	movs	r2, #1
 8006d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	68db      	ldr	r3, [r3, #12]
 8006d72:	4313      	orrs	r3, r2
 8006d74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	4313      	orrs	r3, r2
 8006d82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	691b      	ldr	r3, [r3, #16]
 8006daa:	4313      	orrs	r3, r2
 8006dac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	695b      	ldr	r3, [r3, #20]
 8006db8:	4313      	orrs	r3, r2
 8006dba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	699b      	ldr	r3, [r3, #24]
 8006dd4:	041b      	lsls	r3, r3, #16
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a14      	ldr	r2, [pc, #80]	; (8006e30 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d115      	bne.n	8006e10 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dee:	051b      	lsls	r3, r3, #20
 8006df0:	4313      	orrs	r3, r2
 8006df2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	69db      	ldr	r3, [r3, #28]
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	6a1b      	ldr	r3, [r3, #32]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	68fa      	ldr	r2, [r7, #12]
 8006e16:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e20:	2300      	movs	r3, #0
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3714      	adds	r7, #20
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr
 8006e2e:	bf00      	nop
 8006e30:	40012c00 	.word	0x40012c00

08006e34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e3c:	bf00      	nop
 8006e3e:	370c      	adds	r7, #12
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr

08006e48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e50:	bf00      	nop
 8006e52:	370c      	adds	r7, #12
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006e64:	bf00      	nop
 8006e66:	370c      	adds	r7, #12
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b082      	sub	sp, #8
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d101      	bne.n	8006e82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	e040      	b.n	8006f04 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d106      	bne.n	8006e98 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f7fa fb72 	bl	800157c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2224      	movs	r2, #36	; 0x24
 8006e9c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f022 0201 	bic.w	r2, r2, #1
 8006eac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f000 f82c 	bl	8006f0c <UART_SetConfig>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d101      	bne.n	8006ebe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e022      	b.n	8006f04 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d002      	beq.n	8006ecc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 f956 	bl	8007178 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	685a      	ldr	r2, [r3, #4]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006eda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	689a      	ldr	r2, [r3, #8]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006eea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f042 0201 	orr.w	r2, r2, #1
 8006efa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 f9dd 	bl	80072bc <UART_CheckIdleState>
 8006f02:	4603      	mov	r3, r0
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3708      	adds	r7, #8
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b088      	sub	sp, #32
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f14:	2300      	movs	r3, #0
 8006f16:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	689a      	ldr	r2, [r3, #8]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	691b      	ldr	r3, [r3, #16]
 8006f20:	431a      	orrs	r2, r3
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	695b      	ldr	r3, [r3, #20]
 8006f26:	431a      	orrs	r2, r3
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	69db      	ldr	r3, [r3, #28]
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	4b8a      	ldr	r3, [pc, #552]	; (8007160 <UART_SetConfig+0x254>)
 8006f38:	4013      	ands	r3, r2
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	6812      	ldr	r2, [r2, #0]
 8006f3e:	6979      	ldr	r1, [r7, #20]
 8006f40:	430b      	orrs	r3, r1
 8006f42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	68da      	ldr	r2, [r3, #12]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	430a      	orrs	r2, r1
 8006f58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	699b      	ldr	r3, [r3, #24]
 8006f5e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6a1b      	ldr	r3, [r3, #32]
 8006f64:	697a      	ldr	r2, [r7, #20]
 8006f66:	4313      	orrs	r3, r2
 8006f68:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	697a      	ldr	r2, [r7, #20]
 8006f7a:	430a      	orrs	r2, r1
 8006f7c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a78      	ldr	r2, [pc, #480]	; (8007164 <UART_SetConfig+0x258>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d120      	bne.n	8006fca <UART_SetConfig+0xbe>
 8006f88:	4b77      	ldr	r3, [pc, #476]	; (8007168 <UART_SetConfig+0x25c>)
 8006f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f8c:	f003 0303 	and.w	r3, r3, #3
 8006f90:	2b03      	cmp	r3, #3
 8006f92:	d817      	bhi.n	8006fc4 <UART_SetConfig+0xb8>
 8006f94:	a201      	add	r2, pc, #4	; (adr r2, 8006f9c <UART_SetConfig+0x90>)
 8006f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f9a:	bf00      	nop
 8006f9c:	08006fad 	.word	0x08006fad
 8006fa0:	08006fb9 	.word	0x08006fb9
 8006fa4:	08006fbf 	.word	0x08006fbf
 8006fa8:	08006fb3 	.word	0x08006fb3
 8006fac:	2300      	movs	r3, #0
 8006fae:	77fb      	strb	r3, [r7, #31]
 8006fb0:	e01d      	b.n	8006fee <UART_SetConfig+0xe2>
 8006fb2:	2302      	movs	r3, #2
 8006fb4:	77fb      	strb	r3, [r7, #31]
 8006fb6:	e01a      	b.n	8006fee <UART_SetConfig+0xe2>
 8006fb8:	2304      	movs	r3, #4
 8006fba:	77fb      	strb	r3, [r7, #31]
 8006fbc:	e017      	b.n	8006fee <UART_SetConfig+0xe2>
 8006fbe:	2308      	movs	r3, #8
 8006fc0:	77fb      	strb	r3, [r7, #31]
 8006fc2:	e014      	b.n	8006fee <UART_SetConfig+0xe2>
 8006fc4:	2310      	movs	r3, #16
 8006fc6:	77fb      	strb	r3, [r7, #31]
 8006fc8:	e011      	b.n	8006fee <UART_SetConfig+0xe2>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a67      	ldr	r2, [pc, #412]	; (800716c <UART_SetConfig+0x260>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d102      	bne.n	8006fda <UART_SetConfig+0xce>
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	77fb      	strb	r3, [r7, #31]
 8006fd8:	e009      	b.n	8006fee <UART_SetConfig+0xe2>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a64      	ldr	r2, [pc, #400]	; (8007170 <UART_SetConfig+0x264>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d102      	bne.n	8006fea <UART_SetConfig+0xde>
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	77fb      	strb	r3, [r7, #31]
 8006fe8:	e001      	b.n	8006fee <UART_SetConfig+0xe2>
 8006fea:	2310      	movs	r3, #16
 8006fec:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	69db      	ldr	r3, [r3, #28]
 8006ff2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ff6:	d15b      	bne.n	80070b0 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8006ff8:	7ffb      	ldrb	r3, [r7, #31]
 8006ffa:	2b08      	cmp	r3, #8
 8006ffc:	d827      	bhi.n	800704e <UART_SetConfig+0x142>
 8006ffe:	a201      	add	r2, pc, #4	; (adr r2, 8007004 <UART_SetConfig+0xf8>)
 8007000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007004:	08007029 	.word	0x08007029
 8007008:	08007031 	.word	0x08007031
 800700c:	08007039 	.word	0x08007039
 8007010:	0800704f 	.word	0x0800704f
 8007014:	0800703f 	.word	0x0800703f
 8007018:	0800704f 	.word	0x0800704f
 800701c:	0800704f 	.word	0x0800704f
 8007020:	0800704f 	.word	0x0800704f
 8007024:	08007047 	.word	0x08007047
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007028:	f7fe fddc 	bl	8005be4 <HAL_RCC_GetPCLK1Freq>
 800702c:	61b8      	str	r0, [r7, #24]
        break;
 800702e:	e013      	b.n	8007058 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007030:	f7fe fdfa 	bl	8005c28 <HAL_RCC_GetPCLK2Freq>
 8007034:	61b8      	str	r0, [r7, #24]
        break;
 8007036:	e00f      	b.n	8007058 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007038:	4b4e      	ldr	r3, [pc, #312]	; (8007174 <UART_SetConfig+0x268>)
 800703a:	61bb      	str	r3, [r7, #24]
        break;
 800703c:	e00c      	b.n	8007058 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800703e:	f7fe fd5b 	bl	8005af8 <HAL_RCC_GetSysClockFreq>
 8007042:	61b8      	str	r0, [r7, #24]
        break;
 8007044:	e008      	b.n	8007058 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007046:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800704a:	61bb      	str	r3, [r7, #24]
        break;
 800704c:	e004      	b.n	8007058 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800704e:	2300      	movs	r3, #0
 8007050:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	77bb      	strb	r3, [r7, #30]
        break;
 8007056:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007058:	69bb      	ldr	r3, [r7, #24]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d074      	beq.n	8007148 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800705e:	69bb      	ldr	r3, [r7, #24]
 8007060:	005a      	lsls	r2, r3, #1
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	085b      	lsrs	r3, r3, #1
 8007068:	441a      	add	r2, r3
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007072:	b29b      	uxth	r3, r3
 8007074:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	2b0f      	cmp	r3, #15
 800707a:	d916      	bls.n	80070aa <UART_SetConfig+0x19e>
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007082:	d212      	bcs.n	80070aa <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	b29b      	uxth	r3, r3
 8007088:	f023 030f 	bic.w	r3, r3, #15
 800708c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	085b      	lsrs	r3, r3, #1
 8007092:	b29b      	uxth	r3, r3
 8007094:	f003 0307 	and.w	r3, r3, #7
 8007098:	b29a      	uxth	r2, r3
 800709a:	89fb      	ldrh	r3, [r7, #14]
 800709c:	4313      	orrs	r3, r2
 800709e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	89fa      	ldrh	r2, [r7, #14]
 80070a6:	60da      	str	r2, [r3, #12]
 80070a8:	e04e      	b.n	8007148 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	77bb      	strb	r3, [r7, #30]
 80070ae:	e04b      	b.n	8007148 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80070b0:	7ffb      	ldrb	r3, [r7, #31]
 80070b2:	2b08      	cmp	r3, #8
 80070b4:	d827      	bhi.n	8007106 <UART_SetConfig+0x1fa>
 80070b6:	a201      	add	r2, pc, #4	; (adr r2, 80070bc <UART_SetConfig+0x1b0>)
 80070b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070bc:	080070e1 	.word	0x080070e1
 80070c0:	080070e9 	.word	0x080070e9
 80070c4:	080070f1 	.word	0x080070f1
 80070c8:	08007107 	.word	0x08007107
 80070cc:	080070f7 	.word	0x080070f7
 80070d0:	08007107 	.word	0x08007107
 80070d4:	08007107 	.word	0x08007107
 80070d8:	08007107 	.word	0x08007107
 80070dc:	080070ff 	.word	0x080070ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070e0:	f7fe fd80 	bl	8005be4 <HAL_RCC_GetPCLK1Freq>
 80070e4:	61b8      	str	r0, [r7, #24]
        break;
 80070e6:	e013      	b.n	8007110 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070e8:	f7fe fd9e 	bl	8005c28 <HAL_RCC_GetPCLK2Freq>
 80070ec:	61b8      	str	r0, [r7, #24]
        break;
 80070ee:	e00f      	b.n	8007110 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070f0:	4b20      	ldr	r3, [pc, #128]	; (8007174 <UART_SetConfig+0x268>)
 80070f2:	61bb      	str	r3, [r7, #24]
        break;
 80070f4:	e00c      	b.n	8007110 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070f6:	f7fe fcff 	bl	8005af8 <HAL_RCC_GetSysClockFreq>
 80070fa:	61b8      	str	r0, [r7, #24]
        break;
 80070fc:	e008      	b.n	8007110 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007102:	61bb      	str	r3, [r7, #24]
        break;
 8007104:	e004      	b.n	8007110 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8007106:	2300      	movs	r3, #0
 8007108:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	77bb      	strb	r3, [r7, #30]
        break;
 800710e:	bf00      	nop
    }

    if (pclk != 0U)
 8007110:	69bb      	ldr	r3, [r7, #24]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d018      	beq.n	8007148 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	085a      	lsrs	r2, r3, #1
 800711c:	69bb      	ldr	r3, [r7, #24]
 800711e:	441a      	add	r2, r3
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	fbb2 f3f3 	udiv	r3, r2, r3
 8007128:	b29b      	uxth	r3, r3
 800712a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	2b0f      	cmp	r3, #15
 8007130:	d908      	bls.n	8007144 <UART_SetConfig+0x238>
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007138:	d204      	bcs.n	8007144 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	693a      	ldr	r2, [r7, #16]
 8007140:	60da      	str	r2, [r3, #12]
 8007142:	e001      	b.n	8007148 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8007144:	2301      	movs	r3, #1
 8007146:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007154:	7fbb      	ldrb	r3, [r7, #30]
}
 8007156:	4618      	mov	r0, r3
 8007158:	3720      	adds	r7, #32
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
 800715e:	bf00      	nop
 8007160:	efff69f3 	.word	0xefff69f3
 8007164:	40013800 	.word	0x40013800
 8007168:	40021000 	.word	0x40021000
 800716c:	40004400 	.word	0x40004400
 8007170:	40004800 	.word	0x40004800
 8007174:	007a1200 	.word	0x007a1200

08007178 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007178:	b480      	push	{r7}
 800717a:	b083      	sub	sp, #12
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007184:	f003 0301 	and.w	r3, r3, #1
 8007188:	2b00      	cmp	r3, #0
 800718a:	d00a      	beq.n	80071a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	430a      	orrs	r2, r1
 80071a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a6:	f003 0302 	and.w	r3, r3, #2
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d00a      	beq.n	80071c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	430a      	orrs	r2, r1
 80071c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c8:	f003 0304 	and.w	r3, r3, #4
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d00a      	beq.n	80071e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	430a      	orrs	r2, r1
 80071e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ea:	f003 0308 	and.w	r3, r3, #8
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d00a      	beq.n	8007208 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	430a      	orrs	r2, r1
 8007206:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800720c:	f003 0310 	and.w	r3, r3, #16
 8007210:	2b00      	cmp	r3, #0
 8007212:	d00a      	beq.n	800722a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	430a      	orrs	r2, r1
 8007228:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800722e:	f003 0320 	and.w	r3, r3, #32
 8007232:	2b00      	cmp	r3, #0
 8007234:	d00a      	beq.n	800724c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	689b      	ldr	r3, [r3, #8]
 800723c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	430a      	orrs	r2, r1
 800724a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007254:	2b00      	cmp	r3, #0
 8007256:	d01a      	beq.n	800728e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	430a      	orrs	r2, r1
 800726c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007272:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007276:	d10a      	bne.n	800728e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	430a      	orrs	r2, r1
 800728c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007296:	2b00      	cmp	r3, #0
 8007298:	d00a      	beq.n	80072b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	430a      	orrs	r2, r1
 80072ae:	605a      	str	r2, [r3, #4]
  }
}
 80072b0:	bf00      	nop
 80072b2:	370c      	adds	r7, #12
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr

080072bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b086      	sub	sp, #24
 80072c0:	af02      	add	r7, sp, #8
 80072c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2200      	movs	r2, #0
 80072c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80072cc:	f7fa fa1e 	bl	800170c <HAL_GetTick>
 80072d0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f003 0308 	and.w	r3, r3, #8
 80072dc:	2b08      	cmp	r3, #8
 80072de:	d10e      	bne.n	80072fe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80072e4:	9300      	str	r3, [sp, #0]
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2200      	movs	r2, #0
 80072ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 f82d 	bl	800734e <UART_WaitOnFlagUntilTimeout>
 80072f4:	4603      	mov	r3, r0
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d001      	beq.n	80072fe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072fa:	2303      	movs	r3, #3
 80072fc:	e023      	b.n	8007346 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f003 0304 	and.w	r3, r3, #4
 8007308:	2b04      	cmp	r3, #4
 800730a:	d10e      	bne.n	800732a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800730c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007310:	9300      	str	r3, [sp, #0]
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2200      	movs	r2, #0
 8007316:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 f817 	bl	800734e <UART_WaitOnFlagUntilTimeout>
 8007320:	4603      	mov	r3, r0
 8007322:	2b00      	cmp	r3, #0
 8007324:	d001      	beq.n	800732a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007326:	2303      	movs	r3, #3
 8007328:	e00d      	b.n	8007346 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2220      	movs	r2, #32
 800732e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2220      	movs	r2, #32
 8007334:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2200      	movs	r2, #0
 800733a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007344:	2300      	movs	r3, #0
}
 8007346:	4618      	mov	r0, r3
 8007348:	3710      	adds	r7, #16
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}

0800734e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800734e:	b580      	push	{r7, lr}
 8007350:	b09c      	sub	sp, #112	; 0x70
 8007352:	af00      	add	r7, sp, #0
 8007354:	60f8      	str	r0, [r7, #12]
 8007356:	60b9      	str	r1, [r7, #8]
 8007358:	603b      	str	r3, [r7, #0]
 800735a:	4613      	mov	r3, r2
 800735c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800735e:	e0a5      	b.n	80074ac <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007360:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007366:	f000 80a1 	beq.w	80074ac <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800736a:	f7fa f9cf 	bl	800170c <HAL_GetTick>
 800736e:	4602      	mov	r2, r0
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	1ad3      	subs	r3, r2, r3
 8007374:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007376:	429a      	cmp	r2, r3
 8007378:	d302      	bcc.n	8007380 <UART_WaitOnFlagUntilTimeout+0x32>
 800737a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800737c:	2b00      	cmp	r3, #0
 800737e:	d13e      	bne.n	80073fe <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007386:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007388:	e853 3f00 	ldrex	r3, [r3]
 800738c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800738e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007390:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007394:	667b      	str	r3, [r7, #100]	; 0x64
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	461a      	mov	r2, r3
 800739c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800739e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80073a0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80073a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80073a6:	e841 2300 	strex	r3, r2, [r1]
 80073aa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80073ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d1e6      	bne.n	8007380 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	3308      	adds	r3, #8
 80073b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073bc:	e853 3f00 	ldrex	r3, [r3]
 80073c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80073c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c4:	f023 0301 	bic.w	r3, r3, #1
 80073c8:	663b      	str	r3, [r7, #96]	; 0x60
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	3308      	adds	r3, #8
 80073d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80073d2:	64ba      	str	r2, [r7, #72]	; 0x48
 80073d4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80073d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073da:	e841 2300 	strex	r3, r2, [r1]
 80073de:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80073e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d1e5      	bne.n	80073b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2220      	movs	r2, #32
 80073ea:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2220      	movs	r2, #32
 80073f0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2200      	movs	r2, #0
 80073f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80073fa:	2303      	movs	r3, #3
 80073fc:	e067      	b.n	80074ce <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f003 0304 	and.w	r3, r3, #4
 8007408:	2b00      	cmp	r3, #0
 800740a:	d04f      	beq.n	80074ac <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	69db      	ldr	r3, [r3, #28]
 8007412:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007416:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800741a:	d147      	bne.n	80074ac <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007424:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800742c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800742e:	e853 3f00 	ldrex	r3, [r3]
 8007432:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007436:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800743a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	461a      	mov	r2, r3
 8007442:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007444:	637b      	str	r3, [r7, #52]	; 0x34
 8007446:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007448:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800744a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800744c:	e841 2300 	strex	r3, r2, [r1]
 8007450:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007454:	2b00      	cmp	r3, #0
 8007456:	d1e6      	bne.n	8007426 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	3308      	adds	r3, #8
 800745e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	e853 3f00 	ldrex	r3, [r3]
 8007466:	613b      	str	r3, [r7, #16]
   return(result);
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	f023 0301 	bic.w	r3, r3, #1
 800746e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	3308      	adds	r3, #8
 8007476:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007478:	623a      	str	r2, [r7, #32]
 800747a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747c:	69f9      	ldr	r1, [r7, #28]
 800747e:	6a3a      	ldr	r2, [r7, #32]
 8007480:	e841 2300 	strex	r3, r2, [r1]
 8007484:	61bb      	str	r3, [r7, #24]
   return(result);
 8007486:	69bb      	ldr	r3, [r7, #24]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d1e5      	bne.n	8007458 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2220      	movs	r2, #32
 8007490:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2220      	movs	r2, #32
 8007496:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2220      	movs	r2, #32
 800749c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2200      	movs	r2, #0
 80074a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80074a8:	2303      	movs	r3, #3
 80074aa:	e010      	b.n	80074ce <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	69da      	ldr	r2, [r3, #28]
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	4013      	ands	r3, r2
 80074b6:	68ba      	ldr	r2, [r7, #8]
 80074b8:	429a      	cmp	r2, r3
 80074ba:	bf0c      	ite	eq
 80074bc:	2301      	moveq	r3, #1
 80074be:	2300      	movne	r3, #0
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	461a      	mov	r2, r3
 80074c4:	79fb      	ldrb	r3, [r7, #7]
 80074c6:	429a      	cmp	r2, r3
 80074c8:	f43f af4a 	beq.w	8007360 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3770      	adds	r7, #112	; 0x70
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
	...

080074d8 <__errno>:
 80074d8:	4b01      	ldr	r3, [pc, #4]	; (80074e0 <__errno+0x8>)
 80074da:	6818      	ldr	r0, [r3, #0]
 80074dc:	4770      	bx	lr
 80074de:	bf00      	nop
 80074e0:	2000000c 	.word	0x2000000c

080074e4 <__libc_init_array>:
 80074e4:	b570      	push	{r4, r5, r6, lr}
 80074e6:	4d0d      	ldr	r5, [pc, #52]	; (800751c <__libc_init_array+0x38>)
 80074e8:	4c0d      	ldr	r4, [pc, #52]	; (8007520 <__libc_init_array+0x3c>)
 80074ea:	1b64      	subs	r4, r4, r5
 80074ec:	10a4      	asrs	r4, r4, #2
 80074ee:	2600      	movs	r6, #0
 80074f0:	42a6      	cmp	r6, r4
 80074f2:	d109      	bne.n	8007508 <__libc_init_array+0x24>
 80074f4:	4d0b      	ldr	r5, [pc, #44]	; (8007524 <__libc_init_array+0x40>)
 80074f6:	4c0c      	ldr	r4, [pc, #48]	; (8007528 <__libc_init_array+0x44>)
 80074f8:	f000 f8a0 	bl	800763c <_init>
 80074fc:	1b64      	subs	r4, r4, r5
 80074fe:	10a4      	asrs	r4, r4, #2
 8007500:	2600      	movs	r6, #0
 8007502:	42a6      	cmp	r6, r4
 8007504:	d105      	bne.n	8007512 <__libc_init_array+0x2e>
 8007506:	bd70      	pop	{r4, r5, r6, pc}
 8007508:	f855 3b04 	ldr.w	r3, [r5], #4
 800750c:	4798      	blx	r3
 800750e:	3601      	adds	r6, #1
 8007510:	e7ee      	b.n	80074f0 <__libc_init_array+0xc>
 8007512:	f855 3b04 	ldr.w	r3, [r5], #4
 8007516:	4798      	blx	r3
 8007518:	3601      	adds	r6, #1
 800751a:	e7f2      	b.n	8007502 <__libc_init_array+0x1e>
 800751c:	0800769c 	.word	0x0800769c
 8007520:	0800769c 	.word	0x0800769c
 8007524:	0800769c 	.word	0x0800769c
 8007528:	080076a0 	.word	0x080076a0

0800752c <malloc>:
 800752c:	4b02      	ldr	r3, [pc, #8]	; (8007538 <malloc+0xc>)
 800752e:	4601      	mov	r1, r0
 8007530:	6818      	ldr	r0, [r3, #0]
 8007532:	f000 b80b 	b.w	800754c <_malloc_r>
 8007536:	bf00      	nop
 8007538:	2000000c 	.word	0x2000000c

0800753c <memset>:
 800753c:	4402      	add	r2, r0
 800753e:	4603      	mov	r3, r0
 8007540:	4293      	cmp	r3, r2
 8007542:	d100      	bne.n	8007546 <memset+0xa>
 8007544:	4770      	bx	lr
 8007546:	f803 1b01 	strb.w	r1, [r3], #1
 800754a:	e7f9      	b.n	8007540 <memset+0x4>

0800754c <_malloc_r>:
 800754c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800754e:	1ccd      	adds	r5, r1, #3
 8007550:	f025 0503 	bic.w	r5, r5, #3
 8007554:	3508      	adds	r5, #8
 8007556:	2d0c      	cmp	r5, #12
 8007558:	bf38      	it	cc
 800755a:	250c      	movcc	r5, #12
 800755c:	2d00      	cmp	r5, #0
 800755e:	4606      	mov	r6, r0
 8007560:	db01      	blt.n	8007566 <_malloc_r+0x1a>
 8007562:	42a9      	cmp	r1, r5
 8007564:	d903      	bls.n	800756e <_malloc_r+0x22>
 8007566:	230c      	movs	r3, #12
 8007568:	6033      	str	r3, [r6, #0]
 800756a:	2000      	movs	r0, #0
 800756c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800756e:	f000 f857 	bl	8007620 <__malloc_lock>
 8007572:	4921      	ldr	r1, [pc, #132]	; (80075f8 <_malloc_r+0xac>)
 8007574:	680a      	ldr	r2, [r1, #0]
 8007576:	4614      	mov	r4, r2
 8007578:	b99c      	cbnz	r4, 80075a2 <_malloc_r+0x56>
 800757a:	4f20      	ldr	r7, [pc, #128]	; (80075fc <_malloc_r+0xb0>)
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	b923      	cbnz	r3, 800758a <_malloc_r+0x3e>
 8007580:	4621      	mov	r1, r4
 8007582:	4630      	mov	r0, r6
 8007584:	f000 f83c 	bl	8007600 <_sbrk_r>
 8007588:	6038      	str	r0, [r7, #0]
 800758a:	4629      	mov	r1, r5
 800758c:	4630      	mov	r0, r6
 800758e:	f000 f837 	bl	8007600 <_sbrk_r>
 8007592:	1c43      	adds	r3, r0, #1
 8007594:	d123      	bne.n	80075de <_malloc_r+0x92>
 8007596:	230c      	movs	r3, #12
 8007598:	6033      	str	r3, [r6, #0]
 800759a:	4630      	mov	r0, r6
 800759c:	f000 f846 	bl	800762c <__malloc_unlock>
 80075a0:	e7e3      	b.n	800756a <_malloc_r+0x1e>
 80075a2:	6823      	ldr	r3, [r4, #0]
 80075a4:	1b5b      	subs	r3, r3, r5
 80075a6:	d417      	bmi.n	80075d8 <_malloc_r+0x8c>
 80075a8:	2b0b      	cmp	r3, #11
 80075aa:	d903      	bls.n	80075b4 <_malloc_r+0x68>
 80075ac:	6023      	str	r3, [r4, #0]
 80075ae:	441c      	add	r4, r3
 80075b0:	6025      	str	r5, [r4, #0]
 80075b2:	e004      	b.n	80075be <_malloc_r+0x72>
 80075b4:	6863      	ldr	r3, [r4, #4]
 80075b6:	42a2      	cmp	r2, r4
 80075b8:	bf0c      	ite	eq
 80075ba:	600b      	streq	r3, [r1, #0]
 80075bc:	6053      	strne	r3, [r2, #4]
 80075be:	4630      	mov	r0, r6
 80075c0:	f000 f834 	bl	800762c <__malloc_unlock>
 80075c4:	f104 000b 	add.w	r0, r4, #11
 80075c8:	1d23      	adds	r3, r4, #4
 80075ca:	f020 0007 	bic.w	r0, r0, #7
 80075ce:	1ac2      	subs	r2, r0, r3
 80075d0:	d0cc      	beq.n	800756c <_malloc_r+0x20>
 80075d2:	1a1b      	subs	r3, r3, r0
 80075d4:	50a3      	str	r3, [r4, r2]
 80075d6:	e7c9      	b.n	800756c <_malloc_r+0x20>
 80075d8:	4622      	mov	r2, r4
 80075da:	6864      	ldr	r4, [r4, #4]
 80075dc:	e7cc      	b.n	8007578 <_malloc_r+0x2c>
 80075de:	1cc4      	adds	r4, r0, #3
 80075e0:	f024 0403 	bic.w	r4, r4, #3
 80075e4:	42a0      	cmp	r0, r4
 80075e6:	d0e3      	beq.n	80075b0 <_malloc_r+0x64>
 80075e8:	1a21      	subs	r1, r4, r0
 80075ea:	4630      	mov	r0, r6
 80075ec:	f000 f808 	bl	8007600 <_sbrk_r>
 80075f0:	3001      	adds	r0, #1
 80075f2:	d1dd      	bne.n	80075b0 <_malloc_r+0x64>
 80075f4:	e7cf      	b.n	8007596 <_malloc_r+0x4a>
 80075f6:	bf00      	nop
 80075f8:	20000098 	.word	0x20000098
 80075fc:	2000009c 	.word	0x2000009c

08007600 <_sbrk_r>:
 8007600:	b538      	push	{r3, r4, r5, lr}
 8007602:	4d06      	ldr	r5, [pc, #24]	; (800761c <_sbrk_r+0x1c>)
 8007604:	2300      	movs	r3, #0
 8007606:	4604      	mov	r4, r0
 8007608:	4608      	mov	r0, r1
 800760a:	602b      	str	r3, [r5, #0]
 800760c:	f7f9 fcde 	bl	8000fcc <_sbrk>
 8007610:	1c43      	adds	r3, r0, #1
 8007612:	d102      	bne.n	800761a <_sbrk_r+0x1a>
 8007614:	682b      	ldr	r3, [r5, #0]
 8007616:	b103      	cbz	r3, 800761a <_sbrk_r+0x1a>
 8007618:	6023      	str	r3, [r4, #0]
 800761a:	bd38      	pop	{r3, r4, r5, pc}
 800761c:	200003a4 	.word	0x200003a4

08007620 <__malloc_lock>:
 8007620:	4801      	ldr	r0, [pc, #4]	; (8007628 <__malloc_lock+0x8>)
 8007622:	f000 b809 	b.w	8007638 <__retarget_lock_acquire_recursive>
 8007626:	bf00      	nop
 8007628:	200003ac 	.word	0x200003ac

0800762c <__malloc_unlock>:
 800762c:	4801      	ldr	r0, [pc, #4]	; (8007634 <__malloc_unlock+0x8>)
 800762e:	f000 b804 	b.w	800763a <__retarget_lock_release_recursive>
 8007632:	bf00      	nop
 8007634:	200003ac 	.word	0x200003ac

08007638 <__retarget_lock_acquire_recursive>:
 8007638:	4770      	bx	lr

0800763a <__retarget_lock_release_recursive>:
 800763a:	4770      	bx	lr

0800763c <_init>:
 800763c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800763e:	bf00      	nop
 8007640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007642:	bc08      	pop	{r3}
 8007644:	469e      	mov	lr, r3
 8007646:	4770      	bx	lr

08007648 <_fini>:
 8007648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800764a:	bf00      	nop
 800764c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800764e:	bc08      	pop	{r3}
 8007650:	469e      	mov	lr, r3
 8007652:	4770      	bx	lr
